<CLASS>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Array </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <CLASS_VAR_DEC>
    <KEYWORD> field </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> data </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <CLASS_VAR_DEC>
    <KEYWORD> field </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> capacity </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <CLASS_VAR_DEC>
    <KEYWORD> field </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> size </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> constructor </KEYWORD>
    <IDENTIFIER> Array </IDENTIFIER>
    <IDENTIFIER> new </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> initialCapacity </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> initialCapacity </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> initialCapacity </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Memory </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> alloc </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> initialCapacity </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> capacity </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> initialCapacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> size </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <KEYWORD> this </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> dispose </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> Memory </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> free </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> data </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> capacity </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> size </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> get </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> index </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt; </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> | </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> size </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> data </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> set </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> index </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> value </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt; </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> | </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> capacity </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> [ </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> index </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ] </SYMBOL>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> value </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> index </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> size </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> append </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> value </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> grow </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> [ </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ] </SYMBOL>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> value </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> size </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
            <SYMBOL> + </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> grow </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> newData </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> newCapacity </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> newCapacity </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
            <SYMBOL> * </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 2 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> newData </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Memory </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> alloc </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newCapacity </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newData </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <KEYWORD> null </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> Array </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> copy </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> data </IDENTIFIER>
              </TERM>
            </EXPRESSION>
            <SYMBOL> , </SYMBOL>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> newData </IDENTIFIER>
              </TERM>
            </EXPRESSION>
            <SYMBOL> , </SYMBOL>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> size </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> Memory </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> free </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> data </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newData </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> capacity </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newCapacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> shrinkToFit </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> newData </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> newData </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> Memory </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> alloc </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> size </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> newData </IDENTIFIER>
                </TERM>
                <SYMBOL> = </SYMBOL>
                <TERM>
                  <KEYWORD> null </KEYWORD>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <RETURN_STATEMENT>
                  <KEYWORD> return </KEYWORD>
                  <SYMBOL> ; </SYMBOL>
                </RETURN_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Array </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> copy </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> data </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newData </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> size </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Memory </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> free </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> data </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> data </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> newData </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> capacity </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> size </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> resize </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> newCapacity </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> newData </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newCapacity </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> newData </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Memory </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> alloc </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newCapacity </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newData </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <KEYWORD> null </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> newCapacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Array </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> copy </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> data </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newData </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> size </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
          <KEYWORD> else </KEYWORD>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Array </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> copy </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> data </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newData </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> newCapacity </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> size </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> newCapacity </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> Memory </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> free </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> data </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newData </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> capacity </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> newCapacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> copy </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> src </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> dest </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> n </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> n </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> dest </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> src </IDENTIFIER>
                  <SYMBOL> [ </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> i </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ] </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> copyRange </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> src </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> srcOffset </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> dest </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> destOffset </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> n </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> n </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> dest </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> destOffset </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> src </IDENTIFIER>
                  <SYMBOL> [ </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> srcOffset </IDENTIFIER>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <IDENTIFIER> i </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ] </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> fill </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> value </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> data </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> value </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> size </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> capacity </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> clear </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> size </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> boolean </KEYWORD>
    <IDENTIFIER> isEmpty </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> size </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> __getitem__ </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> index </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> data </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> index </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> __setitem__ </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> index </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> value </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> data </IDENTIFIER>
          <SYMBOL> [ </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> index </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ] </SYMBOL>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> value </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SYMBOL> } </SYMBOL>
</CLASS>

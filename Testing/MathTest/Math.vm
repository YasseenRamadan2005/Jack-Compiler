function Math.init 0
push constant 16
call Array.new 1
pop static 1
push constant 1
push static 1
push constant 0
add
pop pointer 1
pop that 0
push constant 2
push static 1
push constant 1
add
pop pointer 1
pop that 0
push constant 4
push static 1
push constant 2
add
pop pointer 1
pop that 0
push constant 8
push static 1
push constant 3
add
pop pointer 1
pop that 0
push constant 16
push static 1
push constant 4
add
pop pointer 1
pop that 0
push constant 32
push static 1
push constant 5
add
pop pointer 1
pop that 0
push constant 64
push static 1
push constant 6
add
pop pointer 1
pop that 0
push constant 128
push static 1
push constant 7
add
pop pointer 1
pop that 0
push constant 256
push static 1
push constant 8
add
pop pointer 1
pop that 0
push constant 512
push static 1
push constant 9
add
pop pointer 1
pop that 0
push constant 1024
push static 1
push constant 10
add
pop pointer 1
pop that 0
push constant 2048
push static 1
push constant 11
add
pop pointer 1
pop that 0
push constant 4096
push static 1
push constant 12
add
pop pointer 1
pop that 0
push constant 8192
push static 1
push constant 13
add
pop pointer 1
pop that 0
push constant 16384
push static 1
push constant 14
add
pop pointer 1
pop that 0
push constant 16384
push constant 16384
add
push static 1
push constant 15
add
pop pointer 1
pop that 0
push constant 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
return
function Math.multiply 3
push constant 1
pop local 2
label WHILE_START_Math.multiply1
push local 1
push constant 16
lt
push constant 0
eq
if-goto WHILE_END_Math.multiply1
push argument 1
push local 2
and
push constant 0
eq
if-goto Math.multiply.IfElse1
push local 0
push argument 0
add
pop local 0
label Math.multiply.IfElse1
push argument 0
push argument 0
add
pop argument 0
push local 1
push constant 1
add
pop local 1
push local 2
push local 2
add
pop local 2
goto WHILE_START_Math.multiply1
label WHILE_END_Math.multiply1
push local 0
return
function Math.divide 1
push argument 0
push constant 0
eq
push argument 1
call Math.abs 1
push argument 0
call Math.abs 1
gt
or
push constant 0
eq
if-goto Math.divide.IfElse1
push constant 0
return
label Math.divide.IfElse1
push argument 0
push argument 1
eq
push constant 0
eq
if-goto Math.divide.IfElse2
push constant 1
return
label Math.divide.IfElse2
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
push constant 0
eq
if-goto Math.divide.IfElse3
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divide 2
return
label Math.divide.IfElse3
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
or
push constant 0
eq
if-goto Math.divide.IfElse4
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divide 2
neg
return
label Math.divide.IfElse4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
push constant 0
eq
if-goto Math.divide.IfElse5
push local 0
push local 0
add
return
label Math.divide.IfElse5
push local 0
push local 0
add
push constant 1
add
return
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_START_Math.sqrt1
push local 1
push constant 0
lt
not
push constant 0
eq
if-goto WHILE_END_Math.sqrt1
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
push constant 0
eq
if-goto Math.sqrt.IfElse1
push local 2
pop local 0
label Math.sqrt.IfElse1
push local 1
push constant 1
sub
pop local 1
goto WHILE_START_Math.sqrt1
label WHILE_END_Math.sqrt1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
push constant 0
eq
if-goto Math.max.IfElse1
push argument 0
return
label Math.max.IfElse1
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
push constant 0
eq
if-goto Math.min.IfElse1
push argument 0
return
label Math.min.IfElse1
push argument 1
return
function Math.abs 0
push argument 0
push argument 0
neg
call Math.max 2
return

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static bool black;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let black = true;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        //256 by 512 divided by 16 bits
        while(i < 8192) {
            do Memory.poke(screen[i], 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        let address = screen + (y*32) + (x/16);
        let mask = Math.two_to_the_power_of(x & 15);

        if( black ) {
            let address[0] = address[0] | mask;
        }
        else {
            let address[0] = address[0] & (~mask);
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2) using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, adyMinusbdx, a, b, yStep, temp;

        // Handle vertical lines
        if (x1 = x2) {
            if (y1 > y2) {
                let temp = y1; let y1 = y2; let y2 = temp;
            }
            let b = y1;
            while (b <= y2) {
                do Screen.drawPixel(x1, b);
                let b = b + 1;
            }
            return;
        }

        // Handle horizontal lines
        if (y1 = y2) {
            if (x1 > x2) {
                let temp = x1; let x1 = x2; let x2 = temp;
            }
            let a = x1;
            while (a <= x2) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }

        // Ensure x1 <= x2 (swap points if necessary)
        if (x1 > x2) {
            let temp = x1; let x1 = x2; let x2 = temp;
            let temp = y1; let y1 = y2; let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let yStep = 1;

        // If moving downward, negate dy and adjust yStep
        if (dy < 0) {
            let dy = -dy;
            let yStep = -1;
        }

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        while (a <= dx) {
            do Screen.drawPixel(x1 + a, y1 + b);
            let adyMinusbdx = adyMinusbdx + dy;

            if (adyMinusbdx >= dx) {
                let b = b + yStep;
                let adyMinusbdx = adyMinusbdx - dx;
            }

            let a = a + 1;
        }

        return;
    }



    /** Draws a filled rectangle whose top-left corner is (x1, y1)
    and bottom-right corner is (x2, y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp, y;

        // Ensure x1 < x2 and y1 < y2 (swap if necessary)
        if (x1 > x2) {
            let temp = x1; let x1 = x2; let x2 = temp;
        }
        if (y1 > y2) {
            let temp = y1; let y1 = y2; let y2 = temp;
        }

        // Draw each horizontal line
        let y = y1;
        while (y <= y2) {
            do drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;
    }


    /** Draws a filled circle of radius r <= 181 around (cx, cy), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int cx, cy, rSquared;


        if (r > 181) {      // will overflow if r > 181
            return;
        }
        let rSquared = r * r;
        let cy = -r;

        while (cy <= r) {
            let cx = -r;
            while (cx <= r) {
                if ((cx * cx) + (cy * cy) <= rSquared) {
                    do drawPixel(x + cx, y + cy);
                }
                let cx = cx + 1;
            }
            let cy = cy + 1;
        }

        return;
    }
}
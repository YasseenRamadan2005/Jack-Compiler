function Math.init 2
push constant 1
pop local 0
push constant 0
pop local 1
push constant 16
call Array.new 1
pop static 0
label Math.init_WHILE_EXP1
push local 1
push constant 16
lt
not
if-goto Math.init_WHILE_END1
push local 0
push static 0
push local 1
add
pop pointer 1
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto Math.init_WHILE_EXP1
label Math.init_WHILE_END1
push constant 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
return
function Math.multiply 3
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto Math.multiply$IF_TRUE1
goto Math.multiply$IF_END1
label Math.multiply$IF_TRUE1
push constant 0
return
label Math.multiply$IF_END1
push argument 0
push constant 1
eq
if-goto Math.multiply$IF_TRUE2
goto Math.multiply$IF_END2
label Math.multiply$IF_TRUE2
push argument 1
return
label Math.multiply$IF_END2
push argument 1
push constant 1
eq
if-goto Math.multiply$IF_TRUE3
goto Math.multiply$IF_END3
label Math.multiply$IF_TRUE3
push argument 0
return
label Math.multiply$IF_END3
push argument 0
push constant 2
eq
if-goto Math.multiply$IF_TRUE4
goto Math.multiply$IF_END4
label Math.multiply$IF_TRUE4
push argument 1
push argument 1
add
return
label Math.multiply$IF_END4
push argument 1
push constant 2
eq
if-goto Math.multiply$IF_TRUE5
goto Math.multiply$IF_END5
label Math.multiply$IF_TRUE5
push argument 0
push argument 0
add
return
label Math.multiply$IF_END5
push constant 1
pop local 2
push constant 0
pop local 1
push constant 0
pop local 0
label Math.multiply_WHILE_EXP1
push local 1
push constant 16
lt
not
if-goto Math.multiply_WHILE_END1
push argument 1
push local 2
and
push constant 0
eq
not
if-goto Math.multiply$IF_TRUE6
goto Math.multiply$IF_END6
label Math.multiply$IF_TRUE6
push local 0
push argument 0
add
pop local 0
label Math.multiply$IF_END6
push argument 0
push argument 0
add
pop argument 0
push local 1
push constant 1
add
pop local 1
push local 2
push local 2
add
pop local 2
goto Math.multiply_WHILE_EXP1
label Math.multiply_WHILE_END1
push local 0
return
function Math.divide 3
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push argument 1
push constant 0
eq
if-goto Math.divide$IF_TRUE1
goto Math.divide$IF_END1
label Math.divide$IF_TRUE1
push constant 0
return
label Math.divide$IF_END1
push local 2
push local 1
gt
if-goto Math.divide$IF_TRUE2
goto Math.divide$IF_END2
label Math.divide$IF_TRUE2
push constant 0
return
label Math.divide$IF_END2
push local 2
push local 2
add
push constant 0
lt
if-goto Math.divide$IF_TRUE3
goto Math.divide$IF_END3
label Math.divide$IF_TRUE3
push constant 1
return
label Math.divide$IF_END3
push local 1
push local 2
push local 2
add
call Math.divide 2
pop local 0
push local 1
push local 0
push local 0
add
push local 2
call Math.multiply 2
sub
push local 2
lt
if-goto Math.divide$IF_TRUE4
goto Math.divide$IF_FALSE4
label Math.divide$IF_TRUE4
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto Math.divide$IF_TRUE5
goto Math.divide$IF_END5
label Math.divide$IF_TRUE5
push local 0
neg
pop local 0
label Math.divide$IF_END5
push local 0
push local 0
add
return
goto Math.divide$IF_END4
label Math.divide$IF_FALSE4
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto Math.divide$IF_TRUE6
goto Math.divide$IF_END6
label Math.divide$IF_TRUE6
push local 0
neg
pop local 0
label Math.divide$IF_END6
push local 0
push local 0
add
push constant 1
add
return
label Math.divide$IF_END4
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.twoToThe 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label Math.sqrt_WHILE_EXP1
push local 1
push constant 0
lt
not
not
if-goto Math.sqrt_WHILE_END1
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto Math.sqrt$IF_TRUE1
goto Math.sqrt$IF_END1
label Math.sqrt$IF_TRUE1
push local 2
pop local 0
label Math.sqrt$IF_END1
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt_WHILE_EXP1
label Math.sqrt_WHILE_END1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto Math.max$IF_TRUE1
goto Math.max$IF_END1
label Math.max$IF_TRUE1
push argument 0
return
label Math.max$IF_END1
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto Math.min$IF_TRUE1
goto Math.min$IF_END1
label Math.min$IF_TRUE1
push argument 0
return
label Math.min$IF_END1
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto Math.abs$IF_TRUE1
goto Math.abs$IF_END1
label Math.abs$IF_TRUE1
push argument 0
neg
return
label Math.abs$IF_END1
push argument 0
return
function Math.multiply_floats 16
push argument 0
push constant 0
lt
pop local 0
push argument 1
push constant 0
lt
pop local 1
push local 0
push local 1
not
and
push local 1
push local 0
not
and
or
pop local 2
push local 2
push constant 1
neg
eq
if-goto Math.multiply_floats$IF_TRUE1
goto Math.multiply_floats$IF_FALSE1
label Math.multiply_floats$IF_TRUE1
push constant 1
pop local 2
goto Math.multiply_floats$IF_END1
label Math.multiply_floats$IF_FALSE1
push constant 0
pop local 2
label Math.multiply_floats$IF_END1
push argument 0
push constant 128
call Math.divide 2
push constant 127
and
pop local 3
push argument 0
push constant 127
and
pop local 5
push argument 1
push constant 128
call Math.divide 2
push constant 127
and
pop local 4
push argument 1
push constant 127
and
pop local 6
push local 3
push constant 127
eq
if-goto Math.multiply_floats$IF_TRUE2
goto Math.multiply_floats$IF_END2
label Math.multiply_floats$IF_TRUE2
push local 5
push constant 0
eq
not
if-goto Math.multiply_floats$IF_TRUE3
goto Math.multiply_floats$IF_FALSE3
label Math.multiply_floats$IF_TRUE3
push local 2
push constant 16384
call Math.multiply 2
push constant 127
push constant 128
call Math.multiply 2
or
push constant 1
or
return
goto Math.multiply_floats$IF_END3
label Math.multiply_floats$IF_FALSE3
push local 2
push constant 16384
call Math.multiply 2
push constant 127
push constant 128
call Math.multiply 2
or
return
label Math.multiply_floats$IF_END3
label Math.multiply_floats$IF_END2
push local 4
push constant 127
eq
if-goto Math.multiply_floats$IF_TRUE4
goto Math.multiply_floats$IF_END4
label Math.multiply_floats$IF_TRUE4
push local 6
push constant 0
eq
not
if-goto Math.multiply_floats$IF_TRUE5
goto Math.multiply_floats$IF_FALSE5
label Math.multiply_floats$IF_TRUE5
push local 2
push constant 16384
call Math.multiply 2
push constant 127
push constant 128
call Math.multiply 2
or
push constant 1
or
return
goto Math.multiply_floats$IF_END5
label Math.multiply_floats$IF_FALSE5
push local 2
push constant 16384
call Math.multiply 2
push constant 127
push constant 128
call Math.multiply 2
or
return
label Math.multiply_floats$IF_END5
label Math.multiply_floats$IF_END4
push local 3
push constant 0
eq
push local 5
push constant 0
eq
and
push local 4
push constant 0
eq
push local 6
push constant 0
eq
and
or
if-goto Math.multiply_floats$IF_TRUE6
goto Math.multiply_floats$IF_END6
label Math.multiply_floats$IF_TRUE6
push constant 0
return
label Math.multiply_floats$IF_END6
push local 3
push constant 0
eq
if-goto Math.multiply_floats$IF_TRUE7
goto Math.multiply_floats$IF_FALSE7
label Math.multiply_floats$IF_TRUE7
push local 5
pop local 7
goto Math.multiply_floats$IF_END7
label Math.multiply_floats$IF_FALSE7
push constant 128
push local 5
add
pop local 7
label Math.multiply_floats$IF_END7
push local 4
push constant 0
eq
if-goto Math.multiply_floats$IF_TRUE8
goto Math.multiply_floats$IF_FALSE8
label Math.multiply_floats$IF_TRUE8
push local 6
pop local 8
goto Math.multiply_floats$IF_END8
label Math.multiply_floats$IF_FALSE8
push constant 128
push local 6
add
pop local 8
label Math.multiply_floats$IF_END8
push local 7
push local 8
call Math.multiply 2
pop local 9
push constant 0
pop local 10
label Math.multiply_floats_WHILE_EXP1
push local 9
push constant 128
lt
not
if-goto Math.multiply_floats_WHILE_END1
push local 9
push constant 2
call Math.multiply 2
pop local 9
push local 10
push constant 1
sub
pop local 10
goto Math.multiply_floats_WHILE_EXP1
label Math.multiply_floats_WHILE_END1
label Math.multiply_floats_WHILE_EXP2
push local 9
push constant 256
lt
not
not
if-goto Math.multiply_floats_WHILE_END2
push local 9
push constant 2
call Math.divide 2
pop local 9
push local 10
push constant 1
add
pop local 10
goto Math.multiply_floats_WHILE_EXP2
label Math.multiply_floats_WHILE_END2
push local 9
push constant 127
and
pop local 11
push local 3
push constant 0
eq
if-goto Math.multiply_floats$IF_TRUE9
goto Math.multiply_floats$IF_FALSE9
label Math.multiply_floats$IF_TRUE9
push constant 62
neg
pop local 12
goto Math.multiply_floats$IF_END9
label Math.multiply_floats$IF_FALSE9
push local 3
push constant 63
sub
pop local 12
label Math.multiply_floats$IF_END9
push local 4
push constant 0
eq
if-goto Math.multiply_floats$IF_TRUE10
goto Math.multiply_floats$IF_FALSE10
label Math.multiply_floats$IF_TRUE10
push constant 62
neg
pop local 13
goto Math.multiply_floats$IF_END10
label Math.multiply_floats$IF_FALSE10
push local 4
push constant 63
sub
pop local 13
label Math.multiply_floats$IF_END10
push local 12
push local 13
add
push local 10
add
push constant 7
sub
pop local 14
push local 14
push constant 63
add
pop local 15
push local 15
push constant 127
lt
not
if-goto Math.multiply_floats$IF_TRUE11
goto Math.multiply_floats$IF_END11
label Math.multiply_floats$IF_TRUE11
push local 2
push constant 16384
call Math.multiply 2
push constant 127
push constant 128
call Math.multiply 2
or
return
label Math.multiply_floats$IF_END11
push local 15
push constant 0
gt
not
if-goto Math.multiply_floats$IF_TRUE12
goto Math.multiply_floats$IF_END12
label Math.multiply_floats$IF_TRUE12
push constant 0
return
label Math.multiply_floats$IF_END12
push local 2
push constant 16384
call Math.multiply 2
push local 15
push constant 128
call Math.multiply 2
or
push local 11
or
return
function Math.divide_floats 0

//Set 256 to be the start of the stack
@256 // 0
D=A // 1
@SP // 2
M=D // 3
//Set up the comparison ops subroutines
@SKIP // 4
0;JMP // 5
// ------------------------------------------------------------
//  Shared code for gt, lt, eq
//  Expectations on entry:
//Stack  – return address
//D  – (left – right)
// ------------------------------------------------------------
// want  (left  > right)  ⇔ (D > 0)
(DO_GT)
@RETURN_TRUE // 6
D;JGT // 7
@RETURN_FALSE // 8
0;JMP // 9
// want  (left == right)  ⇔ (D == 0)
(DO_EQ)
@RETURN_TRUE // 10
D;JEQ // 11
@RETURN_FALSE // 12
0;JMP // 13
// want  (left  < right)  ⇔ (D < 0)
(DO_LT)
@RETURN_TRUE // 14
D;JLT // 15
@RETURN_FALSE // 16
0;JMP // 17
// ---- set boolean in D --------------------------------------
(RETURN_TRUE)
D=-1 // 18
@WRITE_BACK // 19
0;JMP // 20
(RETURN_FALSE)
D=0 // 21
@WRITE_BACK // 22
0;JMP // 23
// ---- collapse stack and return -----------------------------
(WRITE_BACK)
@SP // 24
AM=M-1 // 25
A=M // 26
0;JMP // 27
(SKIP)
//Set up calling and returning from functions
@SKIPo // 28
0;JMP // 29
(CALL)
@SP // 30
AM=M+1 // 31
A=A-1 // 32
M=D // 33
@LCL // 34
D=M // 35
@SP // 36
AM=M+1 // 37
A=A-1 // 38
M=D // 39
@ARG // 40
D=M // 41
@SP // 42
AM=M+1 // 43
A=A-1 // 44
M=D // 45
@THIS // 46
D=M // 47
@SP // 48
AM=M+1 // 49
A=A-1 // 50
M=D // 51
@THAT // 52
D=M // 53
@SP // 54
AM=M+1 // 55
A=A-1 // 56
M=D // 57
@14 // 58
D=M // 59
@SP // 60
D=M-D // 61
@ARG // 62
M=D // 63
@SP // 64
D=M // 65
@LCL // 66
M=D // 67
@13 // 68
A=M // 69
0;JMP // 70
(RETURN)
@LCL // 71
D=M // 72
@14 // 73
M=D // 74
@5 // 75
A=D-A // 76
D=M // 77
@15 // 78
M=D // 79
@SP // 80
AM=M-1 // 81
D=M // 82
@ARG // 83
A=M // 84
M=D // 85
@ARG // 86
D=M // 87
@SP // 88
M=D+1 // 89
@14 // 90
A=M-1 // 91
D=M // 92
@THAT // 93
M=D // 94
@14 // 95
A=M-1 // 96
A=A-1 // 97
D=M // 98
@THIS // 99
M=D // 100
@14 // 101
A=M-1 // 102
A=A-1 // 103
A=A-1 // 104
D=M // 105
@ARG // 106
M=D // 107
@14 // 108
A=M-1 // 109
A=A-1 // 110
A=A-1 // 111
A=A-1 // 112
D=M // 113
@LCL // 114
M=D // 115
@15 // 116
A=M // 117
0;JMP // 118
(SKIPo)
// call Sys.init
@5 // 119
D=A // 120
@14 // 121
M=D // 122
@Sys.init // 123
D=A // 124
@13 // 125
M=D // 126
@Vec3.printAllocs.ret.0 // 127
D=A // 128
@CALL // 129
0;JMP // 130
(Vec3.printAllocs.ret.0)
////FunctionInstruction{functionName='String.dispose', numLocals=0, funcMapping={}}
// function String.dispose with 0
(String.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 131
A=M // 132
D=M // 133
@3 // 134
M=D // 135

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.dispose$IF_TRUE1}}
@String.dispose.EQ.0 // 136
D=A // 137
@SP // 138
AM=M+1 // 139
A=A-1 // 140
M=D // 141
@THIS // 142
A=M // 143
D=M // 144
@DO_EQ // 145
0;JMP // 146
(String.dispose.EQ.0)
D=!D // 147
@String.dispose$IF_TRUE1 // 148
D;JNE // 149

////GotoInstruction{label='String.dispose$IF_FALSE1}
// goto String.dispose$IF_FALSE1
@String.dispose$IF_FALSE1 // 150
0;JMP // 151

////LabelInstruction{label='String.dispose$IF_TRUE1}
// label String.dispose$IF_TRUE1
(String.dispose$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 152
A=M // 153
D=M // 154
@SP // 155
AM=M+1 // 156
A=A-1 // 157
M=D // 158
// call Array.dispose
@6 // 159
D=A // 160
@14 // 161
M=D // 162
@Array.dispose // 163
D=A // 164
@13 // 165
M=D // 166
@String.dispose.ret.0 // 167
D=A // 168
@CALL // 169
0;JMP // 170
(String.dispose.ret.0)
@SP // 171
M=M-1 // 172

////LabelInstruction{label='String.dispose$IF_FALSE1}
// label String.dispose$IF_FALSE1
(String.dispose$IF_FALSE1)

////PushInstruction("constant 0")
@SP // 173
AM=M+1 // 174
A=A-1 // 175
M=0 // 176
@RETURN // 177
0;JMP // 178

////FunctionInstruction{functionName='Int32.initial_sqrt_guess', numLocals=2, funcMapping={}}
// function Int32.initial_sqrt_guess with 2
(Int32.initial_sqrt_guess)
@SP // 179
M=M+1 // 180
AM=M+1 // 181
A=A-1 // 182
M=0 // 183
A=A-1 // 184
M=0 // 185

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 186
A=M // 187
D=M // 188
@3 // 189
M=D // 190

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE1}}
@Int32.initial_sqrt_guess.GT.1 // 191
D=A // 192
@SP // 193
AM=M+1 // 194
A=A-1 // 195
M=D // 196
@THIS // 197
A=M // 198
D=M // 199
@3 // 200
A=D+A // 201
D=M // 202
@DO_GT // 203
0;JMP // 204
(Int32.initial_sqrt_guess.GT.1)
@Int32.initial_sqrt_guess$IF_TRUE1 // 205
D;JNE // 206

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_FALSE1}
// goto Int32.initial_sqrt_guess$IF_FALSE1
@Int32.initial_sqrt_guess$IF_FALSE1 // 207
0;JMP // 208

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE1}
// label Int32.initial_sqrt_guess$IF_TRUE1
(Int32.initial_sqrt_guess$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 209
D=A // 210
@SP // 211
AM=M+1 // 212
A=A-1 // 213
M=D // 214
// call Int32.new
@6 // 215
D=A // 216
@14 // 217
M=D // 218
@Int32.new // 219
D=A // 220
@13 // 221
M=D // 222
@Int32.initial_sqrt_guess.ret.0 // 223
D=A // 224
@CALL // 225
0;JMP // 226
(Int32.initial_sqrt_guess.ret.0)
@SP // 227
AM=M-1 // 228
D=M // 229
@LCL // 230
A=M // 231
M=D // 232

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4096")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@4096 // 233
D=A // 234
@SP // 235
AM=M+1 // 236
A=A-1 // 237
M=D // 238
// call Int32.new
@6 // 239
D=A // 240
@14 // 241
M=D // 242
@Int32.new // 243
D=A // 244
@13 // 245
M=D // 246
@Int32.initial_sqrt_guess.ret.1 // 247
D=A // 248
@CALL // 249
0;JMP // 250
(Int32.initial_sqrt_guess.ret.1)
@SP // 251
AM=M-1 // 252
D=M // 253
@LCL // 254
A=M+1 // 255
M=D // 256

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 257
A=M // 258
D=M // 259
@SP // 260
AM=M+1 // 261
A=A-1 // 262
M=D // 263
@LCL // 264
A=M+1 // 265
D=M // 266
@SP // 267
AM=M+1 // 268
A=A-1 // 269
M=D // 270
// call Int32.do_mul
@7 // 271
D=A // 272
@14 // 273
M=D // 274
@Int32.do_mul // 275
D=A // 276
@13 // 277
M=D // 278
@Int32.initial_sqrt_guess.ret.2 // 279
D=A // 280
@CALL // 281
0;JMP // 282
(Int32.initial_sqrt_guess.ret.2)
@SP // 283
M=M-1 // 284

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 285
A=M+1 // 286
D=M // 287
@SP // 288
AM=M+1 // 289
A=A-1 // 290
M=D // 291
// call Int32.dispose
@6 // 292
D=A // 293
@14 // 294
M=D // 295
@Int32.dispose // 296
D=A // 297
@13 // 298
M=D // 299
@Int32.initial_sqrt_guess.ret.3 // 300
D=A // 301
@CALL // 302
0;JMP // 303
(Int32.initial_sqrt_guess.ret.3)
@SP // 304
M=M-1 // 305

////PushInstruction("local 0")
@LCL // 306
A=M // 307
D=M // 308
@SP // 309
AM=M+1 // 310
A=A-1 // 311
M=D // 312
@RETURN // 313
0;JMP // 314

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_FALSE1}
// label Int32.initial_sqrt_guess$IF_FALSE1
(Int32.initial_sqrt_guess$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE2}}
@Int32.initial_sqrt_guess.GT.2 // 315
D=A // 316
@SP // 317
AM=M+1 // 318
A=A-1 // 319
M=D // 320
@THIS // 321
A=M // 322
D=M // 323
@2 // 324
A=D+A // 325
D=M // 326
@DO_GT // 327
0;JMP // 328
(Int32.initial_sqrt_guess.GT.2)
@Int32.initial_sqrt_guess$IF_TRUE2 // 329
D;JNE // 330

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_FALSE2}
// goto Int32.initial_sqrt_guess$IF_FALSE2
@Int32.initial_sqrt_guess$IF_FALSE2 // 331
0;JMP // 332

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE2}
// label Int32.initial_sqrt_guess$IF_TRUE2
(Int32.initial_sqrt_guess$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 333
D=A // 334
@SP // 335
AM=M+1 // 336
A=A-1 // 337
M=D // 338
// call Int32.new
@6 // 339
D=A // 340
@14 // 341
M=D // 342
@Int32.new // 343
D=A // 344
@13 // 345
M=D // 346
@Int32.initial_sqrt_guess.ret.4 // 347
D=A // 348
@CALL // 349
0;JMP // 350
(Int32.initial_sqrt_guess.ret.4)
@SP // 351
AM=M-1 // 352
D=M // 353
@LCL // 354
A=M // 355
M=D // 356

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 256")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@256 // 357
D=A // 358
@SP // 359
AM=M+1 // 360
A=A-1 // 361
M=D // 362
// call Int32.new
@6 // 363
D=A // 364
@14 // 365
M=D // 366
@Int32.new // 367
D=A // 368
@13 // 369
M=D // 370
@Int32.initial_sqrt_guess.ret.5 // 371
D=A // 372
@CALL // 373
0;JMP // 374
(Int32.initial_sqrt_guess.ret.5)
@SP // 375
AM=M-1 // 376
D=M // 377
@LCL // 378
A=M+1 // 379
M=D // 380

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 381
A=M // 382
D=M // 383
@SP // 384
AM=M+1 // 385
A=A-1 // 386
M=D // 387
@LCL // 388
A=M+1 // 389
D=M // 390
@SP // 391
AM=M+1 // 392
A=A-1 // 393
M=D // 394
// call Int32.do_mul
@7 // 395
D=A // 396
@14 // 397
M=D // 398
@Int32.do_mul // 399
D=A // 400
@13 // 401
M=D // 402
@Int32.initial_sqrt_guess.ret.6 // 403
D=A // 404
@CALL // 405
0;JMP // 406
(Int32.initial_sqrt_guess.ret.6)
@SP // 407
M=M-1 // 408

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 409
A=M+1 // 410
D=M // 411
@SP // 412
AM=M+1 // 413
A=A-1 // 414
M=D // 415
// call Int32.dispose
@6 // 416
D=A // 417
@14 // 418
M=D // 419
@Int32.dispose // 420
D=A // 421
@13 // 422
M=D // 423
@Int32.initial_sqrt_guess.ret.7 // 424
D=A // 425
@CALL // 426
0;JMP // 427
(Int32.initial_sqrt_guess.ret.7)
@SP // 428
M=M-1 // 429

////PushInstruction("local 0")
@LCL // 430
A=M // 431
D=M // 432
@SP // 433
AM=M+1 // 434
A=A-1 // 435
M=D // 436
@RETURN // 437
0;JMP // 438

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_FALSE2}
// label Int32.initial_sqrt_guess$IF_FALSE2
(Int32.initial_sqrt_guess$IF_FALSE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE3}}
@Int32.initial_sqrt_guess.GT.3 // 439
D=A // 440
@SP // 441
AM=M+1 // 442
A=A-1 // 443
M=D // 444
@THIS // 445
A=M // 446
D=M // 447
A=D+1 // 448
D=M // 449
@DO_GT // 450
0;JMP // 451
(Int32.initial_sqrt_guess.GT.3)
@Int32.initial_sqrt_guess$IF_TRUE3 // 452
D;JNE // 453

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_FALSE3}
// goto Int32.initial_sqrt_guess$IF_FALSE3
@Int32.initial_sqrt_guess$IF_FALSE3 // 454
0;JMP // 455

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE3}
// label Int32.initial_sqrt_guess$IF_TRUE3
(Int32.initial_sqrt_guess$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 456
D=A // 457
@SP // 458
AM=M+1 // 459
A=A-1 // 460
M=D // 461
// call Int32.new
@6 // 462
D=A // 463
@14 // 464
M=D // 465
@Int32.new // 466
D=A // 467
@13 // 468
M=D // 469
@Int32.initial_sqrt_guess.ret.8 // 470
D=A // 471
@CALL // 472
0;JMP // 473
(Int32.initial_sqrt_guess.ret.8)
@SP // 474
AM=M-1 // 475
D=M // 476
@LCL // 477
A=M // 478
M=D // 479

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@16 // 480
D=A // 481
@SP // 482
AM=M+1 // 483
A=A-1 // 484
M=D // 485
// call Int32.new
@6 // 486
D=A // 487
@14 // 488
M=D // 489
@Int32.new // 490
D=A // 491
@13 // 492
M=D // 493
@Int32.initial_sqrt_guess.ret.9 // 494
D=A // 495
@CALL // 496
0;JMP // 497
(Int32.initial_sqrt_guess.ret.9)
@SP // 498
AM=M-1 // 499
D=M // 500
@LCL // 501
A=M+1 // 502
M=D // 503

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 504
A=M // 505
D=M // 506
@SP // 507
AM=M+1 // 508
A=A-1 // 509
M=D // 510
@LCL // 511
A=M+1 // 512
D=M // 513
@SP // 514
AM=M+1 // 515
A=A-1 // 516
M=D // 517
// call Int32.do_mul
@7 // 518
D=A // 519
@14 // 520
M=D // 521
@Int32.do_mul // 522
D=A // 523
@13 // 524
M=D // 525
@Int32.initial_sqrt_guess.ret.10 // 526
D=A // 527
@CALL // 528
0;JMP // 529
(Int32.initial_sqrt_guess.ret.10)
@SP // 530
M=M-1 // 531

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 532
A=M+1 // 533
D=M // 534
@SP // 535
AM=M+1 // 536
A=A-1 // 537
M=D // 538
// call Int32.dispose
@6 // 539
D=A // 540
@14 // 541
M=D // 542
@Int32.dispose // 543
D=A // 544
@13 // 545
M=D // 546
@Int32.initial_sqrt_guess.ret.11 // 547
D=A // 548
@CALL // 549
0;JMP // 550
(Int32.initial_sqrt_guess.ret.11)
@SP // 551
M=M-1 // 552

////PushInstruction("local 0")
@LCL // 553
A=M // 554
D=M // 555
@SP // 556
AM=M+1 // 557
A=A-1 // 558
M=D // 559
@RETURN // 560
0;JMP // 561

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_FALSE3}
// label Int32.initial_sqrt_guess$IF_FALSE3
(Int32.initial_sqrt_guess$IF_FALSE3)

////CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
@11 // 562
D=A // 563
@SP // 564
AM=M+1 // 565
A=A-1 // 566
M=D // 567
// call Int32.new
@6 // 568
D=A // 569
@14 // 570
M=D // 571
@Int32.new // 572
D=A // 573
@13 // 574
M=D // 575
@Int32.initial_sqrt_guess.ret.12 // 576
D=A // 577
@CALL // 578
0;JMP // 579
(Int32.initial_sqrt_guess.ret.12)
@RETURN // 580
0;JMP // 581

////FunctionInstruction{functionName='Output.println', numLocals=0, funcMapping={}}
// function Output.println with 0
(Output.println)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 582
M=0 // 583

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("static 2"),
//    right:
//        PushInstruction("constant 22"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.println$IF_TRUE1}}
@Output.println.EQ.4 // 584
D=A // 585
@SP // 586
AM=M+1 // 587
A=A-1 // 588
M=D // 589
@Output.2 // 590
D=M // 591
@22 // 592
D=D-A // 593
@DO_EQ // 594
0;JMP // 595
(Output.println.EQ.4)
@Output.println$IF_TRUE1 // 596
D;JNE // 597

////GotoInstruction{label='Output.println$IF_FALSE1}
// goto Output.println$IF_FALSE1
@Output.println$IF_FALSE1 // 598
0;JMP // 599

////LabelInstruction{label='Output.println$IF_TRUE1}
// label Output.println$IF_TRUE1
(Output.println$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 600
M=0 // 601

////GotoInstruction{label='Output.println$IF_END1}
// goto Output.println$IF_END1
@Output.println$IF_END1 // 602
0;JMP // 603

////LabelInstruction{label='Output.println$IF_FALSE1}
// label Output.println$IF_FALSE1
(Output.println$IF_FALSE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 604
M=M+1 // 605

////LabelInstruction{label='Output.println$IF_END1}
// label Output.println$IF_END1
(Output.println$IF_END1)

////PushInstruction("constant 0")
@SP // 606
AM=M+1 // 607
A=A-1 // 608
M=0 // 609
@RETURN // 610
0;JMP // 611

////FunctionInstruction{functionName='Keyboard.init', numLocals=0, funcMapping={}}
// function Keyboard.init with 0
(Keyboard.init)

////PushInstruction("constant 0")
@SP // 612
AM=M+1 // 613
A=A-1 // 614
M=0 // 615
@RETURN // 616
0;JMP // 617

////FunctionInstruction{functionName='Memory.get_best_fit', numLocals=1, funcMapping={}}
// function Memory.get_best_fit with 1
(Memory.get_best_fit)
@SP // 618
AM=M+1 // 619
A=A-1 // 620
M=0 // 621

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 622
A=M // 623
D=M // 624
@0 // 625
A=D+A // 626
D=M // 627
@LCL // 628
A=M // 629
M=D // 630

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 0"),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.get_best_fit$IF_TRUE1}}
@Memory.get_best_fit.LT.5 // 631
D=A // 632
@SP // 633
AM=M+1 // 634
A=A-1 // 635
M=D // 636
@LCL // 637
A=M // 638
D=M // 639
@0 // 640
A=D+A // 641
D=M // 642
@SP // 643
AM=M+1 // 644
A=A-1 // 645
M=D // 646
@ARG // 647
A=M+1 // 648
D=M // 649
@SP // 650
AM=M-1 // 651
D=M-D // 652
@DO_LT // 653
0;JMP // 654
(Memory.get_best_fit.LT.5)
D=!D // 655
@Memory.get_best_fit$IF_TRUE1 // 656
D;JNE // 657

////GotoInstruction{label='Memory.get_best_fit$IF_FALSE1}
// goto Memory.get_best_fit$IF_FALSE1
@Memory.get_best_fit$IF_FALSE1 // 658
0;JMP // 659

////LabelInstruction{label='Memory.get_best_fit$IF_TRUE1}
// label Memory.get_best_fit$IF_TRUE1
(Memory.get_best_fit$IF_TRUE1)

////PushInstruction("local 0")
@LCL // 660
A=M // 661
D=M // 662
@SP // 663
AM=M+1 // 664
A=A-1 // 665
M=D // 666
@RETURN // 667
0;JMP // 668

////LabelInstruction{label='Memory.get_best_fit$IF_FALSE1}
// label Memory.get_best_fit$IF_FALSE1
(Memory.get_best_fit$IF_FALSE1)

////LabelInstruction{label='Memory.get_best_fit_WHILE_EXP1}
// label Memory.get_best_fit_WHILE_EXP1
(Memory.get_best_fit_WHILE_EXP1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.get_best_fit_WHILE_END1}}
@Memory.get_best_fit.EQ.6 // 669
D=A // 670
@SP // 671
AM=M+1 // 672
A=A-1 // 673
M=D // 674
@LCL // 675
A=M // 676
D=M // 677
@3 // 678
A=D+A // 679
D=M // 680
@DO_EQ // 681
0;JMP // 682
(Memory.get_best_fit.EQ.6)
@Memory.get_best_fit_WHILE_END1 // 683
D;JNE // 684

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 685
A=M // 686
D=M // 687
@3 // 688
A=D+A // 689
D=M // 690
@LCL // 691
A=M // 692
M=D // 693

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 0"),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.get_best_fit$IF_TRUE2}}
@Memory.get_best_fit.LT.7 // 694
D=A // 695
@SP // 696
AM=M+1 // 697
A=A-1 // 698
M=D // 699
@LCL // 700
A=M // 701
D=M // 702
@0 // 703
A=D+A // 704
D=M // 705
@SP // 706
AM=M+1 // 707
A=A-1 // 708
M=D // 709
@ARG // 710
A=M+1 // 711
D=M // 712
@SP // 713
AM=M-1 // 714
D=M-D // 715
@DO_LT // 716
0;JMP // 717
(Memory.get_best_fit.LT.7)
D=!D // 718
@Memory.get_best_fit$IF_TRUE2 // 719
D;JNE // 720

////GotoInstruction{label='Memory.get_best_fit$IF_FALSE2}
// goto Memory.get_best_fit$IF_FALSE2
@Memory.get_best_fit$IF_FALSE2 // 721
0;JMP // 722

////LabelInstruction{label='Memory.get_best_fit$IF_TRUE2}
// label Memory.get_best_fit$IF_TRUE2
(Memory.get_best_fit$IF_TRUE2)

////PushInstruction("local 0")
@LCL // 723
A=M // 724
D=M // 725
@SP // 726
AM=M+1 // 727
A=A-1 // 728
M=D // 729
@RETURN // 730
0;JMP // 731

////LabelInstruction{label='Memory.get_best_fit$IF_FALSE2}
// label Memory.get_best_fit$IF_FALSE2
(Memory.get_best_fit$IF_FALSE2)

////GotoInstruction{label='Memory.get_best_fit_WHILE_EXP1}
// goto Memory.get_best_fit_WHILE_EXP1
@Memory.get_best_fit_WHILE_EXP1 // 732
0;JMP // 733

////LabelInstruction{label='Memory.get_best_fit_WHILE_END1}
// label Memory.get_best_fit_WHILE_END1
(Memory.get_best_fit_WHILE_END1)

////PushInstruction("constant 0")
@SP // 734
AM=M+1 // 735
A=A-1 // 736
M=0 // 737
@RETURN // 738
0;JMP // 739

////FunctionInstruction{functionName='Number.clone', numLocals=0, funcMapping={}}
// function Number.clone with 0
(Number.clone)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 740
A=M // 741
D=M // 742
@3 // 743
M=D // 744

////CallGroup{pushes=[CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.clone}}], call=CallInstruction{Number.new_from_int32}}
@THIS // 745
A=M // 746
D=M // 747
@SP // 748
AM=M+1 // 749
A=A-1 // 750
M=D // 751
// call Int32.clone
@6 // 752
D=A // 753
@14 // 754
M=D // 755
@Int32.clone // 756
D=A // 757
@13 // 758
M=D // 759
@Number.clone.ret.0 // 760
D=A // 761
@CALL // 762
0;JMP // 763
(Number.clone.ret.0)
// call Number.new_from_int32
@6 // 764
D=A // 765
@14 // 766
M=D // 767
@Number.new_from_int32 // 768
D=A // 769
@13 // 770
M=D // 771
@Number.clone.ret.1 // 772
D=A // 773
@CALL // 774
0;JMP // 775
(Number.clone.ret.1)
@RETURN // 776
0;JMP // 777

////FunctionInstruction{functionName='Main.getOneTwentieth', numLocals=2, funcMapping={}}
// function Main.getOneTwentieth with 2
(Main.getOneTwentieth)
@SP // 778
M=M+1 // 779
AM=M+1 // 780
A=A-1 // 781
M=0 // 782
A=A-1 // 783
M=0 // 784

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 785
AM=M+1 // 786
A=A-1 // 787
M=1 // 788
// call Number.new
@6 // 789
D=A // 790
@14 // 791
M=D // 792
@Number.new // 793
D=A // 794
@13 // 795
M=D // 796
@Main.getOneTwentieth.ret.0 // 797
D=A // 798
@CALL // 799
0;JMP // 800
(Main.getOneTwentieth.ret.0)
@SP // 801
AM=M-1 // 802
D=M // 803
@LCL // 804
A=M // 805
M=D // 806

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 20")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@20 // 807
D=A // 808
@SP // 809
AM=M+1 // 810
A=A-1 // 811
M=D // 812
// call Number.new
@6 // 813
D=A // 814
@14 // 815
M=D // 816
@Number.new // 817
D=A // 818
@13 // 819
M=D // 820
@Main.getOneTwentieth.ret.1 // 821
D=A // 822
@CALL // 823
0;JMP // 824
(Main.getOneTwentieth.ret.1)
@SP // 825
AM=M-1 // 826
D=M // 827
@LCL // 828
A=M+1 // 829
M=D // 830

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 831
A=M // 832
D=M // 833
@SP // 834
AM=M+1 // 835
A=A-1 // 836
M=D // 837
@LCL // 838
A=M+1 // 839
D=M // 840
@SP // 841
AM=M+1 // 842
A=A-1 // 843
M=D // 844
// call Number.do_div
@7 // 845
D=A // 846
@14 // 847
M=D // 848
@Number.do_div // 849
D=A // 850
@13 // 851
M=D // 852
@Main.getOneTwentieth.ret.2 // 853
D=A // 854
@CALL // 855
0;JMP // 856
(Main.getOneTwentieth.ret.2)
@SP // 857
M=M-1 // 858

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 859
A=M+1 // 860
D=M // 861
@SP // 862
AM=M+1 // 863
A=A-1 // 864
M=D // 865
// call Number.dispose
@6 // 866
D=A // 867
@14 // 868
M=D // 869
@Number.dispose // 870
D=A // 871
@13 // 872
M=D // 873
@Main.getOneTwentieth.ret.3 // 874
D=A // 875
@CALL // 876
0;JMP // 877
(Main.getOneTwentieth.ret.3)
@SP // 878
M=M-1 // 879

////PushInstruction("local 0")
@LCL // 880
A=M // 881
D=M // 882
@SP // 883
AM=M+1 // 884
A=A-1 // 885
M=D // 886
@RETURN // 887
0;JMP // 888

////FunctionInstruction{functionName='Int32.new_from_parts', numLocals=0, funcMapping={Int32.initial_sqrt_guess=13}}
// function Int32.new_from_parts with 0
(Int32.new_from_parts)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 889
AM=M+1 // 890
A=A-1 // 891
M=1 // 892
// call Memory.alloc
@6 // 893
D=A // 894
@14 // 895
M=D // 896
@Memory.alloc // 897
D=A // 898
@13 // 899
M=D // 900
@Int32.new_from_parts.ret.0 // 901
D=A // 902
@CALL // 903
0;JMP // 904
(Int32.new_from_parts.ret.0)
@SP // 905
AM=M-1 // 906
D=M // 907
@3 // 908
M=D // 909

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 910
M=M+1 // 911

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 912
A=M // 913
D=M // 914
@THIS // 915
A=M // 916
M=D // 917

////PushInstruction("pointer 0")
@3 // 918
D=M // 919
@SP // 920
AM=M+1 // 921
A=A-1 // 922
M=D // 923
@RETURN // 924
0;JMP // 925

////FunctionInstruction{functionName='Intersection.dispose', numLocals=0, funcMapping={}}
// function Intersection.dispose with 0
(Intersection.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 926
A=M // 927
D=M // 928
@3 // 929
M=D // 930

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Intersection.0 // 931
M=M-1 // 932

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 933
A=M // 934
D=M // 935
@SP // 936
AM=M+1 // 937
A=A-1 // 938
M=D // 939
// call Number.dispose
@6 // 940
D=A // 941
@14 // 942
M=D // 943
@Number.dispose // 944
D=A // 945
@13 // 946
M=D // 947
@Intersection.dispose.ret.0 // 948
D=A // 949
@CALL // 950
0;JMP // 951
(Intersection.dispose.ret.0)
@SP // 952
M=M-1 // 953

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 954
D=M // 955
@SP // 956
AM=M+1 // 957
A=A-1 // 958
M=D // 959
// call Memory.deAlloc
@6 // 960
D=A // 961
@14 // 962
M=D // 963
@Memory.deAlloc // 964
D=A // 965
@13 // 966
M=D // 967
@Intersection.dispose.ret.1 // 968
D=A // 969
@CALL // 970
0;JMP // 971
(Intersection.dispose.ret.1)
@SP // 972
M=M-1 // 973

////PushInstruction("constant 0")
@SP // 974
AM=M+1 // 975
A=A-1 // 976
M=0 // 977
@RETURN // 978
0;JMP // 979

////FunctionInstruction{functionName='Output.getMap', numLocals=0, funcMapping={Output.println=0}}
// function Output.getMap with 0
(Output.getMap)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 32"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 126"),
//            binaryOp: "GT"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Output.getMap$IF_TRUE1}}
@Output.getMap.LT.8 // 980
D=A // 981
@SP // 982
AM=M+1 // 983
A=A-1 // 984
M=D // 985
@ARG // 986
A=M // 987
D=M // 988
@32 // 989
D=D-A // 990
@DO_LT // 991
0;JMP // 992
(Output.getMap.LT.8)
@SP // 993
AM=M+1 // 994
A=A-1 // 995
M=D // 996
@Output.getMap.GT.9 // 997
D=A // 998
@SP // 999
AM=M+1 // 1000
A=A-1 // 1001
M=D // 1002
@ARG // 1003
A=M // 1004
D=M // 1005
@126 // 1006
D=D-A // 1007
@DO_GT // 1008
0;JMP // 1009
(Output.getMap.GT.9)
@SP // 1010
AM=M-1 // 1011
D=D|M // 1012
@Output.getMap$IF_TRUE1 // 1013
D;JNE // 1014

////GotoInstruction{label='Output.getMap$IF_FALSE1}
// goto Output.getMap$IF_FALSE1
@Output.getMap$IF_FALSE1 // 1015
0;JMP // 1016

////LabelInstruction{label='Output.getMap$IF_TRUE1}
// label Output.getMap$IF_TRUE1
(Output.getMap$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=argument 0}
//}

@ARG // 1017
A=M // 1018
M=0 // 1019

////LabelInstruction{label='Output.getMap$IF_FALSE1}
// label Output.getMap$IF_FALSE1
(Output.getMap$IF_FALSE1)

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 0"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        )
//)
@Output.0 // 1020
D=M // 1021
@SP // 1022
AM=M+1 // 1023
A=A-1 // 1024
M=D // 1025
@ARG // 1026
A=M // 1027
D=M // 1028
@SP // 1029
AM=M-1 // 1030
A=D+M // 1031
D=M // 1032
@SP // 1033
AM=M+1 // 1034
A=A-1 // 1035
M=D // 1036
@RETURN // 1037
0;JMP // 1038

////FunctionInstruction{functionName='Vec3.do_add', numLocals=0, funcMapping={}}
// function Vec3.do_add with 0
(Vec3.do_add)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1039
A=M // 1040
D=M // 1041
@3 // 1042
M=D // 1043

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1044
A=M // 1045
D=M // 1046
@SP // 1047
AM=M+1 // 1048
A=A-1 // 1049
M=D // 1050
@ARG // 1051
A=M+1 // 1052
D=M // 1053
@SP // 1054
AM=M+1 // 1055
A=A-1 // 1056
M=D // 1057
// call Vec3.getX
@6 // 1058
D=A // 1059
@14 // 1060
M=D // 1061
@Vec3.getX // 1062
D=A // 1063
@13 // 1064
M=D // 1065
@Vec3.do_add.ret.0 // 1066
D=A // 1067
@CALL // 1068
0;JMP // 1069
(Vec3.do_add.ret.0)
// call Number.do_add
@7 // 1070
D=A // 1071
@14 // 1072
M=D // 1073
@Number.do_add // 1074
D=A // 1075
@13 // 1076
M=D // 1077
@Vec3.do_add.ret.1 // 1078
D=A // 1079
@CALL // 1080
0;JMP // 1081
(Vec3.do_add.ret.1)
@SP // 1082
M=M-1 // 1083

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1084
A=M+1 // 1085
D=M // 1086
@SP // 1087
AM=M+1 // 1088
A=A-1 // 1089
M=D // 1090
@ARG // 1091
A=M+1 // 1092
D=M // 1093
@SP // 1094
AM=M+1 // 1095
A=A-1 // 1096
M=D // 1097
// call Vec3.getY
@6 // 1098
D=A // 1099
@14 // 1100
M=D // 1101
@Vec3.getY // 1102
D=A // 1103
@13 // 1104
M=D // 1105
@Vec3.do_add.ret.2 // 1106
D=A // 1107
@CALL // 1108
0;JMP // 1109
(Vec3.do_add.ret.2)
// call Number.do_add
@7 // 1110
D=A // 1111
@14 // 1112
M=D // 1113
@Number.do_add // 1114
D=A // 1115
@13 // 1116
M=D // 1117
@Vec3.do_add.ret.3 // 1118
D=A // 1119
@CALL // 1120
0;JMP // 1121
(Vec3.do_add.ret.3)
@SP // 1122
M=M-1 // 1123

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1124
A=M+1 // 1125
A=A+1 // 1126
D=M // 1127
@SP // 1128
AM=M+1 // 1129
A=A-1 // 1130
M=D // 1131
@ARG // 1132
A=M+1 // 1133
D=M // 1134
@SP // 1135
AM=M+1 // 1136
A=A-1 // 1137
M=D // 1138
// call Vec3.getZ
@6 // 1139
D=A // 1140
@14 // 1141
M=D // 1142
@Vec3.getZ // 1143
D=A // 1144
@13 // 1145
M=D // 1146
@Vec3.do_add.ret.4 // 1147
D=A // 1148
@CALL // 1149
0;JMP // 1150
(Vec3.do_add.ret.4)
// call Number.do_add
@7 // 1151
D=A // 1152
@14 // 1153
M=D // 1154
@Number.do_add // 1155
D=A // 1156
@13 // 1157
M=D // 1158
@Vec3.do_add.ret.5 // 1159
D=A // 1160
@CALL // 1161
0;JMP // 1162
(Vec3.do_add.ret.5)
@SP // 1163
M=M-1 // 1164

////PushInstruction("constant 0")
@SP // 1165
AM=M+1 // 1166
A=A-1 // 1167
M=0 // 1168
@RETURN // 1169
0;JMP // 1170

////FunctionInstruction{functionName='Int32.is_positive', numLocals=0, funcMapping={Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.is_positive with 0
(Int32.is_positive)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1171
A=M // 1172
D=M // 1173
@3 // 1174
M=D // 1175

////BinaryPushGroup(
//    left:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_zero}},
//NOT),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 128"),
//            binaryOp: "LT"
//        ),
//    binaryOp: "AND"
//)
@3 // 1176
D=M // 1177
@SP // 1178
AM=M+1 // 1179
A=A-1 // 1180
M=D // 1181
// call Int32.is_zero
@6 // 1182
D=A // 1183
@14 // 1184
M=D // 1185
@Int32.is_zero // 1186
D=A // 1187
@13 // 1188
M=D // 1189
@Int32.is_positive.ret.0 // 1190
D=A // 1191
@CALL // 1192
0;JMP // 1193
(Int32.is_positive.ret.0)
@SP // 1194
A=M-1 // 1195
M=!D // 1196
@Int32.is_positive.LT.10 // 1197
D=A // 1198
@SP // 1199
AM=M+1 // 1200
A=A-1 // 1201
M=D // 1202
@THIS // 1203
A=M // 1204
D=M // 1205
@3 // 1206
A=D+A // 1207
D=M // 1208
@128 // 1209
D=D-A // 1210
@DO_LT // 1211
0;JMP // 1212
(Int32.is_positive.LT.10)
@SP // 1213
AM=M-1 // 1214
D=D&M // 1215
@SP // 1216
AM=M+1 // 1217
A=A-1 // 1218
M=D // 1219
@RETURN // 1220
0;JMP // 1221

////FunctionInstruction{functionName='Int32.do_sub', numLocals=1, funcMapping={Int32.is_positive=1, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.do_sub with 1
(Int32.do_sub)
@SP // 1222
AM=M+1 // 1223
A=A-1 // 1224
M=0 // 1225

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1226
A=M // 1227
D=M // 1228
@3 // 1229
M=D // 1230

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 1231
A=M+1 // 1232
D=M // 1233
@SP // 1234
AM=M+1 // 1235
A=A-1 // 1236
M=D // 1237
// call Int32.clone
@6 // 1238
D=A // 1239
@14 // 1240
M=D // 1241
@Int32.clone // 1242
D=A // 1243
@13 // 1244
M=D // 1245
@Int32.do_sub.ret.0 // 1246
D=A // 1247
@CALL // 1248
0;JMP // 1249
(Int32.do_sub.ret.0)
@SP // 1250
AM=M-1 // 1251
D=M // 1252
@LCL // 1253
A=M // 1254
M=D // 1255

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1256
A=M // 1257
D=M // 1258
@SP // 1259
AM=M+1 // 1260
A=A-1 // 1261
M=D // 1262
// call Int32.do_neg
@6 // 1263
D=A // 1264
@14 // 1265
M=D // 1266
@Int32.do_neg // 1267
D=A // 1268
@13 // 1269
M=D // 1270
@Int32.do_sub.ret.1 // 1271
D=A // 1272
@CALL // 1273
0;JMP // 1274
(Int32.do_sub.ret.1)
@SP // 1275
M=M-1 // 1276

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("local 0")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 1277
D=M // 1278
@SP // 1279
AM=M+1 // 1280
A=A-1 // 1281
M=D // 1282
@LCL // 1283
A=M // 1284
D=M // 1285
@SP // 1286
AM=M+1 // 1287
A=A-1 // 1288
M=D // 1289
// call Int32.do_add
@7 // 1290
D=A // 1291
@14 // 1292
M=D // 1293
@Int32.do_add // 1294
D=A // 1295
@13 // 1296
M=D // 1297
@Int32.do_sub.ret.2 // 1298
D=A // 1299
@CALL // 1300
0;JMP // 1301
(Int32.do_sub.ret.2)
@SP // 1302
M=M-1 // 1303

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1304
A=M // 1305
D=M // 1306
@SP // 1307
AM=M+1 // 1308
A=A-1 // 1309
M=D // 1310
// call Int32.dispose
@6 // 1311
D=A // 1312
@14 // 1313
M=D // 1314
@Int32.dispose // 1315
D=A // 1316
@13 // 1317
M=D // 1318
@Int32.do_sub.ret.3 // 1319
D=A // 1320
@CALL // 1321
0;JMP // 1322
(Int32.do_sub.ret.3)
@SP // 1323
M=M-1 // 1324

////PushInstruction("constant 0")
@SP // 1325
AM=M+1 // 1326
A=A-1 // 1327
M=0 // 1328
@RETURN // 1329
0;JMP // 1330

////FunctionInstruction{functionName='Screen.init', numLocals=0, funcMapping={}}
// function Screen.init with 0
(Screen.init)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=static 0}
//}

@Screen.0 // 1331
M=-1 // 1332

////PushInstruction("constant 0")
@SP // 1333
AM=M+1 // 1334
A=A-1 // 1335
M=0 // 1336
@RETURN // 1337
0;JMP // 1338

////FunctionInstruction{functionName='Plane.initialize', numLocals=1, funcMapping={}}
// function Plane.initialize with 1
(Plane.initialize)
@SP // 1339
AM=M+1 // 1340
A=A-1 // 1341
M=0 // 1342

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=static 0}
//}

@SP // 1343
AM=M+1 // 1344
A=A-1 // 1345
M=0 // 1346
// call Number.new
@6 // 1347
D=A // 1348
@14 // 1349
M=D // 1350
@Number.new // 1351
D=A // 1352
@13 // 1353
M=D // 1354
@Plane.initialize.ret.0 // 1355
D=A // 1356
@CALL // 1357
0;JMP // 1358
(Plane.initialize.ret.0)
@SP // 1359
AM=M+1 // 1360
A=A-1 // 1361
M=0 // 1362
// call Number.new
@6 // 1363
D=A // 1364
@14 // 1365
M=D // 1366
@Number.new // 1367
D=A // 1368
@13 // 1369
M=D // 1370
@Plane.initialize.ret.1 // 1371
D=A // 1372
@CALL // 1373
0;JMP // 1374
(Plane.initialize.ret.1)
@SP // 1375
AM=M+1 // 1376
A=A-1 // 1377
M=1 // 1378
// call Number.new
@6 // 1379
D=A // 1380
@14 // 1381
M=D // 1382
@Number.new // 1383
D=A // 1384
@13 // 1385
M=D // 1386
@Plane.initialize.ret.2 // 1387
D=A // 1388
@CALL // 1389
0;JMP // 1390
(Plane.initialize.ret.2)
// call Vec3.new
@8 // 1391
D=A // 1392
@14 // 1393
M=D // 1394
@Vec3.new // 1395
D=A // 1396
@13 // 1397
M=D // 1398
@Plane.initialize.ret.3 // 1399
D=A // 1400
@CALL // 1401
0;JMP // 1402
(Plane.initialize.ret.3)
@SP // 1403
AM=M-1 // 1404
D=M // 1405
@Plane.0 // 1406
M=D // 1407

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=static 1}
//}

@SP // 1408
AM=M+1 // 1409
A=A-1 // 1410
M=0 // 1411
// call Number.new
@6 // 1412
D=A // 1413
@14 // 1414
M=D // 1415
@Number.new // 1416
D=A // 1417
@13 // 1418
M=D // 1419
@Plane.initialize.ret.4 // 1420
D=A // 1421
@CALL // 1422
0;JMP // 1423
(Plane.initialize.ret.4)
@SP // 1424
AM=M+1 // 1425
A=A-1 // 1426
M=1 // 1427
// call Number.new
@6 // 1428
D=A // 1429
@14 // 1430
M=D // 1431
@Number.new // 1432
D=A // 1433
@13 // 1434
M=D // 1435
@Plane.initialize.ret.5 // 1436
D=A // 1437
@CALL // 1438
0;JMP // 1439
(Plane.initialize.ret.5)
@SP // 1440
AM=M+1 // 1441
A=A-1 // 1442
M=0 // 1443
// call Number.new
@6 // 1444
D=A // 1445
@14 // 1446
M=D // 1447
@Number.new // 1448
D=A // 1449
@13 // 1450
M=D // 1451
@Plane.initialize.ret.6 // 1452
D=A // 1453
@CALL // 1454
0;JMP // 1455
(Plane.initialize.ret.6)
// call Vec3.new
@8 // 1456
D=A // 1457
@14 // 1458
M=D // 1459
@Vec3.new // 1460
D=A // 1461
@13 // 1462
M=D // 1463
@Plane.initialize.ret.7 // 1464
D=A // 1465
@CALL // 1466
0;JMP // 1467
(Plane.initialize.ret.7)
@SP // 1468
AM=M-1 // 1469
D=M // 1470
@Plane.1 // 1471
M=D // 1472

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1000")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 2}
//}

@1000 // 1473
D=A // 1474
@SP // 1475
AM=M+1 // 1476
A=A-1 // 1477
M=D // 1478
// call Number.new
@6 // 1479
D=A // 1480
@14 // 1481
M=D // 1482
@Number.new // 1483
D=A // 1484
@13 // 1485
M=D // 1486
@Plane.initialize.ret.8 // 1487
D=A // 1488
@CALL // 1489
0;JMP // 1490
(Plane.initialize.ret.8)
@SP // 1491
AM=M-1 // 1492
D=M // 1493
@Plane.2 // 1494
M=D // 1495

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 3}
//}

@SP // 1496
AM=M+1 // 1497
A=A-1 // 1498
M=1 // 1499
// call Number.new
@6 // 1500
D=A // 1501
@14 // 1502
M=D // 1503
@Number.new // 1504
D=A // 1505
@13 // 1506
M=D // 1507
@Plane.initialize.ret.9 // 1508
D=A // 1509
@CALL // 1510
0;JMP // 1511
(Plane.initialize.ret.9)
@SP // 1512
AM=M-1 // 1513
D=M // 1514
@Plane.3 // 1515
M=D // 1516

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 90")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 4}
//}

@90 // 1517
D=A // 1518
@SP // 1519
AM=M+1 // 1520
A=A-1 // 1521
M=D // 1522
// call Number.new
@6 // 1523
D=A // 1524
@14 // 1525
M=D // 1526
@Number.new // 1527
D=A // 1528
@13 // 1529
M=D // 1530
@Plane.initialize.ret.10 // 1531
D=A // 1532
@CALL // 1533
0;JMP // 1534
(Plane.initialize.ret.10)
@SP // 1535
AM=M-1 // 1536
D=M // 1537
@Plane.4 // 1538
M=D // 1539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 5}
//}

@3 // 1540
D=A // 1541
@SP // 1542
AM=M+1 // 1543
A=A-1 // 1544
M=D // 1545
// call Number.new
@6 // 1546
D=A // 1547
@14 // 1548
M=D // 1549
@Number.new // 1550
D=A // 1551
@13 // 1552
M=D // 1553
@Plane.initialize.ret.11 // 1554
D=A // 1555
@CALL // 1556
0;JMP // 1557
(Plane.initialize.ret.11)
@SP // 1558
AM=M-1 // 1559
D=M // 1560
@Plane.5 // 1561
M=D // 1562

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 100")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@100 // 1563
D=A // 1564
@SP // 1565
AM=M+1 // 1566
A=A-1 // 1567
M=D // 1568
// call Number.new
@6 // 1569
D=A // 1570
@14 // 1571
M=D // 1572
@Number.new // 1573
D=A // 1574
@13 // 1575
M=D // 1576
@Plane.initialize.ret.12 // 1577
D=A // 1578
@CALL // 1579
0;JMP // 1580
(Plane.initialize.ret.12)
@SP // 1581
AM=M-1 // 1582
D=M // 1583
@LCL // 1584
A=M // 1585
M=D // 1586

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 4"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@Plane.4 // 1587
D=M // 1588
@SP // 1589
AM=M+1 // 1590
A=A-1 // 1591
M=D // 1592
@LCL // 1593
A=M // 1594
D=M // 1595
@SP // 1596
AM=M+1 // 1597
A=A-1 // 1598
M=D // 1599
// call Number.do_div
@7 // 1600
D=A // 1601
@14 // 1602
M=D // 1603
@Number.do_div // 1604
D=A // 1605
@13 // 1606
M=D // 1607
@Plane.initialize.ret.13 // 1608
D=A // 1609
@CALL // 1610
0;JMP // 1611
(Plane.initialize.ret.13)
@SP // 1612
M=M-1 // 1613

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 5"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@Plane.5 // 1614
D=M // 1615
@SP // 1616
AM=M+1 // 1617
A=A-1 // 1618
M=D // 1619
@LCL // 1620
A=M // 1621
D=M // 1622
@SP // 1623
AM=M+1 // 1624
A=A-1 // 1625
M=D // 1626
// call Number.do_div
@7 // 1627
D=A // 1628
@14 // 1629
M=D // 1630
@Number.do_div // 1631
D=A // 1632
@13 // 1633
M=D // 1634
@Plane.initialize.ret.14 // 1635
D=A // 1636
@CALL // 1637
0;JMP // 1638
(Plane.initialize.ret.14)
@SP // 1639
M=M-1 // 1640

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1641
A=M // 1642
D=M // 1643
@SP // 1644
AM=M+1 // 1645
A=A-1 // 1646
M=D // 1647
// call Number.dispose
@6 // 1648
D=A // 1649
@14 // 1650
M=D // 1651
@Number.dispose // 1652
D=A // 1653
@13 // 1654
M=D // 1655
@Plane.initialize.ret.15 // 1656
D=A // 1657
@CALL // 1658
0;JMP // 1659
(Plane.initialize.ret.15)
@SP // 1660
M=M-1 // 1661

////PushInstruction("constant 0")
@SP // 1662
AM=M+1 // 1663
A=A-1 // 1664
M=0 // 1665
@RETURN // 1666
0;JMP // 1667

////FunctionInstruction{functionName='Array.dispose', numLocals=0, funcMapping={}}
// function Array.dispose with 0
(Array.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1668
A=M // 1669
D=M // 1670
@3 // 1671
M=D // 1672

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 1673
D=M // 1674
@SP // 1675
AM=M+1 // 1676
A=A-1 // 1677
M=D // 1678
// call Memory.deAlloc
@6 // 1679
D=A // 1680
@14 // 1681
M=D // 1682
@Memory.deAlloc // 1683
D=A // 1684
@13 // 1685
M=D // 1686
@Array.dispose.ret.0 // 1687
D=A // 1688
@CALL // 1689
0;JMP // 1690
(Array.dispose.ret.0)
@SP // 1691
M=M-1 // 1692

////PushInstruction("constant 0")
@SP // 1693
AM=M+1 // 1694
A=A-1 // 1695
M=0 // 1696
@RETURN // 1697
0;JMP // 1698

////FunctionInstruction{functionName='Math.abs', numLocals=0, funcMapping={}}
// function Math.abs with 0
(Math.abs)

////CallGroup{pushes=[PushInstruction("argument 0"), UnaryPushGroup(    PushInstruction("argument 0"),
//NEG)], call=CallInstruction{Math.max}}
@ARG // 1699
A=M // 1700
D=M // 1701
@SP // 1702
AM=M+1 // 1703
A=A-1 // 1704
M=D // 1705
@ARG // 1706
A=M // 1707
D=M // 1708
@SP // 1709
AM=M+1 // 1710
A=A-1 // 1711
M=D // 1712
@SP // 1713
A=M-1 // 1714
M=-D // 1715
// call Math.max
@7 // 1716
D=A // 1717
@14 // 1718
M=D // 1719
@Math.max // 1720
D=A // 1721
@13 // 1722
M=D // 1723
@Math.abs.ret.0 // 1724
D=A // 1725
@CALL // 1726
0;JMP // 1727
(Math.abs.ret.0)
@RETURN // 1728
0;JMP // 1729

////FunctionInstruction{functionName='Plane.new', numLocals=0, funcMapping={Plane.initialize=16}}
// function Plane.new with 0
(Plane.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@4 // 1730
D=A // 1731
@SP // 1732
AM=M+1 // 1733
A=A-1 // 1734
M=D // 1735
// call Memory.alloc
@6 // 1736
D=A // 1737
@14 // 1738
M=D // 1739
@Memory.alloc // 1740
D=A // 1741
@13 // 1742
M=D // 1743
@Plane.new.ret.0 // 1744
D=A // 1745
@CALL // 1746
0;JMP // 1747
(Plane.new.ret.0)
@SP // 1748
AM=M-1 // 1749
D=M // 1750
@3 // 1751
M=D // 1752

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 1753
A=M // 1754
D=M // 1755
@THIS // 1756
A=M // 1757
M=D // 1758

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 1759
A=M+1 // 1760
D=M // 1761
@THIS // 1762
A=M+1 // 1763
M=D // 1764

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 1765
A=M+1 // 1766
A=A+1 // 1767
D=M // 1768
@THIS // 1769
A=M+1 // 1770
A=A+1 // 1771
M=D // 1772

////PushPopPair {
//  push: PushInstruction("argument 3")
//  pop:  PopInstruction{address=this 3}
//}

@ARG // 1773
A=M+1 // 1774
A=A+1 // 1775
A=A+1 // 1776
D=M // 1777
@THIS // 1778
A=M+1 // 1779
A=A+1 // 1780
A=A+1 // 1781
M=D // 1782

////PushInstruction("pointer 0")
@3 // 1783
D=M // 1784
@SP // 1785
AM=M+1 // 1786
A=A-1 // 1787
M=D // 1788
@RETURN // 1789
0;JMP // 1790

////FunctionInstruction{functionName='Array.new', numLocals=0, funcMapping={Array.dispose=1}}
// function Array.new with 0
(Array.new)

////CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Memory.alloc}}
@ARG // 1791
A=M // 1792
D=M // 1793
@SP // 1794
AM=M+1 // 1795
A=A-1 // 1796
M=D // 1797
// call Memory.alloc
@6 // 1798
D=A // 1799
@14 // 1800
M=D // 1801
@Memory.alloc // 1802
D=A // 1803
@13 // 1804
M=D // 1805
@Array.new.ret.0 // 1806
D=A // 1807
@CALL // 1808
0;JMP // 1809
(Array.new.ret.0)
@RETURN // 1810
0;JMP // 1811

////FunctionInstruction{functionName='Number.do_mul', numLocals=0, funcMapping={Number.clone=2}}
// function Number.do_mul with 0
(Number.do_mul)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1812
A=M // 1813
D=M // 1814
@3 // 1815
M=D // 1816

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}},
//    right:
//CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.is_zero}},
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Number.do_mul$IF_TRUE1}}
@THIS // 1817
A=M // 1818
D=M // 1819
@SP // 1820
AM=M+1 // 1821
A=A-1 // 1822
M=D // 1823
// call Int32.is_zero
@6 // 1824
D=A // 1825
@14 // 1826
M=D // 1827
@Int32.is_zero // 1828
D=A // 1829
@13 // 1830
M=D // 1831
@Number.do_mul.ret.0 // 1832
D=A // 1833
@CALL // 1834
0;JMP // 1835
(Number.do_mul.ret.0)
@ARG // 1836
A=M+1 // 1837
D=M // 1838
@SP // 1839
AM=M+1 // 1840
A=A-1 // 1841
M=D // 1842
// call Number.is_zero
@6 // 1843
D=A // 1844
@14 // 1845
M=D // 1846
@Number.is_zero // 1847
D=A // 1848
@13 // 1849
M=D // 1850
@Number.do_mul.ret.1 // 1851
D=A // 1852
@CALL // 1853
0;JMP // 1854
(Number.do_mul.ret.1)
@SP // 1855
AM=M-1 // 1856
D=M // 1857
@SP // 1858
AM=M-1 // 1859
D=D|M // 1860
@Number.do_mul$IF_TRUE1 // 1861
D;JNE // 1862

////GotoInstruction{label='Number.do_mul$IF_FALSE1}
// goto Number.do_mul$IF_FALSE1
@Number.do_mul$IF_FALSE1 // 1863
0;JMP // 1864

////LabelInstruction{label='Number.do_mul$IF_TRUE1}
// label Number.do_mul$IF_TRUE1
(Number.do_mul$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_zero}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1865
A=M // 1866
D=M // 1867
@SP // 1868
AM=M+1 // 1869
A=A-1 // 1870
M=D // 1871
// call Int32.do_zero
@6 // 1872
D=A // 1873
@14 // 1874
M=D // 1875
@Int32.do_zero // 1876
D=A // 1877
@13 // 1878
M=D // 1879
@Number.do_mul.ret.2 // 1880
D=A // 1881
@CALL // 1882
0;JMP // 1883
(Number.do_mul.ret.2)
@SP // 1884
M=M-1 // 1885

////PushInstruction("constant 0")
@SP // 1886
AM=M+1 // 1887
A=A-1 // 1888
M=0 // 1889
@RETURN // 1890
0;JMP // 1891

////LabelInstruction{label='Number.do_mul$IF_FALSE1}
// label Number.do_mul$IF_FALSE1
(Number.do_mul$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}, PushInstruction("static 0")], call=CallInstruction{Int32.do_mul_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1892
A=M // 1893
D=M // 1894
@SP // 1895
AM=M+1 // 1896
A=A-1 // 1897
M=D // 1898
@ARG // 1899
A=M+1 // 1900
D=M // 1901
@SP // 1902
AM=M+1 // 1903
A=A-1 // 1904
M=D // 1905
// call Number.getV
@6 // 1906
D=A // 1907
@14 // 1908
M=D // 1909
@Number.getV // 1910
D=A // 1911
@13 // 1912
M=D // 1913
@Number.do_mul.ret.3 // 1914
D=A // 1915
@CALL // 1916
0;JMP // 1917
(Number.do_mul.ret.3)
@Number.0 // 1918
D=M // 1919
@SP // 1920
AM=M+1 // 1921
A=A-1 // 1922
M=D // 1923
// call Int32.do_mul_right_shift_bytes
@8 // 1924
D=A // 1925
@14 // 1926
M=D // 1927
@Int32.do_mul_right_shift_bytes // 1928
D=A // 1929
@13 // 1930
M=D // 1931
@Number.do_mul.ret.4 // 1932
D=A // 1933
@CALL // 1934
0;JMP // 1935
(Number.do_mul.ret.4)
@SP // 1936
M=M-1 // 1937

////PushInstruction("constant 0")
@SP // 1938
AM=M+1 // 1939
A=A-1 // 1940
M=0 // 1941
@RETURN // 1942
0;JMP // 1943

////FunctionInstruction{functionName='Output.create', numLocals=1, funcMapping={Output.println=0, Output.getMap=0}}
// function Output.create with 1
(Output.create)
@SP // 1944
AM=M+1 // 1945
A=A-1 // 1946
M=0 // 1947

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 1948
D=A // 1949
@SP // 1950
AM=M+1 // 1951
A=A-1 // 1952
M=D // 1953
// call Array.new
@6 // 1954
D=A // 1955
@14 // 1956
M=D // 1957
@Array.new // 1958
D=A // 1959
@13 // 1960
M=D // 1961
@Output.create.ret.0 // 1962
D=A // 1963
@CALL // 1964
0;JMP // 1965
(Output.create.ret.0)
@SP // 1966
AM=M-1 // 1967
D=M // 1968
@LCL // 1969
A=M // 1970
M=D // 1971

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)}
@Output.0 // 1972
D=M // 1973
@SP // 1974
AM=M+1 // 1975
A=A-1 // 1976
M=D // 1977
@ARG // 1978
A=M // 1979
D=M // 1980
@SP // 1981
AM=M-1 // 1982
D=D+M // 1983
@SP // 1984
AM=M+1 // 1985
A=A-1 // 1986
M=D // 1987
@LCL // 1988
A=M // 1989
D=M // 1990
@SP // 1991
AM=M-1 // 1992
A=M // 1993
M=D // 1994

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 1995
A=M // 1996
D=M // 1997
@SP // 1998
AM=M+1 // 1999
A=A-1 // 2000
M=D // 2001
@ARG // 2002
A=M+1 // 2003
D=M // 2004
@SP // 2005
AM=M-1 // 2006
A=M // 2007
M=D // 2008

////PushWriter{source=PushInstruction("argument 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 2009
A=M // 2010
D=M // 2011
@SP // 2012
AM=M+1 // 2013
A=A-1 // 2014
M=D+1 // 2015
@ARG // 2016
A=M+1 // 2017
A=A+1 // 2018
D=M // 2019
@SP // 2020
AM=M-1 // 2021
A=M // 2022
M=D // 2023

////PushWriter{source=PushInstruction("argument 3"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 2024
A=M // 2025
D=M // 2026
@2 // 2027
D=D+A // 2028
@SP // 2029
AM=M+1 // 2030
A=A-1 // 2031
M=D // 2032
@ARG // 2033
A=M+1 // 2034
A=A+1 // 2035
A=A+1 // 2036
D=M // 2037
@SP // 2038
AM=M-1 // 2039
A=M // 2040
M=D // 2041

////PushWriter{source=PushInstruction("argument 4"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 2042
A=M // 2043
D=M // 2044
@3 // 2045
D=D+A // 2046
@SP // 2047
AM=M+1 // 2048
A=A-1 // 2049
M=D // 2050
@ARG // 2051
D=M // 2052
@4 // 2053
A=D+A // 2054
D=M // 2055
@SP // 2056
AM=M-1 // 2057
A=M // 2058
M=D // 2059

////PushWriter{source=PushInstruction("argument 5"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 2060
A=M // 2061
D=M // 2062
@4 // 2063
D=D+A // 2064
@SP // 2065
AM=M+1 // 2066
A=A-1 // 2067
M=D // 2068
@ARG // 2069
D=M // 2070
@5 // 2071
A=D+A // 2072
D=M // 2073
@SP // 2074
AM=M-1 // 2075
A=M // 2076
M=D // 2077

////PushWriter{source=PushInstruction("argument 6"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 2078
A=M // 2079
D=M // 2080
@5 // 2081
D=D+A // 2082
@SP // 2083
AM=M+1 // 2084
A=A-1 // 2085
M=D // 2086
@ARG // 2087
D=M // 2088
@6 // 2089
A=D+A // 2090
D=M // 2091
@SP // 2092
AM=M-1 // 2093
A=M // 2094
M=D // 2095

////PushWriter{source=PushInstruction("argument 7"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 2096
A=M // 2097
D=M // 2098
@6 // 2099
D=D+A // 2100
@SP // 2101
AM=M+1 // 2102
A=A-1 // 2103
M=D // 2104
@ARG // 2105
D=M // 2106
@7 // 2107
A=D+A // 2108
D=M // 2109
@SP // 2110
AM=M-1 // 2111
A=M // 2112
M=D // 2113

////PushWriter{source=PushInstruction("argument 8"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 2114
A=M // 2115
D=M // 2116
@7 // 2117
D=D+A // 2118
@SP // 2119
AM=M+1 // 2120
A=A-1 // 2121
M=D // 2122
@ARG // 2123
D=M // 2124
@8 // 2125
A=D+A // 2126
D=M // 2127
@SP // 2128
AM=M-1 // 2129
A=M // 2130
M=D // 2131

////PushWriter{source=PushInstruction("argument 9"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 8"),
//    binaryOp: "ADD"
//)}
@LCL // 2132
A=M // 2133
D=M // 2134
@8 // 2135
D=D+A // 2136
@SP // 2137
AM=M+1 // 2138
A=A-1 // 2139
M=D // 2140
@ARG // 2141
D=M // 2142
@9 // 2143
A=D+A // 2144
D=M // 2145
@SP // 2146
AM=M-1 // 2147
A=M // 2148
M=D // 2149

////PushWriter{source=PushInstruction("argument 10"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 9"),
//    binaryOp: "ADD"
//)}
@LCL // 2150
A=M // 2151
D=M // 2152
@9 // 2153
D=D+A // 2154
@SP // 2155
AM=M+1 // 2156
A=A-1 // 2157
M=D // 2158
@ARG // 2159
D=M // 2160
@10 // 2161
A=D+A // 2162
D=M // 2163
@SP // 2164
AM=M-1 // 2165
A=M // 2166
M=D // 2167

////PushWriter{source=PushInstruction("argument 11"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 10"),
//    binaryOp: "ADD"
//)}
@LCL // 2168
A=M // 2169
D=M // 2170
@10 // 2171
D=D+A // 2172
@SP // 2173
AM=M+1 // 2174
A=A-1 // 2175
M=D // 2176
@ARG // 2177
D=M // 2178
@11 // 2179
A=D+A // 2180
D=M // 2181
@SP // 2182
AM=M-1 // 2183
A=M // 2184
M=D // 2185

////PushInstruction("constant 0")
@SP // 2186
AM=M+1 // 2187
A=A-1 // 2188
M=0 // 2189
@RETURN // 2190
0;JMP // 2191

////FunctionInstruction{functionName='Int32.clone', numLocals=1, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.clone with 1
(Int32.clone)
@SP // 2192
AM=M+1 // 2193
A=A-1 // 2194
M=0 // 2195

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2196
A=M // 2197
D=M // 2198
@3 // 2199
M=D // 2200

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 0}
//}

@4 // 2201
D=A // 2202
@SP // 2203
AM=M+1 // 2204
A=A-1 // 2205
M=D // 2206
// call Array.new
@6 // 2207
D=A // 2208
@14 // 2209
M=D // 2210
@Array.new // 2211
D=A // 2212
@13 // 2213
M=D // 2214
@Int32.clone.ret.0 // 2215
D=A // 2216
@CALL // 2217
0;JMP // 2218
(Int32.clone.ret.0)
@SP // 2219
AM=M-1 // 2220
D=M // 2221
@LCL // 2222
A=M // 2223
M=D // 2224

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 2225
A=M // 2226
D=M // 2227
@SP // 2228
AM=M+1 // 2229
A=A-1 // 2230
M=D // 2231
@THIS // 2232
A=M // 2233
D=M // 2234
@0 // 2235
A=D+A // 2236
D=M // 2237
@SP // 2238
AM=M-1 // 2239
A=M // 2240
M=D // 2241

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 2242
A=M // 2243
D=M // 2244
@SP // 2245
AM=M+1 // 2246
A=A-1 // 2247
M=D+1 // 2248
@THIS // 2249
A=M // 2250
D=M // 2251
A=D+1 // 2252
D=M // 2253
@SP // 2254
AM=M-1 // 2255
A=M // 2256
M=D // 2257

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 2258
A=M // 2259
D=M // 2260
@2 // 2261
D=D+A // 2262
@SP // 2263
AM=M+1 // 2264
A=A-1 // 2265
M=D // 2266
@THIS // 2267
A=M // 2268
D=M // 2269
@2 // 2270
A=D+A // 2271
D=M // 2272
@SP // 2273
AM=M-1 // 2274
A=M // 2275
M=D // 2276

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 2277
A=M // 2278
D=M // 2279
@3 // 2280
D=D+A // 2281
@SP // 2282
AM=M+1 // 2283
A=A-1 // 2284
M=D // 2285
@THIS // 2286
A=M // 2287
D=M // 2288
@3 // 2289
A=D+A // 2290
D=M // 2291
@SP // 2292
AM=M-1 // 2293
A=M // 2294
M=D // 2295

////CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.new_from_parts}}
@LCL // 2296
A=M // 2297
D=M // 2298
@SP // 2299
AM=M+1 // 2300
A=A-1 // 2301
M=D // 2302
// call Int32.new_from_parts
@6 // 2303
D=A // 2304
@14 // 2305
M=D // 2306
@Int32.new_from_parts // 2307
D=A // 2308
@13 // 2309
M=D // 2310
@Int32.clone.ret.1 // 2311
D=A // 2312
@CALL // 2313
0;JMP // 2314
(Int32.clone.ret.1)
@RETURN // 2315
0;JMP // 2316

////FunctionInstruction{functionName='String.length', numLocals=0, funcMapping={String.dispose=1}}
// function String.length with 0
(String.length)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2317
A=M // 2318
D=M // 2319
@3 // 2320
M=D // 2321

////PushInstruction("this 1")
@THIS // 2322
A=M+1 // 2323
D=M // 2324
@SP // 2325
AM=M+1 // 2326
A=A-1 // 2327
M=D // 2328
@RETURN // 2329
0;JMP // 2330

////FunctionInstruction{functionName='Memory.getBinIndex', numLocals=1, funcMapping={Memory.get_best_fit=0}}
// function Memory.getBinIndex with 1
(Memory.getBinIndex)
@SP // 2331
AM=M+1 // 2332
A=A-1 // 2333
M=0 // 2334

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2335
A=M // 2336
M=0 // 2337

////LabelInstruction{label='Memory.getBinIndex_WHILE_EXP1}
// label Memory.getBinIndex_WHILE_EXP1
(Memory.getBinIndex_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("constant 7"),
//                binaryOp: "LT"
//            ),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("constant 2048"),
//                                    right:
//                                        PushInstruction("local 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.getBinIndex_WHILE_END1}}
@Memory.getBinIndex.LT.11 // 2338
D=A // 2339
@SP // 2340
AM=M+1 // 2341
A=A-1 // 2342
M=D // 2343
@LCL // 2344
A=M // 2345
D=M // 2346
@7 // 2347
D=D-A // 2348
@DO_LT // 2349
0;JMP // 2350
(Memory.getBinIndex.LT.11)
@SP // 2351
AM=M+1 // 2352
A=A-1 // 2353
M=D // 2354
@Memory.getBinIndex.EQ.12 // 2355
D=A // 2356
@SP // 2357
AM=M+1 // 2358
A=A-1 // 2359
M=D // 2360
@LCL // 2361
A=M // 2362
D=M // 2363
@2048 // 2364
A=D+A // 2365
D=M // 2366
@DO_EQ // 2367
0;JMP // 2368
(Memory.getBinIndex.EQ.12)
D=!D // 2369
@SP // 2370
AM=M-1 // 2371
D=D&M // 2372
D=!D // 2373
@Memory.getBinIndex_WHILE_END1 // 2374
D;JNE // 2375

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 0"),
//        right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.getBinIndex$IF_TRUE1}}
@Memory.getBinIndex.GT.13 // 2376
D=A // 2377
@SP // 2378
AM=M+1 // 2379
A=A-1 // 2380
M=D // 2381
@ARG // 2382
A=M // 2383
D=M // 2384
@SP // 2385
AM=M+1 // 2386
A=A-1 // 2387
M=D // 2388
@LCL // 2389
A=M // 2390
D=M // 2391
@SP // 2392
AM=M+1 // 2393
A=A-1 // 2394
M=D+1 // 2395
@16 // 2396
D=A // 2397
@SP // 2398
AM=M+1 // 2399
A=A-1 // 2400
M=D // 2401
// call Math.multiply
@7 // 2402
D=A // 2403
@14 // 2404
M=D // 2405
@Math.multiply // 2406
D=A // 2407
@13 // 2408
M=D // 2409
@Memory.getBinIndex.ret.0 // 2410
D=A // 2411
@CALL // 2412
0;JMP // 2413
(Memory.getBinIndex.ret.0)
@SP // 2414
AM=M-1 // 2415
D=M // 2416
@SP // 2417
AM=M-1 // 2418
D=M-D // 2419
@DO_GT // 2420
0;JMP // 2421
(Memory.getBinIndex.GT.13)
D=!D // 2422
@Memory.getBinIndex$IF_TRUE1 // 2423
D;JNE // 2424

////GotoInstruction{label='Memory.getBinIndex$IF_FALSE1}
// goto Memory.getBinIndex$IF_FALSE1
@Memory.getBinIndex$IF_FALSE1 // 2425
0;JMP // 2426

////LabelInstruction{label='Memory.getBinIndex$IF_TRUE1}
// label Memory.getBinIndex$IF_TRUE1
(Memory.getBinIndex$IF_TRUE1)

////PushInstruction("local 0")
@LCL // 2427
A=M // 2428
D=M // 2429
@SP // 2430
AM=M+1 // 2431
A=A-1 // 2432
M=D // 2433
@RETURN // 2434
0;JMP // 2435

////LabelInstruction{label='Memory.getBinIndex$IF_FALSE1}
// label Memory.getBinIndex$IF_FALSE1
(Memory.getBinIndex$IF_FALSE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2436
A=M // 2437
M=M+1 // 2438

////GotoInstruction{label='Memory.getBinIndex_WHILE_EXP1}
// goto Memory.getBinIndex_WHILE_EXP1
@Memory.getBinIndex_WHILE_EXP1 // 2439
0;JMP // 2440

////LabelInstruction{label='Memory.getBinIndex_WHILE_END1}
// label Memory.getBinIndex_WHILE_END1
(Memory.getBinIndex_WHILE_END1)

////BinaryPushGroup(
//    left:
//        PushInstruction("constant 7"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
@6 // 2441
D=A // 2442
@SP // 2443
AM=M+1 // 2444
A=A-1 // 2445
M=D // 2446
@7 // 2447
D=A // 2448
@SP // 2449
AM=M+1 // 2450
A=A-1 // 2451
M=D-1 // 2452
@RETURN // 2453
0;JMP // 2454

////FunctionInstruction{functionName='Sphere.new', numLocals=0, funcMapping={}}
// function Sphere.new with 0
(Sphere.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 2455
D=A // 2456
@SP // 2457
AM=M+1 // 2458
A=A-1 // 2459
M=D // 2460
// call Memory.alloc
@6 // 2461
D=A // 2462
@14 // 2463
M=D // 2464
@Memory.alloc // 2465
D=A // 2466
@13 // 2467
M=D // 2468
@Sphere.new.ret.0 // 2469
D=A // 2470
@CALL // 2471
0;JMP // 2472
(Sphere.new.ret.0)
@SP // 2473
AM=M-1 // 2474
D=M // 2475
@3 // 2476
M=D // 2477

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 2478
A=M // 2479
D=M // 2480
@THIS // 2481
A=M // 2482
M=D // 2483

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 2484
A=M+1 // 2485
D=M // 2486
@THIS // 2487
A=M+1 // 2488
M=D // 2489

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 2490
A=M+1 // 2491
A=A+1 // 2492
D=M // 2493
@THIS // 2494
A=M+1 // 2495
A=A+1 // 2496
M=D // 2497

////PushInstruction("pointer 0")
@3 // 2498
D=M // 2499
@SP // 2500
AM=M+1 // 2501
A=A-1 // 2502
M=D // 2503
@RETURN // 2504
0;JMP // 2505

////FunctionInstruction{functionName='Number.cmp', numLocals=0, funcMapping={Number.clone=2, Number.do_mul=5}}
// function Number.cmp with 0
(Number.cmp)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2506
A=M // 2507
D=M // 2508
@3 // 2509
M=D // 2510

////CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.cmp}}
@THIS // 2511
A=M // 2512
D=M // 2513
@SP // 2514
AM=M+1 // 2515
A=A-1 // 2516
M=D // 2517
@ARG // 2518
A=M+1 // 2519
D=M // 2520
@SP // 2521
AM=M+1 // 2522
A=A-1 // 2523
M=D // 2524
// call Number.getV
@6 // 2525
D=A // 2526
@14 // 2527
M=D // 2528
@Number.getV // 2529
D=A // 2530
@13 // 2531
M=D // 2532
@Number.cmp.ret.0 // 2533
D=A // 2534
@CALL // 2535
0;JMP // 2536
(Number.cmp.ret.0)
// call Int32.cmp
@7 // 2537
D=A // 2538
@14 // 2539
M=D // 2540
@Int32.cmp // 2541
D=A // 2542
@13 // 2543
M=D // 2544
@Number.cmp.ret.1 // 2545
D=A // 2546
@CALL // 2547
0;JMP // 2548
(Number.cmp.ret.1)
@RETURN // 2549
0;JMP // 2550

////FunctionInstruction{functionName='Int32.do_abs', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_abs with 0
(Int32.do_abs)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2551
A=M // 2552
D=M // 2553
@3 // 2554
M=D // 2555

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_abs$IF_TRUE1}}
@3 // 2556
D=M // 2557
@SP // 2558
AM=M+1 // 2559
A=A-1 // 2560
M=D // 2561
// call Int32.is_negative
@6 // 2562
D=A // 2563
@14 // 2564
M=D // 2565
@Int32.is_negative // 2566
D=A // 2567
@13 // 2568
M=D // 2569
@Int32.do_abs.ret.0 // 2570
D=A // 2571
@CALL // 2572
0;JMP // 2573
(Int32.do_abs.ret.0)
@SP // 2574
AM=M-1 // 2575
D=M // 2576
@Int32.do_abs$IF_TRUE1 // 2577
D;JNE // 2578

////GotoInstruction{label='Int32.do_abs$IF_FALSE1}
// goto Int32.do_abs$IF_FALSE1
@Int32.do_abs$IF_FALSE1 // 2579
0;JMP // 2580

////LabelInstruction{label='Int32.do_abs$IF_TRUE1}
// label Int32.do_abs$IF_TRUE1
(Int32.do_abs$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2581
D=M // 2582
@SP // 2583
AM=M+1 // 2584
A=A-1 // 2585
M=D // 2586
// call Int32.do_neg
@6 // 2587
D=A // 2588
@14 // 2589
M=D // 2590
@Int32.do_neg // 2591
D=A // 2592
@13 // 2593
M=D // 2594
@Int32.do_abs.ret.1 // 2595
D=A // 2596
@CALL // 2597
0;JMP // 2598
(Int32.do_abs.ret.1)
@SP // 2599
M=M-1 // 2600

////LabelInstruction{label='Int32.do_abs$IF_FALSE1}
// label Int32.do_abs$IF_FALSE1
(Int32.do_abs$IF_FALSE1)

////PushInstruction("constant 0")
@SP // 2601
AM=M+1 // 2602
A=A-1 // 2603
M=0 // 2604
@RETURN // 2605
0;JMP // 2606

////FunctionInstruction{functionName='Int32.do_right_shift_bytes', numLocals=1, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_right_shift_bytes with 1
(Int32.do_right_shift_bytes)
@SP // 2607
AM=M+1 // 2608
A=A-1 // 2609
M=0 // 2610

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2611
A=M // 2612
D=M // 2613
@3 // 2614
M=D // 2615

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE1}}
@Int32.do_right_shift_bytes.LT.14 // 2616
D=A // 2617
@SP // 2618
AM=M+1 // 2619
A=A-1 // 2620
M=D // 2621
@ARG // 2622
A=M+1 // 2623
D=M // 2624
@DO_LT // 2625
0;JMP // 2626
(Int32.do_right_shift_bytes.LT.14)
@SP // 2627
AM=M+1 // 2628
A=A-1 // 2629
M=D // 2630
@Int32.do_right_shift_bytes.EQ.15 // 2631
D=A // 2632
@SP // 2633
AM=M+1 // 2634
A=A-1 // 2635
M=D // 2636
@ARG // 2637
A=M+1 // 2638
D=M // 2639
@DO_EQ // 2640
0;JMP // 2641
(Int32.do_right_shift_bytes.EQ.15)
@SP // 2642
AM=M-1 // 2643
D=D|M // 2644
@Int32.do_right_shift_bytes$IF_TRUE1 // 2645
D;JNE // 2646

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE1}
// goto Int32.do_right_shift_bytes$IF_FALSE1
@Int32.do_right_shift_bytes$IF_FALSE1 // 2647
0;JMP // 2648

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE1}
// label Int32.do_right_shift_bytes$IF_TRUE1
(Int32.do_right_shift_bytes$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 2649
AM=M+1 // 2650
A=A-1 // 2651
M=0 // 2652
@RETURN // 2653
0;JMP // 2654

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE1}
// label Int32.do_right_shift_bytes$IF_FALSE1
(Int32.do_right_shift_bytes$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 2655
D=M // 2656
@SP // 2657
AM=M+1 // 2658
A=A-1 // 2659
M=D // 2660
// call Int32.is_negative
@6 // 2661
D=A // 2662
@14 // 2663
M=D // 2664
@Int32.is_negative // 2665
D=A // 2666
@13 // 2667
M=D // 2668
@Int32.do_right_shift_bytes.ret.0 // 2669
D=A // 2670
@CALL // 2671
0;JMP // 2672
(Int32.do_right_shift_bytes.ret.0)
@SP // 2673
AM=M-1 // 2674
D=M // 2675
@LCL // 2676
A=M // 2677
M=D // 2678

////ConditionalGroup{push=PushInstruction("local 0"), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE2}}
@LCL // 2679
A=M // 2680
D=M // 2681
@Int32.do_right_shift_bytes$IF_TRUE2 // 2682
D;JNE // 2683

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE2}
// goto Int32.do_right_shift_bytes$IF_FALSE2
@Int32.do_right_shift_bytes$IF_FALSE2 // 2684
0;JMP // 2685

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE2}
// label Int32.do_right_shift_bytes$IF_TRUE2
(Int32.do_right_shift_bytes$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2686
D=M // 2687
@SP // 2688
AM=M+1 // 2689
A=A-1 // 2690
M=D // 2691
// call Int32.do_neg
@6 // 2692
D=A // 2693
@14 // 2694
M=D // 2695
@Int32.do_neg // 2696
D=A // 2697
@13 // 2698
M=D // 2699
@Int32.do_right_shift_bytes.ret.1 // 2700
D=A // 2701
@CALL // 2702
0;JMP // 2703
(Int32.do_right_shift_bytes.ret.1)
@SP // 2704
M=M-1 // 2705

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE2}
// label Int32.do_right_shift_bytes$IF_FALSE2
(Int32.do_right_shift_bytes$IF_FALSE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 2706
A=M // 2707
D=M // 2708
@SP // 2709
AM=M+1 // 2710
A=A-1 // 2711
M=D // 2712
@THIS // 2713
A=M // 2714
D=M // 2715
@SP // 2716
AM=M+1 // 2717
A=A-1 // 2718
M=D // 2719
@ARG // 2720
A=M+1 // 2721
D=M // 2722
@SP // 2723
AM=M-1 // 2724
A=D+M // 2725
D=M // 2726
@SP // 2727
AM=M-1 // 2728
A=M // 2729
M=D // 2730

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE3}}
@Int32.do_right_shift_bytes.LT.16 // 2731
D=A // 2732
@SP // 2733
AM=M+1 // 2734
A=A-1 // 2735
M=D // 2736
@ARG // 2737
A=M+1 // 2738
D=M // 2739
@3 // 2740
D=D-A // 2741
@DO_LT // 2742
0;JMP // 2743
(Int32.do_right_shift_bytes.LT.16)
@Int32.do_right_shift_bytes$IF_TRUE3 // 2744
D;JNE // 2745

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE3}
// goto Int32.do_right_shift_bytes$IF_FALSE3
@Int32.do_right_shift_bytes$IF_FALSE3 // 2746
0;JMP // 2747

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE3}
// label Int32.do_right_shift_bytes$IF_TRUE3
(Int32.do_right_shift_bytes$IF_TRUE3)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 2748
A=M // 2749
D=M // 2750
@SP // 2751
AM=M+1 // 2752
A=A-1 // 2753
M=D+1 // 2754
@THIS // 2755
A=M // 2756
D=M // 2757
@SP // 2758
AM=M+1 // 2759
A=A-1 // 2760
M=D // 2761
@ARG // 2762
A=M+1 // 2763
D=M // 2764
D=D+1 // 2765
@SP // 2766
AM=M-1 // 2767
A=D+M // 2768
D=M // 2769
@SP // 2770
AM=M-1 // 2771
A=M // 2772
M=D // 2773

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END3}
// goto Int32.do_right_shift_bytes$IF_END3
@Int32.do_right_shift_bytes$IF_END3 // 2774
0;JMP // 2775

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE3}
// label Int32.do_right_shift_bytes$IF_FALSE3
(Int32.do_right_shift_bytes$IF_FALSE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 2776
A=M // 2777
D=M // 2778
@SP // 2779
AM=M+1 // 2780
A=A-1 // 2781
M=D+1 // 2782
D=0 // 2783
@SP // 2784
AM=M-1 // 2785
A=M // 2786
M=D // 2787

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END3}
// label Int32.do_right_shift_bytes$IF_END3
(Int32.do_right_shift_bytes$IF_END3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE4}}
@Int32.do_right_shift_bytes.LT.17 // 2788
D=A // 2789
@SP // 2790
AM=M+1 // 2791
A=A-1 // 2792
M=D // 2793
@ARG // 2794
A=M+1 // 2795
D=M // 2796
@2 // 2797
D=D-A // 2798
@DO_LT // 2799
0;JMP // 2800
(Int32.do_right_shift_bytes.LT.17)
@Int32.do_right_shift_bytes$IF_TRUE4 // 2801
D;JNE // 2802

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE4}
// goto Int32.do_right_shift_bytes$IF_FALSE4
@Int32.do_right_shift_bytes$IF_FALSE4 // 2803
0;JMP // 2804

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE4}
// label Int32.do_right_shift_bytes$IF_TRUE4
(Int32.do_right_shift_bytes$IF_TRUE4)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 2805
A=M // 2806
D=M // 2807
@2 // 2808
D=D+A // 2809
@SP // 2810
AM=M+1 // 2811
A=A-1 // 2812
M=D // 2813
@THIS // 2814
A=M // 2815
D=M // 2816
@SP // 2817
AM=M+1 // 2818
A=A-1 // 2819
M=D // 2820
@ARG // 2821
A=M+1 // 2822
D=M // 2823
@2 // 2824
D=D+A // 2825
@SP // 2826
AM=M-1 // 2827
A=D+M // 2828
D=M // 2829
@SP // 2830
AM=M-1 // 2831
A=M // 2832
M=D // 2833

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END4}
// goto Int32.do_right_shift_bytes$IF_END4
@Int32.do_right_shift_bytes$IF_END4 // 2834
0;JMP // 2835

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE4}
// label Int32.do_right_shift_bytes$IF_FALSE4
(Int32.do_right_shift_bytes$IF_FALSE4)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 2836
A=M // 2837
D=M // 2838
@2 // 2839
D=D+A // 2840
@SP // 2841
AM=M+1 // 2842
A=A-1 // 2843
M=D // 2844
D=0 // 2845
@SP // 2846
AM=M-1 // 2847
A=M // 2848
M=D // 2849

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END4}
// label Int32.do_right_shift_bytes$IF_END4
(Int32.do_right_shift_bytes$IF_END4)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 2850
A=M // 2851
D=M // 2852
@3 // 2853
D=D+A // 2854
@SP // 2855
AM=M+1 // 2856
A=A-1 // 2857
M=D // 2858
D=0 // 2859
@SP // 2860
AM=M-1 // 2861
A=M // 2862
M=D // 2863

////ConditionalGroup{push=PushInstruction("local 0"), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE5}}
@LCL // 2864
A=M // 2865
D=M // 2866
@Int32.do_right_shift_bytes$IF_TRUE5 // 2867
D;JNE // 2868

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE5}
// goto Int32.do_right_shift_bytes$IF_FALSE5
@Int32.do_right_shift_bytes$IF_FALSE5 // 2869
0;JMP // 2870

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE5}
// label Int32.do_right_shift_bytes$IF_TRUE5
(Int32.do_right_shift_bytes$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2871
D=M // 2872
@SP // 2873
AM=M+1 // 2874
A=A-1 // 2875
M=D // 2876
// call Int32.do_neg
@6 // 2877
D=A // 2878
@14 // 2879
M=D // 2880
@Int32.do_neg // 2881
D=A // 2882
@13 // 2883
M=D // 2884
@Int32.do_right_shift_bytes.ret.2 // 2885
D=A // 2886
@CALL // 2887
0;JMP // 2888
(Int32.do_right_shift_bytes.ret.2)
@SP // 2889
M=M-1 // 2890

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE5}
// label Int32.do_right_shift_bytes$IF_FALSE5
(Int32.do_right_shift_bytes$IF_FALSE5)

////PushInstruction("constant 0")
@SP // 2891
AM=M+1 // 2892
A=A-1 // 2893
M=0 // 2894
@RETURN // 2895
0;JMP // 2896

////FunctionInstruction{functionName='Main.getThreeTenths', numLocals=2, funcMapping={Main.getOneTwentieth=4}}
// function Main.getThreeTenths with 2
(Main.getThreeTenths)
@SP // 2897
M=M+1 // 2898
AM=M+1 // 2899
A=A-1 // 2900
M=0 // 2901
A=A-1 // 2902
M=0 // 2903

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 2904
D=A // 2905
@SP // 2906
AM=M+1 // 2907
A=A-1 // 2908
M=D // 2909
// call Number.new
@6 // 2910
D=A // 2911
@14 // 2912
M=D // 2913
@Number.new // 2914
D=A // 2915
@13 // 2916
M=D // 2917
@Main.getThreeTenths.ret.0 // 2918
D=A // 2919
@CALL // 2920
0;JMP // 2921
(Main.getThreeTenths.ret.0)
@SP // 2922
AM=M-1 // 2923
D=M // 2924
@LCL // 2925
A=M // 2926
M=D // 2927

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@10 // 2928
D=A // 2929
@SP // 2930
AM=M+1 // 2931
A=A-1 // 2932
M=D // 2933
// call Number.new
@6 // 2934
D=A // 2935
@14 // 2936
M=D // 2937
@Number.new // 2938
D=A // 2939
@13 // 2940
M=D // 2941
@Main.getThreeTenths.ret.1 // 2942
D=A // 2943
@CALL // 2944
0;JMP // 2945
(Main.getThreeTenths.ret.1)
@SP // 2946
AM=M-1 // 2947
D=M // 2948
@LCL // 2949
A=M+1 // 2950
M=D // 2951

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 2952
A=M // 2953
D=M // 2954
@SP // 2955
AM=M+1 // 2956
A=A-1 // 2957
M=D // 2958
@LCL // 2959
A=M+1 // 2960
D=M // 2961
@SP // 2962
AM=M+1 // 2963
A=A-1 // 2964
M=D // 2965
// call Number.do_div
@7 // 2966
D=A // 2967
@14 // 2968
M=D // 2969
@Number.do_div // 2970
D=A // 2971
@13 // 2972
M=D // 2973
@Main.getThreeTenths.ret.2 // 2974
D=A // 2975
@CALL // 2976
0;JMP // 2977
(Main.getThreeTenths.ret.2)
@SP // 2978
M=M-1 // 2979

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 2980
A=M+1 // 2981
D=M // 2982
@SP // 2983
AM=M+1 // 2984
A=A-1 // 2985
M=D // 2986
// call Number.dispose
@6 // 2987
D=A // 2988
@14 // 2989
M=D // 2990
@Number.dispose // 2991
D=A // 2992
@13 // 2993
M=D // 2994
@Main.getThreeTenths.ret.3 // 2995
D=A // 2996
@CALL // 2997
0;JMP // 2998
(Main.getThreeTenths.ret.3)
@SP // 2999
M=M-1 // 3000

////PushInstruction("local 0")
@LCL // 3001
A=M // 3002
D=M // 3003
@SP // 3004
AM=M+1 // 3005
A=A-1 // 3006
M=D // 3007
@RETURN // 3008
0;JMP // 3009

////FunctionInstruction{functionName='Math.max', numLocals=0, funcMapping={Math.abs=1}}
// function Math.max with 0
(Math.max)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 1"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Math.max$IF_TRUE1}}
@Math.max.GT.18 // 3010
D=A // 3011
@SP // 3012
AM=M+1 // 3013
A=A-1 // 3014
M=D // 3015
@ARG // 3016
A=M+1 // 3017
D=M // 3018
A=A-1 // 3019
D=M-D // 3020
@DO_GT // 3021
0;JMP // 3022
(Math.max.GT.18)
@Math.max$IF_TRUE1 // 3023
D;JNE // 3024

////GotoInstruction{label='Math.max$IF_FALSE1}
// goto Math.max$IF_FALSE1
@Math.max$IF_FALSE1 // 3025
0;JMP // 3026

////LabelInstruction{label='Math.max$IF_TRUE1}
// label Math.max$IF_TRUE1
(Math.max$IF_TRUE1)

////PushInstruction("argument 0")
@ARG // 3027
A=M // 3028
D=M // 3029
@SP // 3030
AM=M+1 // 3031
A=A-1 // 3032
M=D // 3033
@RETURN // 3034
0;JMP // 3035

////LabelInstruction{label='Math.max$IF_FALSE1}
// label Math.max$IF_FALSE1
(Math.max$IF_FALSE1)

////PushInstruction("argument 1")
@ARG // 3036
A=M+1 // 3037
D=M // 3038
@SP // 3039
AM=M+1 // 3040
A=A-1 // 3041
M=D // 3042
@RETURN // 3043
0;JMP // 3044

////FunctionInstruction{functionName='Number.do_div', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5}}
// function Number.do_div with 0
(Number.do_div)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 3045
A=M // 3046
D=M // 3047
@3 // 3048
M=D // 3049

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}},
//    right:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.is_zero}},
//NOT),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Number.do_div$IF_TRUE1}}
@THIS // 3050
A=M // 3051
D=M // 3052
@SP // 3053
AM=M+1 // 3054
A=A-1 // 3055
M=D // 3056
// call Int32.is_zero
@6 // 3057
D=A // 3058
@14 // 3059
M=D // 3060
@Int32.is_zero // 3061
D=A // 3062
@13 // 3063
M=D // 3064
@Number.do_div.ret.0 // 3065
D=A // 3066
@CALL // 3067
0;JMP // 3068
(Number.do_div.ret.0)
@ARG // 3069
A=M+1 // 3070
D=M // 3071
@SP // 3072
AM=M+1 // 3073
A=A-1 // 3074
M=D // 3075
// call Number.is_zero
@6 // 3076
D=A // 3077
@14 // 3078
M=D // 3079
@Number.is_zero // 3080
D=A // 3081
@13 // 3082
M=D // 3083
@Number.do_div.ret.1 // 3084
D=A // 3085
@CALL // 3086
0;JMP // 3087
(Number.do_div.ret.1)
@SP // 3088
AM=M-1 // 3089
D=M // 3090
D=!D // 3091
@SP // 3092
AM=M-1 // 3093
D=D&M // 3094
@Number.do_div$IF_TRUE1 // 3095
D;JNE // 3096

////GotoInstruction{label='Number.do_div$IF_FALSE1}
// goto Number.do_div$IF_FALSE1
@Number.do_div$IF_FALSE1 // 3097
0;JMP // 3098

////LabelInstruction{label='Number.do_div$IF_TRUE1}
// label Number.do_div$IF_TRUE1
(Number.do_div$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_zero}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 3099
A=M // 3100
D=M // 3101
@SP // 3102
AM=M+1 // 3103
A=A-1 // 3104
M=D // 3105
// call Int32.do_zero
@6 // 3106
D=A // 3107
@14 // 3108
M=D // 3109
@Int32.do_zero // 3110
D=A // 3111
@13 // 3112
M=D // 3113
@Number.do_div.ret.2 // 3114
D=A // 3115
@CALL // 3116
0;JMP // 3117
(Number.do_div.ret.2)
@SP // 3118
M=M-1 // 3119

////PushInstruction("constant 0")
@SP // 3120
AM=M+1 // 3121
A=A-1 // 3122
M=0 // 3123
@RETURN // 3124
0;JMP // 3125

////LabelInstruction{label='Number.do_div$IF_FALSE1}
// label Number.do_div$IF_FALSE1
(Number.do_div$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_left_shift_bytes_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 3126
A=M // 3127
D=M // 3128
@SP // 3129
AM=M+1 // 3130
A=A-1 // 3131
M=D // 3132
@Number.0 // 3133
D=M // 3134
@SP // 3135
AM=M+1 // 3136
A=A-1 // 3137
M=D // 3138
@ARG // 3139
A=M+1 // 3140
D=M // 3141
@SP // 3142
AM=M+1 // 3143
A=A-1 // 3144
M=D // 3145
// call Number.getV
@6 // 3146
D=A // 3147
@14 // 3148
M=D // 3149
@Number.getV // 3150
D=A // 3151
@13 // 3152
M=D // 3153
@Number.do_div.ret.3 // 3154
D=A // 3155
@CALL // 3156
0;JMP // 3157
(Number.do_div.ret.3)
// call Int32.do_left_shift_bytes_div
@8 // 3158
D=A // 3159
@14 // 3160
M=D // 3161
@Int32.do_left_shift_bytes_div // 3162
D=A // 3163
@13 // 3164
M=D // 3165
@Number.do_div.ret.4 // 3166
D=A // 3167
@CALL // 3168
0;JMP // 3169
(Number.do_div.ret.4)
@SP // 3170
M=M-1 // 3171

////PushInstruction("constant 0")
@SP // 3172
AM=M+1 // 3173
A=A-1 // 3174
M=0 // 3175
@RETURN // 3176
0;JMP // 3177

////FunctionInstruction{functionName='Int32.do_mul_right_shift_bytes', numLocals=9, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_mul_right_shift_bytes with 9
(Int32.do_mul_right_shift_bytes)
@9 // 3178
D=A // 3179
@SP // 3180
AM=D+M // 3181
A=A-1 // 3182
M=0 // 3183
A=A-1 // 3184
M=0 // 3185
A=A-1 // 3186
M=0 // 3187
A=A-1 // 3188
M=0 // 3189
A=A-1 // 3190
M=0 // 3191
A=A-1 // 3192
M=0 // 3193
A=A-1 // 3194
M=0 // 3195
A=A-1 // 3196
M=0 // 3197
A=A-1 // 3198
M=0 // 3199

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 3200
A=M // 3201
D=M // 3202
@3 // 3203
M=D // 3204

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 3205
A=M+1 // 3206
A=A+1 // 3207
M=0 // 3208

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 3209
A=M+1 // 3210
A=A+1 // 3211
A=A+1 // 3212
M=0 // 3213

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.is_negative}}], call=CallInstruction{Int32.xor}}
//  pop:  PopInstruction{address=local 4}
//}

@3 // 3214
D=M // 3215
@SP // 3216
AM=M+1 // 3217
A=A-1 // 3218
M=D // 3219
// call Int32.is_negative
@6 // 3220
D=A // 3221
@14 // 3222
M=D // 3223
@Int32.is_negative // 3224
D=A // 3225
@13 // 3226
M=D // 3227
@Int32.do_mul_right_shift_bytes.ret.0 // 3228
D=A // 3229
@CALL // 3230
0;JMP // 3231
(Int32.do_mul_right_shift_bytes.ret.0)
@ARG // 3232
A=M+1 // 3233
D=M // 3234
@SP // 3235
AM=M+1 // 3236
A=A-1 // 3237
M=D // 3238
// call Int32.is_negative
@6 // 3239
D=A // 3240
@14 // 3241
M=D // 3242
@Int32.is_negative // 3243
D=A // 3244
@13 // 3245
M=D // 3246
@Int32.do_mul_right_shift_bytes.ret.1 // 3247
D=A // 3248
@CALL // 3249
0;JMP // 3250
(Int32.do_mul_right_shift_bytes.ret.1)
// call Int32.xor
@7 // 3251
D=A // 3252
@14 // 3253
M=D // 3254
@Int32.xor // 3255
D=A // 3256
@13 // 3257
M=D // 3258
@Int32.do_mul_right_shift_bytes.ret.2 // 3259
D=A // 3260
@CALL // 3261
0;JMP // 3262
(Int32.do_mul_right_shift_bytes.ret.2)
@LCL // 3263
D=M // 3264
@4 // 3265
A=D+A // 3266
D=A // 3267
@R13 // 3268
M=D // 3269
@SP // 3270
AM=M-1 // 3271
D=M // 3272
@R13 // 3273
A=M // 3274
M=D // 3275

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE1}}
@3 // 3276
D=M // 3277
@SP // 3278
AM=M+1 // 3279
A=A-1 // 3280
M=D // 3281
// call Int32.is_negative
@6 // 3282
D=A // 3283
@14 // 3284
M=D // 3285
@Int32.is_negative // 3286
D=A // 3287
@13 // 3288
M=D // 3289
@Int32.do_mul_right_shift_bytes.ret.3 // 3290
D=A // 3291
@CALL // 3292
0;JMP // 3293
(Int32.do_mul_right_shift_bytes.ret.3)
@SP // 3294
AM=M-1 // 3295
D=M // 3296
@Int32.do_mul_right_shift_bytes$IF_TRUE1 // 3297
D;JNE // 3298

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE1}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE1
@Int32.do_mul_right_shift_bytes$IF_FALSE1 // 3299
0;JMP // 3300

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE1}
// label Int32.do_mul_right_shift_bytes$IF_TRUE1
(Int32.do_mul_right_shift_bytes$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@3 // 3301
D=M // 3302
@SP // 3303
AM=M+1 // 3304
A=A-1 // 3305
M=D // 3306
// call Int32.clone
@6 // 3307
D=A // 3308
@14 // 3309
M=D // 3310
@Int32.clone // 3311
D=A // 3312
@13 // 3313
M=D // 3314
@Int32.do_mul_right_shift_bytes.ret.4 // 3315
D=A // 3316
@CALL // 3317
0;JMP // 3318
(Int32.do_mul_right_shift_bytes.ret.4)
@SP // 3319
AM=M-1 // 3320
D=M // 3321
@LCL // 3322
A=M+1 // 3323
A=A+1 // 3324
M=D // 3325

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3326
A=M+1 // 3327
A=A+1 // 3328
D=M // 3329
@SP // 3330
AM=M+1 // 3331
A=A-1 // 3332
M=D // 3333
// call Int32.do_abs
@6 // 3334
D=A // 3335
@14 // 3336
M=D // 3337
@Int32.do_abs // 3338
D=A // 3339
@13 // 3340
M=D // 3341
@Int32.do_mul_right_shift_bytes.ret.5 // 3342
D=A // 3343
@CALL // 3344
0;JMP // 3345
(Int32.do_mul_right_shift_bytes.ret.5)
@SP // 3346
M=M-1 // 3347

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 3348
A=M+1 // 3349
A=A+1 // 3350
D=M // 3351
@SP // 3352
AM=M+1 // 3353
A=A-1 // 3354
M=D // 3355
// call Int32.getParts
@6 // 3356
D=A // 3357
@14 // 3358
M=D // 3359
@Int32.getParts // 3360
D=A // 3361
@13 // 3362
M=D // 3363
@Int32.do_mul_right_shift_bytes.ret.6 // 3364
D=A // 3365
@CALL // 3366
0;JMP // 3367
(Int32.do_mul_right_shift_bytes.ret.6)
@SP // 3368
AM=M-1 // 3369
D=M // 3370
@LCL // 3371
A=M // 3372
M=D // 3373

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END1}
// goto Int32.do_mul_right_shift_bytes$IF_END1
@Int32.do_mul_right_shift_bytes$IF_END1 // 3374
0;JMP // 3375

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE1}
// label Int32.do_mul_right_shift_bytes$IF_FALSE1
(Int32.do_mul_right_shift_bytes$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("this 0")
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 3376
A=M // 3377
D=M // 3378
@LCL // 3379
A=M // 3380
M=D // 3381

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END1}
// label Int32.do_mul_right_shift_bytes$IF_END1
(Int32.do_mul_right_shift_bytes$IF_END1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE2}}
@ARG // 3382
A=M+1 // 3383
D=M // 3384
@SP // 3385
AM=M+1 // 3386
A=A-1 // 3387
M=D // 3388
// call Int32.is_negative
@6 // 3389
D=A // 3390
@14 // 3391
M=D // 3392
@Int32.is_negative // 3393
D=A // 3394
@13 // 3395
M=D // 3396
@Int32.do_mul_right_shift_bytes.ret.7 // 3397
D=A // 3398
@CALL // 3399
0;JMP // 3400
(Int32.do_mul_right_shift_bytes.ret.7)
@SP // 3401
AM=M-1 // 3402
D=M // 3403
@Int32.do_mul_right_shift_bytes$IF_TRUE2 // 3404
D;JNE // 3405

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE2}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE2
@Int32.do_mul_right_shift_bytes$IF_FALSE2 // 3406
0;JMP // 3407

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE2}
// label Int32.do_mul_right_shift_bytes$IF_TRUE2
(Int32.do_mul_right_shift_bytes$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 3408
A=M+1 // 3409
D=M // 3410
@SP // 3411
AM=M+1 // 3412
A=A-1 // 3413
M=D // 3414
// call Int32.clone
@6 // 3415
D=A // 3416
@14 // 3417
M=D // 3418
@Int32.clone // 3419
D=A // 3420
@13 // 3421
M=D // 3422
@Int32.do_mul_right_shift_bytes.ret.8 // 3423
D=A // 3424
@CALL // 3425
0;JMP // 3426
(Int32.do_mul_right_shift_bytes.ret.8)
@SP // 3427
AM=M-1 // 3428
D=M // 3429
@LCL // 3430
A=M+1 // 3431
A=A+1 // 3432
A=A+1 // 3433
M=D // 3434

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3435
A=M+1 // 3436
A=A+1 // 3437
A=A+1 // 3438
D=M // 3439
@SP // 3440
AM=M+1 // 3441
A=A-1 // 3442
M=D // 3443
// call Int32.do_abs
@6 // 3444
D=A // 3445
@14 // 3446
M=D // 3447
@Int32.do_abs // 3448
D=A // 3449
@13 // 3450
M=D // 3451
@Int32.do_mul_right_shift_bytes.ret.9 // 3452
D=A // 3453
@CALL // 3454
0;JMP // 3455
(Int32.do_mul_right_shift_bytes.ret.9)
@SP // 3456
M=M-1 // 3457

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 3458
A=M+1 // 3459
A=A+1 // 3460
A=A+1 // 3461
D=M // 3462
@SP // 3463
AM=M+1 // 3464
A=A-1 // 3465
M=D // 3466
// call Int32.getParts
@6 // 3467
D=A // 3468
@14 // 3469
M=D // 3470
@Int32.getParts // 3471
D=A // 3472
@13 // 3473
M=D // 3474
@Int32.do_mul_right_shift_bytes.ret.10 // 3475
D=A // 3476
@CALL // 3477
0;JMP // 3478
(Int32.do_mul_right_shift_bytes.ret.10)
@SP // 3479
AM=M-1 // 3480
D=M // 3481
@LCL // 3482
A=M+1 // 3483
M=D // 3484

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END2}
// goto Int32.do_mul_right_shift_bytes$IF_END2
@Int32.do_mul_right_shift_bytes$IF_END2 // 3485
0;JMP // 3486

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE2}
// label Int32.do_mul_right_shift_bytes$IF_FALSE2
(Int32.do_mul_right_shift_bytes$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 3487
A=M+1 // 3488
D=M // 3489
@SP // 3490
AM=M+1 // 3491
A=A-1 // 3492
M=D // 3493
// call Int32.getParts
@6 // 3494
D=A // 3495
@14 // 3496
M=D // 3497
@Int32.getParts // 3498
D=A // 3499
@13 // 3500
M=D // 3501
@Int32.do_mul_right_shift_bytes.ret.11 // 3502
D=A // 3503
@CALL // 3504
0;JMP // 3505
(Int32.do_mul_right_shift_bytes.ret.11)
@SP // 3506
AM=M-1 // 3507
D=M // 3508
@LCL // 3509
A=M+1 // 3510
M=D // 3511

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END2}
// label Int32.do_mul_right_shift_bytes$IF_END2
(Int32.do_mul_right_shift_bytes$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 5}
//}

@8 // 3512
D=A // 3513
@SP // 3514
AM=M+1 // 3515
A=A-1 // 3516
M=D // 3517
// call Array.new
@6 // 3518
D=A // 3519
@14 // 3520
M=D // 3521
@Array.new // 3522
D=A // 3523
@13 // 3524
M=D // 3525
@Int32.do_mul_right_shift_bytes.ret.12 // 3526
D=A // 3527
@CALL // 3528
0;JMP // 3529
(Int32.do_mul_right_shift_bytes.ret.12)
@LCL // 3530
D=M // 3531
@5 // 3532
A=D+A // 3533
D=A // 3534
@R13 // 3535
M=D // 3536
@SP // 3537
AM=M-1 // 3538
D=M // 3539
@R13 // 3540
A=M // 3541
M=D // 3542

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 3543
D=M // 3544
@5 // 3545
A=D+A // 3546
D=M // 3547
@SP // 3548
AM=M+1 // 3549
A=A-1 // 3550
M=D // 3551
@LCL // 3552
A=M // 3553
D=M // 3554
@0 // 3555
A=D+A // 3556
D=M // 3557
@15 // 3558
D=D&A // 3559
@SP // 3560
AM=M-1 // 3561
A=M // 3562
M=D // 3563

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 3564
D=M // 3565
@5 // 3566
A=D+A // 3567
D=M // 3568
@SP // 3569
AM=M+1 // 3570
A=A-1 // 3571
M=D+1 // 3572
@LCL // 3573
A=M // 3574
D=M // 3575
@0 // 3576
A=D+A // 3577
D=M // 3578
@SP // 3579
AM=M+1 // 3580
A=A-1 // 3581
M=D // 3582
@4 // 3583
D=A // 3584
@SP // 3585
AM=M+1 // 3586
A=A-1 // 3587
M=D // 3588
// call Int32.arith_rightshift
@7 // 3589
D=A // 3590
@14 // 3591
M=D // 3592
@Int32.arith_rightshift // 3593
D=A // 3594
@13 // 3595
M=D // 3596
@Int32.do_mul_right_shift_bytes.ret.13 // 3597
D=A // 3598
@CALL // 3599
0;JMP // 3600
(Int32.do_mul_right_shift_bytes.ret.13)
@SP // 3601
AM=M-1 // 3602
D=M // 3603
@SP // 3604
AM=M-1 // 3605
A=M // 3606
M=D // 3607

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 3608
D=M // 3609
@5 // 3610
A=D+A // 3611
D=M // 3612
@2 // 3613
D=D+A // 3614
@SP // 3615
AM=M+1 // 3616
A=A-1 // 3617
M=D // 3618
@LCL // 3619
A=M // 3620
D=M // 3621
A=D+1 // 3622
D=M // 3623
@15 // 3624
D=D&A // 3625
@SP // 3626
AM=M-1 // 3627
A=M // 3628
M=D // 3629

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 3630
D=M // 3631
@5 // 3632
A=D+A // 3633
D=M // 3634
@3 // 3635
D=D+A // 3636
@SP // 3637
AM=M+1 // 3638
A=A-1 // 3639
M=D // 3640
@LCL // 3641
A=M // 3642
D=M // 3643
A=D+1 // 3644
D=M // 3645
@SP // 3646
AM=M+1 // 3647
A=A-1 // 3648
M=D // 3649
@4 // 3650
D=A // 3651
@SP // 3652
AM=M+1 // 3653
A=A-1 // 3654
M=D // 3655
// call Int32.arith_rightshift
@7 // 3656
D=A // 3657
@14 // 3658
M=D // 3659
@Int32.arith_rightshift // 3660
D=A // 3661
@13 // 3662
M=D // 3663
@Int32.do_mul_right_shift_bytes.ret.14 // 3664
D=A // 3665
@CALL // 3666
0;JMP // 3667
(Int32.do_mul_right_shift_bytes.ret.14)
@SP // 3668
AM=M-1 // 3669
D=M // 3670
@SP // 3671
AM=M-1 // 3672
A=M // 3673
M=D // 3674

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 3675
D=M // 3676
@5 // 3677
A=D+A // 3678
D=M // 3679
@4 // 3680
D=D+A // 3681
@SP // 3682
AM=M+1 // 3683
A=A-1 // 3684
M=D // 3685
@LCL // 3686
A=M // 3687
D=M // 3688
@2 // 3689
A=D+A // 3690
D=M // 3691
@15 // 3692
D=D&A // 3693
@SP // 3694
AM=M-1 // 3695
A=M // 3696
M=D // 3697

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 3698
D=M // 3699
@5 // 3700
A=D+A // 3701
D=M // 3702
@5 // 3703
D=D+A // 3704
@SP // 3705
AM=M+1 // 3706
A=A-1 // 3707
M=D // 3708
@LCL // 3709
A=M // 3710
D=M // 3711
@2 // 3712
A=D+A // 3713
D=M // 3714
@SP // 3715
AM=M+1 // 3716
A=A-1 // 3717
M=D // 3718
@4 // 3719
D=A // 3720
@SP // 3721
AM=M+1 // 3722
A=A-1 // 3723
M=D // 3724
// call Int32.arith_rightshift
@7 // 3725
D=A // 3726
@14 // 3727
M=D // 3728
@Int32.arith_rightshift // 3729
D=A // 3730
@13 // 3731
M=D // 3732
@Int32.do_mul_right_shift_bytes.ret.15 // 3733
D=A // 3734
@CALL // 3735
0;JMP // 3736
(Int32.do_mul_right_shift_bytes.ret.15)
@SP // 3737
AM=M-1 // 3738
D=M // 3739
@SP // 3740
AM=M-1 // 3741
A=M // 3742
M=D // 3743

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 3744
D=M // 3745
@5 // 3746
A=D+A // 3747
D=M // 3748
@6 // 3749
D=D+A // 3750
@SP // 3751
AM=M+1 // 3752
A=A-1 // 3753
M=D // 3754
@LCL // 3755
A=M // 3756
D=M // 3757
@3 // 3758
A=D+A // 3759
D=M // 3760
@15 // 3761
D=D&A // 3762
@SP // 3763
AM=M-1 // 3764
A=M // 3765
M=D // 3766

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 3767
D=M // 3768
@5 // 3769
A=D+A // 3770
D=M // 3771
@7 // 3772
D=D+A // 3773
@SP // 3774
AM=M+1 // 3775
A=A-1 // 3776
M=D // 3777
@LCL // 3778
A=M // 3779
D=M // 3780
@3 // 3781
A=D+A // 3782
D=M // 3783
@SP // 3784
AM=M+1 // 3785
A=A-1 // 3786
M=D // 3787
@4 // 3788
D=A // 3789
@SP // 3790
AM=M+1 // 3791
A=A-1 // 3792
M=D // 3793
// call Int32.arith_rightshift
@7 // 3794
D=A // 3795
@14 // 3796
M=D // 3797
@Int32.arith_rightshift // 3798
D=A // 3799
@13 // 3800
M=D // 3801
@Int32.do_mul_right_shift_bytes.ret.16 // 3802
D=A // 3803
@CALL // 3804
0;JMP // 3805
(Int32.do_mul_right_shift_bytes.ret.16)
@SP // 3806
AM=M-1 // 3807
D=M // 3808
@SP // 3809
AM=M-1 // 3810
A=M // 3811
M=D // 3812

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 6}
//}

@8 // 3813
D=A // 3814
@SP // 3815
AM=M+1 // 3816
A=A-1 // 3817
M=D // 3818
// call Array.new
@6 // 3819
D=A // 3820
@14 // 3821
M=D // 3822
@Array.new // 3823
D=A // 3824
@13 // 3825
M=D // 3826
@Int32.do_mul_right_shift_bytes.ret.17 // 3827
D=A // 3828
@CALL // 3829
0;JMP // 3830
(Int32.do_mul_right_shift_bytes.ret.17)
@LCL // 3831
D=M // 3832
@6 // 3833
A=D+A // 3834
D=A // 3835
@R13 // 3836
M=D // 3837
@SP // 3838
AM=M-1 // 3839
D=M // 3840
@R13 // 3841
A=M // 3842
M=D // 3843

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 3844
D=M // 3845
@6 // 3846
A=D+A // 3847
D=M // 3848
@SP // 3849
AM=M+1 // 3850
A=A-1 // 3851
M=D // 3852
@LCL // 3853
A=M+1 // 3854
D=M // 3855
@0 // 3856
A=D+A // 3857
D=M // 3858
@15 // 3859
D=D&A // 3860
@SP // 3861
AM=M-1 // 3862
A=M // 3863
M=D // 3864

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 3865
D=M // 3866
@6 // 3867
A=D+A // 3868
D=M // 3869
@SP // 3870
AM=M+1 // 3871
A=A-1 // 3872
M=D+1 // 3873
@LCL // 3874
A=M+1 // 3875
D=M // 3876
@0 // 3877
A=D+A // 3878
D=M // 3879
@SP // 3880
AM=M+1 // 3881
A=A-1 // 3882
M=D // 3883
@4 // 3884
D=A // 3885
@SP // 3886
AM=M+1 // 3887
A=A-1 // 3888
M=D // 3889
// call Int32.arith_rightshift
@7 // 3890
D=A // 3891
@14 // 3892
M=D // 3893
@Int32.arith_rightshift // 3894
D=A // 3895
@13 // 3896
M=D // 3897
@Int32.do_mul_right_shift_bytes.ret.18 // 3898
D=A // 3899
@CALL // 3900
0;JMP // 3901
(Int32.do_mul_right_shift_bytes.ret.18)
@SP // 3902
AM=M-1 // 3903
D=M // 3904
@SP // 3905
AM=M-1 // 3906
A=M // 3907
M=D // 3908

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 3909
D=M // 3910
@6 // 3911
A=D+A // 3912
D=M // 3913
@2 // 3914
D=D+A // 3915
@SP // 3916
AM=M+1 // 3917
A=A-1 // 3918
M=D // 3919
@LCL // 3920
A=M+1 // 3921
D=M // 3922
A=D+1 // 3923
D=M // 3924
@15 // 3925
D=D&A // 3926
@SP // 3927
AM=M-1 // 3928
A=M // 3929
M=D // 3930

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 3931
D=M // 3932
@6 // 3933
A=D+A // 3934
D=M // 3935
@3 // 3936
D=D+A // 3937
@SP // 3938
AM=M+1 // 3939
A=A-1 // 3940
M=D // 3941
@LCL // 3942
A=M+1 // 3943
D=M // 3944
A=D+1 // 3945
D=M // 3946
@SP // 3947
AM=M+1 // 3948
A=A-1 // 3949
M=D // 3950
@4 // 3951
D=A // 3952
@SP // 3953
AM=M+1 // 3954
A=A-1 // 3955
M=D // 3956
// call Int32.arith_rightshift
@7 // 3957
D=A // 3958
@14 // 3959
M=D // 3960
@Int32.arith_rightshift // 3961
D=A // 3962
@13 // 3963
M=D // 3964
@Int32.do_mul_right_shift_bytes.ret.19 // 3965
D=A // 3966
@CALL // 3967
0;JMP // 3968
(Int32.do_mul_right_shift_bytes.ret.19)
@SP // 3969
AM=M-1 // 3970
D=M // 3971
@SP // 3972
AM=M-1 // 3973
A=M // 3974
M=D // 3975

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 3976
D=M // 3977
@6 // 3978
A=D+A // 3979
D=M // 3980
@4 // 3981
D=D+A // 3982
@SP // 3983
AM=M+1 // 3984
A=A-1 // 3985
M=D // 3986
@LCL // 3987
A=M+1 // 3988
D=M // 3989
@2 // 3990
A=D+A // 3991
D=M // 3992
@15 // 3993
D=D&A // 3994
@SP // 3995
AM=M-1 // 3996
A=M // 3997
M=D // 3998

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 3999
D=M // 4000
@6 // 4001
A=D+A // 4002
D=M // 4003
@5 // 4004
D=D+A // 4005
@SP // 4006
AM=M+1 // 4007
A=A-1 // 4008
M=D // 4009
@LCL // 4010
A=M+1 // 4011
D=M // 4012
@2 // 4013
A=D+A // 4014
D=M // 4015
@SP // 4016
AM=M+1 // 4017
A=A-1 // 4018
M=D // 4019
@4 // 4020
D=A // 4021
@SP // 4022
AM=M+1 // 4023
A=A-1 // 4024
M=D // 4025
// call Int32.arith_rightshift
@7 // 4026
D=A // 4027
@14 // 4028
M=D // 4029
@Int32.arith_rightshift // 4030
D=A // 4031
@13 // 4032
M=D // 4033
@Int32.do_mul_right_shift_bytes.ret.20 // 4034
D=A // 4035
@CALL // 4036
0;JMP // 4037
(Int32.do_mul_right_shift_bytes.ret.20)
@SP // 4038
AM=M-1 // 4039
D=M // 4040
@SP // 4041
AM=M-1 // 4042
A=M // 4043
M=D // 4044

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 4045
D=M // 4046
@6 // 4047
A=D+A // 4048
D=M // 4049
@6 // 4050
D=D+A // 4051
@SP // 4052
AM=M+1 // 4053
A=A-1 // 4054
M=D // 4055
@LCL // 4056
A=M+1 // 4057
D=M // 4058
@3 // 4059
A=D+A // 4060
D=M // 4061
@15 // 4062
D=D&A // 4063
@SP // 4064
AM=M-1 // 4065
A=M // 4066
M=D // 4067

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 4068
D=M // 4069
@6 // 4070
A=D+A // 4071
D=M // 4072
@7 // 4073
D=D+A // 4074
@SP // 4075
AM=M+1 // 4076
A=A-1 // 4077
M=D // 4078
@LCL // 4079
A=M+1 // 4080
D=M // 4081
@3 // 4082
A=D+A // 4083
D=M // 4084
@SP // 4085
AM=M+1 // 4086
A=A-1 // 4087
M=D // 4088
@4 // 4089
D=A // 4090
@SP // 4091
AM=M+1 // 4092
A=A-1 // 4093
M=D // 4094
// call Int32.arith_rightshift
@7 // 4095
D=A // 4096
@14 // 4097
M=D // 4098
@Int32.arith_rightshift // 4099
D=A // 4100
@13 // 4101
M=D // 4102
@Int32.do_mul_right_shift_bytes.ret.21 // 4103
D=A // 4104
@CALL // 4105
0;JMP // 4106
(Int32.do_mul_right_shift_bytes.ret.21)
@SP // 4107
AM=M-1 // 4108
D=M // 4109
@SP // 4110
AM=M-1 // 4111
A=M // 4112
M=D // 4113

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), PushInstruction("local 6")], call=CallInstruction{Int32.u4_array_mul_u4_array}}
//  pop:  PopInstruction{address=local 7}
//}

@LCL // 4114
D=M // 4115
@5 // 4116
A=D+A // 4117
D=M // 4118
@SP // 4119
AM=M+1 // 4120
A=A-1 // 4121
M=D // 4122
@LCL // 4123
D=M // 4124
@6 // 4125
A=D+A // 4126
D=M // 4127
@SP // 4128
AM=M+1 // 4129
A=A-1 // 4130
M=D // 4131
// call Int32.u4_array_mul_u4_array
@7 // 4132
D=A // 4133
@14 // 4134
M=D // 4135
@Int32.u4_array_mul_u4_array // 4136
D=A // 4137
@13 // 4138
M=D // 4139
@Int32.do_mul_right_shift_bytes.ret.22 // 4140
D=A // 4141
@CALL // 4142
0;JMP // 4143
(Int32.do_mul_right_shift_bytes.ret.22)
@LCL // 4144
D=M // 4145
@7 // 4146
A=D+A // 4147
D=A // 4148
@R13 // 4149
M=D // 4150
@SP // 4151
AM=M-1 // 4152
D=M // 4153
@R13 // 4154
A=M // 4155
M=D // 4156

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2"), PushInstruction("constant 2")], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 8}
//}

@ARG // 4157
A=M+1 // 4158
A=A+1 // 4159
D=M // 4160
@SP // 4161
AM=M+1 // 4162
A=A-1 // 4163
M=D // 4164
@2 // 4165
D=A // 4166
@SP // 4167
AM=M+1 // 4168
A=A-1 // 4169
M=D // 4170
// call Math.multiply
@7 // 4171
D=A // 4172
@14 // 4173
M=D // 4174
@Math.multiply // 4175
D=A // 4176
@13 // 4177
M=D // 4178
@Int32.do_mul_right_shift_bytes.ret.23 // 4179
D=A // 4180
@CALL // 4181
0;JMP // 4182
(Int32.do_mul_right_shift_bytes.ret.23)
@LCL // 4183
D=M // 4184
@8 // 4185
A=D+A // 4186
D=A // 4187
@R13 // 4188
M=D // 4189
@SP // 4190
AM=M-1 // 4191
D=M // 4192
@R13 // 4193
A=M // 4194
M=D // 4195

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 4196
A=M // 4197
D=M // 4198
@SP // 4199
AM=M+1 // 4200
A=A-1 // 4201
M=D // 4202
@LCL // 4203
D=M // 4204
@7 // 4205
A=D+A // 4206
D=M // 4207
@SP // 4208
AM=M+1 // 4209
A=A-1 // 4210
M=D // 4211
@LCL // 4212
D=M // 4213
@8 // 4214
A=D+A // 4215
D=M // 4216
@0 // 4217
D=D+A // 4218
@SP // 4219
AM=M-1 // 4220
A=D+M // 4221
D=M // 4222
@SP // 4223
AM=M+1 // 4224
A=A-1 // 4225
M=D // 4226
@LCL // 4227
D=M // 4228
@7 // 4229
A=D+A // 4230
D=M // 4231
@SP // 4232
AM=M+1 // 4233
A=A-1 // 4234
M=D // 4235
@LCL // 4236
D=M // 4237
@8 // 4238
A=D+A // 4239
D=M // 4240
D=D+1 // 4241
@SP // 4242
AM=M-1 // 4243
A=D+M // 4244
D=M // 4245
@SP // 4246
AM=M+1 // 4247
A=A-1 // 4248
M=D // 4249
@16 // 4250
D=A // 4251
@SP // 4252
AM=M+1 // 4253
A=A-1 // 4254
M=D // 4255
// call Math.multiply
@7 // 4256
D=A // 4257
@14 // 4258
M=D // 4259
@Math.multiply // 4260
D=A // 4261
@13 // 4262
M=D // 4263
@Int32.do_mul_right_shift_bytes.ret.24 // 4264
D=A // 4265
@CALL // 4266
0;JMP // 4267
(Int32.do_mul_right_shift_bytes.ret.24)
@SP // 4268
AM=M-1 // 4269
D=M // 4270
@SP // 4271
AM=M-1 // 4272
D=D+M // 4273
@SP // 4274
AM=M-1 // 4275
A=M // 4276
M=D // 4277

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                PushInstruction("constant 2"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 4278
A=M // 4279
D=M // 4280
@SP // 4281
AM=M+1 // 4282
A=A-1 // 4283
M=D+1 // 4284
@LCL // 4285
D=M // 4286
@7 // 4287
A=D+A // 4288
D=M // 4289
@SP // 4290
AM=M+1 // 4291
A=A-1 // 4292
M=D // 4293
@LCL // 4294
D=M // 4295
@8 // 4296
A=D+A // 4297
D=M // 4298
@2 // 4299
D=D+A // 4300
@SP // 4301
AM=M-1 // 4302
A=D+M // 4303
D=M // 4304
@SP // 4305
AM=M+1 // 4306
A=A-1 // 4307
M=D // 4308
@LCL // 4309
D=M // 4310
@7 // 4311
A=D+A // 4312
D=M // 4313
@SP // 4314
AM=M+1 // 4315
A=A-1 // 4316
M=D // 4317
@LCL // 4318
D=M // 4319
@8 // 4320
A=D+A // 4321
D=M // 4322
@3 // 4323
D=D+A // 4324
@SP // 4325
AM=M-1 // 4326
A=D+M // 4327
D=M // 4328
@SP // 4329
AM=M+1 // 4330
A=A-1 // 4331
M=D // 4332
@16 // 4333
D=A // 4334
@SP // 4335
AM=M+1 // 4336
A=A-1 // 4337
M=D // 4338
// call Math.multiply
@7 // 4339
D=A // 4340
@14 // 4341
M=D // 4342
@Math.multiply // 4343
D=A // 4344
@13 // 4345
M=D // 4346
@Int32.do_mul_right_shift_bytes.ret.25 // 4347
D=A // 4348
@CALL // 4349
0;JMP // 4350
(Int32.do_mul_right_shift_bytes.ret.25)
@SP // 4351
AM=M-1 // 4352
D=M // 4353
@SP // 4354
AM=M-1 // 4355
D=D+M // 4356
@SP // 4357
AM=M-1 // 4358
A=M // 4359
M=D // 4360

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                PushInstruction("constant 4"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("constant 5"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 4361
A=M // 4362
D=M // 4363
@2 // 4364
D=D+A // 4365
@SP // 4366
AM=M+1 // 4367
A=A-1 // 4368
M=D // 4369
@LCL // 4370
D=M // 4371
@7 // 4372
A=D+A // 4373
D=M // 4374
@SP // 4375
AM=M+1 // 4376
A=A-1 // 4377
M=D // 4378
@LCL // 4379
D=M // 4380
@8 // 4381
A=D+A // 4382
D=M // 4383
@4 // 4384
D=D+A // 4385
@SP // 4386
AM=M-1 // 4387
A=D+M // 4388
D=M // 4389
@SP // 4390
AM=M+1 // 4391
A=A-1 // 4392
M=D // 4393
@LCL // 4394
D=M // 4395
@7 // 4396
A=D+A // 4397
D=M // 4398
@SP // 4399
AM=M+1 // 4400
A=A-1 // 4401
M=D // 4402
@LCL // 4403
D=M // 4404
@8 // 4405
A=D+A // 4406
D=M // 4407
@5 // 4408
D=D+A // 4409
@SP // 4410
AM=M-1 // 4411
A=D+M // 4412
D=M // 4413
@SP // 4414
AM=M+1 // 4415
A=A-1 // 4416
M=D // 4417
@16 // 4418
D=A // 4419
@SP // 4420
AM=M+1 // 4421
A=A-1 // 4422
M=D // 4423
// call Math.multiply
@7 // 4424
D=A // 4425
@14 // 4426
M=D // 4427
@Math.multiply // 4428
D=A // 4429
@13 // 4430
M=D // 4431
@Int32.do_mul_right_shift_bytes.ret.26 // 4432
D=A // 4433
@CALL // 4434
0;JMP // 4435
(Int32.do_mul_right_shift_bytes.ret.26)
@SP // 4436
AM=M-1 // 4437
D=M // 4438
@SP // 4439
AM=M-1 // 4440
D=D+M // 4441
@SP // 4442
AM=M-1 // 4443
A=M // 4444
M=D // 4445

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                PushInstruction("constant 6"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("constant 7"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 4446
A=M // 4447
D=M // 4448
@3 // 4449
D=D+A // 4450
@SP // 4451
AM=M+1 // 4452
A=A-1 // 4453
M=D // 4454
@LCL // 4455
D=M // 4456
@7 // 4457
A=D+A // 4458
D=M // 4459
@SP // 4460
AM=M+1 // 4461
A=A-1 // 4462
M=D // 4463
@LCL // 4464
D=M // 4465
@8 // 4466
A=D+A // 4467
D=M // 4468
@6 // 4469
D=D+A // 4470
@SP // 4471
AM=M-1 // 4472
A=D+M // 4473
D=M // 4474
@SP // 4475
AM=M+1 // 4476
A=A-1 // 4477
M=D // 4478
@LCL // 4479
D=M // 4480
@7 // 4481
A=D+A // 4482
D=M // 4483
@SP // 4484
AM=M+1 // 4485
A=A-1 // 4486
M=D // 4487
@LCL // 4488
D=M // 4489
@8 // 4490
A=D+A // 4491
D=M // 4492
@7 // 4493
D=D+A // 4494
@SP // 4495
AM=M-1 // 4496
A=D+M // 4497
D=M // 4498
@SP // 4499
AM=M+1 // 4500
A=A-1 // 4501
M=D // 4502
@16 // 4503
D=A // 4504
@SP // 4505
AM=M+1 // 4506
A=A-1 // 4507
M=D // 4508
// call Math.multiply
@7 // 4509
D=A // 4510
@14 // 4511
M=D // 4512
@Math.multiply // 4513
D=A // 4514
@13 // 4515
M=D // 4516
@Int32.do_mul_right_shift_bytes.ret.27 // 4517
D=A // 4518
@CALL // 4519
0;JMP // 4520
(Int32.do_mul_right_shift_bytes.ret.27)
@SP // 4521
AM=M-1 // 4522
D=M // 4523
@SP // 4524
AM=M-1 // 4525
D=D+M // 4526
@SP // 4527
AM=M-1 // 4528
A=M // 4529
M=D // 4530

////ConditionalGroup{push=PushInstruction("local 4"), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE3}}
@LCL // 4531
D=M // 4532
@4 // 4533
A=D+A // 4534
D=M // 4535
@Int32.do_mul_right_shift_bytes$IF_TRUE3 // 4536
D;JNE // 4537

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE3}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE3
@Int32.do_mul_right_shift_bytes$IF_FALSE3 // 4538
0;JMP // 4539

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE3}
// label Int32.do_mul_right_shift_bytes$IF_TRUE3
(Int32.do_mul_right_shift_bytes$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 4540
D=M // 4541
@SP // 4542
AM=M+1 // 4543
A=A-1 // 4544
M=D // 4545
// call Int32.do_neg
@6 // 4546
D=A // 4547
@14 // 4548
M=D // 4549
@Int32.do_neg // 4550
D=A // 4551
@13 // 4552
M=D // 4553
@Int32.do_mul_right_shift_bytes.ret.28 // 4554
D=A // 4555
@CALL // 4556
0;JMP // 4557
(Int32.do_mul_right_shift_bytes.ret.28)
@SP // 4558
M=M-1 // 4559

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE3}
// label Int32.do_mul_right_shift_bytes$IF_FALSE3
(Int32.do_mul_right_shift_bytes$IF_FALSE3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE4}}
@Int32.do_mul_right_shift_bytes.EQ.19 // 4560
D=A // 4561
@SP // 4562
AM=M+1 // 4563
A=A-1 // 4564
M=D // 4565
@LCL // 4566
A=M+1 // 4567
A=A+1 // 4568
D=M // 4569
@DO_EQ // 4570
0;JMP // 4571
(Int32.do_mul_right_shift_bytes.EQ.19)
D=!D // 4572
@Int32.do_mul_right_shift_bytes$IF_TRUE4 // 4573
D;JNE // 4574

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE4}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE4
@Int32.do_mul_right_shift_bytes$IF_FALSE4 // 4575
0;JMP // 4576

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE4}
// label Int32.do_mul_right_shift_bytes$IF_TRUE4
(Int32.do_mul_right_shift_bytes$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4577
A=M+1 // 4578
A=A+1 // 4579
D=M // 4580
@SP // 4581
AM=M+1 // 4582
A=A-1 // 4583
M=D // 4584
// call Int32.dispose
@6 // 4585
D=A // 4586
@14 // 4587
M=D // 4588
@Int32.dispose // 4589
D=A // 4590
@13 // 4591
M=D // 4592
@Int32.do_mul_right_shift_bytes.ret.29 // 4593
D=A // 4594
@CALL // 4595
0;JMP // 4596
(Int32.do_mul_right_shift_bytes.ret.29)
@SP // 4597
M=M-1 // 4598

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE4}
// label Int32.do_mul_right_shift_bytes$IF_FALSE4
(Int32.do_mul_right_shift_bytes$IF_FALSE4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE5}}
@Int32.do_mul_right_shift_bytes.EQ.20 // 4599
D=A // 4600
@SP // 4601
AM=M+1 // 4602
A=A-1 // 4603
M=D // 4604
@LCL // 4605
A=M+1 // 4606
A=A+1 // 4607
A=A+1 // 4608
D=M // 4609
@DO_EQ // 4610
0;JMP // 4611
(Int32.do_mul_right_shift_bytes.EQ.20)
D=!D // 4612
@Int32.do_mul_right_shift_bytes$IF_TRUE5 // 4613
D;JNE // 4614

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE5}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE5
@Int32.do_mul_right_shift_bytes$IF_FALSE5 // 4615
0;JMP // 4616

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE5}
// label Int32.do_mul_right_shift_bytes$IF_TRUE5
(Int32.do_mul_right_shift_bytes$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4617
A=M+1 // 4618
A=A+1 // 4619
A=A+1 // 4620
D=M // 4621
@SP // 4622
AM=M+1 // 4623
A=A-1 // 4624
M=D // 4625
// call Int32.dispose
@6 // 4626
D=A // 4627
@14 // 4628
M=D // 4629
@Int32.dispose // 4630
D=A // 4631
@13 // 4632
M=D // 4633
@Int32.do_mul_right_shift_bytes.ret.30 // 4634
D=A // 4635
@CALL // 4636
0;JMP // 4637
(Int32.do_mul_right_shift_bytes.ret.30)
@SP // 4638
M=M-1 // 4639

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE5}
// label Int32.do_mul_right_shift_bytes$IF_FALSE5
(Int32.do_mul_right_shift_bytes$IF_FALSE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4640
D=M // 4641
@5 // 4642
A=D+A // 4643
D=M // 4644
@SP // 4645
AM=M+1 // 4646
A=A-1 // 4647
M=D // 4648
// call Array.dispose
@6 // 4649
D=A // 4650
@14 // 4651
M=D // 4652
@Array.dispose // 4653
D=A // 4654
@13 // 4655
M=D // 4656
@Int32.do_mul_right_shift_bytes.ret.31 // 4657
D=A // 4658
@CALL // 4659
0;JMP // 4660
(Int32.do_mul_right_shift_bytes.ret.31)
@SP // 4661
M=M-1 // 4662

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4663
D=M // 4664
@6 // 4665
A=D+A // 4666
D=M // 4667
@SP // 4668
AM=M+1 // 4669
A=A-1 // 4670
M=D // 4671
// call Array.dispose
@6 // 4672
D=A // 4673
@14 // 4674
M=D // 4675
@Array.dispose // 4676
D=A // 4677
@13 // 4678
M=D // 4679
@Int32.do_mul_right_shift_bytes.ret.32 // 4680
D=A // 4681
@CALL // 4682
0;JMP // 4683
(Int32.do_mul_right_shift_bytes.ret.32)
@SP // 4684
M=M-1 // 4685

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4686
D=M // 4687
@7 // 4688
A=D+A // 4689
D=M // 4690
@SP // 4691
AM=M+1 // 4692
A=A-1 // 4693
M=D // 4694
// call Array.dispose
@6 // 4695
D=A // 4696
@14 // 4697
M=D // 4698
@Array.dispose // 4699
D=A // 4700
@13 // 4701
M=D // 4702
@Int32.do_mul_right_shift_bytes.ret.33 // 4703
D=A // 4704
@CALL // 4705
0;JMP // 4706
(Int32.do_mul_right_shift_bytes.ret.33)
@SP // 4707
M=M-1 // 4708

////PushInstruction("constant 0")
@SP // 4709
AM=M+1 // 4710
A=A-1 // 4711
M=0 // 4712
@RETURN // 4713
0;JMP // 4714

////FunctionInstruction{functionName='Sys.halt', numLocals=0, funcMapping={}}
// function Sys.halt with 0
(Sys.halt)

////LabelInstruction{label='Sys.halt_WHILE_EXP1}
// label Sys.halt_WHILE_EXP1
(Sys.halt_WHILE_EXP1)

////ConditionalGroup{push=PushInstruction("constant 0"), ifGoto=IfGotoInstruction{label='Sys.halt_WHILE_END1}}
D=0 // 4715
@Sys.halt_WHILE_END1 // 4716
D;JNE // 4717

////GotoInstruction{label='Sys.halt_WHILE_EXP1}
// goto Sys.halt_WHILE_EXP1
@Sys.halt_WHILE_EXP1 // 4718
0;JMP // 4719

////LabelInstruction{label='Sys.halt_WHILE_END1}
// label Sys.halt_WHILE_END1
(Sys.halt_WHILE_END1)

////PushInstruction("constant 0")
@SP // 4720
AM=M+1 // 4721
A=A-1 // 4722
M=0 // 4723
@RETURN // 4724
0;JMP // 4725

////FunctionInstruction{functionName='Vec3.clone', numLocals=0, funcMapping={Vec3.do_add=6}}
// function Vec3.clone with 0
(Vec3.clone)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4726
A=M // 4727
D=M // 4728
@3 // 4729
M=D // 4730

////CallGroup{pushes=[CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}, CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}, CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}], call=CallInstruction{Vec3.new}}
@THIS // 4731
A=M // 4732
D=M // 4733
@SP // 4734
AM=M+1 // 4735
A=A-1 // 4736
M=D // 4737
// call Number.clone
@6 // 4738
D=A // 4739
@14 // 4740
M=D // 4741
@Number.clone // 4742
D=A // 4743
@13 // 4744
M=D // 4745
@Vec3.clone.ret.0 // 4746
D=A // 4747
@CALL // 4748
0;JMP // 4749
(Vec3.clone.ret.0)
@THIS // 4750
A=M+1 // 4751
D=M // 4752
@SP // 4753
AM=M+1 // 4754
A=A-1 // 4755
M=D // 4756
// call Number.clone
@6 // 4757
D=A // 4758
@14 // 4759
M=D // 4760
@Number.clone // 4761
D=A // 4762
@13 // 4763
M=D // 4764
@Vec3.clone.ret.1 // 4765
D=A // 4766
@CALL // 4767
0;JMP // 4768
(Vec3.clone.ret.1)
@THIS // 4769
A=M+1 // 4770
A=A+1 // 4771
D=M // 4772
@SP // 4773
AM=M+1 // 4774
A=A-1 // 4775
M=D // 4776
// call Number.clone
@6 // 4777
D=A // 4778
@14 // 4779
M=D // 4780
@Number.clone // 4781
D=A // 4782
@13 // 4783
M=D // 4784
@Vec3.clone.ret.2 // 4785
D=A // 4786
@CALL // 4787
0;JMP // 4788
(Vec3.clone.ret.2)
// call Vec3.new
@8 // 4789
D=A // 4790
@14 // 4791
M=D // 4792
@Vec3.new // 4793
D=A // 4794
@13 // 4795
M=D // 4796
@Vec3.clone.ret.3 // 4797
D=A // 4798
@CALL // 4799
0;JMP // 4800
(Vec3.clone.ret.3)
@RETURN // 4801
0;JMP // 4802

////FunctionInstruction{functionName='Element.color', numLocals=0, funcMapping={}}
// function Element.color with 0
(Element.color)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4803
A=M // 4804
D=M // 4805
@3 // 4806
M=D // 4807

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.color$IF_TRUE1}}
@Element.color.EQ.21 // 4808
D=A // 4809
@SP // 4810
AM=M+1 // 4811
A=A-1 // 4812
M=D // 4813
@THIS // 4814
A=M // 4815
D=M // 4816
@DO_EQ // 4817
0;JMP // 4818
(Element.color.EQ.21)
D=!D // 4819
@Element.color$IF_TRUE1 // 4820
D;JNE // 4821

////GotoInstruction{label='Element.color$IF_FALSE1}
// goto Element.color$IF_FALSE1
@Element.color$IF_FALSE1 // 4822
0;JMP // 4823

////LabelInstruction{label='Element.color$IF_TRUE1}
// label Element.color$IF_TRUE1
(Element.color$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Plane.color}}
@THIS // 4824
A=M // 4825
D=M // 4826
@SP // 4827
AM=M+1 // 4828
A=A-1 // 4829
M=D // 4830
@ARG // 4831
A=M+1 // 4832
D=M // 4833
@SP // 4834
AM=M+1 // 4835
A=A-1 // 4836
M=D // 4837
// call Plane.color
@7 // 4838
D=A // 4839
@14 // 4840
M=D // 4841
@Plane.color // 4842
D=A // 4843
@13 // 4844
M=D // 4845
@Element.color.ret.0 // 4846
D=A // 4847
@CALL // 4848
0;JMP // 4849
(Element.color.ret.0)
@RETURN // 4850
0;JMP // 4851

////LabelInstruction{label='Element.color$IF_FALSE1}
// label Element.color$IF_FALSE1
(Element.color$IF_FALSE1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.color$IF_TRUE2}}
@Element.color.EQ.22 // 4852
D=A // 4853
@SP // 4854
AM=M+1 // 4855
A=A-1 // 4856
M=D // 4857
@THIS // 4858
A=M+1 // 4859
D=M // 4860
@DO_EQ // 4861
0;JMP // 4862
(Element.color.EQ.22)
D=!D // 4863
@Element.color$IF_TRUE2 // 4864
D;JNE // 4865

////GotoInstruction{label='Element.color$IF_FALSE2}
// goto Element.color$IF_FALSE2
@Element.color$IF_FALSE2 // 4866
0;JMP // 4867

////LabelInstruction{label='Element.color$IF_TRUE2}
// label Element.color$IF_TRUE2
(Element.color$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Sphere.color}}
@THIS // 4868
A=M+1 // 4869
D=M // 4870
@SP // 4871
AM=M+1 // 4872
A=A-1 // 4873
M=D // 4874
// call Sphere.color
@6 // 4875
D=A // 4876
@14 // 4877
M=D // 4878
@Sphere.color // 4879
D=A // 4880
@13 // 4881
M=D // 4882
@Element.color.ret.1 // 4883
D=A // 4884
@CALL // 4885
0;JMP // 4886
(Element.color.ret.1)
@RETURN // 4887
0;JMP // 4888

////LabelInstruction{label='Element.color$IF_FALSE2}
// label Element.color$IF_FALSE2
(Element.color$IF_FALSE2)

////PushInstruction("constant 0")
@SP // 4889
AM=M+1 // 4890
A=A-1 // 4891
M=0 // 4892
@RETURN // 4893
0;JMP // 4894

////FunctionInstruction{functionName='Number.do_neg', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5}}
// function Number.do_neg with 0
(Number.do_neg)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4895
A=M // 4896
D=M // 4897
@3 // 4898
M=D // 4899

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 4900
A=M // 4901
D=M // 4902
@SP // 4903
AM=M+1 // 4904
A=A-1 // 4905
M=D // 4906
// call Int32.do_neg
@6 // 4907
D=A // 4908
@14 // 4909
M=D // 4910
@Int32.do_neg // 4911
D=A // 4912
@13 // 4913
M=D // 4914
@Number.do_neg.ret.0 // 4915
D=A // 4916
@CALL // 4917
0;JMP // 4918
(Number.do_neg.ret.0)
@SP // 4919
M=M-1 // 4920

////PushInstruction("constant 0")
@SP // 4921
AM=M+1 // 4922
A=A-1 // 4923
M=0 // 4924
@RETURN // 4925
0;JMP // 4926

////FunctionInstruction{functionName='Plane.color', numLocals=8, funcMapping={Plane.initialize=16, Plane.new=1}}
// function Plane.color with 8
(Plane.color)
@8 // 4927
D=A // 4928
@SP // 4929
AM=D+M // 4930
A=A-1 // 4931
M=0 // 4932
A=A-1 // 4933
M=0 // 4934
A=A-1 // 4935
M=0 // 4936
A=A-1 // 4937
M=0 // 4938
A=A-1 // 4939
M=0 // 4940
A=A-1 // 4941
M=0 // 4942
A=A-1 // 4943
M=0 // 4944
A=A-1 // 4945
M=0 // 4946

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4947
A=M // 4948
D=M // 4949
@3 // 4950
M=D // 4951

////ConditionalGroup{push=PushInstruction("this 3"), ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE1}}
@THIS // 4952
A=M+1 // 4953
A=A+1 // 4954
A=A+1 // 4955
D=M // 4956
@Plane.color$IF_TRUE1 // 4957
D;JNE // 4958

////GotoInstruction{label='Plane.color$IF_FALSE1}
// goto Plane.color$IF_FALSE1
@Plane.color$IF_FALSE1 // 4959
0;JMP // 4960

////LabelInstruction{label='Plane.color$IF_TRUE1}
// label Plane.color$IF_TRUE1
(Plane.color$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 4961
A=M+1 // 4962
D=M // 4963
@SP // 4964
AM=M+1 // 4965
A=A-1 // 4966
M=D // 4967
// call Vec3.clone
@6 // 4968
D=A // 4969
@14 // 4970
M=D // 4971
@Vec3.clone // 4972
D=A // 4973
@13 // 4974
M=D // 4975
@Plane.color.ret.0 // 4976
D=A // 4977
@CALL // 4978
0;JMP // 4979
(Plane.color.ret.0)
@SP // 4980
AM=M-1 // 4981
D=M // 4982
@LCL // 4983
A=M // 4984
M=D // 4985

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("static 0")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4986
A=M // 4987
D=M // 4988
@SP // 4989
AM=M+1 // 4990
A=A-1 // 4991
M=D // 4992
@Plane.0 // 4993
D=M // 4994
@SP // 4995
AM=M+1 // 4996
A=A-1 // 4997
M=D // 4998
// call Vec3.do_cross
@7 // 4999
D=A // 5000
@14 // 5001
M=D // 5002
@Vec3.do_cross // 5003
D=A // 5004
@13 // 5005
M=D // 5006
@Plane.color.ret.1 // 5007
D=A // 5008
@CALL // 5009
0;JMP // 5010
(Plane.color.ret.1)
@SP // 5011
M=M-1 // 5012

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dist_sq}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 5013
A=M // 5014
D=M // 5015
@SP // 5016
AM=M+1 // 5017
A=A-1 // 5018
M=D // 5019
// call Vec3.dist_sq
@6 // 5020
D=A // 5021
@14 // 5022
M=D // 5023
@Vec3.dist_sq // 5024
D=A // 5025
@13 // 5026
M=D // 5027
@Plane.color.ret.2 // 5028
D=A // 5029
@CALL // 5030
0;JMP // 5031
(Plane.color.ret.2)
@SP // 5032
AM=M-1 // 5033
D=M // 5034
@LCL // 5035
A=M+1 // 5036
A=A+1 // 5037
M=D // 5038

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.is_zero}}, ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE2}}
@LCL // 5039
A=M+1 // 5040
A=A+1 // 5041
D=M // 5042
@SP // 5043
AM=M+1 // 5044
A=A-1 // 5045
M=D // 5046
// call Number.is_zero
@6 // 5047
D=A // 5048
@14 // 5049
M=D // 5050
@Number.is_zero // 5051
D=A // 5052
@13 // 5053
M=D // 5054
@Plane.color.ret.3 // 5055
D=A // 5056
@CALL // 5057
0;JMP // 5058
(Plane.color.ret.3)
@SP // 5059
AM=M-1 // 5060
D=M // 5061
@Plane.color$IF_TRUE2 // 5062
D;JNE // 5063

////GotoInstruction{label='Plane.color$IF_FALSE2}
// goto Plane.color$IF_FALSE2
@Plane.color$IF_FALSE2 // 5064
0;JMP // 5065

////LabelInstruction{label='Plane.color$IF_TRUE2}
// label Plane.color$IF_TRUE2
(Plane.color$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5066
A=M // 5067
D=M // 5068
@SP // 5069
AM=M+1 // 5070
A=A-1 // 5071
M=D // 5072
// call Vec3.dispose
@6 // 5073
D=A // 5074
@14 // 5075
M=D // 5076
@Vec3.dispose // 5077
D=A // 5078
@13 // 5079
M=D // 5080
@Plane.color.ret.4 // 5081
D=A // 5082
@CALL // 5083
0;JMP // 5084
(Plane.color.ret.4)
@SP // 5085
M=M-1 // 5086

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 5087
A=M+1 // 5088
D=M // 5089
@SP // 5090
AM=M+1 // 5091
A=A-1 // 5092
M=D // 5093
// call Vec3.clone
@6 // 5094
D=A // 5095
@14 // 5096
M=D // 5097
@Vec3.clone // 5098
D=A // 5099
@13 // 5100
M=D // 5101
@Plane.color.ret.5 // 5102
D=A // 5103
@CALL // 5104
0;JMP // 5105
(Plane.color.ret.5)
@SP // 5106
AM=M-1 // 5107
D=M // 5108
@LCL // 5109
A=M // 5110
M=D // 5111

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("static 1")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5112
A=M // 5113
D=M // 5114
@SP // 5115
AM=M+1 // 5116
A=A-1 // 5117
M=D // 5118
@Plane.1 // 5119
D=M // 5120
@SP // 5121
AM=M+1 // 5122
A=A-1 // 5123
M=D // 5124
// call Vec3.do_cross
@7 // 5125
D=A // 5126
@14 // 5127
M=D // 5128
@Vec3.do_cross // 5129
D=A // 5130
@13 // 5131
M=D // 5132
@Plane.color.ret.6 // 5133
D=A // 5134
@CALL // 5135
0;JMP // 5136
(Plane.color.ret.6)
@SP // 5137
M=M-1 // 5138

////LabelInstruction{label='Plane.color$IF_FALSE2}
// label Plane.color$IF_FALSE2
(Plane.color$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 5139
A=M+1 // 5140
D=M // 5141
@SP // 5142
AM=M+1 // 5143
A=A-1 // 5144
M=D // 5145
// call Vec3.clone
@6 // 5146
D=A // 5147
@14 // 5148
M=D // 5149
@Vec3.clone // 5150
D=A // 5151
@13 // 5152
M=D // 5153
@Plane.color.ret.7 // 5154
D=A // 5155
@CALL // 5156
0;JMP // 5157
(Plane.color.ret.7)
@SP // 5158
AM=M-1 // 5159
D=M // 5160
@LCL // 5161
A=M+1 // 5162
M=D // 5163

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5164
A=M+1 // 5165
D=M // 5166
@SP // 5167
AM=M+1 // 5168
A=A-1 // 5169
M=D // 5170
@LCL // 5171
A=M // 5172
D=M // 5173
@SP // 5174
AM=M+1 // 5175
A=A-1 // 5176
M=D // 5177
// call Vec3.do_cross
@7 // 5178
D=A // 5179
@14 // 5180
M=D // 5181
@Vec3.do_cross // 5182
D=A // 5183
@13 // 5184
M=D // 5185
@Plane.color.ret.8 // 5186
D=A // 5187
@CALL // 5188
0;JMP // 5189
(Plane.color.ret.8)
@SP // 5190
M=M-1 // 5191

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 5192
A=M+1 // 5193
D=M // 5194
@SP // 5195
AM=M+1 // 5196
A=A-1 // 5197
M=D // 5198
@LCL // 5199
A=M // 5200
D=M // 5201
@SP // 5202
AM=M+1 // 5203
A=A-1 // 5204
M=D // 5205
// call Vec3.dot
@7 // 5206
D=A // 5207
@14 // 5208
M=D // 5209
@Vec3.dot // 5210
D=A // 5211
@13 // 5212
M=D // 5213
@Plane.color.ret.9 // 5214
D=A // 5215
@CALL // 5216
0;JMP // 5217
(Plane.color.ret.9)
@SP // 5218
AM=M-1 // 5219
D=M // 5220
@LCL // 5221
A=M+1 // 5222
A=A+1 // 5223
A=A+1 // 5224
M=D // 5225

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 3")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5226
A=M+1 // 5227
A=A+1 // 5228
A=A+1 // 5229
D=M // 5230
@SP // 5231
AM=M+1 // 5232
A=A-1 // 5233
M=D // 5234
@Plane.3 // 5235
D=M // 5236
@SP // 5237
AM=M+1 // 5238
A=A-1 // 5239
M=D // 5240
// call Number.do_mul
@7 // 5241
D=A // 5242
@14 // 5243
M=D // 5244
@Number.do_mul // 5245
D=A // 5246
@13 // 5247
M=D // 5248
@Plane.color.ret.10 // 5249
D=A // 5250
@CALL // 5251
0;JMP // 5252
(Plane.color.ret.10)
@SP // 5253
M=M-1 // 5254

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5255
A=M+1 // 5256
A=A+1 // 5257
A=A+1 // 5258
D=M // 5259
@SP // 5260
AM=M+1 // 5261
A=A-1 // 5262
M=D // 5263
@Plane.2 // 5264
D=M // 5265
@SP // 5266
AM=M+1 // 5267
A=A-1 // 5268
M=D // 5269
// call Number.do_add
@7 // 5270
D=A // 5271
@14 // 5272
M=D // 5273
@Number.do_add // 5274
D=A // 5275
@13 // 5276
M=D // 5277
@Plane.color.ret.11 // 5278
D=A // 5279
@CALL // 5280
0;JMP // 5281
(Plane.color.ret.11)
@SP // 5282
M=M-1 // 5283

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.to_int32}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 5284
A=M+1 // 5285
A=A+1 // 5286
A=A+1 // 5287
D=M // 5288
@SP // 5289
AM=M+1 // 5290
A=A-1 // 5291
M=D // 5292
// call Number.to_int32
@6 // 5293
D=A // 5294
@14 // 5295
M=D // 5296
@Number.to_int32 // 5297
D=A // 5298
@13 // 5299
M=D // 5300
@Plane.color.ret.12 // 5301
D=A // 5302
@CALL // 5303
0;JMP // 5304
(Plane.color.ret.12)
@LCL // 5305
D=M // 5306
@4 // 5307
A=D+A // 5308
D=A // 5309
@R13 // 5310
M=D // 5311
@SP // 5312
AM=M-1 // 5313
D=M // 5314
@R13 // 5315
A=M // 5316
M=D // 5317

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("local 1")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 5318
A=M+1 // 5319
D=M // 5320
@SP // 5321
AM=M+1 // 5322
A=A-1 // 5323
M=D // 5324
@LCL // 5325
A=M+1 // 5326
D=M // 5327
@SP // 5328
AM=M+1 // 5329
A=A-1 // 5330
M=D // 5331
// call Vec3.dot
@7 // 5332
D=A // 5333
@14 // 5334
M=D // 5335
@Vec3.dot // 5336
D=A // 5337
@13 // 5338
M=D // 5339
@Plane.color.ret.13 // 5340
D=A // 5341
@CALL // 5342
0;JMP // 5343
(Plane.color.ret.13)
@SP // 5344
AM=M-1 // 5345
D=M // 5346
@LCL // 5347
A=M+1 // 5348
A=A+1 // 5349
A=A+1 // 5350
M=D // 5351

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 3")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5352
A=M+1 // 5353
A=A+1 // 5354
A=A+1 // 5355
D=M // 5356
@SP // 5357
AM=M+1 // 5358
A=A-1 // 5359
M=D // 5360
@Plane.3 // 5361
D=M // 5362
@SP // 5363
AM=M+1 // 5364
A=A-1 // 5365
M=D // 5366
// call Number.do_mul
@7 // 5367
D=A // 5368
@14 // 5369
M=D // 5370
@Number.do_mul // 5371
D=A // 5372
@13 // 5373
M=D // 5374
@Plane.color.ret.14 // 5375
D=A // 5376
@CALL // 5377
0;JMP // 5378
(Plane.color.ret.14)
@SP // 5379
M=M-1 // 5380

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5381
A=M+1 // 5382
A=A+1 // 5383
A=A+1 // 5384
D=M // 5385
@SP // 5386
AM=M+1 // 5387
A=A-1 // 5388
M=D // 5389
@Plane.2 // 5390
D=M // 5391
@SP // 5392
AM=M+1 // 5393
A=A-1 // 5394
M=D // 5395
// call Number.do_add
@7 // 5396
D=A // 5397
@14 // 5398
M=D // 5399
@Number.do_add // 5400
D=A // 5401
@13 // 5402
M=D // 5403
@Plane.color.ret.15 // 5404
D=A // 5405
@CALL // 5406
0;JMP // 5407
(Plane.color.ret.15)
@SP // 5408
M=M-1 // 5409

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.to_int32}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 5410
A=M+1 // 5411
A=A+1 // 5412
A=A+1 // 5413
D=M // 5414
@SP // 5415
AM=M+1 // 5416
A=A-1 // 5417
M=D // 5418
// call Number.to_int32
@6 // 5419
D=A // 5420
@14 // 5421
M=D // 5422
@Number.to_int32 // 5423
D=A // 5424
@13 // 5425
M=D // 5426
@Plane.color.ret.16 // 5427
D=A // 5428
@CALL // 5429
0;JMP // 5430
(Plane.color.ret.16)
@LCL // 5431
D=M // 5432
@5 // 5433
A=D+A // 5434
D=A // 5435
@R13 // 5436
M=D // 5437
@SP // 5438
AM=M-1 // 5439
D=M // 5440
@R13 // 5441
A=M // 5442
M=D // 5443

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 5444
D=M // 5445
@4 // 5446
A=D+A // 5447
D=M // 5448
@SP // 5449
AM=M+1 // 5450
A=A-1 // 5451
M=D // 5452
// call Int32.clone
@6 // 5453
D=A // 5454
@14 // 5455
M=D // 5456
@Int32.clone // 5457
D=A // 5458
@13 // 5459
M=D // 5460
@Plane.color.ret.17 // 5461
D=A // 5462
@CALL // 5463
0;JMP // 5464
(Plane.color.ret.17)
@LCL // 5465
D=M // 5466
@6 // 5467
A=D+A // 5468
D=A // 5469
@R13 // 5470
M=D // 5471
@SP // 5472
AM=M-1 // 5473
D=M // 5474
@R13 // 5475
A=M // 5476
M=D // 5477

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 5")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5478
D=M // 5479
@6 // 5480
A=D+A // 5481
D=M // 5482
@SP // 5483
AM=M+1 // 5484
A=A-1 // 5485
M=D // 5486
@LCL // 5487
D=M // 5488
@5 // 5489
A=D+A // 5490
D=M // 5491
@SP // 5492
AM=M+1 // 5493
A=A-1 // 5494
M=D // 5495
// call Int32.do_add
@7 // 5496
D=A // 5497
@14 // 5498
M=D // 5499
@Int32.do_add // 5500
D=A // 5501
@13 // 5502
M=D // 5503
@Plane.color.ret.18 // 5504
D=A // 5505
@CALL // 5506
0;JMP // 5507
(Plane.color.ret.18)
@SP // 5508
M=M-1 // 5509

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.is_even}}, ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE3}}
@LCL // 5510
D=M // 5511
@6 // 5512
A=D+A // 5513
D=M // 5514
@SP // 5515
AM=M+1 // 5516
A=A-1 // 5517
M=D // 5518
// call Int32.is_even
@6 // 5519
D=A // 5520
@14 // 5521
M=D // 5522
@Int32.is_even // 5523
D=A // 5524
@13 // 5525
M=D // 5526
@Plane.color.ret.19 // 5527
D=A // 5528
@CALL // 5529
0;JMP // 5530
(Plane.color.ret.19)
@SP // 5531
AM=M-1 // 5532
D=M // 5533
@Plane.color$IF_TRUE3 // 5534
D;JNE // 5535

////GotoInstruction{label='Plane.color$IF_FALSE3}
// goto Plane.color$IF_FALSE3
@Plane.color$IF_FALSE3 // 5536
0;JMP // 5537

////LabelInstruction{label='Plane.color$IF_TRUE3}
// label Plane.color$IF_TRUE3
(Plane.color$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 4")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@Plane.4 // 5538
D=M // 5539
@SP // 5540
AM=M+1 // 5541
A=A-1 // 5542
M=D // 5543
// call Number.clone
@6 // 5544
D=A // 5545
@14 // 5546
M=D // 5547
@Number.clone // 5548
D=A // 5549
@13 // 5550
M=D // 5551
@Plane.color.ret.20 // 5552
D=A // 5553
@CALL // 5554
0;JMP // 5555
(Plane.color.ret.20)
@LCL // 5556
D=M // 5557
@7 // 5558
A=D+A // 5559
D=A // 5560
@R13 // 5561
M=D // 5562
@SP // 5563
AM=M-1 // 5564
D=M // 5565
@R13 // 5566
A=M // 5567
M=D // 5568

////GotoInstruction{label='Plane.color$IF_END3}
// goto Plane.color$IF_END3
@Plane.color$IF_END3 // 5569
0;JMP // 5570

////LabelInstruction{label='Plane.color$IF_FALSE3}
// label Plane.color$IF_FALSE3
(Plane.color$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 5")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@Plane.5 // 5571
D=M // 5572
@SP // 5573
AM=M+1 // 5574
A=A-1 // 5575
M=D // 5576
// call Number.clone
@6 // 5577
D=A // 5578
@14 // 5579
M=D // 5580
@Number.clone // 5581
D=A // 5582
@13 // 5583
M=D // 5584
@Plane.color.ret.21 // 5585
D=A // 5586
@CALL // 5587
0;JMP // 5588
(Plane.color.ret.21)
@LCL // 5589
D=M // 5590
@7 // 5591
A=D+A // 5592
D=A // 5593
@R13 // 5594
M=D // 5595
@SP // 5596
AM=M-1 // 5597
D=M // 5598
@R13 // 5599
A=M // 5600
M=D // 5601

////LabelInstruction{label='Plane.color$IF_END3}
// label Plane.color$IF_END3
(Plane.color$IF_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5602
A=M // 5603
D=M // 5604
@SP // 5605
AM=M+1 // 5606
A=A-1 // 5607
M=D // 5608
// call Vec3.dispose
@6 // 5609
D=A // 5610
@14 // 5611
M=D // 5612
@Vec3.dispose // 5613
D=A // 5614
@13 // 5615
M=D // 5616
@Plane.color.ret.22 // 5617
D=A // 5618
@CALL // 5619
0;JMP // 5620
(Plane.color.ret.22)
@SP // 5621
M=M-1 // 5622

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5623
A=M+1 // 5624
D=M // 5625
@SP // 5626
AM=M+1 // 5627
A=A-1 // 5628
M=D // 5629
// call Vec3.dispose
@6 // 5630
D=A // 5631
@14 // 5632
M=D // 5633
@Vec3.dispose // 5634
D=A // 5635
@13 // 5636
M=D // 5637
@Plane.color.ret.23 // 5638
D=A // 5639
@CALL // 5640
0;JMP // 5641
(Plane.color.ret.23)
@SP // 5642
M=M-1 // 5643

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5644
A=M+1 // 5645
A=A+1 // 5646
D=M // 5647
@SP // 5648
AM=M+1 // 5649
A=A-1 // 5650
M=D // 5651
// call Number.dispose
@6 // 5652
D=A // 5653
@14 // 5654
M=D // 5655
@Number.dispose // 5656
D=A // 5657
@13 // 5658
M=D // 5659
@Plane.color.ret.24 // 5660
D=A // 5661
@CALL // 5662
0;JMP // 5663
(Plane.color.ret.24)
@SP // 5664
M=M-1 // 5665

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5666
D=M // 5667
@4 // 5668
A=D+A // 5669
D=M // 5670
@SP // 5671
AM=M+1 // 5672
A=A-1 // 5673
M=D // 5674
// call Int32.dispose
@6 // 5675
D=A // 5676
@14 // 5677
M=D // 5678
@Int32.dispose // 5679
D=A // 5680
@13 // 5681
M=D // 5682
@Plane.color.ret.25 // 5683
D=A // 5684
@CALL // 5685
0;JMP // 5686
(Plane.color.ret.25)
@SP // 5687
M=M-1 // 5688

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5689
D=M // 5690
@5 // 5691
A=D+A // 5692
D=M // 5693
@SP // 5694
AM=M+1 // 5695
A=A-1 // 5696
M=D // 5697
// call Int32.dispose
@6 // 5698
D=A // 5699
@14 // 5700
M=D // 5701
@Int32.dispose // 5702
D=A // 5703
@13 // 5704
M=D // 5705
@Plane.color.ret.26 // 5706
D=A // 5707
@CALL // 5708
0;JMP // 5709
(Plane.color.ret.26)
@SP // 5710
M=M-1 // 5711

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5712
D=M // 5713
@6 // 5714
A=D+A // 5715
D=M // 5716
@SP // 5717
AM=M+1 // 5718
A=A-1 // 5719
M=D // 5720
// call Int32.dispose
@6 // 5721
D=A // 5722
@14 // 5723
M=D // 5724
@Int32.dispose // 5725
D=A // 5726
@13 // 5727
M=D // 5728
@Plane.color.ret.27 // 5729
D=A // 5730
@CALL // 5731
0;JMP // 5732
(Plane.color.ret.27)
@SP // 5733
M=M-1 // 5734

////PushInstruction("local 7")
@LCL // 5735
D=M // 5736
@7 // 5737
A=D+A // 5738
D=M // 5739
@SP // 5740
AM=M+1 // 5741
A=A-1 // 5742
M=D // 5743
@RETURN // 5744
0;JMP // 5745

////GotoInstruction{label='Plane.color$IF_END1}
// goto Plane.color$IF_END1
@Plane.color$IF_END1 // 5746
0;JMP // 5747

////LabelInstruction{label='Plane.color$IF_FALSE1}
// label Plane.color$IF_FALSE1
(Plane.color$IF_FALSE1)

////CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
@THIS // 5748
A=M+1 // 5749
A=A+1 // 5750
D=M // 5751
@SP // 5752
AM=M+1 // 5753
A=A-1 // 5754
M=D // 5755
// call Number.clone
@6 // 5756
D=A // 5757
@14 // 5758
M=D // 5759
@Number.clone // 5760
D=A // 5761
@13 // 5762
M=D // 5763
@Plane.color.ret.28 // 5764
D=A // 5765
@CALL // 5766
0;JMP // 5767
(Plane.color.ret.28)
@RETURN // 5768
0;JMP // 5769

////LabelInstruction{label='Plane.color$IF_END1}
// label Plane.color$IF_END1
(Plane.color$IF_END1)

////FunctionInstruction{functionName='Output.init', numLocals=1, funcMapping={Output.println=0, Output.getMap=0, Output.create=1}}
// function Output.init with 1
(Output.init)
@SP // 5770
AM=M+1 // 5771
A=A-1 // 5772
M=0 // 5773

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 127")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=static 0}
//}

@127 // 5774
D=A // 5775
@SP // 5776
AM=M+1 // 5777
A=A-1 // 5778
M=D // 5779
// call Array.new
@6 // 5780
D=A // 5781
@14 // 5782
M=D // 5783
@Array.new // 5784
D=A // 5785
@13 // 5786
M=D // 5787
@Output.init.ret.0 // 5788
D=A // 5789
@CALL // 5790
0;JMP // 5791
(Output.init.ret.0)
@SP // 5792
AM=M-1 // 5793
D=M // 5794
@Output.0 // 5795
M=D // 5796

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@12 // 5797
D=A // 5798
@SP // 5799
M=D+M // 5800
@63 // 5801
D=A // 5802
@SP // 5803
A=M-1 // 5804
M=0 // 5805
A=A-1 // 5806
M=0 // 5807
A=A-1 // 5808
M=D // 5809
A=A-1 // 5810
M=D // 5811
A=A-1 // 5812
M=D // 5813
A=A-1 // 5814
M=D // 5815
A=A-1 // 5816
M=D // 5817
A=A-1 // 5818
M=D // 5819
A=A-1 // 5820
M=D // 5821
A=A-1 // 5822
M=D // 5823
A=A-1 // 5824
M=D // 5825
A=A-1 // 5826
M=0 // 5827
// call Output.create
@17 // 5828
D=A // 5829
@14 // 5830
M=D // 5831
@Output.create // 5832
D=A // 5833
@13 // 5834
M=D // 5835
@Output.init.ret.1 // 5836
D=A // 5837
@CALL // 5838
0;JMP // 5839
(Output.init.ret.1)
@SP // 5840
M=M-1 // 5841

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 32"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@12 // 5842
D=A // 5843
@SP // 5844
M=D+M // 5845
@32 // 5846
D=A // 5847
@SP // 5848
A=M-1 // 5849
M=0 // 5850
A=A-1 // 5851
M=0 // 5852
A=A-1 // 5853
M=0 // 5854
A=A-1 // 5855
M=0 // 5856
A=A-1 // 5857
M=0 // 5858
A=A-1 // 5859
M=0 // 5860
A=A-1 // 5861
M=0 // 5862
A=A-1 // 5863
M=0 // 5864
A=A-1 // 5865
M=0 // 5866
A=A-1 // 5867
M=0 // 5868
A=A-1 // 5869
M=0 // 5870
A=A-1 // 5871
M=D // 5872
A=A-1 // 5873
// call Output.create
@17 // 5874
D=A // 5875
@14 // 5876
M=D // 5877
@Output.create // 5878
D=A // 5879
@13 // 5880
M=D // 5881
@Output.init.ret.2 // 5882
D=A // 5883
@CALL // 5884
0;JMP // 5885
(Output.init.ret.2)
@SP // 5886
M=M-1 // 5887

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 33"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@33 // 5888
D=A // 5889
@SP // 5890
AM=M+1 // 5891
A=A-1 // 5892
M=D // 5893
@12 // 5894
D=A // 5895
@SP // 5896
AM=M+1 // 5897
A=A-1 // 5898
M=D // 5899
@30 // 5900
D=A // 5901
@SP // 5902
AM=M+1 // 5903
A=A-1 // 5904
M=D // 5905
@30 // 5906
D=A // 5907
@SP // 5908
AM=M+1 // 5909
A=A-1 // 5910
M=D // 5911
@30 // 5912
D=A // 5913
@SP // 5914
AM=M+1 // 5915
A=A-1 // 5916
M=D // 5917
@12 // 5918
D=A // 5919
@SP // 5920
AM=M+1 // 5921
A=A-1 // 5922
M=D // 5923
@12 // 5924
D=A // 5925
@SP // 5926
AM=M+1 // 5927
A=A-1 // 5928
M=D // 5929
@SP // 5930
AM=M+1 // 5931
A=A-1 // 5932
M=0 // 5933
@4 // 5934
D=A // 5935
@SP // 5936
M=D+M // 5937
@12 // 5938
D=A // 5939
@SP // 5940
A=M-1 // 5941
M=0 // 5942
A=A-1 // 5943
M=0 // 5944
A=A-1 // 5945
M=D // 5946
A=A-1 // 5947
M=D // 5948
A=A-1 // 5949
// call Output.create
@17 // 5950
D=A // 5951
@14 // 5952
M=D // 5953
@Output.create // 5954
D=A // 5955
@13 // 5956
M=D // 5957
@Output.init.ret.3 // 5958
D=A // 5959
@CALL // 5960
0;JMP // 5961
(Output.init.ret.3)
@SP // 5962
M=M-1 // 5963

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 34"), PushInstruction("constant 54"), PushInstruction("constant 54"), PushInstruction("constant 20"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@34 // 5964
D=A // 5965
@SP // 5966
AM=M+1 // 5967
A=A-1 // 5968
M=D // 5969
@54 // 5970
D=A // 5971
@SP // 5972
AM=M+1 // 5973
A=A-1 // 5974
M=D // 5975
@54 // 5976
D=A // 5977
@SP // 5978
AM=M+1 // 5979
A=A-1 // 5980
M=D // 5981
@20 // 5982
D=A // 5983
@SP // 5984
AM=M+1 // 5985
A=A-1 // 5986
M=D // 5987
@SP // 5988
AM=M+1 // 5989
A=A-1 // 5990
M=0 // 5991
@SP // 5992
AM=M+1 // 5993
A=A-1 // 5994
M=0 // 5995
@SP // 5996
AM=M+1 // 5997
A=A-1 // 5998
M=0 // 5999
@SP // 6000
AM=M+1 // 6001
A=A-1 // 6002
M=0 // 6003
@SP // 6004
AM=M+1 // 6005
A=A-1 // 6006
M=0 // 6007
@SP // 6008
AM=M+1 // 6009
A=A-1 // 6010
M=0 // 6011
@SP // 6012
AM=M+1 // 6013
A=A-1 // 6014
M=0 // 6015
@SP // 6016
AM=M+1 // 6017
A=A-1 // 6018
M=0 // 6019
// call Output.create
@17 // 6020
D=A // 6021
@14 // 6022
M=D // 6023
@Output.create // 6024
D=A // 6025
@13 // 6026
M=D // 6027
@Output.init.ret.4 // 6028
D=A // 6029
@CALL // 6030
0;JMP // 6031
(Output.init.ret.4)
@SP // 6032
M=M-1 // 6033

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 35"), PushInstruction("constant 0"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 6034
D=A // 6035
@SP // 6036
M=D+M // 6037
@35 // 6038
D=A // 6039
@SP // 6040
A=M-1 // 6041
M=0 // 6042
A=A-1 // 6043
M=D // 6044
A=A-1 // 6045
@18 // 6046
D=A // 6047
@SP // 6048
AM=M+1 // 6049
A=A-1 // 6050
M=D // 6051
@18 // 6052
D=A // 6053
@SP // 6054
AM=M+1 // 6055
A=A-1 // 6056
M=D // 6057
@63 // 6058
D=A // 6059
@SP // 6060
AM=M+1 // 6061
A=A-1 // 6062
M=D // 6063
@18 // 6064
D=A // 6065
@SP // 6066
AM=M+1 // 6067
A=A-1 // 6068
M=D // 6069
@18 // 6070
D=A // 6071
@SP // 6072
AM=M+1 // 6073
A=A-1 // 6074
M=D // 6075
@63 // 6076
D=A // 6077
@SP // 6078
AM=M+1 // 6079
A=A-1 // 6080
M=D // 6081
@18 // 6082
D=A // 6083
@SP // 6084
AM=M+1 // 6085
A=A-1 // 6086
M=D // 6087
@18 // 6088
D=A // 6089
@SP // 6090
AM=M+1 // 6091
A=A-1 // 6092
M=D // 6093
@SP // 6094
AM=M+1 // 6095
A=A-1 // 6096
M=0 // 6097
@SP // 6098
AM=M+1 // 6099
A=A-1 // 6100
M=0 // 6101
// call Output.create
@17 // 6102
D=A // 6103
@14 // 6104
M=D // 6105
@Output.create // 6106
D=A // 6107
@13 // 6108
M=D // 6109
@Output.init.ret.5 // 6110
D=A // 6111
@CALL // 6112
0;JMP // 6113
(Output.init.ret.5)
@SP // 6114
M=M-1 // 6115

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 36"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 30"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@36 // 6116
D=A // 6117
@SP // 6118
AM=M+1 // 6119
A=A-1 // 6120
M=D // 6121
@12 // 6122
D=A // 6123
@SP // 6124
AM=M+1 // 6125
A=A-1 // 6126
M=D // 6127
@30 // 6128
D=A // 6129
@SP // 6130
AM=M+1 // 6131
A=A-1 // 6132
M=D // 6133
@51 // 6134
D=A // 6135
@SP // 6136
AM=M+1 // 6137
A=A-1 // 6138
M=D // 6139
@3 // 6140
D=A // 6141
@SP // 6142
AM=M+1 // 6143
A=A-1 // 6144
M=D // 6145
@30 // 6146
D=A // 6147
@SP // 6148
AM=M+1 // 6149
A=A-1 // 6150
M=D // 6151
@48 // 6152
D=A // 6153
@SP // 6154
AM=M+1 // 6155
A=A-1 // 6156
M=D // 6157
@51 // 6158
D=A // 6159
@SP // 6160
AM=M+1 // 6161
A=A-1 // 6162
M=D // 6163
@30 // 6164
D=A // 6165
@SP // 6166
AM=M+1 // 6167
A=A-1 // 6168
M=D // 6169
@12 // 6170
D=A // 6171
@SP // 6172
AM=M+1 // 6173
A=A-1 // 6174
M=D // 6175
@12 // 6176
D=A // 6177
@SP // 6178
AM=M+1 // 6179
A=A-1 // 6180
M=D // 6181
@SP // 6182
AM=M+1 // 6183
A=A-1 // 6184
M=0 // 6185
// call Output.create
@17 // 6186
D=A // 6187
@14 // 6188
M=D // 6189
@Output.create // 6190
D=A // 6191
@13 // 6192
M=D // 6193
@Output.init.ret.6 // 6194
D=A // 6195
@CALL // 6196
0;JMP // 6197
(Output.init.ret.6)
@SP // 6198
M=M-1 // 6199

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 37"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 51"), PushInstruction("constant 49"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 6200
D=A // 6201
@SP // 6202
M=D+M // 6203
@37 // 6204
D=A // 6205
@SP // 6206
A=M-1 // 6207
M=0 // 6208
A=A-1 // 6209
M=0 // 6210
A=A-1 // 6211
M=D // 6212
A=A-1 // 6213
@35 // 6214
D=A // 6215
@SP // 6216
AM=M+1 // 6217
A=A-1 // 6218
M=D // 6219
@51 // 6220
D=A // 6221
@SP // 6222
AM=M+1 // 6223
A=A-1 // 6224
M=D // 6225
@24 // 6226
D=A // 6227
@SP // 6228
AM=M+1 // 6229
A=A-1 // 6230
M=D // 6231
@12 // 6232
D=A // 6233
@SP // 6234
AM=M+1 // 6235
A=A-1 // 6236
M=D // 6237
@6 // 6238
D=A // 6239
@SP // 6240
AM=M+1 // 6241
A=A-1 // 6242
M=D // 6243
@51 // 6244
D=A // 6245
@SP // 6246
AM=M+1 // 6247
A=A-1 // 6248
M=D // 6249
@49 // 6250
D=A // 6251
@SP // 6252
AM=M+1 // 6253
A=A-1 // 6254
M=D // 6255
@SP // 6256
AM=M+1 // 6257
A=A-1 // 6258
M=0 // 6259
@SP // 6260
AM=M+1 // 6261
A=A-1 // 6262
M=0 // 6263
// call Output.create
@17 // 6264
D=A // 6265
@14 // 6266
M=D // 6267
@Output.create // 6268
D=A // 6269
@13 // 6270
M=D // 6271
@Output.init.ret.7 // 6272
D=A // 6273
@CALL // 6274
0;JMP // 6275
(Output.init.ret.7)
@SP // 6276
M=M-1 // 6277

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 38"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 54"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@38 // 6278
D=A // 6279
@SP // 6280
AM=M+1 // 6281
A=A-1 // 6282
M=D // 6283
@12 // 6284
D=A // 6285
@SP // 6286
AM=M+1 // 6287
A=A-1 // 6288
M=D // 6289
@30 // 6290
D=A // 6291
@SP // 6292
AM=M+1 // 6293
A=A-1 // 6294
M=D // 6295
@30 // 6296
D=A // 6297
@SP // 6298
AM=M+1 // 6299
A=A-1 // 6300
M=D // 6301
@12 // 6302
D=A // 6303
@SP // 6304
AM=M+1 // 6305
A=A-1 // 6306
M=D // 6307
@54 // 6308
D=A // 6309
@SP // 6310
AM=M+1 // 6311
A=A-1 // 6312
M=D // 6313
@27 // 6314
D=A // 6315
@SP // 6316
AM=M+1 // 6317
A=A-1 // 6318
M=D // 6319
@27 // 6320
D=A // 6321
@SP // 6322
AM=M+1 // 6323
A=A-1 // 6324
M=D // 6325
@27 // 6326
D=A // 6327
@SP // 6328
AM=M+1 // 6329
A=A-1 // 6330
M=D // 6331
@54 // 6332
D=A // 6333
@SP // 6334
AM=M+1 // 6335
A=A-1 // 6336
M=D // 6337
@SP // 6338
AM=M+1 // 6339
A=A-1 // 6340
M=0 // 6341
@SP // 6342
AM=M+1 // 6343
A=A-1 // 6344
M=0 // 6345
// call Output.create
@17 // 6346
D=A // 6347
@14 // 6348
M=D // 6349
@Output.create // 6350
D=A // 6351
@13 // 6352
M=D // 6353
@Output.init.ret.8 // 6354
D=A // 6355
@CALL // 6356
0;JMP // 6357
(Output.init.ret.8)
@SP // 6358
M=M-1 // 6359

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 39"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@39 // 6360
D=A // 6361
@SP // 6362
AM=M+1 // 6363
A=A-1 // 6364
M=D // 6365
@12 // 6366
D=A // 6367
@SP // 6368
AM=M+1 // 6369
A=A-1 // 6370
M=D // 6371
@12 // 6372
D=A // 6373
@SP // 6374
AM=M+1 // 6375
A=A-1 // 6376
M=D // 6377
@6 // 6378
D=A // 6379
@SP // 6380
AM=M+1 // 6381
A=A-1 // 6382
M=D // 6383
@SP // 6384
AM=M+1 // 6385
A=A-1 // 6386
M=0 // 6387
@SP // 6388
AM=M+1 // 6389
A=A-1 // 6390
M=0 // 6391
@SP // 6392
AM=M+1 // 6393
A=A-1 // 6394
M=0 // 6395
@SP // 6396
AM=M+1 // 6397
A=A-1 // 6398
M=0 // 6399
@SP // 6400
AM=M+1 // 6401
A=A-1 // 6402
M=0 // 6403
@SP // 6404
AM=M+1 // 6405
A=A-1 // 6406
M=0 // 6407
@SP // 6408
AM=M+1 // 6409
A=A-1 // 6410
M=0 // 6411
@SP // 6412
AM=M+1 // 6413
A=A-1 // 6414
M=0 // 6415
// call Output.create
@17 // 6416
D=A // 6417
@14 // 6418
M=D // 6419
@Output.create // 6420
D=A // 6421
@13 // 6422
M=D // 6423
@Output.init.ret.9 // 6424
D=A // 6425
@CALL // 6426
0;JMP // 6427
(Output.init.ret.9)
@SP // 6428
M=M-1 // 6429

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 40"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@40 // 6430
D=A // 6431
@SP // 6432
AM=M+1 // 6433
A=A-1 // 6434
M=D // 6435
@24 // 6436
D=A // 6437
@SP // 6438
AM=M+1 // 6439
A=A-1 // 6440
M=D // 6441
@12 // 6442
D=A // 6443
@SP // 6444
AM=M+1 // 6445
A=A-1 // 6446
M=D // 6447
@6 // 6448
D=A // 6449
@SP // 6450
AM=M+1 // 6451
A=A-1 // 6452
M=D // 6453
@6 // 6454
D=A // 6455
@SP // 6456
AM=M+1 // 6457
A=A-1 // 6458
M=D // 6459
@6 // 6460
D=A // 6461
@SP // 6462
AM=M+1 // 6463
A=A-1 // 6464
M=D // 6465
@6 // 6466
D=A // 6467
@SP // 6468
AM=M+1 // 6469
A=A-1 // 6470
M=D // 6471
@6 // 6472
D=A // 6473
@SP // 6474
AM=M+1 // 6475
A=A-1 // 6476
M=D // 6477
@12 // 6478
D=A // 6479
@SP // 6480
AM=M+1 // 6481
A=A-1 // 6482
M=D // 6483
@24 // 6484
D=A // 6485
@SP // 6486
AM=M+1 // 6487
A=A-1 // 6488
M=D // 6489
@SP // 6490
AM=M+1 // 6491
A=A-1 // 6492
M=0 // 6493
@SP // 6494
AM=M+1 // 6495
A=A-1 // 6496
M=0 // 6497
// call Output.create
@17 // 6498
D=A // 6499
@14 // 6500
M=D // 6501
@Output.create // 6502
D=A // 6503
@13 // 6504
M=D // 6505
@Output.init.ret.10 // 6506
D=A // 6507
@CALL // 6508
0;JMP // 6509
(Output.init.ret.10)
@SP // 6510
M=M-1 // 6511

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 41"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@41 // 6512
D=A // 6513
@SP // 6514
AM=M+1 // 6515
A=A-1 // 6516
M=D // 6517
@6 // 6518
D=A // 6519
@SP // 6520
AM=M+1 // 6521
A=A-1 // 6522
M=D // 6523
@12 // 6524
D=A // 6525
@SP // 6526
AM=M+1 // 6527
A=A-1 // 6528
M=D // 6529
@24 // 6530
D=A // 6531
@SP // 6532
AM=M+1 // 6533
A=A-1 // 6534
M=D // 6535
@24 // 6536
D=A // 6537
@SP // 6538
AM=M+1 // 6539
A=A-1 // 6540
M=D // 6541
@24 // 6542
D=A // 6543
@SP // 6544
AM=M+1 // 6545
A=A-1 // 6546
M=D // 6547
@24 // 6548
D=A // 6549
@SP // 6550
AM=M+1 // 6551
A=A-1 // 6552
M=D // 6553
@24 // 6554
D=A // 6555
@SP // 6556
AM=M+1 // 6557
A=A-1 // 6558
M=D // 6559
@12 // 6560
D=A // 6561
@SP // 6562
AM=M+1 // 6563
A=A-1 // 6564
M=D // 6565
@6 // 6566
D=A // 6567
@SP // 6568
AM=M+1 // 6569
A=A-1 // 6570
M=D // 6571
@SP // 6572
AM=M+1 // 6573
A=A-1 // 6574
M=0 // 6575
@SP // 6576
AM=M+1 // 6577
A=A-1 // 6578
M=0 // 6579
// call Output.create
@17 // 6580
D=A // 6581
@14 // 6582
M=D // 6583
@Output.create // 6584
D=A // 6585
@13 // 6586
M=D // 6587
@Output.init.ret.11 // 6588
D=A // 6589
@CALL // 6590
0;JMP // 6591
(Output.init.ret.11)
@SP // 6592
M=M-1 // 6593

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 42"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 63"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 6594
D=A // 6595
@SP // 6596
M=D+M // 6597
@42 // 6598
D=A // 6599
@SP // 6600
A=M-1 // 6601
M=0 // 6602
A=A-1 // 6603
M=0 // 6604
A=A-1 // 6605
M=0 // 6606
A=A-1 // 6607
M=D // 6608
A=A-1 // 6609
@51 // 6610
D=A // 6611
@SP // 6612
AM=M+1 // 6613
A=A-1 // 6614
M=D // 6615
@30 // 6616
D=A // 6617
@SP // 6618
AM=M+1 // 6619
A=A-1 // 6620
M=D // 6621
@63 // 6622
D=A // 6623
@SP // 6624
AM=M+1 // 6625
A=A-1 // 6626
M=D // 6627
@30 // 6628
D=A // 6629
@SP // 6630
AM=M+1 // 6631
A=A-1 // 6632
M=D // 6633
@51 // 6634
D=A // 6635
@SP // 6636
AM=M+1 // 6637
A=A-1 // 6638
M=D // 6639
@SP // 6640
AM=M+1 // 6641
A=A-1 // 6642
M=0 // 6643
@SP // 6644
AM=M+1 // 6645
A=A-1 // 6646
M=0 // 6647
@SP // 6648
AM=M+1 // 6649
A=A-1 // 6650
M=0 // 6651
// call Output.create
@17 // 6652
D=A // 6653
@14 // 6654
M=D // 6655
@Output.create // 6656
D=A // 6657
@13 // 6658
M=D // 6659
@Output.init.ret.12 // 6660
D=A // 6661
@CALL // 6662
0;JMP // 6663
(Output.init.ret.12)
@SP // 6664
M=M-1 // 6665

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 43"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 63"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 6666
D=A // 6667
@SP // 6668
M=D+M // 6669
@43 // 6670
D=A // 6671
@SP // 6672
A=M-1 // 6673
M=0 // 6674
A=A-1 // 6675
M=0 // 6676
A=A-1 // 6677
M=0 // 6678
A=A-1 // 6679
M=D // 6680
A=A-1 // 6681
@12 // 6682
D=A // 6683
@SP // 6684
AM=M+1 // 6685
A=A-1 // 6686
M=D // 6687
@12 // 6688
D=A // 6689
@SP // 6690
AM=M+1 // 6691
A=A-1 // 6692
M=D // 6693
@63 // 6694
D=A // 6695
@SP // 6696
AM=M+1 // 6697
A=A-1 // 6698
M=D // 6699
@12 // 6700
D=A // 6701
@SP // 6702
AM=M+1 // 6703
A=A-1 // 6704
M=D // 6705
@12 // 6706
D=A // 6707
@SP // 6708
AM=M+1 // 6709
A=A-1 // 6710
M=D // 6711
@SP // 6712
AM=M+1 // 6713
A=A-1 // 6714
M=0 // 6715
@SP // 6716
AM=M+1 // 6717
A=A-1 // 6718
M=0 // 6719
@SP // 6720
AM=M+1 // 6721
A=A-1 // 6722
M=0 // 6723
// call Output.create
@17 // 6724
D=A // 6725
@14 // 6726
M=D // 6727
@Output.create // 6728
D=A // 6729
@13 // 6730
M=D // 6731
@Output.init.ret.13 // 6732
D=A // 6733
@CALL // 6734
0;JMP // 6735
(Output.init.ret.13)
@SP // 6736
M=M-1 // 6737

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 44"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@8 // 6738
D=A // 6739
@SP // 6740
M=D+M // 6741
@44 // 6742
D=A // 6743
@SP // 6744
A=M-1 // 6745
M=0 // 6746
A=A-1 // 6747
M=0 // 6748
A=A-1 // 6749
M=0 // 6750
A=A-1 // 6751
M=0 // 6752
A=A-1 // 6753
M=0 // 6754
A=A-1 // 6755
M=0 // 6756
A=A-1 // 6757
M=0 // 6758
A=A-1 // 6759
M=D // 6760
A=A-1 // 6761
@12 // 6762
D=A // 6763
@SP // 6764
AM=M+1 // 6765
A=A-1 // 6766
M=D // 6767
@12 // 6768
D=A // 6769
@SP // 6770
AM=M+1 // 6771
A=A-1 // 6772
M=D // 6773
@6 // 6774
D=A // 6775
@SP // 6776
AM=M+1 // 6777
A=A-1 // 6778
M=D // 6779
@SP // 6780
AM=M+1 // 6781
A=A-1 // 6782
M=0 // 6783
// call Output.create
@17 // 6784
D=A // 6785
@14 // 6786
M=D // 6787
@Output.create // 6788
D=A // 6789
@13 // 6790
M=D // 6791
@Output.init.ret.14 // 6792
D=A // 6793
@CALL // 6794
0;JMP // 6795
(Output.init.ret.14)
@SP // 6796
M=M-1 // 6797

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 45"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@6 // 6798
D=A // 6799
@SP // 6800
M=D+M // 6801
@45 // 6802
D=A // 6803
@SP // 6804
A=M-1 // 6805
M=0 // 6806
A=A-1 // 6807
M=0 // 6808
A=A-1 // 6809
M=0 // 6810
A=A-1 // 6811
M=0 // 6812
A=A-1 // 6813
M=0 // 6814
A=A-1 // 6815
M=D // 6816
A=A-1 // 6817
@6 // 6818
D=A // 6819
@SP // 6820
M=D+M // 6821
@63 // 6822
D=A // 6823
@SP // 6824
A=M-1 // 6825
M=0 // 6826
A=A-1 // 6827
M=0 // 6828
A=A-1 // 6829
M=0 // 6830
A=A-1 // 6831
M=0 // 6832
A=A-1 // 6833
M=0 // 6834
A=A-1 // 6835
M=D // 6836
A=A-1 // 6837
// call Output.create
@17 // 6838
D=A // 6839
@14 // 6840
M=D // 6841
@Output.create // 6842
D=A // 6843
@13 // 6844
M=D // 6845
@Output.init.ret.15 // 6846
D=A // 6847
@CALL // 6848
0;JMP // 6849
(Output.init.ret.15)
@SP // 6850
M=M-1 // 6851

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 46"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@8 // 6852
D=A // 6853
@SP // 6854
M=D+M // 6855
@46 // 6856
D=A // 6857
@SP // 6858
A=M-1 // 6859
M=0 // 6860
A=A-1 // 6861
M=0 // 6862
A=A-1 // 6863
M=0 // 6864
A=A-1 // 6865
M=0 // 6866
A=A-1 // 6867
M=0 // 6868
A=A-1 // 6869
M=0 // 6870
A=A-1 // 6871
M=0 // 6872
A=A-1 // 6873
M=D // 6874
A=A-1 // 6875
@4 // 6876
D=A // 6877
@SP // 6878
M=D+M // 6879
@12 // 6880
D=A // 6881
@SP // 6882
A=M-1 // 6883
M=0 // 6884
A=A-1 // 6885
M=0 // 6886
A=A-1 // 6887
M=D // 6888
A=A-1 // 6889
M=D // 6890
A=A-1 // 6891
// call Output.create
@17 // 6892
D=A // 6893
@14 // 6894
M=D // 6895
@Output.create // 6896
D=A // 6897
@13 // 6898
M=D // 6899
@Output.init.ret.16 // 6900
D=A // 6901
@CALL // 6902
0;JMP // 6903
(Output.init.ret.16)
@SP // 6904
M=M-1 // 6905

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 47"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 32"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 1"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 6906
D=A // 6907
@SP // 6908
M=D+M // 6909
@47 // 6910
D=A // 6911
@SP // 6912
A=M-1 // 6913
M=0 // 6914
A=A-1 // 6915
M=0 // 6916
A=A-1 // 6917
M=D // 6918
A=A-1 // 6919
@32 // 6920
D=A // 6921
@SP // 6922
AM=M+1 // 6923
A=A-1 // 6924
M=D // 6925
@48 // 6926
D=A // 6927
@SP // 6928
AM=M+1 // 6929
A=A-1 // 6930
M=D // 6931
@24 // 6932
D=A // 6933
@SP // 6934
AM=M+1 // 6935
A=A-1 // 6936
M=D // 6937
@12 // 6938
D=A // 6939
@SP // 6940
AM=M+1 // 6941
A=A-1 // 6942
M=D // 6943
@6 // 6944
D=A // 6945
@SP // 6946
AM=M+1 // 6947
A=A-1 // 6948
M=D // 6949
@3 // 6950
D=A // 6951
@SP // 6952
AM=M+1 // 6953
A=A-1 // 6954
M=D // 6955
@SP // 6956
AM=M+1 // 6957
A=A-1 // 6958
M=1 // 6959
@SP // 6960
AM=M+1 // 6961
A=A-1 // 6962
M=0 // 6963
@SP // 6964
AM=M+1 // 6965
A=A-1 // 6966
M=0 // 6967
// call Output.create
@17 // 6968
D=A // 6969
@14 // 6970
M=D // 6971
@Output.create // 6972
D=A // 6973
@13 // 6974
M=D // 6975
@Output.init.ret.17 // 6976
D=A // 6977
@CALL // 6978
0;JMP // 6979
(Output.init.ret.17)
@SP // 6980
M=M-1 // 6981

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 48"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@48 // 6982
D=A // 6983
@SP // 6984
AM=M+1 // 6985
A=A-1 // 6986
M=D // 6987
@12 // 6988
D=A // 6989
@SP // 6990
AM=M+1 // 6991
A=A-1 // 6992
M=D // 6993
@30 // 6994
D=A // 6995
@SP // 6996
AM=M+1 // 6997
A=A-1 // 6998
M=D // 6999
@51 // 7000
D=A // 7001
@SP // 7002
AM=M+1 // 7003
A=A-1 // 7004
M=D // 7005
@51 // 7006
D=A // 7007
@SP // 7008
AM=M+1 // 7009
A=A-1 // 7010
M=D // 7011
@51 // 7012
D=A // 7013
@SP // 7014
AM=M+1 // 7015
A=A-1 // 7016
M=D // 7017
@51 // 7018
D=A // 7019
@SP // 7020
AM=M+1 // 7021
A=A-1 // 7022
M=D // 7023
@51 // 7024
D=A // 7025
@SP // 7026
AM=M+1 // 7027
A=A-1 // 7028
M=D // 7029
@30 // 7030
D=A // 7031
@SP // 7032
AM=M+1 // 7033
A=A-1 // 7034
M=D // 7035
@12 // 7036
D=A // 7037
@SP // 7038
AM=M+1 // 7039
A=A-1 // 7040
M=D // 7041
@SP // 7042
AM=M+1 // 7043
A=A-1 // 7044
M=0 // 7045
@SP // 7046
AM=M+1 // 7047
A=A-1 // 7048
M=0 // 7049
// call Output.create
@17 // 7050
D=A // 7051
@14 // 7052
M=D // 7053
@Output.create // 7054
D=A // 7055
@13 // 7056
M=D // 7057
@Output.init.ret.18 // 7058
D=A // 7059
@CALL // 7060
0;JMP // 7061
(Output.init.ret.18)
@SP // 7062
M=M-1 // 7063

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 49"), PushInstruction("constant 12"), PushInstruction("constant 14"), PushInstruction("constant 15"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@49 // 7064
D=A // 7065
@SP // 7066
AM=M+1 // 7067
A=A-1 // 7068
M=D // 7069
@12 // 7070
D=A // 7071
@SP // 7072
AM=M+1 // 7073
A=A-1 // 7074
M=D // 7075
@14 // 7076
D=A // 7077
@SP // 7078
AM=M+1 // 7079
A=A-1 // 7080
M=D // 7081
@15 // 7082
D=A // 7083
@SP // 7084
AM=M+1 // 7085
A=A-1 // 7086
M=D // 7087
@12 // 7088
D=A // 7089
@SP // 7090
AM=M+1 // 7091
A=A-1 // 7092
M=D // 7093
@12 // 7094
D=A // 7095
@SP // 7096
AM=M+1 // 7097
A=A-1 // 7098
M=D // 7099
@12 // 7100
D=A // 7101
@SP // 7102
AM=M+1 // 7103
A=A-1 // 7104
M=D // 7105
@12 // 7106
D=A // 7107
@SP // 7108
AM=M+1 // 7109
A=A-1 // 7110
M=D // 7111
@12 // 7112
D=A // 7113
@SP // 7114
AM=M+1 // 7115
A=A-1 // 7116
M=D // 7117
@63 // 7118
D=A // 7119
@SP // 7120
AM=M+1 // 7121
A=A-1 // 7122
M=D // 7123
@SP // 7124
AM=M+1 // 7125
A=A-1 // 7126
M=0 // 7127
@SP // 7128
AM=M+1 // 7129
A=A-1 // 7130
M=0 // 7131
// call Output.create
@17 // 7132
D=A // 7133
@14 // 7134
M=D // 7135
@Output.create // 7136
D=A // 7137
@13 // 7138
M=D // 7139
@Output.init.ret.19 // 7140
D=A // 7141
@CALL // 7142
0;JMP // 7143
(Output.init.ret.19)
@SP // 7144
M=M-1 // 7145

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 50"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@50 // 7146
D=A // 7147
@SP // 7148
AM=M+1 // 7149
A=A-1 // 7150
M=D // 7151
@30 // 7152
D=A // 7153
@SP // 7154
AM=M+1 // 7155
A=A-1 // 7156
M=D // 7157
@51 // 7158
D=A // 7159
@SP // 7160
AM=M+1 // 7161
A=A-1 // 7162
M=D // 7163
@48 // 7164
D=A // 7165
@SP // 7166
AM=M+1 // 7167
A=A-1 // 7168
M=D // 7169
@24 // 7170
D=A // 7171
@SP // 7172
AM=M+1 // 7173
A=A-1 // 7174
M=D // 7175
@12 // 7176
D=A // 7177
@SP // 7178
AM=M+1 // 7179
A=A-1 // 7180
M=D // 7181
@6 // 7182
D=A // 7183
@SP // 7184
AM=M+1 // 7185
A=A-1 // 7186
M=D // 7187
@3 // 7188
D=A // 7189
@SP // 7190
AM=M+1 // 7191
A=A-1 // 7192
M=D // 7193
@51 // 7194
D=A // 7195
@SP // 7196
AM=M+1 // 7197
A=A-1 // 7198
M=D // 7199
@63 // 7200
D=A // 7201
@SP // 7202
AM=M+1 // 7203
A=A-1 // 7204
M=D // 7205
@SP // 7206
AM=M+1 // 7207
A=A-1 // 7208
M=0 // 7209
@SP // 7210
AM=M+1 // 7211
A=A-1 // 7212
M=0 // 7213
// call Output.create
@17 // 7214
D=A // 7215
@14 // 7216
M=D // 7217
@Output.create // 7218
D=A // 7219
@13 // 7220
M=D // 7221
@Output.init.ret.20 // 7222
D=A // 7223
@CALL // 7224
0;JMP // 7225
(Output.init.ret.20)
@SP // 7226
M=M-1 // 7227

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 28"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@51 // 7228
D=A // 7229
@SP // 7230
AM=M+1 // 7231
A=A-1 // 7232
M=D // 7233
@30 // 7234
D=A // 7235
@SP // 7236
AM=M+1 // 7237
A=A-1 // 7238
M=D // 7239
@51 // 7240
D=A // 7241
@SP // 7242
AM=M+1 // 7243
A=A-1 // 7244
M=D // 7245
@48 // 7246
D=A // 7247
@SP // 7248
AM=M+1 // 7249
A=A-1 // 7250
M=D // 7251
@48 // 7252
D=A // 7253
@SP // 7254
AM=M+1 // 7255
A=A-1 // 7256
M=D // 7257
@28 // 7258
D=A // 7259
@SP // 7260
AM=M+1 // 7261
A=A-1 // 7262
M=D // 7263
@48 // 7264
D=A // 7265
@SP // 7266
AM=M+1 // 7267
A=A-1 // 7268
M=D // 7269
@48 // 7270
D=A // 7271
@SP // 7272
AM=M+1 // 7273
A=A-1 // 7274
M=D // 7275
@51 // 7276
D=A // 7277
@SP // 7278
AM=M+1 // 7279
A=A-1 // 7280
M=D // 7281
@30 // 7282
D=A // 7283
@SP // 7284
AM=M+1 // 7285
A=A-1 // 7286
M=D // 7287
@SP // 7288
AM=M+1 // 7289
A=A-1 // 7290
M=0 // 7291
@SP // 7292
AM=M+1 // 7293
A=A-1 // 7294
M=0 // 7295
// call Output.create
@17 // 7296
D=A // 7297
@14 // 7298
M=D // 7299
@Output.create // 7300
D=A // 7301
@13 // 7302
M=D // 7303
@Output.init.ret.21 // 7304
D=A // 7305
@CALL // 7306
0;JMP // 7307
(Output.init.ret.21)
@SP // 7308
M=M-1 // 7309

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 52"), PushInstruction("constant 16"), PushInstruction("constant 24"), PushInstruction("constant 28"), PushInstruction("constant 26"), PushInstruction("constant 25"), PushInstruction("constant 63"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 60"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@52 // 7310
D=A // 7311
@SP // 7312
AM=M+1 // 7313
A=A-1 // 7314
M=D // 7315
@16 // 7316
D=A // 7317
@SP // 7318
AM=M+1 // 7319
A=A-1 // 7320
M=D // 7321
@24 // 7322
D=A // 7323
@SP // 7324
AM=M+1 // 7325
A=A-1 // 7326
M=D // 7327
@28 // 7328
D=A // 7329
@SP // 7330
AM=M+1 // 7331
A=A-1 // 7332
M=D // 7333
@26 // 7334
D=A // 7335
@SP // 7336
AM=M+1 // 7337
A=A-1 // 7338
M=D // 7339
@25 // 7340
D=A // 7341
@SP // 7342
AM=M+1 // 7343
A=A-1 // 7344
M=D // 7345
@63 // 7346
D=A // 7347
@SP // 7348
AM=M+1 // 7349
A=A-1 // 7350
M=D // 7351
@24 // 7352
D=A // 7353
@SP // 7354
AM=M+1 // 7355
A=A-1 // 7356
M=D // 7357
@24 // 7358
D=A // 7359
@SP // 7360
AM=M+1 // 7361
A=A-1 // 7362
M=D // 7363
@60 // 7364
D=A // 7365
@SP // 7366
AM=M+1 // 7367
A=A-1 // 7368
M=D // 7369
@SP // 7370
AM=M+1 // 7371
A=A-1 // 7372
M=0 // 7373
@SP // 7374
AM=M+1 // 7375
A=A-1 // 7376
M=0 // 7377
// call Output.create
@17 // 7378
D=A // 7379
@14 // 7380
M=D // 7381
@Output.create // 7382
D=A // 7383
@13 // 7384
M=D // 7385
@Output.init.ret.22 // 7386
D=A // 7387
@CALL // 7388
0;JMP // 7389
(Output.init.ret.22)
@SP // 7390
M=M-1 // 7391

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 53"), PushInstruction("constant 63"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 31"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@53 // 7392
D=A // 7393
@SP // 7394
AM=M+1 // 7395
A=A-1 // 7396
M=D // 7397
@63 // 7398
D=A // 7399
@SP // 7400
AM=M+1 // 7401
A=A-1 // 7402
M=D // 7403
@3 // 7404
D=A // 7405
@SP // 7406
AM=M+1 // 7407
A=A-1 // 7408
M=D // 7409
@3 // 7410
D=A // 7411
@SP // 7412
AM=M+1 // 7413
A=A-1 // 7414
M=D // 7415
@31 // 7416
D=A // 7417
@SP // 7418
AM=M+1 // 7419
A=A-1 // 7420
M=D // 7421
@48 // 7422
D=A // 7423
@SP // 7424
AM=M+1 // 7425
A=A-1 // 7426
M=D // 7427
@48 // 7428
D=A // 7429
@SP // 7430
AM=M+1 // 7431
A=A-1 // 7432
M=D // 7433
@48 // 7434
D=A // 7435
@SP // 7436
AM=M+1 // 7437
A=A-1 // 7438
M=D // 7439
@51 // 7440
D=A // 7441
@SP // 7442
AM=M+1 // 7443
A=A-1 // 7444
M=D // 7445
@30 // 7446
D=A // 7447
@SP // 7448
AM=M+1 // 7449
A=A-1 // 7450
M=D // 7451
@SP // 7452
AM=M+1 // 7453
A=A-1 // 7454
M=0 // 7455
@SP // 7456
AM=M+1 // 7457
A=A-1 // 7458
M=0 // 7459
// call Output.create
@17 // 7460
D=A // 7461
@14 // 7462
M=D // 7463
@Output.create // 7464
D=A // 7465
@13 // 7466
M=D // 7467
@Output.init.ret.23 // 7468
D=A // 7469
@CALL // 7470
0;JMP // 7471
(Output.init.ret.23)
@SP // 7472
M=M-1 // 7473

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@54 // 7474
D=A // 7475
@SP // 7476
AM=M+1 // 7477
A=A-1 // 7478
M=D // 7479
@28 // 7480
D=A // 7481
@SP // 7482
AM=M+1 // 7483
A=A-1 // 7484
M=D // 7485
@6 // 7486
D=A // 7487
@SP // 7488
AM=M+1 // 7489
A=A-1 // 7490
M=D // 7491
@3 // 7492
D=A // 7493
@SP // 7494
AM=M+1 // 7495
A=A-1 // 7496
M=D // 7497
@3 // 7498
D=A // 7499
@SP // 7500
AM=M+1 // 7501
A=A-1 // 7502
M=D // 7503
@31 // 7504
D=A // 7505
@SP // 7506
AM=M+1 // 7507
A=A-1 // 7508
M=D // 7509
@51 // 7510
D=A // 7511
@SP // 7512
AM=M+1 // 7513
A=A-1 // 7514
M=D // 7515
@51 // 7516
D=A // 7517
@SP // 7518
AM=M+1 // 7519
A=A-1 // 7520
M=D // 7521
@51 // 7522
D=A // 7523
@SP // 7524
AM=M+1 // 7525
A=A-1 // 7526
M=D // 7527
@30 // 7528
D=A // 7529
@SP // 7530
AM=M+1 // 7531
A=A-1 // 7532
M=D // 7533
@SP // 7534
AM=M+1 // 7535
A=A-1 // 7536
M=0 // 7537
@SP // 7538
AM=M+1 // 7539
A=A-1 // 7540
M=0 // 7541
// call Output.create
@17 // 7542
D=A // 7543
@14 // 7544
M=D // 7545
@Output.create // 7546
D=A // 7547
@13 // 7548
M=D // 7549
@Output.init.ret.24 // 7550
D=A // 7551
@CALL // 7552
0;JMP // 7553
(Output.init.ret.24)
@SP // 7554
M=M-1 // 7555

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 55"), PushInstruction("constant 63"), PushInstruction("constant 49"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@55 // 7556
D=A // 7557
@SP // 7558
AM=M+1 // 7559
A=A-1 // 7560
M=D // 7561
@63 // 7562
D=A // 7563
@SP // 7564
AM=M+1 // 7565
A=A-1 // 7566
M=D // 7567
@49 // 7568
D=A // 7569
@SP // 7570
AM=M+1 // 7571
A=A-1 // 7572
M=D // 7573
@48 // 7574
D=A // 7575
@SP // 7576
AM=M+1 // 7577
A=A-1 // 7578
M=D // 7579
@48 // 7580
D=A // 7581
@SP // 7582
AM=M+1 // 7583
A=A-1 // 7584
M=D // 7585
@24 // 7586
D=A // 7587
@SP // 7588
AM=M+1 // 7589
A=A-1 // 7590
M=D // 7591
@12 // 7592
D=A // 7593
@SP // 7594
AM=M+1 // 7595
A=A-1 // 7596
M=D // 7597
@12 // 7598
D=A // 7599
@SP // 7600
AM=M+1 // 7601
A=A-1 // 7602
M=D // 7603
@12 // 7604
D=A // 7605
@SP // 7606
AM=M+1 // 7607
A=A-1 // 7608
M=D // 7609
@12 // 7610
D=A // 7611
@SP // 7612
AM=M+1 // 7613
A=A-1 // 7614
M=D // 7615
@SP // 7616
AM=M+1 // 7617
A=A-1 // 7618
M=0 // 7619
@SP // 7620
AM=M+1 // 7621
A=A-1 // 7622
M=0 // 7623
// call Output.create
@17 // 7624
D=A // 7625
@14 // 7626
M=D // 7627
@Output.create // 7628
D=A // 7629
@13 // 7630
M=D // 7631
@Output.init.ret.25 // 7632
D=A // 7633
@CALL // 7634
0;JMP // 7635
(Output.init.ret.25)
@SP // 7636
M=M-1 // 7637

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 56"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@56 // 7638
D=A // 7639
@SP // 7640
AM=M+1 // 7641
A=A-1 // 7642
M=D // 7643
@30 // 7644
D=A // 7645
@SP // 7646
AM=M+1 // 7647
A=A-1 // 7648
M=D // 7649
@51 // 7650
D=A // 7651
@SP // 7652
AM=M+1 // 7653
A=A-1 // 7654
M=D // 7655
@51 // 7656
D=A // 7657
@SP // 7658
AM=M+1 // 7659
A=A-1 // 7660
M=D // 7661
@51 // 7662
D=A // 7663
@SP // 7664
AM=M+1 // 7665
A=A-1 // 7666
M=D // 7667
@30 // 7668
D=A // 7669
@SP // 7670
AM=M+1 // 7671
A=A-1 // 7672
M=D // 7673
@51 // 7674
D=A // 7675
@SP // 7676
AM=M+1 // 7677
A=A-1 // 7678
M=D // 7679
@51 // 7680
D=A // 7681
@SP // 7682
AM=M+1 // 7683
A=A-1 // 7684
M=D // 7685
@51 // 7686
D=A // 7687
@SP // 7688
AM=M+1 // 7689
A=A-1 // 7690
M=D // 7691
@30 // 7692
D=A // 7693
@SP // 7694
AM=M+1 // 7695
A=A-1 // 7696
M=D // 7697
@SP // 7698
AM=M+1 // 7699
A=A-1 // 7700
M=0 // 7701
@SP // 7702
AM=M+1 // 7703
A=A-1 // 7704
M=0 // 7705
// call Output.create
@17 // 7706
D=A // 7707
@14 // 7708
M=D // 7709
@Output.create // 7710
D=A // 7711
@13 // 7712
M=D // 7713
@Output.init.ret.26 // 7714
D=A // 7715
@CALL // 7716
0;JMP // 7717
(Output.init.ret.26)
@SP // 7718
M=M-1 // 7719

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 57"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 14"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@57 // 7720
D=A // 7721
@SP // 7722
AM=M+1 // 7723
A=A-1 // 7724
M=D // 7725
@30 // 7726
D=A // 7727
@SP // 7728
AM=M+1 // 7729
A=A-1 // 7730
M=D // 7731
@51 // 7732
D=A // 7733
@SP // 7734
AM=M+1 // 7735
A=A-1 // 7736
M=D // 7737
@51 // 7738
D=A // 7739
@SP // 7740
AM=M+1 // 7741
A=A-1 // 7742
M=D // 7743
@51 // 7744
D=A // 7745
@SP // 7746
AM=M+1 // 7747
A=A-1 // 7748
M=D // 7749
@62 // 7750
D=A // 7751
@SP // 7752
AM=M+1 // 7753
A=A-1 // 7754
M=D // 7755
@48 // 7756
D=A // 7757
@SP // 7758
AM=M+1 // 7759
A=A-1 // 7760
M=D // 7761
@48 // 7762
D=A // 7763
@SP // 7764
AM=M+1 // 7765
A=A-1 // 7766
M=D // 7767
@24 // 7768
D=A // 7769
@SP // 7770
AM=M+1 // 7771
A=A-1 // 7772
M=D // 7773
@14 // 7774
D=A // 7775
@SP // 7776
AM=M+1 // 7777
A=A-1 // 7778
M=D // 7779
@SP // 7780
AM=M+1 // 7781
A=A-1 // 7782
M=0 // 7783
@SP // 7784
AM=M+1 // 7785
A=A-1 // 7786
M=0 // 7787
// call Output.create
@17 // 7788
D=A // 7789
@14 // 7790
M=D // 7791
@Output.create // 7792
D=A // 7793
@13 // 7794
M=D // 7795
@Output.init.ret.27 // 7796
D=A // 7797
@CALL // 7798
0;JMP // 7799
(Output.init.ret.27)
@SP // 7800
M=M-1 // 7801

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 58"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7802
D=A // 7803
@SP // 7804
M=D+M // 7805
@58 // 7806
D=A // 7807
@SP // 7808
A=M-1 // 7809
M=0 // 7810
A=A-1 // 7811
M=0 // 7812
A=A-1 // 7813
M=D // 7814
A=A-1 // 7815
@4 // 7816
D=A // 7817
@SP // 7818
M=D+M // 7819
@12 // 7820
D=A // 7821
@SP // 7822
A=M-1 // 7823
M=0 // 7824
A=A-1 // 7825
M=0 // 7826
A=A-1 // 7827
M=D // 7828
A=A-1 // 7829
M=D // 7830
A=A-1 // 7831
@5 // 7832
D=A // 7833
@SP // 7834
M=D+M // 7835
@12 // 7836
D=A // 7837
@SP // 7838
A=M-1 // 7839
M=0 // 7840
A=A-1 // 7841
M=0 // 7842
A=A-1 // 7843
M=0 // 7844
A=A-1 // 7845
M=D // 7846
A=A-1 // 7847
M=D // 7848
A=A-1 // 7849
// call Output.create
@17 // 7850
D=A // 7851
@14 // 7852
M=D // 7853
@Output.create // 7854
D=A // 7855
@13 // 7856
M=D // 7857
@Output.init.ret.28 // 7858
D=A // 7859
@CALL // 7860
0;JMP // 7861
(Output.init.ret.28)
@SP // 7862
M=M-1 // 7863

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 59"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7864
D=A // 7865
@SP // 7866
M=D+M // 7867
@59 // 7868
D=A // 7869
@SP // 7870
A=M-1 // 7871
M=0 // 7872
A=A-1 // 7873
M=0 // 7874
A=A-1 // 7875
M=D // 7876
A=A-1 // 7877
@4 // 7878
D=A // 7879
@SP // 7880
M=D+M // 7881
@12 // 7882
D=A // 7883
@SP // 7884
A=M-1 // 7885
M=0 // 7886
A=A-1 // 7887
M=0 // 7888
A=A-1 // 7889
M=D // 7890
A=A-1 // 7891
M=D // 7892
A=A-1 // 7893
@12 // 7894
D=A // 7895
@SP // 7896
AM=M+1 // 7897
A=A-1 // 7898
M=D // 7899
@12 // 7900
D=A // 7901
@SP // 7902
AM=M+1 // 7903
A=A-1 // 7904
M=D // 7905
@6 // 7906
D=A // 7907
@SP // 7908
AM=M+1 // 7909
A=A-1 // 7910
M=D // 7911
@SP // 7912
AM=M+1 // 7913
A=A-1 // 7914
M=0 // 7915
@SP // 7916
AM=M+1 // 7917
A=A-1 // 7918
M=0 // 7919
// call Output.create
@17 // 7920
D=A // 7921
@14 // 7922
M=D // 7923
@Output.create // 7924
D=A // 7925
@13 // 7926
M=D // 7927
@Output.init.ret.29 // 7928
D=A // 7929
@CALL // 7930
0;JMP // 7931
(Output.init.ret.29)
@SP // 7932
M=M-1 // 7933

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 60"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7934
D=A // 7935
@SP // 7936
M=D+M // 7937
@60 // 7938
D=A // 7939
@SP // 7940
A=M-1 // 7941
M=0 // 7942
A=A-1 // 7943
M=0 // 7944
A=A-1 // 7945
M=D // 7946
A=A-1 // 7947
@24 // 7948
D=A // 7949
@SP // 7950
AM=M+1 // 7951
A=A-1 // 7952
M=D // 7953
@12 // 7954
D=A // 7955
@SP // 7956
AM=M+1 // 7957
A=A-1 // 7958
M=D // 7959
@6 // 7960
D=A // 7961
@SP // 7962
AM=M+1 // 7963
A=A-1 // 7964
M=D // 7965
@3 // 7966
D=A // 7967
@SP // 7968
AM=M+1 // 7969
A=A-1 // 7970
M=D // 7971
@6 // 7972
D=A // 7973
@SP // 7974
AM=M+1 // 7975
A=A-1 // 7976
M=D // 7977
@12 // 7978
D=A // 7979
@SP // 7980
AM=M+1 // 7981
A=A-1 // 7982
M=D // 7983
@24 // 7984
D=A // 7985
@SP // 7986
AM=M+1 // 7987
A=A-1 // 7988
M=D // 7989
@SP // 7990
AM=M+1 // 7991
A=A-1 // 7992
M=0 // 7993
@SP // 7994
AM=M+1 // 7995
A=A-1 // 7996
M=0 // 7997
// call Output.create
@17 // 7998
D=A // 7999
@14 // 8000
M=D // 8001
@Output.create // 8002
D=A // 8003
@13 // 8004
M=D // 8005
@Output.init.ret.30 // 8006
D=A // 8007
@CALL // 8008
0;JMP // 8009
(Output.init.ret.30)
@SP // 8010
M=M-1 // 8011

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 61"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 8012
D=A // 8013
@SP // 8014
M=D+M // 8015
@61 // 8016
D=A // 8017
@SP // 8018
A=M-1 // 8019
M=0 // 8020
A=A-1 // 8021
M=0 // 8022
A=A-1 // 8023
M=0 // 8024
A=A-1 // 8025
M=D // 8026
A=A-1 // 8027
@3 // 8028
D=A // 8029
@SP // 8030
M=D+M // 8031
@63 // 8032
D=A // 8033
@SP // 8034
A=M-1 // 8035
M=0 // 8036
A=A-1 // 8037
M=0 // 8038
A=A-1 // 8039
M=D // 8040
A=A-1 // 8041
@5 // 8042
D=A // 8043
@SP // 8044
M=D+M // 8045
@63 // 8046
D=A // 8047
@SP // 8048
A=M-1 // 8049
M=0 // 8050
A=A-1 // 8051
M=0 // 8052
A=A-1 // 8053
M=0 // 8054
A=A-1 // 8055
M=0 // 8056
A=A-1 // 8057
M=D // 8058
A=A-1 // 8059
// call Output.create
@17 // 8060
D=A // 8061
@14 // 8062
M=D // 8063
@Output.create // 8064
D=A // 8065
@13 // 8066
M=D // 8067
@Output.init.ret.31 // 8068
D=A // 8069
@CALL // 8070
0;JMP // 8071
(Output.init.ret.31)
@SP // 8072
M=M-1 // 8073

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 62"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 8074
D=A // 8075
@SP // 8076
M=D+M // 8077
@62 // 8078
D=A // 8079
@SP // 8080
A=M-1 // 8081
M=0 // 8082
A=A-1 // 8083
M=0 // 8084
A=A-1 // 8085
M=D // 8086
A=A-1 // 8087
@3 // 8088
D=A // 8089
@SP // 8090
AM=M+1 // 8091
A=A-1 // 8092
M=D // 8093
@6 // 8094
D=A // 8095
@SP // 8096
AM=M+1 // 8097
A=A-1 // 8098
M=D // 8099
@12 // 8100
D=A // 8101
@SP // 8102
AM=M+1 // 8103
A=A-1 // 8104
M=D // 8105
@24 // 8106
D=A // 8107
@SP // 8108
AM=M+1 // 8109
A=A-1 // 8110
M=D // 8111
@12 // 8112
D=A // 8113
@SP // 8114
AM=M+1 // 8115
A=A-1 // 8116
M=D // 8117
@6 // 8118
D=A // 8119
@SP // 8120
AM=M+1 // 8121
A=A-1 // 8122
M=D // 8123
@3 // 8124
D=A // 8125
@SP // 8126
AM=M+1 // 8127
A=A-1 // 8128
M=D // 8129
@SP // 8130
AM=M+1 // 8131
A=A-1 // 8132
M=0 // 8133
@SP // 8134
AM=M+1 // 8135
A=A-1 // 8136
M=0 // 8137
// call Output.create
@17 // 8138
D=A // 8139
@14 // 8140
M=D // 8141
@Output.create // 8142
D=A // 8143
@13 // 8144
M=D // 8145
@Output.init.ret.32 // 8146
D=A // 8147
@CALL // 8148
0;JMP // 8149
(Output.init.ret.32)
@SP // 8150
M=M-1 // 8151

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 64"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 27"), PushInstruction("constant 3"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@64 // 8152
D=A // 8153
@SP // 8154
AM=M+1 // 8155
A=A-1 // 8156
M=D // 8157
@30 // 8158
D=A // 8159
@SP // 8160
AM=M+1 // 8161
A=A-1 // 8162
M=D // 8163
@51 // 8164
D=A // 8165
@SP // 8166
AM=M+1 // 8167
A=A-1 // 8168
M=D // 8169
@51 // 8170
D=A // 8171
@SP // 8172
AM=M+1 // 8173
A=A-1 // 8174
M=D // 8175
@59 // 8176
D=A // 8177
@SP // 8178
AM=M+1 // 8179
A=A-1 // 8180
M=D // 8181
@59 // 8182
D=A // 8183
@SP // 8184
AM=M+1 // 8185
A=A-1 // 8186
M=D // 8187
@59 // 8188
D=A // 8189
@SP // 8190
AM=M+1 // 8191
A=A-1 // 8192
M=D // 8193
@27 // 8194
D=A // 8195
@SP // 8196
AM=M+1 // 8197
A=A-1 // 8198
M=D // 8199
@3 // 8200
D=A // 8201
@SP // 8202
AM=M+1 // 8203
A=A-1 // 8204
M=D // 8205
@30 // 8206
D=A // 8207
@SP // 8208
AM=M+1 // 8209
A=A-1 // 8210
M=D // 8211
@SP // 8212
AM=M+1 // 8213
A=A-1 // 8214
M=0 // 8215
@SP // 8216
AM=M+1 // 8217
A=A-1 // 8218
M=0 // 8219
// call Output.create
@17 // 8220
D=A // 8221
@14 // 8222
M=D // 8223
@Output.create // 8224
D=A // 8225
@13 // 8226
M=D // 8227
@Output.init.ret.33 // 8228
D=A // 8229
@CALL // 8230
0;JMP // 8231
(Output.init.ret.33)
@SP // 8232
M=M-1 // 8233

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 63"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@63 // 8234
D=A // 8235
@SP // 8236
AM=M+1 // 8237
A=A-1 // 8238
M=D // 8239
@30 // 8240
D=A // 8241
@SP // 8242
AM=M+1 // 8243
A=A-1 // 8244
M=D // 8245
@51 // 8246
D=A // 8247
@SP // 8248
AM=M+1 // 8249
A=A-1 // 8250
M=D // 8251
@51 // 8252
D=A // 8253
@SP // 8254
AM=M+1 // 8255
A=A-1 // 8256
M=D // 8257
@24 // 8258
D=A // 8259
@SP // 8260
AM=M+1 // 8261
A=A-1 // 8262
M=D // 8263
@12 // 8264
D=A // 8265
@SP // 8266
AM=M+1 // 8267
A=A-1 // 8268
M=D // 8269
@12 // 8270
D=A // 8271
@SP // 8272
AM=M+1 // 8273
A=A-1 // 8274
M=D // 8275
@SP // 8276
AM=M+1 // 8277
A=A-1 // 8278
M=0 // 8279
@4 // 8280
D=A // 8281
@SP // 8282
M=D+M // 8283
@12 // 8284
D=A // 8285
@SP // 8286
A=M-1 // 8287
M=0 // 8288
A=A-1 // 8289
M=0 // 8290
A=A-1 // 8291
M=D // 8292
A=A-1 // 8293
M=D // 8294
A=A-1 // 8295
// call Output.create
@17 // 8296
D=A // 8297
@14 // 8298
M=D // 8299
@Output.create // 8300
D=A // 8301
@13 // 8302
M=D // 8303
@Output.init.ret.34 // 8304
D=A // 8305
@CALL // 8306
0;JMP // 8307
(Output.init.ret.34)
@SP // 8308
M=M-1 // 8309

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 65"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@65 // 8310
D=A // 8311
@SP // 8312
AM=M+1 // 8313
A=A-1 // 8314
M=D // 8315
@12 // 8316
D=A // 8317
@SP // 8318
AM=M+1 // 8319
A=A-1 // 8320
M=D // 8321
@30 // 8322
D=A // 8323
@SP // 8324
AM=M+1 // 8325
A=A-1 // 8326
M=D // 8327
@51 // 8328
D=A // 8329
@SP // 8330
AM=M+1 // 8331
A=A-1 // 8332
M=D // 8333
@51 // 8334
D=A // 8335
@SP // 8336
AM=M+1 // 8337
A=A-1 // 8338
M=D // 8339
@63 // 8340
D=A // 8341
@SP // 8342
AM=M+1 // 8343
A=A-1 // 8344
M=D // 8345
@51 // 8346
D=A // 8347
@SP // 8348
AM=M+1 // 8349
A=A-1 // 8350
M=D // 8351
@51 // 8352
D=A // 8353
@SP // 8354
AM=M+1 // 8355
A=A-1 // 8356
M=D // 8357
@51 // 8358
D=A // 8359
@SP // 8360
AM=M+1 // 8361
A=A-1 // 8362
M=D // 8363
@51 // 8364
D=A // 8365
@SP // 8366
AM=M+1 // 8367
A=A-1 // 8368
M=D // 8369
@SP // 8370
AM=M+1 // 8371
A=A-1 // 8372
M=0 // 8373
@SP // 8374
AM=M+1 // 8375
A=A-1 // 8376
M=0 // 8377
// call Output.create
@17 // 8378
D=A // 8379
@14 // 8380
M=D // 8381
@Output.create // 8382
D=A // 8383
@13 // 8384
M=D // 8385
@Output.init.ret.35 // 8386
D=A // 8387
@CALL // 8388
0;JMP // 8389
(Output.init.ret.35)
@SP // 8390
M=M-1 // 8391

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 66"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@66 // 8392
D=A // 8393
@SP // 8394
AM=M+1 // 8395
A=A-1 // 8396
M=D // 8397
@31 // 8398
D=A // 8399
@SP // 8400
AM=M+1 // 8401
A=A-1 // 8402
M=D // 8403
@51 // 8404
D=A // 8405
@SP // 8406
AM=M+1 // 8407
A=A-1 // 8408
M=D // 8409
@51 // 8410
D=A // 8411
@SP // 8412
AM=M+1 // 8413
A=A-1 // 8414
M=D // 8415
@51 // 8416
D=A // 8417
@SP // 8418
AM=M+1 // 8419
A=A-1 // 8420
M=D // 8421
@31 // 8422
D=A // 8423
@SP // 8424
AM=M+1 // 8425
A=A-1 // 8426
M=D // 8427
@51 // 8428
D=A // 8429
@SP // 8430
AM=M+1 // 8431
A=A-1 // 8432
M=D // 8433
@51 // 8434
D=A // 8435
@SP // 8436
AM=M+1 // 8437
A=A-1 // 8438
M=D // 8439
@51 // 8440
D=A // 8441
@SP // 8442
AM=M+1 // 8443
A=A-1 // 8444
M=D // 8445
@31 // 8446
D=A // 8447
@SP // 8448
AM=M+1 // 8449
A=A-1 // 8450
M=D // 8451
@SP // 8452
AM=M+1 // 8453
A=A-1 // 8454
M=0 // 8455
@SP // 8456
AM=M+1 // 8457
A=A-1 // 8458
M=0 // 8459
// call Output.create
@17 // 8460
D=A // 8461
@14 // 8462
M=D // 8463
@Output.create // 8464
D=A // 8465
@13 // 8466
M=D // 8467
@Output.init.ret.36 // 8468
D=A // 8469
@CALL // 8470
0;JMP // 8471
(Output.init.ret.36)
@SP // 8472
M=M-1 // 8473

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 67"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 35"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 35"), PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@67 // 8474
D=A // 8475
@SP // 8476
AM=M+1 // 8477
A=A-1 // 8478
M=D // 8479
@28 // 8480
D=A // 8481
@SP // 8482
AM=M+1 // 8483
A=A-1 // 8484
M=D // 8485
@54 // 8486
D=A // 8487
@SP // 8488
AM=M+1 // 8489
A=A-1 // 8490
M=D // 8491
@35 // 8492
D=A // 8493
@SP // 8494
AM=M+1 // 8495
A=A-1 // 8496
M=D // 8497
@3 // 8498
D=A // 8499
@SP // 8500
AM=M+1 // 8501
A=A-1 // 8502
M=D // 8503
@3 // 8504
D=A // 8505
@SP // 8506
AM=M+1 // 8507
A=A-1 // 8508
M=D // 8509
@3 // 8510
D=A // 8511
@SP // 8512
AM=M+1 // 8513
A=A-1 // 8514
M=D // 8515
@35 // 8516
D=A // 8517
@SP // 8518
AM=M+1 // 8519
A=A-1 // 8520
M=D // 8521
@54 // 8522
D=A // 8523
@SP // 8524
AM=M+1 // 8525
A=A-1 // 8526
M=D // 8527
@28 // 8528
D=A // 8529
@SP // 8530
AM=M+1 // 8531
A=A-1 // 8532
M=D // 8533
@SP // 8534
AM=M+1 // 8535
A=A-1 // 8536
M=0 // 8537
@SP // 8538
AM=M+1 // 8539
A=A-1 // 8540
M=0 // 8541
// call Output.create
@17 // 8542
D=A // 8543
@14 // 8544
M=D // 8545
@Output.create // 8546
D=A // 8547
@13 // 8548
M=D // 8549
@Output.init.ret.37 // 8550
D=A // 8551
@CALL // 8552
0;JMP // 8553
(Output.init.ret.37)
@SP // 8554
M=M-1 // 8555

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 68"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@68 // 8556
D=A // 8557
@SP // 8558
AM=M+1 // 8559
A=A-1 // 8560
M=D // 8561
@15 // 8562
D=A // 8563
@SP // 8564
AM=M+1 // 8565
A=A-1 // 8566
M=D // 8567
@27 // 8568
D=A // 8569
@SP // 8570
AM=M+1 // 8571
A=A-1 // 8572
M=D // 8573
@51 // 8574
D=A // 8575
@SP // 8576
AM=M+1 // 8577
A=A-1 // 8578
M=D // 8579
@51 // 8580
D=A // 8581
@SP // 8582
AM=M+1 // 8583
A=A-1 // 8584
M=D // 8585
@51 // 8586
D=A // 8587
@SP // 8588
AM=M+1 // 8589
A=A-1 // 8590
M=D // 8591
@51 // 8592
D=A // 8593
@SP // 8594
AM=M+1 // 8595
A=A-1 // 8596
M=D // 8597
@51 // 8598
D=A // 8599
@SP // 8600
AM=M+1 // 8601
A=A-1 // 8602
M=D // 8603
@27 // 8604
D=A // 8605
@SP // 8606
AM=M+1 // 8607
A=A-1 // 8608
M=D // 8609
@15 // 8610
D=A // 8611
@SP // 8612
AM=M+1 // 8613
A=A-1 // 8614
M=D // 8615
@SP // 8616
AM=M+1 // 8617
A=A-1 // 8618
M=0 // 8619
@SP // 8620
AM=M+1 // 8621
A=A-1 // 8622
M=0 // 8623
// call Output.create
@17 // 8624
D=A // 8625
@14 // 8626
M=D // 8627
@Output.create // 8628
D=A // 8629
@13 // 8630
M=D // 8631
@Output.init.ret.38 // 8632
D=A // 8633
@CALL // 8634
0;JMP // 8635
(Output.init.ret.38)
@SP // 8636
M=M-1 // 8637

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 69"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 35"), PushInstruction("constant 11"), PushInstruction("constant 15"), PushInstruction("constant 11"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@69 // 8638
D=A // 8639
@SP // 8640
AM=M+1 // 8641
A=A-1 // 8642
M=D // 8643
@63 // 8644
D=A // 8645
@SP // 8646
AM=M+1 // 8647
A=A-1 // 8648
M=D // 8649
@51 // 8650
D=A // 8651
@SP // 8652
AM=M+1 // 8653
A=A-1 // 8654
M=D // 8655
@35 // 8656
D=A // 8657
@SP // 8658
AM=M+1 // 8659
A=A-1 // 8660
M=D // 8661
@11 // 8662
D=A // 8663
@SP // 8664
AM=M+1 // 8665
A=A-1 // 8666
M=D // 8667
@15 // 8668
D=A // 8669
@SP // 8670
AM=M+1 // 8671
A=A-1 // 8672
M=D // 8673
@11 // 8674
D=A // 8675
@SP // 8676
AM=M+1 // 8677
A=A-1 // 8678
M=D // 8679
@35 // 8680
D=A // 8681
@SP // 8682
AM=M+1 // 8683
A=A-1 // 8684
M=D // 8685
@51 // 8686
D=A // 8687
@SP // 8688
AM=M+1 // 8689
A=A-1 // 8690
M=D // 8691
@63 // 8692
D=A // 8693
@SP // 8694
AM=M+1 // 8695
A=A-1 // 8696
M=D // 8697
@SP // 8698
AM=M+1 // 8699
A=A-1 // 8700
M=0 // 8701
@SP // 8702
AM=M+1 // 8703
A=A-1 // 8704
M=0 // 8705
// call Output.create
@17 // 8706
D=A // 8707
@14 // 8708
M=D // 8709
@Output.create // 8710
D=A // 8711
@13 // 8712
M=D // 8713
@Output.init.ret.39 // 8714
D=A // 8715
@CALL // 8716
0;JMP // 8717
(Output.init.ret.39)
@SP // 8718
M=M-1 // 8719

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 70"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 35"), PushInstruction("constant 11"), PushInstruction("constant 15"), PushInstruction("constant 11"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@70 // 8720
D=A // 8721
@SP // 8722
AM=M+1 // 8723
A=A-1 // 8724
M=D // 8725
@63 // 8726
D=A // 8727
@SP // 8728
AM=M+1 // 8729
A=A-1 // 8730
M=D // 8731
@51 // 8732
D=A // 8733
@SP // 8734
AM=M+1 // 8735
A=A-1 // 8736
M=D // 8737
@35 // 8738
D=A // 8739
@SP // 8740
AM=M+1 // 8741
A=A-1 // 8742
M=D // 8743
@11 // 8744
D=A // 8745
@SP // 8746
AM=M+1 // 8747
A=A-1 // 8748
M=D // 8749
@15 // 8750
D=A // 8751
@SP // 8752
AM=M+1 // 8753
A=A-1 // 8754
M=D // 8755
@11 // 8756
D=A // 8757
@SP // 8758
AM=M+1 // 8759
A=A-1 // 8760
M=D // 8761
@3 // 8762
D=A // 8763
@SP // 8764
AM=M+1 // 8765
A=A-1 // 8766
M=D // 8767
@3 // 8768
D=A // 8769
@SP // 8770
AM=M+1 // 8771
A=A-1 // 8772
M=D // 8773
@3 // 8774
D=A // 8775
@SP // 8776
AM=M+1 // 8777
A=A-1 // 8778
M=D // 8779
@SP // 8780
AM=M+1 // 8781
A=A-1 // 8782
M=0 // 8783
@SP // 8784
AM=M+1 // 8785
A=A-1 // 8786
M=0 // 8787
// call Output.create
@17 // 8788
D=A // 8789
@14 // 8790
M=D // 8791
@Output.create // 8792
D=A // 8793
@13 // 8794
M=D // 8795
@Output.init.ret.40 // 8796
D=A // 8797
@CALL // 8798
0;JMP // 8799
(Output.init.ret.40)
@SP // 8800
M=M-1 // 8801

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 71"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 35"), PushInstruction("constant 3"), PushInstruction("constant 59"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 54"), PushInstruction("constant 44"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@71 // 8802
D=A // 8803
@SP // 8804
AM=M+1 // 8805
A=A-1 // 8806
M=D // 8807
@28 // 8808
D=A // 8809
@SP // 8810
AM=M+1 // 8811
A=A-1 // 8812
M=D // 8813
@54 // 8814
D=A // 8815
@SP // 8816
AM=M+1 // 8817
A=A-1 // 8818
M=D // 8819
@35 // 8820
D=A // 8821
@SP // 8822
AM=M+1 // 8823
A=A-1 // 8824
M=D // 8825
@3 // 8826
D=A // 8827
@SP // 8828
AM=M+1 // 8829
A=A-1 // 8830
M=D // 8831
@59 // 8832
D=A // 8833
@SP // 8834
AM=M+1 // 8835
A=A-1 // 8836
M=D // 8837
@51 // 8838
D=A // 8839
@SP // 8840
AM=M+1 // 8841
A=A-1 // 8842
M=D // 8843
@51 // 8844
D=A // 8845
@SP // 8846
AM=M+1 // 8847
A=A-1 // 8848
M=D // 8849
@54 // 8850
D=A // 8851
@SP // 8852
AM=M+1 // 8853
A=A-1 // 8854
M=D // 8855
@44 // 8856
D=A // 8857
@SP // 8858
AM=M+1 // 8859
A=A-1 // 8860
M=D // 8861
@SP // 8862
AM=M+1 // 8863
A=A-1 // 8864
M=0 // 8865
@SP // 8866
AM=M+1 // 8867
A=A-1 // 8868
M=0 // 8869
// call Output.create
@17 // 8870
D=A // 8871
@14 // 8872
M=D // 8873
@Output.create // 8874
D=A // 8875
@13 // 8876
M=D // 8877
@Output.init.ret.41 // 8878
D=A // 8879
@CALL // 8880
0;JMP // 8881
(Output.init.ret.41)
@SP // 8882
M=M-1 // 8883

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 72"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@72 // 8884
D=A // 8885
@SP // 8886
AM=M+1 // 8887
A=A-1 // 8888
M=D // 8889
@51 // 8890
D=A // 8891
@SP // 8892
AM=M+1 // 8893
A=A-1 // 8894
M=D // 8895
@51 // 8896
D=A // 8897
@SP // 8898
AM=M+1 // 8899
A=A-1 // 8900
M=D // 8901
@51 // 8902
D=A // 8903
@SP // 8904
AM=M+1 // 8905
A=A-1 // 8906
M=D // 8907
@51 // 8908
D=A // 8909
@SP // 8910
AM=M+1 // 8911
A=A-1 // 8912
M=D // 8913
@63 // 8914
D=A // 8915
@SP // 8916
AM=M+1 // 8917
A=A-1 // 8918
M=D // 8919
@51 // 8920
D=A // 8921
@SP // 8922
AM=M+1 // 8923
A=A-1 // 8924
M=D // 8925
@51 // 8926
D=A // 8927
@SP // 8928
AM=M+1 // 8929
A=A-1 // 8930
M=D // 8931
@51 // 8932
D=A // 8933
@SP // 8934
AM=M+1 // 8935
A=A-1 // 8936
M=D // 8937
@51 // 8938
D=A // 8939
@SP // 8940
AM=M+1 // 8941
A=A-1 // 8942
M=D // 8943
@SP // 8944
AM=M+1 // 8945
A=A-1 // 8946
M=0 // 8947
@SP // 8948
AM=M+1 // 8949
A=A-1 // 8950
M=0 // 8951
// call Output.create
@17 // 8952
D=A // 8953
@14 // 8954
M=D // 8955
@Output.create // 8956
D=A // 8957
@13 // 8958
M=D // 8959
@Output.init.ret.42 // 8960
D=A // 8961
@CALL // 8962
0;JMP // 8963
(Output.init.ret.42)
@SP // 8964
M=M-1 // 8965

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 73"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@73 // 8966
D=A // 8967
@SP // 8968
AM=M+1 // 8969
A=A-1 // 8970
M=D // 8971
@30 // 8972
D=A // 8973
@SP // 8974
AM=M+1 // 8975
A=A-1 // 8976
M=D // 8977
@12 // 8978
D=A // 8979
@SP // 8980
AM=M+1 // 8981
A=A-1 // 8982
M=D // 8983
@12 // 8984
D=A // 8985
@SP // 8986
AM=M+1 // 8987
A=A-1 // 8988
M=D // 8989
@12 // 8990
D=A // 8991
@SP // 8992
AM=M+1 // 8993
A=A-1 // 8994
M=D // 8995
@12 // 8996
D=A // 8997
@SP // 8998
AM=M+1 // 8999
A=A-1 // 9000
M=D // 9001
@12 // 9002
D=A // 9003
@SP // 9004
AM=M+1 // 9005
A=A-1 // 9006
M=D // 9007
@12 // 9008
D=A // 9009
@SP // 9010
AM=M+1 // 9011
A=A-1 // 9012
M=D // 9013
@12 // 9014
D=A // 9015
@SP // 9016
AM=M+1 // 9017
A=A-1 // 9018
M=D // 9019
@30 // 9020
D=A // 9021
@SP // 9022
AM=M+1 // 9023
A=A-1 // 9024
M=D // 9025
@SP // 9026
AM=M+1 // 9027
A=A-1 // 9028
M=0 // 9029
@SP // 9030
AM=M+1 // 9031
A=A-1 // 9032
M=0 // 9033
// call Output.create
@17 // 9034
D=A // 9035
@14 // 9036
M=D // 9037
@Output.create // 9038
D=A // 9039
@13 // 9040
M=D // 9041
@Output.init.ret.43 // 9042
D=A // 9043
@CALL // 9044
0;JMP // 9045
(Output.init.ret.43)
@SP // 9046
M=M-1 // 9047

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 74"), PushInstruction("constant 60"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 14"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@74 // 9048
D=A // 9049
@SP // 9050
AM=M+1 // 9051
A=A-1 // 9052
M=D // 9053
@60 // 9054
D=A // 9055
@SP // 9056
AM=M+1 // 9057
A=A-1 // 9058
M=D // 9059
@24 // 9060
D=A // 9061
@SP // 9062
AM=M+1 // 9063
A=A-1 // 9064
M=D // 9065
@24 // 9066
D=A // 9067
@SP // 9068
AM=M+1 // 9069
A=A-1 // 9070
M=D // 9071
@24 // 9072
D=A // 9073
@SP // 9074
AM=M+1 // 9075
A=A-1 // 9076
M=D // 9077
@24 // 9078
D=A // 9079
@SP // 9080
AM=M+1 // 9081
A=A-1 // 9082
M=D // 9083
@24 // 9084
D=A // 9085
@SP // 9086
AM=M+1 // 9087
A=A-1 // 9088
M=D // 9089
@27 // 9090
D=A // 9091
@SP // 9092
AM=M+1 // 9093
A=A-1 // 9094
M=D // 9095
@27 // 9096
D=A // 9097
@SP // 9098
AM=M+1 // 9099
A=A-1 // 9100
M=D // 9101
@14 // 9102
D=A // 9103
@SP // 9104
AM=M+1 // 9105
A=A-1 // 9106
M=D // 9107
@SP // 9108
AM=M+1 // 9109
A=A-1 // 9110
M=0 // 9111
@SP // 9112
AM=M+1 // 9113
A=A-1 // 9114
M=0 // 9115
// call Output.create
@17 // 9116
D=A // 9117
@14 // 9118
M=D // 9119
@Output.create // 9120
D=A // 9121
@13 // 9122
M=D // 9123
@Output.init.ret.44 // 9124
D=A // 9125
@CALL // 9126
0;JMP // 9127
(Output.init.ret.44)
@SP // 9128
M=M-1 // 9129

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 75"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@75 // 9130
D=A // 9131
@SP // 9132
AM=M+1 // 9133
A=A-1 // 9134
M=D // 9135
@51 // 9136
D=A // 9137
@SP // 9138
AM=M+1 // 9139
A=A-1 // 9140
M=D // 9141
@51 // 9142
D=A // 9143
@SP // 9144
AM=M+1 // 9145
A=A-1 // 9146
M=D // 9147
@51 // 9148
D=A // 9149
@SP // 9150
AM=M+1 // 9151
A=A-1 // 9152
M=D // 9153
@27 // 9154
D=A // 9155
@SP // 9156
AM=M+1 // 9157
A=A-1 // 9158
M=D // 9159
@15 // 9160
D=A // 9161
@SP // 9162
AM=M+1 // 9163
A=A-1 // 9164
M=D // 9165
@27 // 9166
D=A // 9167
@SP // 9168
AM=M+1 // 9169
A=A-1 // 9170
M=D // 9171
@51 // 9172
D=A // 9173
@SP // 9174
AM=M+1 // 9175
A=A-1 // 9176
M=D // 9177
@51 // 9178
D=A // 9179
@SP // 9180
AM=M+1 // 9181
A=A-1 // 9182
M=D // 9183
@51 // 9184
D=A // 9185
@SP // 9186
AM=M+1 // 9187
A=A-1 // 9188
M=D // 9189
@SP // 9190
AM=M+1 // 9191
A=A-1 // 9192
M=0 // 9193
@SP // 9194
AM=M+1 // 9195
A=A-1 // 9196
M=0 // 9197
// call Output.create
@17 // 9198
D=A // 9199
@14 // 9200
M=D // 9201
@Output.create // 9202
D=A // 9203
@13 // 9204
M=D // 9205
@Output.init.ret.45 // 9206
D=A // 9207
@CALL // 9208
0;JMP // 9209
(Output.init.ret.45)
@SP // 9210
M=M-1 // 9211

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 76"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@76 // 9212
D=A // 9213
@SP // 9214
AM=M+1 // 9215
A=A-1 // 9216
M=D // 9217
@3 // 9218
D=A // 9219
@SP // 9220
AM=M+1 // 9221
A=A-1 // 9222
M=D // 9223
@3 // 9224
D=A // 9225
@SP // 9226
AM=M+1 // 9227
A=A-1 // 9228
M=D // 9229
@3 // 9230
D=A // 9231
@SP // 9232
AM=M+1 // 9233
A=A-1 // 9234
M=D // 9235
@3 // 9236
D=A // 9237
@SP // 9238
AM=M+1 // 9239
A=A-1 // 9240
M=D // 9241
@3 // 9242
D=A // 9243
@SP // 9244
AM=M+1 // 9245
A=A-1 // 9246
M=D // 9247
@3 // 9248
D=A // 9249
@SP // 9250
AM=M+1 // 9251
A=A-1 // 9252
M=D // 9253
@35 // 9254
D=A // 9255
@SP // 9256
AM=M+1 // 9257
A=A-1 // 9258
M=D // 9259
@51 // 9260
D=A // 9261
@SP // 9262
AM=M+1 // 9263
A=A-1 // 9264
M=D // 9265
@63 // 9266
D=A // 9267
@SP // 9268
AM=M+1 // 9269
A=A-1 // 9270
M=D // 9271
@SP // 9272
AM=M+1 // 9273
A=A-1 // 9274
M=0 // 9275
@SP // 9276
AM=M+1 // 9277
A=A-1 // 9278
M=0 // 9279
// call Output.create
@17 // 9280
D=A // 9281
@14 // 9282
M=D // 9283
@Output.create // 9284
D=A // 9285
@13 // 9286
M=D // 9287
@Output.init.ret.46 // 9288
D=A // 9289
@CALL // 9290
0;JMP // 9291
(Output.init.ret.46)
@SP // 9292
M=M-1 // 9293

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 77"), PushInstruction("constant 33"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@77 // 9294
D=A // 9295
@SP // 9296
AM=M+1 // 9297
A=A-1 // 9298
M=D // 9299
@33 // 9300
D=A // 9301
@SP // 9302
AM=M+1 // 9303
A=A-1 // 9304
M=D // 9305
@51 // 9306
D=A // 9307
@SP // 9308
AM=M+1 // 9309
A=A-1 // 9310
M=D // 9311
@63 // 9312
D=A // 9313
@SP // 9314
AM=M+1 // 9315
A=A-1 // 9316
M=D // 9317
@63 // 9318
D=A // 9319
@SP // 9320
AM=M+1 // 9321
A=A-1 // 9322
M=D // 9323
@51 // 9324
D=A // 9325
@SP // 9326
AM=M+1 // 9327
A=A-1 // 9328
M=D // 9329
@51 // 9330
D=A // 9331
@SP // 9332
AM=M+1 // 9333
A=A-1 // 9334
M=D // 9335
@51 // 9336
D=A // 9337
@SP // 9338
AM=M+1 // 9339
A=A-1 // 9340
M=D // 9341
@51 // 9342
D=A // 9343
@SP // 9344
AM=M+1 // 9345
A=A-1 // 9346
M=D // 9347
@51 // 9348
D=A // 9349
@SP // 9350
AM=M+1 // 9351
A=A-1 // 9352
M=D // 9353
@SP // 9354
AM=M+1 // 9355
A=A-1 // 9356
M=0 // 9357
@SP // 9358
AM=M+1 // 9359
A=A-1 // 9360
M=0 // 9361
// call Output.create
@17 // 9362
D=A // 9363
@14 // 9364
M=D // 9365
@Output.create // 9366
D=A // 9367
@13 // 9368
M=D // 9369
@Output.init.ret.47 // 9370
D=A // 9371
@CALL // 9372
0;JMP // 9373
(Output.init.ret.47)
@SP // 9374
M=M-1 // 9375

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 78"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 55"), PushInstruction("constant 55"), PushInstruction("constant 63"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@78 // 9376
D=A // 9377
@SP // 9378
AM=M+1 // 9379
A=A-1 // 9380
M=D // 9381
@51 // 9382
D=A // 9383
@SP // 9384
AM=M+1 // 9385
A=A-1 // 9386
M=D // 9387
@51 // 9388
D=A // 9389
@SP // 9390
AM=M+1 // 9391
A=A-1 // 9392
M=D // 9393
@55 // 9394
D=A // 9395
@SP // 9396
AM=M+1 // 9397
A=A-1 // 9398
M=D // 9399
@55 // 9400
D=A // 9401
@SP // 9402
AM=M+1 // 9403
A=A-1 // 9404
M=D // 9405
@63 // 9406
D=A // 9407
@SP // 9408
AM=M+1 // 9409
A=A-1 // 9410
M=D // 9411
@59 // 9412
D=A // 9413
@SP // 9414
AM=M+1 // 9415
A=A-1 // 9416
M=D // 9417
@59 // 9418
D=A // 9419
@SP // 9420
AM=M+1 // 9421
A=A-1 // 9422
M=D // 9423
@51 // 9424
D=A // 9425
@SP // 9426
AM=M+1 // 9427
A=A-1 // 9428
M=D // 9429
@51 // 9430
D=A // 9431
@SP // 9432
AM=M+1 // 9433
A=A-1 // 9434
M=D // 9435
@SP // 9436
AM=M+1 // 9437
A=A-1 // 9438
M=0 // 9439
@SP // 9440
AM=M+1 // 9441
A=A-1 // 9442
M=0 // 9443
// call Output.create
@17 // 9444
D=A // 9445
@14 // 9446
M=D // 9447
@Output.create // 9448
D=A // 9449
@13 // 9450
M=D // 9451
@Output.init.ret.48 // 9452
D=A // 9453
@CALL // 9454
0;JMP // 9455
(Output.init.ret.48)
@SP // 9456
M=M-1 // 9457

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 79"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@79 // 9458
D=A // 9459
@SP // 9460
AM=M+1 // 9461
A=A-1 // 9462
M=D // 9463
@30 // 9464
D=A // 9465
@SP // 9466
AM=M+1 // 9467
A=A-1 // 9468
M=D // 9469
@51 // 9470
D=A // 9471
@SP // 9472
AM=M+1 // 9473
A=A-1 // 9474
M=D // 9475
@51 // 9476
D=A // 9477
@SP // 9478
AM=M+1 // 9479
A=A-1 // 9480
M=D // 9481
@51 // 9482
D=A // 9483
@SP // 9484
AM=M+1 // 9485
A=A-1 // 9486
M=D // 9487
@51 // 9488
D=A // 9489
@SP // 9490
AM=M+1 // 9491
A=A-1 // 9492
M=D // 9493
@51 // 9494
D=A // 9495
@SP // 9496
AM=M+1 // 9497
A=A-1 // 9498
M=D // 9499
@51 // 9500
D=A // 9501
@SP // 9502
AM=M+1 // 9503
A=A-1 // 9504
M=D // 9505
@51 // 9506
D=A // 9507
@SP // 9508
AM=M+1 // 9509
A=A-1 // 9510
M=D // 9511
@30 // 9512
D=A // 9513
@SP // 9514
AM=M+1 // 9515
A=A-1 // 9516
M=D // 9517
@SP // 9518
AM=M+1 // 9519
A=A-1 // 9520
M=0 // 9521
@SP // 9522
AM=M+1 // 9523
A=A-1 // 9524
M=0 // 9525
// call Output.create
@17 // 9526
D=A // 9527
@14 // 9528
M=D // 9529
@Output.create // 9530
D=A // 9531
@13 // 9532
M=D // 9533
@Output.init.ret.49 // 9534
D=A // 9535
@CALL // 9536
0;JMP // 9537
(Output.init.ret.49)
@SP // 9538
M=M-1 // 9539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 80"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@80 // 9540
D=A // 9541
@SP // 9542
AM=M+1 // 9543
A=A-1 // 9544
M=D // 9545
@31 // 9546
D=A // 9547
@SP // 9548
AM=M+1 // 9549
A=A-1 // 9550
M=D // 9551
@51 // 9552
D=A // 9553
@SP // 9554
AM=M+1 // 9555
A=A-1 // 9556
M=D // 9557
@51 // 9558
D=A // 9559
@SP // 9560
AM=M+1 // 9561
A=A-1 // 9562
M=D // 9563
@51 // 9564
D=A // 9565
@SP // 9566
AM=M+1 // 9567
A=A-1 // 9568
M=D // 9569
@31 // 9570
D=A // 9571
@SP // 9572
AM=M+1 // 9573
A=A-1 // 9574
M=D // 9575
@3 // 9576
D=A // 9577
@SP // 9578
AM=M+1 // 9579
A=A-1 // 9580
M=D // 9581
@3 // 9582
D=A // 9583
@SP // 9584
AM=M+1 // 9585
A=A-1 // 9586
M=D // 9587
@3 // 9588
D=A // 9589
@SP // 9590
AM=M+1 // 9591
A=A-1 // 9592
M=D // 9593
@3 // 9594
D=A // 9595
@SP // 9596
AM=M+1 // 9597
A=A-1 // 9598
M=D // 9599
@SP // 9600
AM=M+1 // 9601
A=A-1 // 9602
M=0 // 9603
@SP // 9604
AM=M+1 // 9605
A=A-1 // 9606
M=0 // 9607
// call Output.create
@17 // 9608
D=A // 9609
@14 // 9610
M=D // 9611
@Output.create // 9612
D=A // 9613
@13 // 9614
M=D // 9615
@Output.init.ret.50 // 9616
D=A // 9617
@CALL // 9618
0;JMP // 9619
(Output.init.ret.50)
@SP // 9620
M=M-1 // 9621

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 81"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 59"), PushInstruction("constant 30"), PushInstruction("constant 48"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@81 // 9622
D=A // 9623
@SP // 9624
AM=M+1 // 9625
A=A-1 // 9626
M=D // 9627
@30 // 9628
D=A // 9629
@SP // 9630
AM=M+1 // 9631
A=A-1 // 9632
M=D // 9633
@51 // 9634
D=A // 9635
@SP // 9636
AM=M+1 // 9637
A=A-1 // 9638
M=D // 9639
@51 // 9640
D=A // 9641
@SP // 9642
AM=M+1 // 9643
A=A-1 // 9644
M=D // 9645
@51 // 9646
D=A // 9647
@SP // 9648
AM=M+1 // 9649
A=A-1 // 9650
M=D // 9651
@51 // 9652
D=A // 9653
@SP // 9654
AM=M+1 // 9655
A=A-1 // 9656
M=D // 9657
@51 // 9658
D=A // 9659
@SP // 9660
AM=M+1 // 9661
A=A-1 // 9662
M=D // 9663
@63 // 9664
D=A // 9665
@SP // 9666
AM=M+1 // 9667
A=A-1 // 9668
M=D // 9669
@59 // 9670
D=A // 9671
@SP // 9672
AM=M+1 // 9673
A=A-1 // 9674
M=D // 9675
@30 // 9676
D=A // 9677
@SP // 9678
AM=M+1 // 9679
A=A-1 // 9680
M=D // 9681
@48 // 9682
D=A // 9683
@SP // 9684
AM=M+1 // 9685
A=A-1 // 9686
M=D // 9687
@SP // 9688
AM=M+1 // 9689
A=A-1 // 9690
M=0 // 9691
// call Output.create
@17 // 9692
D=A // 9693
@14 // 9694
M=D // 9695
@Output.create // 9696
D=A // 9697
@13 // 9698
M=D // 9699
@Output.init.ret.51 // 9700
D=A // 9701
@CALL // 9702
0;JMP // 9703
(Output.init.ret.51)
@SP // 9704
M=M-1 // 9705

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 82"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@82 // 9706
D=A // 9707
@SP // 9708
AM=M+1 // 9709
A=A-1 // 9710
M=D // 9711
@31 // 9712
D=A // 9713
@SP // 9714
AM=M+1 // 9715
A=A-1 // 9716
M=D // 9717
@51 // 9718
D=A // 9719
@SP // 9720
AM=M+1 // 9721
A=A-1 // 9722
M=D // 9723
@51 // 9724
D=A // 9725
@SP // 9726
AM=M+1 // 9727
A=A-1 // 9728
M=D // 9729
@51 // 9730
D=A // 9731
@SP // 9732
AM=M+1 // 9733
A=A-1 // 9734
M=D // 9735
@31 // 9736
D=A // 9737
@SP // 9738
AM=M+1 // 9739
A=A-1 // 9740
M=D // 9741
@27 // 9742
D=A // 9743
@SP // 9744
AM=M+1 // 9745
A=A-1 // 9746
M=D // 9747
@51 // 9748
D=A // 9749
@SP // 9750
AM=M+1 // 9751
A=A-1 // 9752
M=D // 9753
@51 // 9754
D=A // 9755
@SP // 9756
AM=M+1 // 9757
A=A-1 // 9758
M=D // 9759
@51 // 9760
D=A // 9761
@SP // 9762
AM=M+1 // 9763
A=A-1 // 9764
M=D // 9765
@SP // 9766
AM=M+1 // 9767
A=A-1 // 9768
M=0 // 9769
@SP // 9770
AM=M+1 // 9771
A=A-1 // 9772
M=0 // 9773
// call Output.create
@17 // 9774
D=A // 9775
@14 // 9776
M=D // 9777
@Output.create // 9778
D=A // 9779
@13 // 9780
M=D // 9781
@Output.init.ret.52 // 9782
D=A // 9783
@CALL // 9784
0;JMP // 9785
(Output.init.ret.52)
@SP // 9786
M=M-1 // 9787

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 83"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 6"), PushInstruction("constant 28"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@83 // 9788
D=A // 9789
@SP // 9790
AM=M+1 // 9791
A=A-1 // 9792
M=D // 9793
@30 // 9794
D=A // 9795
@SP // 9796
AM=M+1 // 9797
A=A-1 // 9798
M=D // 9799
@51 // 9800
D=A // 9801
@SP // 9802
AM=M+1 // 9803
A=A-1 // 9804
M=D // 9805
@51 // 9806
D=A // 9807
@SP // 9808
AM=M+1 // 9809
A=A-1 // 9810
M=D // 9811
@6 // 9812
D=A // 9813
@SP // 9814
AM=M+1 // 9815
A=A-1 // 9816
M=D // 9817
@28 // 9818
D=A // 9819
@SP // 9820
AM=M+1 // 9821
A=A-1 // 9822
M=D // 9823
@48 // 9824
D=A // 9825
@SP // 9826
AM=M+1 // 9827
A=A-1 // 9828
M=D // 9829
@51 // 9830
D=A // 9831
@SP // 9832
AM=M+1 // 9833
A=A-1 // 9834
M=D // 9835
@51 // 9836
D=A // 9837
@SP // 9838
AM=M+1 // 9839
A=A-1 // 9840
M=D // 9841
@30 // 9842
D=A // 9843
@SP // 9844
AM=M+1 // 9845
A=A-1 // 9846
M=D // 9847
@SP // 9848
AM=M+1 // 9849
A=A-1 // 9850
M=0 // 9851
@SP // 9852
AM=M+1 // 9853
A=A-1 // 9854
M=0 // 9855
// call Output.create
@17 // 9856
D=A // 9857
@14 // 9858
M=D // 9859
@Output.create // 9860
D=A // 9861
@13 // 9862
M=D // 9863
@Output.init.ret.53 // 9864
D=A // 9865
@CALL // 9866
0;JMP // 9867
(Output.init.ret.53)
@SP // 9868
M=M-1 // 9869

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 84"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 45"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@84 // 9870
D=A // 9871
@SP // 9872
AM=M+1 // 9873
A=A-1 // 9874
M=D // 9875
@63 // 9876
D=A // 9877
@SP // 9878
AM=M+1 // 9879
A=A-1 // 9880
M=D // 9881
@63 // 9882
D=A // 9883
@SP // 9884
AM=M+1 // 9885
A=A-1 // 9886
M=D // 9887
@45 // 9888
D=A // 9889
@SP // 9890
AM=M+1 // 9891
A=A-1 // 9892
M=D // 9893
@12 // 9894
D=A // 9895
@SP // 9896
AM=M+1 // 9897
A=A-1 // 9898
M=D // 9899
@12 // 9900
D=A // 9901
@SP // 9902
AM=M+1 // 9903
A=A-1 // 9904
M=D // 9905
@12 // 9906
D=A // 9907
@SP // 9908
AM=M+1 // 9909
A=A-1 // 9910
M=D // 9911
@12 // 9912
D=A // 9913
@SP // 9914
AM=M+1 // 9915
A=A-1 // 9916
M=D // 9917
@12 // 9918
D=A // 9919
@SP // 9920
AM=M+1 // 9921
A=A-1 // 9922
M=D // 9923
@30 // 9924
D=A // 9925
@SP // 9926
AM=M+1 // 9927
A=A-1 // 9928
M=D // 9929
@SP // 9930
AM=M+1 // 9931
A=A-1 // 9932
M=0 // 9933
@SP // 9934
AM=M+1 // 9935
A=A-1 // 9936
M=0 // 9937
// call Output.create
@17 // 9938
D=A // 9939
@14 // 9940
M=D // 9941
@Output.create // 9942
D=A // 9943
@13 // 9944
M=D // 9945
@Output.init.ret.54 // 9946
D=A // 9947
@CALL // 9948
0;JMP // 9949
(Output.init.ret.54)
@SP // 9950
M=M-1 // 9951

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 85"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@85 // 9952
D=A // 9953
@SP // 9954
AM=M+1 // 9955
A=A-1 // 9956
M=D // 9957
@51 // 9958
D=A // 9959
@SP // 9960
AM=M+1 // 9961
A=A-1 // 9962
M=D // 9963
@51 // 9964
D=A // 9965
@SP // 9966
AM=M+1 // 9967
A=A-1 // 9968
M=D // 9969
@51 // 9970
D=A // 9971
@SP // 9972
AM=M+1 // 9973
A=A-1 // 9974
M=D // 9975
@51 // 9976
D=A // 9977
@SP // 9978
AM=M+1 // 9979
A=A-1 // 9980
M=D // 9981
@51 // 9982
D=A // 9983
@SP // 9984
AM=M+1 // 9985
A=A-1 // 9986
M=D // 9987
@51 // 9988
D=A // 9989
@SP // 9990
AM=M+1 // 9991
A=A-1 // 9992
M=D // 9993
@51 // 9994
D=A // 9995
@SP // 9996
AM=M+1 // 9997
A=A-1 // 9998
M=D // 9999
@51 // 10000
D=A // 10001
@SP // 10002
AM=M+1 // 10003
A=A-1 // 10004
M=D // 10005
@30 // 10006
D=A // 10007
@SP // 10008
AM=M+1 // 10009
A=A-1 // 10010
M=D // 10011
@SP // 10012
AM=M+1 // 10013
A=A-1 // 10014
M=0 // 10015
@SP // 10016
AM=M+1 // 10017
A=A-1 // 10018
M=0 // 10019
// call Output.create
@17 // 10020
D=A // 10021
@14 // 10022
M=D // 10023
@Output.create // 10024
D=A // 10025
@13 // 10026
M=D // 10027
@Output.init.ret.55 // 10028
D=A // 10029
@CALL // 10030
0;JMP // 10031
(Output.init.ret.55)
@SP // 10032
M=M-1 // 10033

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 86"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@86 // 10034
D=A // 10035
@SP // 10036
AM=M+1 // 10037
A=A-1 // 10038
M=D // 10039
@51 // 10040
D=A // 10041
@SP // 10042
AM=M+1 // 10043
A=A-1 // 10044
M=D // 10045
@51 // 10046
D=A // 10047
@SP // 10048
AM=M+1 // 10049
A=A-1 // 10050
M=D // 10051
@51 // 10052
D=A // 10053
@SP // 10054
AM=M+1 // 10055
A=A-1 // 10056
M=D // 10057
@51 // 10058
D=A // 10059
@SP // 10060
AM=M+1 // 10061
A=A-1 // 10062
M=D // 10063
@51 // 10064
D=A // 10065
@SP // 10066
AM=M+1 // 10067
A=A-1 // 10068
M=D // 10069
@30 // 10070
D=A // 10071
@SP // 10072
AM=M+1 // 10073
A=A-1 // 10074
M=D // 10075
@30 // 10076
D=A // 10077
@SP // 10078
AM=M+1 // 10079
A=A-1 // 10080
M=D // 10081
@12 // 10082
D=A // 10083
@SP // 10084
AM=M+1 // 10085
A=A-1 // 10086
M=D // 10087
@12 // 10088
D=A // 10089
@SP // 10090
AM=M+1 // 10091
A=A-1 // 10092
M=D // 10093
@SP // 10094
AM=M+1 // 10095
A=A-1 // 10096
M=0 // 10097
@SP // 10098
AM=M+1 // 10099
A=A-1 // 10100
M=0 // 10101
// call Output.create
@17 // 10102
D=A // 10103
@14 // 10104
M=D // 10105
@Output.create // 10106
D=A // 10107
@13 // 10108
M=D // 10109
@Output.init.ret.56 // 10110
D=A // 10111
@CALL // 10112
0;JMP // 10113
(Output.init.ret.56)
@SP // 10114
M=M-1 // 10115

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 87"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@87 // 10116
D=A // 10117
@SP // 10118
AM=M+1 // 10119
A=A-1 // 10120
M=D // 10121
@51 // 10122
D=A // 10123
@SP // 10124
AM=M+1 // 10125
A=A-1 // 10126
M=D // 10127
@51 // 10128
D=A // 10129
@SP // 10130
AM=M+1 // 10131
A=A-1 // 10132
M=D // 10133
@51 // 10134
D=A // 10135
@SP // 10136
AM=M+1 // 10137
A=A-1 // 10138
M=D // 10139
@51 // 10140
D=A // 10141
@SP // 10142
AM=M+1 // 10143
A=A-1 // 10144
M=D // 10145
@51 // 10146
D=A // 10147
@SP // 10148
AM=M+1 // 10149
A=A-1 // 10150
M=D // 10151
@63 // 10152
D=A // 10153
@SP // 10154
AM=M+1 // 10155
A=A-1 // 10156
M=D // 10157
@63 // 10158
D=A // 10159
@SP // 10160
AM=M+1 // 10161
A=A-1 // 10162
M=D // 10163
@63 // 10164
D=A // 10165
@SP // 10166
AM=M+1 // 10167
A=A-1 // 10168
M=D // 10169
@18 // 10170
D=A // 10171
@SP // 10172
AM=M+1 // 10173
A=A-1 // 10174
M=D // 10175
@SP // 10176
AM=M+1 // 10177
A=A-1 // 10178
M=0 // 10179
@SP // 10180
AM=M+1 // 10181
A=A-1 // 10182
M=0 // 10183
// call Output.create
@17 // 10184
D=A // 10185
@14 // 10186
M=D // 10187
@Output.create // 10188
D=A // 10189
@13 // 10190
M=D // 10191
@Output.init.ret.57 // 10192
D=A // 10193
@CALL // 10194
0;JMP // 10195
(Output.init.ret.57)
@SP // 10196
M=M-1 // 10197

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 88"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@88 // 10198
D=A // 10199
@SP // 10200
AM=M+1 // 10201
A=A-1 // 10202
M=D // 10203
@51 // 10204
D=A // 10205
@SP // 10206
AM=M+1 // 10207
A=A-1 // 10208
M=D // 10209
@51 // 10210
D=A // 10211
@SP // 10212
AM=M+1 // 10213
A=A-1 // 10214
M=D // 10215
@30 // 10216
D=A // 10217
@SP // 10218
AM=M+1 // 10219
A=A-1 // 10220
M=D // 10221
@30 // 10222
D=A // 10223
@SP // 10224
AM=M+1 // 10225
A=A-1 // 10226
M=D // 10227
@12 // 10228
D=A // 10229
@SP // 10230
AM=M+1 // 10231
A=A-1 // 10232
M=D // 10233
@30 // 10234
D=A // 10235
@SP // 10236
AM=M+1 // 10237
A=A-1 // 10238
M=D // 10239
@30 // 10240
D=A // 10241
@SP // 10242
AM=M+1 // 10243
A=A-1 // 10244
M=D // 10245
@51 // 10246
D=A // 10247
@SP // 10248
AM=M+1 // 10249
A=A-1 // 10250
M=D // 10251
@51 // 10252
D=A // 10253
@SP // 10254
AM=M+1 // 10255
A=A-1 // 10256
M=D // 10257
@SP // 10258
AM=M+1 // 10259
A=A-1 // 10260
M=0 // 10261
@SP // 10262
AM=M+1 // 10263
A=A-1 // 10264
M=0 // 10265
// call Output.create
@17 // 10266
D=A // 10267
@14 // 10268
M=D // 10269
@Output.create // 10270
D=A // 10271
@13 // 10272
M=D // 10273
@Output.init.ret.58 // 10274
D=A // 10275
@CALL // 10276
0;JMP // 10277
(Output.init.ret.58)
@SP // 10278
M=M-1 // 10279

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 89"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@89 // 10280
D=A // 10281
@SP // 10282
AM=M+1 // 10283
A=A-1 // 10284
M=D // 10285
@51 // 10286
D=A // 10287
@SP // 10288
AM=M+1 // 10289
A=A-1 // 10290
M=D // 10291
@51 // 10292
D=A // 10293
@SP // 10294
AM=M+1 // 10295
A=A-1 // 10296
M=D // 10297
@51 // 10298
D=A // 10299
@SP // 10300
AM=M+1 // 10301
A=A-1 // 10302
M=D // 10303
@51 // 10304
D=A // 10305
@SP // 10306
AM=M+1 // 10307
A=A-1 // 10308
M=D // 10309
@30 // 10310
D=A // 10311
@SP // 10312
AM=M+1 // 10313
A=A-1 // 10314
M=D // 10315
@12 // 10316
D=A // 10317
@SP // 10318
AM=M+1 // 10319
A=A-1 // 10320
M=D // 10321
@12 // 10322
D=A // 10323
@SP // 10324
AM=M+1 // 10325
A=A-1 // 10326
M=D // 10327
@12 // 10328
D=A // 10329
@SP // 10330
AM=M+1 // 10331
A=A-1 // 10332
M=D // 10333
@30 // 10334
D=A // 10335
@SP // 10336
AM=M+1 // 10337
A=A-1 // 10338
M=D // 10339
@SP // 10340
AM=M+1 // 10341
A=A-1 // 10342
M=0 // 10343
@SP // 10344
AM=M+1 // 10345
A=A-1 // 10346
M=0 // 10347
// call Output.create
@17 // 10348
D=A // 10349
@14 // 10350
M=D // 10351
@Output.create // 10352
D=A // 10353
@13 // 10354
M=D // 10355
@Output.init.ret.59 // 10356
D=A // 10357
@CALL // 10358
0;JMP // 10359
(Output.init.ret.59)
@SP // 10360
M=M-1 // 10361

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 90"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 49"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@90 // 10362
D=A // 10363
@SP // 10364
AM=M+1 // 10365
A=A-1 // 10366
M=D // 10367
@63 // 10368
D=A // 10369
@SP // 10370
AM=M+1 // 10371
A=A-1 // 10372
M=D // 10373
@51 // 10374
D=A // 10375
@SP // 10376
AM=M+1 // 10377
A=A-1 // 10378
M=D // 10379
@49 // 10380
D=A // 10381
@SP // 10382
AM=M+1 // 10383
A=A-1 // 10384
M=D // 10385
@24 // 10386
D=A // 10387
@SP // 10388
AM=M+1 // 10389
A=A-1 // 10390
M=D // 10391
@12 // 10392
D=A // 10393
@SP // 10394
AM=M+1 // 10395
A=A-1 // 10396
M=D // 10397
@6 // 10398
D=A // 10399
@SP // 10400
AM=M+1 // 10401
A=A-1 // 10402
M=D // 10403
@35 // 10404
D=A // 10405
@SP // 10406
AM=M+1 // 10407
A=A-1 // 10408
M=D // 10409
@51 // 10410
D=A // 10411
@SP // 10412
AM=M+1 // 10413
A=A-1 // 10414
M=D // 10415
@63 // 10416
D=A // 10417
@SP // 10418
AM=M+1 // 10419
A=A-1 // 10420
M=D // 10421
@SP // 10422
AM=M+1 // 10423
A=A-1 // 10424
M=0 // 10425
@SP // 10426
AM=M+1 // 10427
A=A-1 // 10428
M=0 // 10429
// call Output.create
@17 // 10430
D=A // 10431
@14 // 10432
M=D // 10433
@Output.create // 10434
D=A // 10435
@13 // 10436
M=D // 10437
@Output.init.ret.60 // 10438
D=A // 10439
@CALL // 10440
0;JMP // 10441
(Output.init.ret.60)
@SP // 10442
M=M-1 // 10443

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 91"), PushInstruction("constant 30"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@91 // 10444
D=A // 10445
@SP // 10446
AM=M+1 // 10447
A=A-1 // 10448
M=D // 10449
@30 // 10450
D=A // 10451
@SP // 10452
AM=M+1 // 10453
A=A-1 // 10454
M=D // 10455
@6 // 10456
D=A // 10457
@SP // 10458
AM=M+1 // 10459
A=A-1 // 10460
M=D // 10461
@6 // 10462
D=A // 10463
@SP // 10464
AM=M+1 // 10465
A=A-1 // 10466
M=D // 10467
@6 // 10468
D=A // 10469
@SP // 10470
AM=M+1 // 10471
A=A-1 // 10472
M=D // 10473
@6 // 10474
D=A // 10475
@SP // 10476
AM=M+1 // 10477
A=A-1 // 10478
M=D // 10479
@6 // 10480
D=A // 10481
@SP // 10482
AM=M+1 // 10483
A=A-1 // 10484
M=D // 10485
@6 // 10486
D=A // 10487
@SP // 10488
AM=M+1 // 10489
A=A-1 // 10490
M=D // 10491
@6 // 10492
D=A // 10493
@SP // 10494
AM=M+1 // 10495
A=A-1 // 10496
M=D // 10497
@30 // 10498
D=A // 10499
@SP // 10500
AM=M+1 // 10501
A=A-1 // 10502
M=D // 10503
@SP // 10504
AM=M+1 // 10505
A=A-1 // 10506
M=0 // 10507
@SP // 10508
AM=M+1 // 10509
A=A-1 // 10510
M=0 // 10511
// call Output.create
@17 // 10512
D=A // 10513
@14 // 10514
M=D // 10515
@Output.create // 10516
D=A // 10517
@13 // 10518
M=D // 10519
@Output.init.ret.61 // 10520
D=A // 10521
@CALL // 10522
0;JMP // 10523
(Output.init.ret.61)
@SP // 10524
M=M-1 // 10525

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 92"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 1"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 48"), PushInstruction("constant 32"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 10526
D=A // 10527
@SP // 10528
M=D+M // 10529
@92 // 10530
D=A // 10531
@SP // 10532
A=M-1 // 10533
M=1 // 10534
A=A-1 // 10535
M=0 // 10536
A=A-1 // 10537
M=0 // 10538
A=A-1 // 10539
M=D // 10540
A=A-1 // 10541
@3 // 10542
D=A // 10543
@SP // 10544
AM=M+1 // 10545
A=A-1 // 10546
M=D // 10547
@6 // 10548
D=A // 10549
@SP // 10550
AM=M+1 // 10551
A=A-1 // 10552
M=D // 10553
@12 // 10554
D=A // 10555
@SP // 10556
AM=M+1 // 10557
A=A-1 // 10558
M=D // 10559
@24 // 10560
D=A // 10561
@SP // 10562
AM=M+1 // 10563
A=A-1 // 10564
M=D // 10565
@48 // 10566
D=A // 10567
@SP // 10568
AM=M+1 // 10569
A=A-1 // 10570
M=D // 10571
@32 // 10572
D=A // 10573
@SP // 10574
AM=M+1 // 10575
A=A-1 // 10576
M=D // 10577
@SP // 10578
AM=M+1 // 10579
A=A-1 // 10580
M=0 // 10581
@SP // 10582
AM=M+1 // 10583
A=A-1 // 10584
M=0 // 10585
// call Output.create
@17 // 10586
D=A // 10587
@14 // 10588
M=D // 10589
@Output.create // 10590
D=A // 10591
@13 // 10592
M=D // 10593
@Output.init.ret.62 // 10594
D=A // 10595
@CALL // 10596
0;JMP // 10597
(Output.init.ret.62)
@SP // 10598
M=M-1 // 10599

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 93"), PushInstruction("constant 30"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@93 // 10600
D=A // 10601
@SP // 10602
AM=M+1 // 10603
A=A-1 // 10604
M=D // 10605
@30 // 10606
D=A // 10607
@SP // 10608
AM=M+1 // 10609
A=A-1 // 10610
M=D // 10611
@24 // 10612
D=A // 10613
@SP // 10614
AM=M+1 // 10615
A=A-1 // 10616
M=D // 10617
@24 // 10618
D=A // 10619
@SP // 10620
AM=M+1 // 10621
A=A-1 // 10622
M=D // 10623
@24 // 10624
D=A // 10625
@SP // 10626
AM=M+1 // 10627
A=A-1 // 10628
M=D // 10629
@24 // 10630
D=A // 10631
@SP // 10632
AM=M+1 // 10633
A=A-1 // 10634
M=D // 10635
@24 // 10636
D=A // 10637
@SP // 10638
AM=M+1 // 10639
A=A-1 // 10640
M=D // 10641
@24 // 10642
D=A // 10643
@SP // 10644
AM=M+1 // 10645
A=A-1 // 10646
M=D // 10647
@24 // 10648
D=A // 10649
@SP // 10650
AM=M+1 // 10651
A=A-1 // 10652
M=D // 10653
@30 // 10654
D=A // 10655
@SP // 10656
AM=M+1 // 10657
A=A-1 // 10658
M=D // 10659
@SP // 10660
AM=M+1 // 10661
A=A-1 // 10662
M=0 // 10663
@SP // 10664
AM=M+1 // 10665
A=A-1 // 10666
M=0 // 10667
// call Output.create
@17 // 10668
D=A // 10669
@14 // 10670
M=D // 10671
@Output.create // 10672
D=A // 10673
@13 // 10674
M=D // 10675
@Output.init.ret.63 // 10676
D=A // 10677
@CALL // 10678
0;JMP // 10679
(Output.init.ret.63)
@SP // 10680
M=M-1 // 10681

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 94"), PushInstruction("constant 8"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@94 // 10682
D=A // 10683
@SP // 10684
AM=M+1 // 10685
A=A-1 // 10686
M=D // 10687
@8 // 10688
D=A // 10689
@SP // 10690
AM=M+1 // 10691
A=A-1 // 10692
M=D // 10693
@28 // 10694
D=A // 10695
@SP // 10696
AM=M+1 // 10697
A=A-1 // 10698
M=D // 10699
@54 // 10700
D=A // 10701
@SP // 10702
AM=M+1 // 10703
A=A-1 // 10704
M=D // 10705
@SP // 10706
AM=M+1 // 10707
A=A-1 // 10708
M=0 // 10709
@SP // 10710
AM=M+1 // 10711
A=A-1 // 10712
M=0 // 10713
@SP // 10714
AM=M+1 // 10715
A=A-1 // 10716
M=0 // 10717
@SP // 10718
AM=M+1 // 10719
A=A-1 // 10720
M=0 // 10721
@SP // 10722
AM=M+1 // 10723
A=A-1 // 10724
M=0 // 10725
@SP // 10726
AM=M+1 // 10727
A=A-1 // 10728
M=0 // 10729
@SP // 10730
AM=M+1 // 10731
A=A-1 // 10732
M=0 // 10733
@SP // 10734
AM=M+1 // 10735
A=A-1 // 10736
M=0 // 10737
// call Output.create
@17 // 10738
D=A // 10739
@14 // 10740
M=D // 10741
@Output.create // 10742
D=A // 10743
@13 // 10744
M=D // 10745
@Output.init.ret.64 // 10746
D=A // 10747
@CALL // 10748
0;JMP // 10749
(Output.init.ret.64)
@SP // 10750
M=M-1 // 10751

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 95"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@10 // 10752
D=A // 10753
@SP // 10754
M=D+M // 10755
@95 // 10756
D=A // 10757
@SP // 10758
A=M-1 // 10759
M=0 // 10760
A=A-1 // 10761
M=0 // 10762
A=A-1 // 10763
M=0 // 10764
A=A-1 // 10765
M=0 // 10766
A=A-1 // 10767
M=0 // 10768
A=A-1 // 10769
M=0 // 10770
A=A-1 // 10771
M=0 // 10772
A=A-1 // 10773
M=0 // 10774
A=A-1 // 10775
M=0 // 10776
A=A-1 // 10777
M=D // 10778
A=A-1 // 10779
@2 // 10780
D=A // 10781
@SP // 10782
M=D+M // 10783
@63 // 10784
D=A // 10785
@SP // 10786
A=M-1 // 10787
M=0 // 10788
A=A-1 // 10789
M=D // 10790
A=A-1 // 10791
// call Output.create
@17 // 10792
D=A // 10793
@14 // 10794
M=D // 10795
@Output.create // 10796
D=A // 10797
@13 // 10798
M=D // 10799
@Output.init.ret.65 // 10800
D=A // 10801
@CALL // 10802
0;JMP // 10803
(Output.init.ret.65)
@SP // 10804
M=M-1 // 10805

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 96"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@96 // 10806
D=A // 10807
@SP // 10808
AM=M+1 // 10809
A=A-1 // 10810
M=D // 10811
@6 // 10812
D=A // 10813
@SP // 10814
AM=M+1 // 10815
A=A-1 // 10816
M=D // 10817
@12 // 10818
D=A // 10819
@SP // 10820
AM=M+1 // 10821
A=A-1 // 10822
M=D // 10823
@24 // 10824
D=A // 10825
@SP // 10826
AM=M+1 // 10827
A=A-1 // 10828
M=D // 10829
@SP // 10830
AM=M+1 // 10831
A=A-1 // 10832
M=0 // 10833
@SP // 10834
AM=M+1 // 10835
A=A-1 // 10836
M=0 // 10837
@SP // 10838
AM=M+1 // 10839
A=A-1 // 10840
M=0 // 10841
@SP // 10842
AM=M+1 // 10843
A=A-1 // 10844
M=0 // 10845
@SP // 10846
AM=M+1 // 10847
A=A-1 // 10848
M=0 // 10849
@SP // 10850
AM=M+1 // 10851
A=A-1 // 10852
M=0 // 10853
@SP // 10854
AM=M+1 // 10855
A=A-1 // 10856
M=0 // 10857
@SP // 10858
AM=M+1 // 10859
A=A-1 // 10860
M=0 // 10861
// call Output.create
@17 // 10862
D=A // 10863
@14 // 10864
M=D // 10865
@Output.create // 10866
D=A // 10867
@13 // 10868
M=D // 10869
@Output.init.ret.66 // 10870
D=A // 10871
@CALL // 10872
0;JMP // 10873
(Output.init.ret.66)
@SP // 10874
M=M-1 // 10875

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 97"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 14"), PushInstruction("constant 24"), PushInstruction("constant 30"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 10876
D=A // 10877
@SP // 10878
M=D+M // 10879
@97 // 10880
D=A // 10881
@SP // 10882
A=M-1 // 10883
M=0 // 10884
A=A-1 // 10885
M=0 // 10886
A=A-1 // 10887
M=0 // 10888
A=A-1 // 10889
M=D // 10890
A=A-1 // 10891
@14 // 10892
D=A // 10893
@SP // 10894
AM=M+1 // 10895
A=A-1 // 10896
M=D // 10897
@24 // 10898
D=A // 10899
@SP // 10900
AM=M+1 // 10901
A=A-1 // 10902
M=D // 10903
@30 // 10904
D=A // 10905
@SP // 10906
AM=M+1 // 10907
A=A-1 // 10908
M=D // 10909
@27 // 10910
D=A // 10911
@SP // 10912
AM=M+1 // 10913
A=A-1 // 10914
M=D // 10915
@27 // 10916
D=A // 10917
@SP // 10918
AM=M+1 // 10919
A=A-1 // 10920
M=D // 10921
@54 // 10922
D=A // 10923
@SP // 10924
AM=M+1 // 10925
A=A-1 // 10926
M=D // 10927
@SP // 10928
AM=M+1 // 10929
A=A-1 // 10930
M=0 // 10931
@SP // 10932
AM=M+1 // 10933
A=A-1 // 10934
M=0 // 10935
// call Output.create
@17 // 10936
D=A // 10937
@14 // 10938
M=D // 10939
@Output.create // 10940
D=A // 10941
@13 // 10942
M=D // 10943
@Output.init.ret.67 // 10944
D=A // 10945
@CALL // 10946
0;JMP // 10947
(Output.init.ret.67)
@SP // 10948
M=M-1 // 10949

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 98"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@98 // 10950
D=A // 10951
@SP // 10952
AM=M+1 // 10953
A=A-1 // 10954
M=D // 10955
@3 // 10956
D=A // 10957
@SP // 10958
AM=M+1 // 10959
A=A-1 // 10960
M=D // 10961
@3 // 10962
D=A // 10963
@SP // 10964
AM=M+1 // 10965
A=A-1 // 10966
M=D // 10967
@3 // 10968
D=A // 10969
@SP // 10970
AM=M+1 // 10971
A=A-1 // 10972
M=D // 10973
@15 // 10974
D=A // 10975
@SP // 10976
AM=M+1 // 10977
A=A-1 // 10978
M=D // 10979
@27 // 10980
D=A // 10981
@SP // 10982
AM=M+1 // 10983
A=A-1 // 10984
M=D // 10985
@51 // 10986
D=A // 10987
@SP // 10988
AM=M+1 // 10989
A=A-1 // 10990
M=D // 10991
@51 // 10992
D=A // 10993
@SP // 10994
AM=M+1 // 10995
A=A-1 // 10996
M=D // 10997
@51 // 10998
D=A // 10999
@SP // 11000
AM=M+1 // 11001
A=A-1 // 11002
M=D // 11003
@30 // 11004
D=A // 11005
@SP // 11006
AM=M+1 // 11007
A=A-1 // 11008
M=D // 11009
@SP // 11010
AM=M+1 // 11011
A=A-1 // 11012
M=0 // 11013
@SP // 11014
AM=M+1 // 11015
A=A-1 // 11016
M=0 // 11017
// call Output.create
@17 // 11018
D=A // 11019
@14 // 11020
M=D // 11021
@Output.create // 11022
D=A // 11023
@13 // 11024
M=D // 11025
@Output.init.ret.68 // 11026
D=A // 11027
@CALL // 11028
0;JMP // 11029
(Output.init.ret.68)
@SP // 11030
M=M-1 // 11031

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 99"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11032
D=A // 11033
@SP // 11034
M=D+M // 11035
@99 // 11036
D=A // 11037
@SP // 11038
A=M-1 // 11039
M=0 // 11040
A=A-1 // 11041
M=0 // 11042
A=A-1 // 11043
M=0 // 11044
A=A-1 // 11045
M=D // 11046
A=A-1 // 11047
@30 // 11048
D=A // 11049
@SP // 11050
AM=M+1 // 11051
A=A-1 // 11052
M=D // 11053
@51 // 11054
D=A // 11055
@SP // 11056
AM=M+1 // 11057
A=A-1 // 11058
M=D // 11059
@3 // 11060
D=A // 11061
@SP // 11062
AM=M+1 // 11063
A=A-1 // 11064
M=D // 11065
@3 // 11066
D=A // 11067
@SP // 11068
AM=M+1 // 11069
A=A-1 // 11070
M=D // 11071
@51 // 11072
D=A // 11073
@SP // 11074
AM=M+1 // 11075
A=A-1 // 11076
M=D // 11077
@30 // 11078
D=A // 11079
@SP // 11080
AM=M+1 // 11081
A=A-1 // 11082
M=D // 11083
@SP // 11084
AM=M+1 // 11085
A=A-1 // 11086
M=0 // 11087
@SP // 11088
AM=M+1 // 11089
A=A-1 // 11090
M=0 // 11091
// call Output.create
@17 // 11092
D=A // 11093
@14 // 11094
M=D // 11095
@Output.create // 11096
D=A // 11097
@13 // 11098
M=D // 11099
@Output.init.ret.69 // 11100
D=A // 11101
@CALL // 11102
0;JMP // 11103
(Output.init.ret.69)
@SP // 11104
M=M-1 // 11105

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 100"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 60"), PushInstruction("constant 54"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@100 // 11106
D=A // 11107
@SP // 11108
AM=M+1 // 11109
A=A-1 // 11110
M=D // 11111
@48 // 11112
D=A // 11113
@SP // 11114
AM=M+1 // 11115
A=A-1 // 11116
M=D // 11117
@48 // 11118
D=A // 11119
@SP // 11120
AM=M+1 // 11121
A=A-1 // 11122
M=D // 11123
@48 // 11124
D=A // 11125
@SP // 11126
AM=M+1 // 11127
A=A-1 // 11128
M=D // 11129
@60 // 11130
D=A // 11131
@SP // 11132
AM=M+1 // 11133
A=A-1 // 11134
M=D // 11135
@54 // 11136
D=A // 11137
@SP // 11138
AM=M+1 // 11139
A=A-1 // 11140
M=D // 11141
@51 // 11142
D=A // 11143
@SP // 11144
AM=M+1 // 11145
A=A-1 // 11146
M=D // 11147
@51 // 11148
D=A // 11149
@SP // 11150
AM=M+1 // 11151
A=A-1 // 11152
M=D // 11153
@51 // 11154
D=A // 11155
@SP // 11156
AM=M+1 // 11157
A=A-1 // 11158
M=D // 11159
@30 // 11160
D=A // 11161
@SP // 11162
AM=M+1 // 11163
A=A-1 // 11164
M=D // 11165
@SP // 11166
AM=M+1 // 11167
A=A-1 // 11168
M=0 // 11169
@SP // 11170
AM=M+1 // 11171
A=A-1 // 11172
M=0 // 11173
// call Output.create
@17 // 11174
D=A // 11175
@14 // 11176
M=D // 11177
@Output.create // 11178
D=A // 11179
@13 // 11180
M=D // 11181
@Output.init.ret.70 // 11182
D=A // 11183
@CALL // 11184
0;JMP // 11185
(Output.init.ret.70)
@SP // 11186
M=M-1 // 11187

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 101"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11188
D=A // 11189
@SP // 11190
M=D+M // 11191
@101 // 11192
D=A // 11193
@SP // 11194
A=M-1 // 11195
M=0 // 11196
A=A-1 // 11197
M=0 // 11198
A=A-1 // 11199
M=0 // 11200
A=A-1 // 11201
M=D // 11202
A=A-1 // 11203
@30 // 11204
D=A // 11205
@SP // 11206
AM=M+1 // 11207
A=A-1 // 11208
M=D // 11209
@51 // 11210
D=A // 11211
@SP // 11212
AM=M+1 // 11213
A=A-1 // 11214
M=D // 11215
@63 // 11216
D=A // 11217
@SP // 11218
AM=M+1 // 11219
A=A-1 // 11220
M=D // 11221
@3 // 11222
D=A // 11223
@SP // 11224
AM=M+1 // 11225
A=A-1 // 11226
M=D // 11227
@51 // 11228
D=A // 11229
@SP // 11230
AM=M+1 // 11231
A=A-1 // 11232
M=D // 11233
@30 // 11234
D=A // 11235
@SP // 11236
AM=M+1 // 11237
A=A-1 // 11238
M=D // 11239
@SP // 11240
AM=M+1 // 11241
A=A-1 // 11242
M=0 // 11243
@SP // 11244
AM=M+1 // 11245
A=A-1 // 11246
M=0 // 11247
// call Output.create
@17 // 11248
D=A // 11249
@14 // 11250
M=D // 11251
@Output.create // 11252
D=A // 11253
@13 // 11254
M=D // 11255
@Output.init.ret.71 // 11256
D=A // 11257
@CALL // 11258
0;JMP // 11259
(Output.init.ret.71)
@SP // 11260
M=M-1 // 11261

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 102"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 38"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@102 // 11262
D=A // 11263
@SP // 11264
AM=M+1 // 11265
A=A-1 // 11266
M=D // 11267
@28 // 11268
D=A // 11269
@SP // 11270
AM=M+1 // 11271
A=A-1 // 11272
M=D // 11273
@54 // 11274
D=A // 11275
@SP // 11276
AM=M+1 // 11277
A=A-1 // 11278
M=D // 11279
@38 // 11280
D=A // 11281
@SP // 11282
AM=M+1 // 11283
A=A-1 // 11284
M=D // 11285
@6 // 11286
D=A // 11287
@SP // 11288
AM=M+1 // 11289
A=A-1 // 11290
M=D // 11291
@15 // 11292
D=A // 11293
@SP // 11294
AM=M+1 // 11295
A=A-1 // 11296
M=D // 11297
@6 // 11298
D=A // 11299
@SP // 11300
AM=M+1 // 11301
A=A-1 // 11302
M=D // 11303
@6 // 11304
D=A // 11305
@SP // 11306
AM=M+1 // 11307
A=A-1 // 11308
M=D // 11309
@6 // 11310
D=A // 11311
@SP // 11312
AM=M+1 // 11313
A=A-1 // 11314
M=D // 11315
@15 // 11316
D=A // 11317
@SP // 11318
AM=M+1 // 11319
A=A-1 // 11320
M=D // 11321
@SP // 11322
AM=M+1 // 11323
A=A-1 // 11324
M=0 // 11325
@SP // 11326
AM=M+1 // 11327
A=A-1 // 11328
M=0 // 11329
// call Output.create
@17 // 11330
D=A // 11331
@14 // 11332
M=D // 11333
@Output.create // 11334
D=A // 11335
@13 // 11336
M=D // 11337
@Output.init.ret.72 // 11338
D=A // 11339
@CALL // 11340
0;JMP // 11341
(Output.init.ret.72)
@SP // 11342
M=M-1 // 11343

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 103"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 11344
D=A // 11345
@SP // 11346
M=D+M // 11347
@103 // 11348
D=A // 11349
@SP // 11350
A=M-1 // 11351
M=0 // 11352
A=A-1 // 11353
M=0 // 11354
A=A-1 // 11355
M=D // 11356
A=A-1 // 11357
@30 // 11358
D=A // 11359
@SP // 11360
AM=M+1 // 11361
A=A-1 // 11362
M=D // 11363
@51 // 11364
D=A // 11365
@SP // 11366
AM=M+1 // 11367
A=A-1 // 11368
M=D // 11369
@51 // 11370
D=A // 11371
@SP // 11372
AM=M+1 // 11373
A=A-1 // 11374
M=D // 11375
@51 // 11376
D=A // 11377
@SP // 11378
AM=M+1 // 11379
A=A-1 // 11380
M=D // 11381
@62 // 11382
D=A // 11383
@SP // 11384
AM=M+1 // 11385
A=A-1 // 11386
M=D // 11387
@48 // 11388
D=A // 11389
@SP // 11390
AM=M+1 // 11391
A=A-1 // 11392
M=D // 11393
@51 // 11394
D=A // 11395
@SP // 11396
AM=M+1 // 11397
A=A-1 // 11398
M=D // 11399
@30 // 11400
D=A // 11401
@SP // 11402
AM=M+1 // 11403
A=A-1 // 11404
M=D // 11405
@SP // 11406
AM=M+1 // 11407
A=A-1 // 11408
M=0 // 11409
// call Output.create
@17 // 11410
D=A // 11411
@14 // 11412
M=D // 11413
@Output.create // 11414
D=A // 11415
@13 // 11416
M=D // 11417
@Output.init.ret.73 // 11418
D=A // 11419
@CALL // 11420
0;JMP // 11421
(Output.init.ret.73)
@SP // 11422
M=M-1 // 11423

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 104"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 27"), PushInstruction("constant 55"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@104 // 11424
D=A // 11425
@SP // 11426
AM=M+1 // 11427
A=A-1 // 11428
M=D // 11429
@3 // 11430
D=A // 11431
@SP // 11432
AM=M+1 // 11433
A=A-1 // 11434
M=D // 11435
@3 // 11436
D=A // 11437
@SP // 11438
AM=M+1 // 11439
A=A-1 // 11440
M=D // 11441
@3 // 11442
D=A // 11443
@SP // 11444
AM=M+1 // 11445
A=A-1 // 11446
M=D // 11447
@27 // 11448
D=A // 11449
@SP // 11450
AM=M+1 // 11451
A=A-1 // 11452
M=D // 11453
@55 // 11454
D=A // 11455
@SP // 11456
AM=M+1 // 11457
A=A-1 // 11458
M=D // 11459
@51 // 11460
D=A // 11461
@SP // 11462
AM=M+1 // 11463
A=A-1 // 11464
M=D // 11465
@51 // 11466
D=A // 11467
@SP // 11468
AM=M+1 // 11469
A=A-1 // 11470
M=D // 11471
@51 // 11472
D=A // 11473
@SP // 11474
AM=M+1 // 11475
A=A-1 // 11476
M=D // 11477
@51 // 11478
D=A // 11479
@SP // 11480
AM=M+1 // 11481
A=A-1 // 11482
M=D // 11483
@SP // 11484
AM=M+1 // 11485
A=A-1 // 11486
M=0 // 11487
@SP // 11488
AM=M+1 // 11489
A=A-1 // 11490
M=0 // 11491
// call Output.create
@17 // 11492
D=A // 11493
@14 // 11494
M=D // 11495
@Output.create // 11496
D=A // 11497
@13 // 11498
M=D // 11499
@Output.init.ret.74 // 11500
D=A // 11501
@CALL // 11502
0;JMP // 11503
(Output.init.ret.74)
@SP // 11504
M=M-1 // 11505

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 105"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 14"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@105 // 11506
D=A // 11507
@SP // 11508
AM=M+1 // 11509
A=A-1 // 11510
M=D // 11511
@12 // 11512
D=A // 11513
@SP // 11514
AM=M+1 // 11515
A=A-1 // 11516
M=D // 11517
@12 // 11518
D=A // 11519
@SP // 11520
AM=M+1 // 11521
A=A-1 // 11522
M=D // 11523
@SP // 11524
AM=M+1 // 11525
A=A-1 // 11526
M=0 // 11527
@14 // 11528
D=A // 11529
@SP // 11530
AM=M+1 // 11531
A=A-1 // 11532
M=D // 11533
@12 // 11534
D=A // 11535
@SP // 11536
AM=M+1 // 11537
A=A-1 // 11538
M=D // 11539
@12 // 11540
D=A // 11541
@SP // 11542
AM=M+1 // 11543
A=A-1 // 11544
M=D // 11545
@12 // 11546
D=A // 11547
@SP // 11548
AM=M+1 // 11549
A=A-1 // 11550
M=D // 11551
@12 // 11552
D=A // 11553
@SP // 11554
AM=M+1 // 11555
A=A-1 // 11556
M=D // 11557
@30 // 11558
D=A // 11559
@SP // 11560
AM=M+1 // 11561
A=A-1 // 11562
M=D // 11563
@SP // 11564
AM=M+1 // 11565
A=A-1 // 11566
M=0 // 11567
@SP // 11568
AM=M+1 // 11569
A=A-1 // 11570
M=0 // 11571
// call Output.create
@17 // 11572
D=A // 11573
@14 // 11574
M=D // 11575
@Output.create // 11576
D=A // 11577
@13 // 11578
M=D // 11579
@Output.init.ret.75 // 11580
D=A // 11581
@CALL // 11582
0;JMP // 11583
(Output.init.ret.75)
@SP // 11584
M=M-1 // 11585

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 106"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 0"), PushInstruction("constant 56"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@106 // 11586
D=A // 11587
@SP // 11588
AM=M+1 // 11589
A=A-1 // 11590
M=D // 11591
@48 // 11592
D=A // 11593
@SP // 11594
AM=M+1 // 11595
A=A-1 // 11596
M=D // 11597
@48 // 11598
D=A // 11599
@SP // 11600
AM=M+1 // 11601
A=A-1 // 11602
M=D // 11603
@SP // 11604
AM=M+1 // 11605
A=A-1 // 11606
M=0 // 11607
@56 // 11608
D=A // 11609
@SP // 11610
AM=M+1 // 11611
A=A-1 // 11612
M=D // 11613
@48 // 11614
D=A // 11615
@SP // 11616
AM=M+1 // 11617
A=A-1 // 11618
M=D // 11619
@48 // 11620
D=A // 11621
@SP // 11622
AM=M+1 // 11623
A=A-1 // 11624
M=D // 11625
@48 // 11626
D=A // 11627
@SP // 11628
AM=M+1 // 11629
A=A-1 // 11630
M=D // 11631
@48 // 11632
D=A // 11633
@SP // 11634
AM=M+1 // 11635
A=A-1 // 11636
M=D // 11637
@51 // 11638
D=A // 11639
@SP // 11640
AM=M+1 // 11641
A=A-1 // 11642
M=D // 11643
@30 // 11644
D=A // 11645
@SP // 11646
AM=M+1 // 11647
A=A-1 // 11648
M=D // 11649
@SP // 11650
AM=M+1 // 11651
A=A-1 // 11652
M=0 // 11653
// call Output.create
@17 // 11654
D=A // 11655
@14 // 11656
M=D // 11657
@Output.create // 11658
D=A // 11659
@13 // 11660
M=D // 11661
@Output.init.ret.76 // 11662
D=A // 11663
@CALL // 11664
0;JMP // 11665
(Output.init.ret.76)
@SP // 11666
M=M-1 // 11667

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 107"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@107 // 11668
D=A // 11669
@SP // 11670
AM=M+1 // 11671
A=A-1 // 11672
M=D // 11673
@3 // 11674
D=A // 11675
@SP // 11676
AM=M+1 // 11677
A=A-1 // 11678
M=D // 11679
@3 // 11680
D=A // 11681
@SP // 11682
AM=M+1 // 11683
A=A-1 // 11684
M=D // 11685
@3 // 11686
D=A // 11687
@SP // 11688
AM=M+1 // 11689
A=A-1 // 11690
M=D // 11691
@51 // 11692
D=A // 11693
@SP // 11694
AM=M+1 // 11695
A=A-1 // 11696
M=D // 11697
@27 // 11698
D=A // 11699
@SP // 11700
AM=M+1 // 11701
A=A-1 // 11702
M=D // 11703
@15 // 11704
D=A // 11705
@SP // 11706
AM=M+1 // 11707
A=A-1 // 11708
M=D // 11709
@15 // 11710
D=A // 11711
@SP // 11712
AM=M+1 // 11713
A=A-1 // 11714
M=D // 11715
@27 // 11716
D=A // 11717
@SP // 11718
AM=M+1 // 11719
A=A-1 // 11720
M=D // 11721
@51 // 11722
D=A // 11723
@SP // 11724
AM=M+1 // 11725
A=A-1 // 11726
M=D // 11727
@SP // 11728
AM=M+1 // 11729
A=A-1 // 11730
M=0 // 11731
@SP // 11732
AM=M+1 // 11733
A=A-1 // 11734
M=0 // 11735
// call Output.create
@17 // 11736
D=A // 11737
@14 // 11738
M=D // 11739
@Output.create // 11740
D=A // 11741
@13 // 11742
M=D // 11743
@Output.init.ret.77 // 11744
D=A // 11745
@CALL // 11746
0;JMP // 11747
(Output.init.ret.77)
@SP // 11748
M=M-1 // 11749

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 108"), PushInstruction("constant 14"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@108 // 11750
D=A // 11751
@SP // 11752
AM=M+1 // 11753
A=A-1 // 11754
M=D // 11755
@14 // 11756
D=A // 11757
@SP // 11758
AM=M+1 // 11759
A=A-1 // 11760
M=D // 11761
@12 // 11762
D=A // 11763
@SP // 11764
AM=M+1 // 11765
A=A-1 // 11766
M=D // 11767
@12 // 11768
D=A // 11769
@SP // 11770
AM=M+1 // 11771
A=A-1 // 11772
M=D // 11773
@12 // 11774
D=A // 11775
@SP // 11776
AM=M+1 // 11777
A=A-1 // 11778
M=D // 11779
@12 // 11780
D=A // 11781
@SP // 11782
AM=M+1 // 11783
A=A-1 // 11784
M=D // 11785
@12 // 11786
D=A // 11787
@SP // 11788
AM=M+1 // 11789
A=A-1 // 11790
M=D // 11791
@12 // 11792
D=A // 11793
@SP // 11794
AM=M+1 // 11795
A=A-1 // 11796
M=D // 11797
@12 // 11798
D=A // 11799
@SP // 11800
AM=M+1 // 11801
A=A-1 // 11802
M=D // 11803
@30 // 11804
D=A // 11805
@SP // 11806
AM=M+1 // 11807
A=A-1 // 11808
M=D // 11809
@SP // 11810
AM=M+1 // 11811
A=A-1 // 11812
M=0 // 11813
@SP // 11814
AM=M+1 // 11815
A=A-1 // 11816
M=0 // 11817
// call Output.create
@17 // 11818
D=A // 11819
@14 // 11820
M=D // 11821
@Output.create // 11822
D=A // 11823
@13 // 11824
M=D // 11825
@Output.init.ret.78 // 11826
D=A // 11827
@CALL // 11828
0;JMP // 11829
(Output.init.ret.78)
@SP // 11830
M=M-1 // 11831

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 109"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 63"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11832
D=A // 11833
@SP // 11834
M=D+M // 11835
@109 // 11836
D=A // 11837
@SP // 11838
A=M-1 // 11839
M=0 // 11840
A=A-1 // 11841
M=0 // 11842
A=A-1 // 11843
M=0 // 11844
A=A-1 // 11845
M=D // 11846
A=A-1 // 11847
@29 // 11848
D=A // 11849
@SP // 11850
AM=M+1 // 11851
A=A-1 // 11852
M=D // 11853
@63 // 11854
D=A // 11855
@SP // 11856
AM=M+1 // 11857
A=A-1 // 11858
M=D // 11859
@43 // 11860
D=A // 11861
@SP // 11862
AM=M+1 // 11863
A=A-1 // 11864
M=D // 11865
@43 // 11866
D=A // 11867
@SP // 11868
AM=M+1 // 11869
A=A-1 // 11870
M=D // 11871
@43 // 11872
D=A // 11873
@SP // 11874
AM=M+1 // 11875
A=A-1 // 11876
M=D // 11877
@43 // 11878
D=A // 11879
@SP // 11880
AM=M+1 // 11881
A=A-1 // 11882
M=D // 11883
@SP // 11884
AM=M+1 // 11885
A=A-1 // 11886
M=0 // 11887
@SP // 11888
AM=M+1 // 11889
A=A-1 // 11890
M=0 // 11891
// call Output.create
@17 // 11892
D=A // 11893
@14 // 11894
M=D // 11895
@Output.create // 11896
D=A // 11897
@13 // 11898
M=D // 11899
@Output.init.ret.79 // 11900
D=A // 11901
@CALL // 11902
0;JMP // 11903
(Output.init.ret.79)
@SP // 11904
M=M-1 // 11905

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 110"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11906
D=A // 11907
@SP // 11908
M=D+M // 11909
@110 // 11910
D=A // 11911
@SP // 11912
A=M-1 // 11913
M=0 // 11914
A=A-1 // 11915
M=0 // 11916
A=A-1 // 11917
M=0 // 11918
A=A-1 // 11919
M=D // 11920
A=A-1 // 11921
@29 // 11922
D=A // 11923
@SP // 11924
AM=M+1 // 11925
A=A-1 // 11926
M=D // 11927
@51 // 11928
D=A // 11929
@SP // 11930
AM=M+1 // 11931
A=A-1 // 11932
M=D // 11933
@51 // 11934
D=A // 11935
@SP // 11936
AM=M+1 // 11937
A=A-1 // 11938
M=D // 11939
@51 // 11940
D=A // 11941
@SP // 11942
AM=M+1 // 11943
A=A-1 // 11944
M=D // 11945
@51 // 11946
D=A // 11947
@SP // 11948
AM=M+1 // 11949
A=A-1 // 11950
M=D // 11951
@51 // 11952
D=A // 11953
@SP // 11954
AM=M+1 // 11955
A=A-1 // 11956
M=D // 11957
@SP // 11958
AM=M+1 // 11959
A=A-1 // 11960
M=0 // 11961
@SP // 11962
AM=M+1 // 11963
A=A-1 // 11964
M=0 // 11965
// call Output.create
@17 // 11966
D=A // 11967
@14 // 11968
M=D // 11969
@Output.create // 11970
D=A // 11971
@13 // 11972
M=D // 11973
@Output.init.ret.80 // 11974
D=A // 11975
@CALL // 11976
0;JMP // 11977
(Output.init.ret.80)
@SP // 11978
M=M-1 // 11979

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 111"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11980
D=A // 11981
@SP // 11982
M=D+M // 11983
@111 // 11984
D=A // 11985
@SP // 11986
A=M-1 // 11987
M=0 // 11988
A=A-1 // 11989
M=0 // 11990
A=A-1 // 11991
M=0 // 11992
A=A-1 // 11993
M=D // 11994
A=A-1 // 11995
@30 // 11996
D=A // 11997
@SP // 11998
AM=M+1 // 11999
A=A-1 // 12000
M=D // 12001
@51 // 12002
D=A // 12003
@SP // 12004
AM=M+1 // 12005
A=A-1 // 12006
M=D // 12007
@51 // 12008
D=A // 12009
@SP // 12010
AM=M+1 // 12011
A=A-1 // 12012
M=D // 12013
@51 // 12014
D=A // 12015
@SP // 12016
AM=M+1 // 12017
A=A-1 // 12018
M=D // 12019
@51 // 12020
D=A // 12021
@SP // 12022
AM=M+1 // 12023
A=A-1 // 12024
M=D // 12025
@30 // 12026
D=A // 12027
@SP // 12028
AM=M+1 // 12029
A=A-1 // 12030
M=D // 12031
@SP // 12032
AM=M+1 // 12033
A=A-1 // 12034
M=0 // 12035
@SP // 12036
AM=M+1 // 12037
A=A-1 // 12038
M=0 // 12039
// call Output.create
@17 // 12040
D=A // 12041
@14 // 12042
M=D // 12043
@Output.create // 12044
D=A // 12045
@13 // 12046
M=D // 12047
@Output.init.ret.81 // 12048
D=A // 12049
@CALL // 12050
0;JMP // 12051
(Output.init.ret.81)
@SP // 12052
M=M-1 // 12053

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 112"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12054
D=A // 12055
@SP // 12056
M=D+M // 12057
@112 // 12058
D=A // 12059
@SP // 12060
A=M-1 // 12061
M=0 // 12062
A=A-1 // 12063
M=0 // 12064
A=A-1 // 12065
M=0 // 12066
A=A-1 // 12067
M=D // 12068
A=A-1 // 12069
@30 // 12070
D=A // 12071
@SP // 12072
AM=M+1 // 12073
A=A-1 // 12074
M=D // 12075
@51 // 12076
D=A // 12077
@SP // 12078
AM=M+1 // 12079
A=A-1 // 12080
M=D // 12081
@51 // 12082
D=A // 12083
@SP // 12084
AM=M+1 // 12085
A=A-1 // 12086
M=D // 12087
@51 // 12088
D=A // 12089
@SP // 12090
AM=M+1 // 12091
A=A-1 // 12092
M=D // 12093
@31 // 12094
D=A // 12095
@SP // 12096
AM=M+1 // 12097
A=A-1 // 12098
M=D // 12099
@3 // 12100
D=A // 12101
@SP // 12102
AM=M+1 // 12103
A=A-1 // 12104
M=D // 12105
@3 // 12106
D=A // 12107
@SP // 12108
AM=M+1 // 12109
A=A-1 // 12110
M=D // 12111
@SP // 12112
AM=M+1 // 12113
A=A-1 // 12114
M=0 // 12115
// call Output.create
@17 // 12116
D=A // 12117
@14 // 12118
M=D // 12119
@Output.create // 12120
D=A // 12121
@13 // 12122
M=D // 12123
@Output.init.ret.82 // 12124
D=A // 12125
@CALL // 12126
0;JMP // 12127
(Output.init.ret.82)
@SP // 12128
M=M-1 // 12129

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 113"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12130
D=A // 12131
@SP // 12132
M=D+M // 12133
@113 // 12134
D=A // 12135
@SP // 12136
A=M-1 // 12137
M=0 // 12138
A=A-1 // 12139
M=0 // 12140
A=A-1 // 12141
M=0 // 12142
A=A-1 // 12143
M=D // 12144
A=A-1 // 12145
@30 // 12146
D=A // 12147
@SP // 12148
AM=M+1 // 12149
A=A-1 // 12150
M=D // 12151
@51 // 12152
D=A // 12153
@SP // 12154
AM=M+1 // 12155
A=A-1 // 12156
M=D // 12157
@51 // 12158
D=A // 12159
@SP // 12160
AM=M+1 // 12161
A=A-1 // 12162
M=D // 12163
@51 // 12164
D=A // 12165
@SP // 12166
AM=M+1 // 12167
A=A-1 // 12168
M=D // 12169
@62 // 12170
D=A // 12171
@SP // 12172
AM=M+1 // 12173
A=A-1 // 12174
M=D // 12175
@48 // 12176
D=A // 12177
@SP // 12178
AM=M+1 // 12179
A=A-1 // 12180
M=D // 12181
@48 // 12182
D=A // 12183
@SP // 12184
AM=M+1 // 12185
A=A-1 // 12186
M=D // 12187
@SP // 12188
AM=M+1 // 12189
A=A-1 // 12190
M=0 // 12191
// call Output.create
@17 // 12192
D=A // 12193
@14 // 12194
M=D // 12195
@Output.create // 12196
D=A // 12197
@13 // 12198
M=D // 12199
@Output.init.ret.83 // 12200
D=A // 12201
@CALL // 12202
0;JMP // 12203
(Output.init.ret.83)
@SP // 12204
M=M-1 // 12205

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 114"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 55"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 7"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12206
D=A // 12207
@SP // 12208
M=D+M // 12209
@114 // 12210
D=A // 12211
@SP // 12212
A=M-1 // 12213
M=0 // 12214
A=A-1 // 12215
M=0 // 12216
A=A-1 // 12217
M=0 // 12218
A=A-1 // 12219
M=D // 12220
A=A-1 // 12221
@29 // 12222
D=A // 12223
@SP // 12224
AM=M+1 // 12225
A=A-1 // 12226
M=D // 12227
@55 // 12228
D=A // 12229
@SP // 12230
AM=M+1 // 12231
A=A-1 // 12232
M=D // 12233
@51 // 12234
D=A // 12235
@SP // 12236
AM=M+1 // 12237
A=A-1 // 12238
M=D // 12239
@3 // 12240
D=A // 12241
@SP // 12242
AM=M+1 // 12243
A=A-1 // 12244
M=D // 12245
@3 // 12246
D=A // 12247
@SP // 12248
AM=M+1 // 12249
A=A-1 // 12250
M=D // 12251
@7 // 12252
D=A // 12253
@SP // 12254
AM=M+1 // 12255
A=A-1 // 12256
M=D // 12257
@SP // 12258
AM=M+1 // 12259
A=A-1 // 12260
M=0 // 12261
@SP // 12262
AM=M+1 // 12263
A=A-1 // 12264
M=0 // 12265
// call Output.create
@17 // 12266
D=A // 12267
@14 // 12268
M=D // 12269
@Output.create // 12270
D=A // 12271
@13 // 12272
M=D // 12273
@Output.init.ret.84 // 12274
D=A // 12275
@CALL // 12276
0;JMP // 12277
(Output.init.ret.84)
@SP // 12278
M=M-1 // 12279

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 115"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 6"), PushInstruction("constant 24"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12280
D=A // 12281
@SP // 12282
M=D+M // 12283
@115 // 12284
D=A // 12285
@SP // 12286
A=M-1 // 12287
M=0 // 12288
A=A-1 // 12289
M=0 // 12290
A=A-1 // 12291
M=0 // 12292
A=A-1 // 12293
M=D // 12294
A=A-1 // 12295
@30 // 12296
D=A // 12297
@SP // 12298
AM=M+1 // 12299
A=A-1 // 12300
M=D // 12301
@51 // 12302
D=A // 12303
@SP // 12304
AM=M+1 // 12305
A=A-1 // 12306
M=D // 12307
@6 // 12308
D=A // 12309
@SP // 12310
AM=M+1 // 12311
A=A-1 // 12312
M=D // 12313
@24 // 12314
D=A // 12315
@SP // 12316
AM=M+1 // 12317
A=A-1 // 12318
M=D // 12319
@51 // 12320
D=A // 12321
@SP // 12322
AM=M+1 // 12323
A=A-1 // 12324
M=D // 12325
@30 // 12326
D=A // 12327
@SP // 12328
AM=M+1 // 12329
A=A-1 // 12330
M=D // 12331
@SP // 12332
AM=M+1 // 12333
A=A-1 // 12334
M=0 // 12335
@SP // 12336
AM=M+1 // 12337
A=A-1 // 12338
M=0 // 12339
// call Output.create
@17 // 12340
D=A // 12341
@14 // 12342
M=D // 12343
@Output.create // 12344
D=A // 12345
@13 // 12346
M=D // 12347
@Output.init.ret.85 // 12348
D=A // 12349
@CALL // 12350
0;JMP // 12351
(Output.init.ret.85)
@SP // 12352
M=M-1 // 12353

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 116"), PushInstruction("constant 4"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@116 // 12354
D=A // 12355
@SP // 12356
AM=M+1 // 12357
A=A-1 // 12358
M=D // 12359
@4 // 12360
D=A // 12361
@SP // 12362
AM=M+1 // 12363
A=A-1 // 12364
M=D // 12365
@6 // 12366
D=A // 12367
@SP // 12368
AM=M+1 // 12369
A=A-1 // 12370
M=D // 12371
@6 // 12372
D=A // 12373
@SP // 12374
AM=M+1 // 12375
A=A-1 // 12376
M=D // 12377
@15 // 12378
D=A // 12379
@SP // 12380
AM=M+1 // 12381
A=A-1 // 12382
M=D // 12383
@6 // 12384
D=A // 12385
@SP // 12386
AM=M+1 // 12387
A=A-1 // 12388
M=D // 12389
@6 // 12390
D=A // 12391
@SP // 12392
AM=M+1 // 12393
A=A-1 // 12394
M=D // 12395
@6 // 12396
D=A // 12397
@SP // 12398
AM=M+1 // 12399
A=A-1 // 12400
M=D // 12401
@54 // 12402
D=A // 12403
@SP // 12404
AM=M+1 // 12405
A=A-1 // 12406
M=D // 12407
@28 // 12408
D=A // 12409
@SP // 12410
AM=M+1 // 12411
A=A-1 // 12412
M=D // 12413
@SP // 12414
AM=M+1 // 12415
A=A-1 // 12416
M=0 // 12417
@SP // 12418
AM=M+1 // 12419
A=A-1 // 12420
M=0 // 12421
// call Output.create
@17 // 12422
D=A // 12423
@14 // 12424
M=D // 12425
@Output.create // 12426
D=A // 12427
@13 // 12428
M=D // 12429
@Output.init.ret.86 // 12430
D=A // 12431
@CALL // 12432
0;JMP // 12433
(Output.init.ret.86)
@SP // 12434
M=M-1 // 12435

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 117"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12436
D=A // 12437
@SP // 12438
M=D+M // 12439
@117 // 12440
D=A // 12441
@SP // 12442
A=M-1 // 12443
M=0 // 12444
A=A-1 // 12445
M=0 // 12446
A=A-1 // 12447
M=0 // 12448
A=A-1 // 12449
M=D // 12450
A=A-1 // 12451
@27 // 12452
D=A // 12453
@SP // 12454
AM=M+1 // 12455
A=A-1 // 12456
M=D // 12457
@27 // 12458
D=A // 12459
@SP // 12460
AM=M+1 // 12461
A=A-1 // 12462
M=D // 12463
@27 // 12464
D=A // 12465
@SP // 12466
AM=M+1 // 12467
A=A-1 // 12468
M=D // 12469
@27 // 12470
D=A // 12471
@SP // 12472
AM=M+1 // 12473
A=A-1 // 12474
M=D // 12475
@27 // 12476
D=A // 12477
@SP // 12478
AM=M+1 // 12479
A=A-1 // 12480
M=D // 12481
@54 // 12482
D=A // 12483
@SP // 12484
AM=M+1 // 12485
A=A-1 // 12486
M=D // 12487
@SP // 12488
AM=M+1 // 12489
A=A-1 // 12490
M=0 // 12491
@SP // 12492
AM=M+1 // 12493
A=A-1 // 12494
M=0 // 12495
// call Output.create
@17 // 12496
D=A // 12497
@14 // 12498
M=D // 12499
@Output.create // 12500
D=A // 12501
@13 // 12502
M=D // 12503
@Output.init.ret.87 // 12504
D=A // 12505
@CALL // 12506
0;JMP // 12507
(Output.init.ret.87)
@SP // 12508
M=M-1 // 12509

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 118"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12510
D=A // 12511
@SP // 12512
M=D+M // 12513
@118 // 12514
D=A // 12515
@SP // 12516
A=M-1 // 12517
M=0 // 12518
A=A-1 // 12519
M=0 // 12520
A=A-1 // 12521
M=0 // 12522
A=A-1 // 12523
M=D // 12524
A=A-1 // 12525
@51 // 12526
D=A // 12527
@SP // 12528
AM=M+1 // 12529
A=A-1 // 12530
M=D // 12531
@51 // 12532
D=A // 12533
@SP // 12534
AM=M+1 // 12535
A=A-1 // 12536
M=D // 12537
@51 // 12538
D=A // 12539
@SP // 12540
AM=M+1 // 12541
A=A-1 // 12542
M=D // 12543
@51 // 12544
D=A // 12545
@SP // 12546
AM=M+1 // 12547
A=A-1 // 12548
M=D // 12549
@30 // 12550
D=A // 12551
@SP // 12552
AM=M+1 // 12553
A=A-1 // 12554
M=D // 12555
@12 // 12556
D=A // 12557
@SP // 12558
AM=M+1 // 12559
A=A-1 // 12560
M=D // 12561
@SP // 12562
AM=M+1 // 12563
A=A-1 // 12564
M=0 // 12565
@SP // 12566
AM=M+1 // 12567
A=A-1 // 12568
M=0 // 12569
// call Output.create
@17 // 12570
D=A // 12571
@14 // 12572
M=D // 12573
@Output.create // 12574
D=A // 12575
@13 // 12576
M=D // 12577
@Output.init.ret.88 // 12578
D=A // 12579
@CALL // 12580
0;JMP // 12581
(Output.init.ret.88)
@SP // 12582
M=M-1 // 12583

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 119"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12584
D=A // 12585
@SP // 12586
M=D+M // 12587
@119 // 12588
D=A // 12589
@SP // 12590
A=M-1 // 12591
M=0 // 12592
A=A-1 // 12593
M=0 // 12594
A=A-1 // 12595
M=0 // 12596
A=A-1 // 12597
M=D // 12598
A=A-1 // 12599
@51 // 12600
D=A // 12601
@SP // 12602
AM=M+1 // 12603
A=A-1 // 12604
M=D // 12605
@51 // 12606
D=A // 12607
@SP // 12608
AM=M+1 // 12609
A=A-1 // 12610
M=D // 12611
@51 // 12612
D=A // 12613
@SP // 12614
AM=M+1 // 12615
A=A-1 // 12616
M=D // 12617
@63 // 12618
D=A // 12619
@SP // 12620
AM=M+1 // 12621
A=A-1 // 12622
M=D // 12623
@63 // 12624
D=A // 12625
@SP // 12626
AM=M+1 // 12627
A=A-1 // 12628
M=D // 12629
@18 // 12630
D=A // 12631
@SP // 12632
AM=M+1 // 12633
A=A-1 // 12634
M=D // 12635
@SP // 12636
AM=M+1 // 12637
A=A-1 // 12638
M=0 // 12639
@SP // 12640
AM=M+1 // 12641
A=A-1 // 12642
M=0 // 12643
// call Output.create
@17 // 12644
D=A // 12645
@14 // 12646
M=D // 12647
@Output.create // 12648
D=A // 12649
@13 // 12650
M=D // 12651
@Output.init.ret.89 // 12652
D=A // 12653
@CALL // 12654
0;JMP // 12655
(Output.init.ret.89)
@SP // 12656
M=M-1 // 12657

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 120"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12658
D=A // 12659
@SP // 12660
M=D+M // 12661
@120 // 12662
D=A // 12663
@SP // 12664
A=M-1 // 12665
M=0 // 12666
A=A-1 // 12667
M=0 // 12668
A=A-1 // 12669
M=0 // 12670
A=A-1 // 12671
M=D // 12672
A=A-1 // 12673
@51 // 12674
D=A // 12675
@SP // 12676
AM=M+1 // 12677
A=A-1 // 12678
M=D // 12679
@30 // 12680
D=A // 12681
@SP // 12682
AM=M+1 // 12683
A=A-1 // 12684
M=D // 12685
@12 // 12686
D=A // 12687
@SP // 12688
AM=M+1 // 12689
A=A-1 // 12690
M=D // 12691
@12 // 12692
D=A // 12693
@SP // 12694
AM=M+1 // 12695
A=A-1 // 12696
M=D // 12697
@30 // 12698
D=A // 12699
@SP // 12700
AM=M+1 // 12701
A=A-1 // 12702
M=D // 12703
@51 // 12704
D=A // 12705
@SP // 12706
AM=M+1 // 12707
A=A-1 // 12708
M=D // 12709
@SP // 12710
AM=M+1 // 12711
A=A-1 // 12712
M=0 // 12713
@SP // 12714
AM=M+1 // 12715
A=A-1 // 12716
M=0 // 12717
// call Output.create
@17 // 12718
D=A // 12719
@14 // 12720
M=D // 12721
@Output.create // 12722
D=A // 12723
@13 // 12724
M=D // 12725
@Output.init.ret.90 // 12726
D=A // 12727
@CALL // 12728
0;JMP // 12729
(Output.init.ret.90)
@SP // 12730
M=M-1 // 12731

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 121"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 15"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12732
D=A // 12733
@SP // 12734
M=D+M // 12735
@121 // 12736
D=A // 12737
@SP // 12738
A=M-1 // 12739
M=0 // 12740
A=A-1 // 12741
M=0 // 12742
A=A-1 // 12743
M=0 // 12744
A=A-1 // 12745
M=D // 12746
A=A-1 // 12747
@51 // 12748
D=A // 12749
@SP // 12750
AM=M+1 // 12751
A=A-1 // 12752
M=D // 12753
@51 // 12754
D=A // 12755
@SP // 12756
AM=M+1 // 12757
A=A-1 // 12758
M=D // 12759
@51 // 12760
D=A // 12761
@SP // 12762
AM=M+1 // 12763
A=A-1 // 12764
M=D // 12765
@62 // 12766
D=A // 12767
@SP // 12768
AM=M+1 // 12769
A=A-1 // 12770
M=D // 12771
@48 // 12772
D=A // 12773
@SP // 12774
AM=M+1 // 12775
A=A-1 // 12776
M=D // 12777
@24 // 12778
D=A // 12779
@SP // 12780
AM=M+1 // 12781
A=A-1 // 12782
M=D // 12783
@15 // 12784
D=A // 12785
@SP // 12786
AM=M+1 // 12787
A=A-1 // 12788
M=D // 12789
@SP // 12790
AM=M+1 // 12791
A=A-1 // 12792
M=0 // 12793
// call Output.create
@17 // 12794
D=A // 12795
@14 // 12796
M=D // 12797
@Output.create // 12798
D=A // 12799
@13 // 12800
M=D // 12801
@Output.init.ret.91 // 12802
D=A // 12803
@CALL // 12804
0;JMP // 12805
(Output.init.ret.91)
@SP // 12806
M=M-1 // 12807

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 122"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 27"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12808
D=A // 12809
@SP // 12810
M=D+M // 12811
@122 // 12812
D=A // 12813
@SP // 12814
A=M-1 // 12815
M=0 // 12816
A=A-1 // 12817
M=0 // 12818
A=A-1 // 12819
M=0 // 12820
A=A-1 // 12821
M=D // 12822
A=A-1 // 12823
@63 // 12824
D=A // 12825
@SP // 12826
AM=M+1 // 12827
A=A-1 // 12828
M=D // 12829
@27 // 12830
D=A // 12831
@SP // 12832
AM=M+1 // 12833
A=A-1 // 12834
M=D // 12835
@12 // 12836
D=A // 12837
@SP // 12838
AM=M+1 // 12839
A=A-1 // 12840
M=D // 12841
@6 // 12842
D=A // 12843
@SP // 12844
AM=M+1 // 12845
A=A-1 // 12846
M=D // 12847
@51 // 12848
D=A // 12849
@SP // 12850
AM=M+1 // 12851
A=A-1 // 12852
M=D // 12853
@63 // 12854
D=A // 12855
@SP // 12856
AM=M+1 // 12857
A=A-1 // 12858
M=D // 12859
@SP // 12860
AM=M+1 // 12861
A=A-1 // 12862
M=0 // 12863
@SP // 12864
AM=M+1 // 12865
A=A-1 // 12866
M=0 // 12867
// call Output.create
@17 // 12868
D=A // 12869
@14 // 12870
M=D // 12871
@Output.create // 12872
D=A // 12873
@13 // 12874
M=D // 12875
@Output.init.ret.92 // 12876
D=A // 12877
@CALL // 12878
0;JMP // 12879
(Output.init.ret.92)
@SP // 12880
M=M-1 // 12881

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 123"), PushInstruction("constant 56"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 7"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 56"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@123 // 12882
D=A // 12883
@SP // 12884
AM=M+1 // 12885
A=A-1 // 12886
M=D // 12887
@56 // 12888
D=A // 12889
@SP // 12890
AM=M+1 // 12891
A=A-1 // 12892
M=D // 12893
@12 // 12894
D=A // 12895
@SP // 12896
AM=M+1 // 12897
A=A-1 // 12898
M=D // 12899
@12 // 12900
D=A // 12901
@SP // 12902
AM=M+1 // 12903
A=A-1 // 12904
M=D // 12905
@12 // 12906
D=A // 12907
@SP // 12908
AM=M+1 // 12909
A=A-1 // 12910
M=D // 12911
@7 // 12912
D=A // 12913
@SP // 12914
AM=M+1 // 12915
A=A-1 // 12916
M=D // 12917
@12 // 12918
D=A // 12919
@SP // 12920
AM=M+1 // 12921
A=A-1 // 12922
M=D // 12923
@12 // 12924
D=A // 12925
@SP // 12926
AM=M+1 // 12927
A=A-1 // 12928
M=D // 12929
@12 // 12930
D=A // 12931
@SP // 12932
AM=M+1 // 12933
A=A-1 // 12934
M=D // 12935
@56 // 12936
D=A // 12937
@SP // 12938
AM=M+1 // 12939
A=A-1 // 12940
M=D // 12941
@SP // 12942
AM=M+1 // 12943
A=A-1 // 12944
M=0 // 12945
@SP // 12946
AM=M+1 // 12947
A=A-1 // 12948
M=0 // 12949
// call Output.create
@17 // 12950
D=A // 12951
@14 // 12952
M=D // 12953
@Output.create // 12954
D=A // 12955
@13 // 12956
M=D // 12957
@Output.init.ret.93 // 12958
D=A // 12959
@CALL // 12960
0;JMP // 12961
(Output.init.ret.93)
@SP // 12962
M=M-1 // 12963

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 124"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@124 // 12964
D=A // 12965
@SP // 12966
AM=M+1 // 12967
A=A-1 // 12968
M=D // 12969
@12 // 12970
D=A // 12971
@SP // 12972
AM=M+1 // 12973
A=A-1 // 12974
M=D // 12975
@12 // 12976
D=A // 12977
@SP // 12978
AM=M+1 // 12979
A=A-1 // 12980
M=D // 12981
@12 // 12982
D=A // 12983
@SP // 12984
AM=M+1 // 12985
A=A-1 // 12986
M=D // 12987
@12 // 12988
D=A // 12989
@SP // 12990
AM=M+1 // 12991
A=A-1 // 12992
M=D // 12993
@12 // 12994
D=A // 12995
@SP // 12996
AM=M+1 // 12997
A=A-1 // 12998
M=D // 12999
@12 // 13000
D=A // 13001
@SP // 13002
AM=M+1 // 13003
A=A-1 // 13004
M=D // 13005
@12 // 13006
D=A // 13007
@SP // 13008
AM=M+1 // 13009
A=A-1 // 13010
M=D // 13011
@12 // 13012
D=A // 13013
@SP // 13014
AM=M+1 // 13015
A=A-1 // 13016
M=D // 13017
@12 // 13018
D=A // 13019
@SP // 13020
AM=M+1 // 13021
A=A-1 // 13022
M=D // 13023
@SP // 13024
AM=M+1 // 13025
A=A-1 // 13026
M=0 // 13027
@SP // 13028
AM=M+1 // 13029
A=A-1 // 13030
M=0 // 13031
// call Output.create
@17 // 13032
D=A // 13033
@14 // 13034
M=D // 13035
@Output.create // 13036
D=A // 13037
@13 // 13038
M=D // 13039
@Output.init.ret.94 // 13040
D=A // 13041
@CALL // 13042
0;JMP // 13043
(Output.init.ret.94)
@SP // 13044
M=M-1 // 13045

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 125"), PushInstruction("constant 7"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 56"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 7"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@125 // 13046
D=A // 13047
@SP // 13048
AM=M+1 // 13049
A=A-1 // 13050
M=D // 13051
@7 // 13052
D=A // 13053
@SP // 13054
AM=M+1 // 13055
A=A-1 // 13056
M=D // 13057
@12 // 13058
D=A // 13059
@SP // 13060
AM=M+1 // 13061
A=A-1 // 13062
M=D // 13063
@12 // 13064
D=A // 13065
@SP // 13066
AM=M+1 // 13067
A=A-1 // 13068
M=D // 13069
@12 // 13070
D=A // 13071
@SP // 13072
AM=M+1 // 13073
A=A-1 // 13074
M=D // 13075
@56 // 13076
D=A // 13077
@SP // 13078
AM=M+1 // 13079
A=A-1 // 13080
M=D // 13081
@12 // 13082
D=A // 13083
@SP // 13084
AM=M+1 // 13085
A=A-1 // 13086
M=D // 13087
@12 // 13088
D=A // 13089
@SP // 13090
AM=M+1 // 13091
A=A-1 // 13092
M=D // 13093
@12 // 13094
D=A // 13095
@SP // 13096
AM=M+1 // 13097
A=A-1 // 13098
M=D // 13099
@7 // 13100
D=A // 13101
@SP // 13102
AM=M+1 // 13103
A=A-1 // 13104
M=D // 13105
@SP // 13106
AM=M+1 // 13107
A=A-1 // 13108
M=0 // 13109
@SP // 13110
AM=M+1 // 13111
A=A-1 // 13112
M=0 // 13113
// call Output.create
@17 // 13114
D=A // 13115
@14 // 13116
M=D // 13117
@Output.create // 13118
D=A // 13119
@13 // 13120
M=D // 13121
@Output.init.ret.95 // 13122
D=A // 13123
@CALL // 13124
0;JMP // 13125
(Output.init.ret.95)
@SP // 13126
M=M-1 // 13127

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 126"), PushInstruction("constant 38"), PushInstruction("constant 45"), PushInstruction("constant 25"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@126 // 13128
D=A // 13129
@SP // 13130
AM=M+1 // 13131
A=A-1 // 13132
M=D // 13133
@38 // 13134
D=A // 13135
@SP // 13136
AM=M+1 // 13137
A=A-1 // 13138
M=D // 13139
@45 // 13140
D=A // 13141
@SP // 13142
AM=M+1 // 13143
A=A-1 // 13144
M=D // 13145
@25 // 13146
D=A // 13147
@SP // 13148
AM=M+1 // 13149
A=A-1 // 13150
M=D // 13151
@SP // 13152
AM=M+1 // 13153
A=A-1 // 13154
M=0 // 13155
@SP // 13156
AM=M+1 // 13157
A=A-1 // 13158
M=0 // 13159
@SP // 13160
AM=M+1 // 13161
A=A-1 // 13162
M=0 // 13163
@SP // 13164
AM=M+1 // 13165
A=A-1 // 13166
M=0 // 13167
@SP // 13168
AM=M+1 // 13169
A=A-1 // 13170
M=0 // 13171
@SP // 13172
AM=M+1 // 13173
A=A-1 // 13174
M=0 // 13175
@SP // 13176
AM=M+1 // 13177
A=A-1 // 13178
M=0 // 13179
@SP // 13180
AM=M+1 // 13181
A=A-1 // 13182
M=0 // 13183
// call Output.create
@17 // 13184
D=A // 13185
@14 // 13186
M=D // 13187
@Output.create // 13188
D=A // 13189
@13 // 13190
M=D // 13191
@Output.init.ret.96 // 13192
D=A // 13193
@CALL // 13194
0;JMP // 13195
(Output.init.ret.96)
@SP // 13196
M=M-1 // 13197

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 13198
M=0 // 13199

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 13200
M=0 // 13201

////PushInstruction("constant 0")
@SP // 13202
AM=M+1 // 13203
A=A-1 // 13204
M=0 // 13205
@RETURN // 13206
0;JMP // 13207

////FunctionInstruction{functionName='Number.do_add', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_neg=1}}
// function Number.do_add with 0
(Number.do_add)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 13208
A=M // 13209
D=M // 13210
@3 // 13211
M=D // 13212

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 13213
A=M // 13214
D=M // 13215
@SP // 13216
AM=M+1 // 13217
A=A-1 // 13218
M=D // 13219
@ARG // 13220
A=M+1 // 13221
D=M // 13222
@SP // 13223
AM=M+1 // 13224
A=A-1 // 13225
M=D // 13226
// call Number.getV
@6 // 13227
D=A // 13228
@14 // 13229
M=D // 13230
@Number.getV // 13231
D=A // 13232
@13 // 13233
M=D // 13234
@Number.do_add.ret.0 // 13235
D=A // 13236
@CALL // 13237
0;JMP // 13238
(Number.do_add.ret.0)
// call Int32.do_add
@7 // 13239
D=A // 13240
@14 // 13241
M=D // 13242
@Int32.do_add // 13243
D=A // 13244
@13 // 13245
M=D // 13246
@Number.do_add.ret.1 // 13247
D=A // 13248
@CALL // 13249
0;JMP // 13250
(Number.do_add.ret.1)
@SP // 13251
M=M-1 // 13252

////PushInstruction("constant 0")
@SP // 13253
AM=M+1 // 13254
A=A-1 // 13255
M=0 // 13256
@RETURN // 13257
0;JMP // 13258

////FunctionInstruction{functionName='Main.getFourFifths', numLocals=2, funcMapping={Main.getThreeTenths=4, Main.getOneTwentieth=4}}
// function Main.getFourFifths with 2
(Main.getFourFifths)
@SP // 13259
M=M+1 // 13260
AM=M+1 // 13261
A=A-1 // 13262
M=0 // 13263
A=A-1 // 13264
M=0 // 13265

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@4 // 13266
D=A // 13267
@SP // 13268
AM=M+1 // 13269
A=A-1 // 13270
M=D // 13271
// call Number.new
@6 // 13272
D=A // 13273
@14 // 13274
M=D // 13275
@Number.new // 13276
D=A // 13277
@13 // 13278
M=D // 13279
@Main.getFourFifths.ret.0 // 13280
D=A // 13281
@CALL // 13282
0;JMP // 13283
(Main.getFourFifths.ret.0)
@SP // 13284
AM=M-1 // 13285
D=M // 13286
@LCL // 13287
A=M // 13288
M=D // 13289

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@5 // 13290
D=A // 13291
@SP // 13292
AM=M+1 // 13293
A=A-1 // 13294
M=D // 13295
// call Number.new
@6 // 13296
D=A // 13297
@14 // 13298
M=D // 13299
@Number.new // 13300
D=A // 13301
@13 // 13302
M=D // 13303
@Main.getFourFifths.ret.1 // 13304
D=A // 13305
@CALL // 13306
0;JMP // 13307
(Main.getFourFifths.ret.1)
@SP // 13308
AM=M-1 // 13309
D=M // 13310
@LCL // 13311
A=M+1 // 13312
M=D // 13313

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13314
A=M // 13315
D=M // 13316
@SP // 13317
AM=M+1 // 13318
A=A-1 // 13319
M=D // 13320
@LCL // 13321
A=M+1 // 13322
D=M // 13323
@SP // 13324
AM=M+1 // 13325
A=A-1 // 13326
M=D // 13327
// call Number.do_div
@7 // 13328
D=A // 13329
@14 // 13330
M=D // 13331
@Number.do_div // 13332
D=A // 13333
@13 // 13334
M=D // 13335
@Main.getFourFifths.ret.2 // 13336
D=A // 13337
@CALL // 13338
0;JMP // 13339
(Main.getFourFifths.ret.2)
@SP // 13340
M=M-1 // 13341

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13342
A=M+1 // 13343
D=M // 13344
@SP // 13345
AM=M+1 // 13346
A=A-1 // 13347
M=D // 13348
// call Number.dispose
@6 // 13349
D=A // 13350
@14 // 13351
M=D // 13352
@Number.dispose // 13353
D=A // 13354
@13 // 13355
M=D // 13356
@Main.getFourFifths.ret.3 // 13357
D=A // 13358
@CALL // 13359
0;JMP // 13360
(Main.getFourFifths.ret.3)
@SP // 13361
M=M-1 // 13362

////PushInstruction("local 0")
@LCL // 13363
A=M // 13364
D=M // 13365
@SP // 13366
AM=M+1 // 13367
A=A-1 // 13368
M=D // 13369
@RETURN // 13370
0;JMP // 13371

////FunctionInstruction{functionName='Int32.leftshift', numLocals=2, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.clone=2}}
// function Int32.leftshift with 2
(Int32.leftshift)
@SP // 13372
M=M+1 // 13373
AM=M+1 // 13374
A=A-1 // 13375
M=0 // 13376
A=A-1 // 13377
M=0 // 13378

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 13379
A=M // 13380
D=M // 13381
@LCL // 13382
A=M // 13383
M=D // 13384

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 13385
A=M+1 // 13386
M=0 // 13387

////LabelInstruction{label='Int32.leftshift_WHILE_EXP1}
// label Int32.leftshift_WHILE_EXP1
(Int32.leftshift_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.leftshift_WHILE_END1}}
@Int32.leftshift.LT.23 // 13388
D=A // 13389
@SP // 13390
AM=M+1 // 13391
A=A-1 // 13392
M=D // 13393
@LCL // 13394
A=M+1 // 13395
D=M // 13396
@SP // 13397
AM=M+1 // 13398
A=A-1 // 13399
M=D // 13400
@ARG // 13401
A=M+1 // 13402
D=M // 13403
@SP // 13404
AM=M-1 // 13405
D=M-D // 13406
@DO_LT // 13407
0;JMP // 13408
(Int32.leftshift.LT.23)
D=!D // 13409
@Int32.leftshift_WHILE_END1 // 13410
D;JNE // 13411

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("constant 2")], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 13412
A=M // 13413
D=M // 13414
@SP // 13415
AM=M+1 // 13416
A=A-1 // 13417
M=D // 13418
@2 // 13419
D=A // 13420
@SP // 13421
AM=M+1 // 13422
A=A-1 // 13423
M=D // 13424
// call Math.multiply
@7 // 13425
D=A // 13426
@14 // 13427
M=D // 13428
@Math.multiply // 13429
D=A // 13430
@13 // 13431
M=D // 13432
@Int32.leftshift.ret.0 // 13433
D=A // 13434
@CALL // 13435
0;JMP // 13436
(Int32.leftshift.ret.0)
@SP // 13437
AM=M-1 // 13438
D=M // 13439
@LCL // 13440
A=M // 13441
M=D // 13442

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 13443
A=M+1 // 13444
M=M+1 // 13445

////GotoInstruction{label='Int32.leftshift_WHILE_EXP1}
// goto Int32.leftshift_WHILE_EXP1
@Int32.leftshift_WHILE_EXP1 // 13446
0;JMP // 13447

////LabelInstruction{label='Int32.leftshift_WHILE_END1}
// label Int32.leftshift_WHILE_END1
(Int32.leftshift_WHILE_END1)

////PushInstruction("local 0")
@LCL // 13448
A=M // 13449
D=M // 13450
@SP // 13451
AM=M+1 // 13452
A=A-1 // 13453
M=D // 13454
@RETURN // 13455
0;JMP // 13456

////FunctionInstruction{functionName='Vec3.new', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.clone=4}}
// function Vec3.new with 0
(Vec3.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 13457
D=A // 13458
@SP // 13459
AM=M+1 // 13460
A=A-1 // 13461
M=D // 13462
// call Memory.alloc
@6 // 13463
D=A // 13464
@14 // 13465
M=D // 13466
@Memory.alloc // 13467
D=A // 13468
@13 // 13469
M=D // 13470
@Vec3.new.ret.0 // 13471
D=A // 13472
@CALL // 13473
0;JMP // 13474
(Vec3.new.ret.0)
@SP // 13475
AM=M-1 // 13476
D=M // 13477
@3 // 13478
M=D // 13479

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Vec3.0 // 13480
M=M+1 // 13481

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 13482
A=M // 13483
D=M // 13484
@THIS // 13485
A=M // 13486
M=D // 13487

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 13488
A=M+1 // 13489
D=M // 13490
@THIS // 13491
A=M+1 // 13492
M=D // 13493

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 13494
A=M+1 // 13495
A=A+1 // 13496
D=M // 13497
@THIS // 13498
A=M+1 // 13499
A=A+1 // 13500
M=D // 13501

////PushInstruction("pointer 0")
@3 // 13502
D=M // 13503
@SP // 13504
AM=M+1 // 13505
A=A-1 // 13506
M=D // 13507
@RETURN // 13508
0;JMP // 13509

////FunctionInstruction{functionName='Int32.initialize', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.clone=2, Int32.leftshift=1}}
// function Int32.initialize with 0
(Int32.initialize)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 15")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=static 1}
//}

@15 // 13510
D=A // 13511
@SP // 13512
AM=M+1 // 13513
A=A-1 // 13514
M=D // 13515
// call Array.new
@6 // 13516
D=A // 13517
@14 // 13518
M=D // 13519
@Array.new // 13520
D=A // 13521
@13 // 13522
M=D // 13523
@Int32.initialize.ret.0 // 13524
D=A // 13525
@CALL // 13526
0;JMP // 13527
(Int32.initialize.ret.0)
@SP // 13528
AM=M-1 // 13529
D=M // 13530
@Int32.1 // 13531
M=D // 13532

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13533
D=M // 13534
@SP // 13535
AM=M+1 // 13536
A=A-1 // 13537
M=D // 13538
D=1 // 13539
@SP // 13540
AM=M-1 // 13541
A=M // 13542
M=D // 13543

////PushWriter{source=PushInstruction("constant 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13544
D=M // 13545
@SP // 13546
AM=M+1 // 13547
A=A-1 // 13548
M=D+1 // 13549
@2 // 13550
D=A // 13551
@SP // 13552
AM=M-1 // 13553
A=M // 13554
M=D // 13555

////PushWriter{source=PushInstruction("constant 4"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13556
D=M // 13557
@2 // 13558
D=D+A // 13559
@SP // 13560
AM=M+1 // 13561
A=A-1 // 13562
M=D // 13563
@4 // 13564
D=A // 13565
@SP // 13566
AM=M-1 // 13567
A=M // 13568
M=D // 13569

////PushWriter{source=PushInstruction("constant 8"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13570
D=M // 13571
@3 // 13572
D=D+A // 13573
@SP // 13574
AM=M+1 // 13575
A=A-1 // 13576
M=D // 13577
@8 // 13578
D=A // 13579
@SP // 13580
AM=M-1 // 13581
A=M // 13582
M=D // 13583

////PushWriter{source=PushInstruction("constant 16"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13584
D=M // 13585
@4 // 13586
D=D+A // 13587
@SP // 13588
AM=M+1 // 13589
A=A-1 // 13590
M=D // 13591
@16 // 13592
D=A // 13593
@SP // 13594
AM=M-1 // 13595
A=M // 13596
M=D // 13597

////PushWriter{source=PushInstruction("constant 32"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13598
D=M // 13599
@5 // 13600
D=D+A // 13601
@SP // 13602
AM=M+1 // 13603
A=A-1 // 13604
M=D // 13605
@32 // 13606
D=A // 13607
@SP // 13608
AM=M-1 // 13609
A=M // 13610
M=D // 13611

////PushWriter{source=PushInstruction("constant 64"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13612
D=M // 13613
@6 // 13614
D=D+A // 13615
@SP // 13616
AM=M+1 // 13617
A=A-1 // 13618
M=D // 13619
@64 // 13620
D=A // 13621
@SP // 13622
AM=M-1 // 13623
A=M // 13624
M=D // 13625

////PushWriter{source=PushInstruction("constant 128"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13626
D=M // 13627
@7 // 13628
D=D+A // 13629
@SP // 13630
AM=M+1 // 13631
A=A-1 // 13632
M=D // 13633
@128 // 13634
D=A // 13635
@SP // 13636
AM=M-1 // 13637
A=M // 13638
M=D // 13639

////PushWriter{source=PushInstruction("constant 256"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 8"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13640
D=M // 13641
@8 // 13642
D=D+A // 13643
@SP // 13644
AM=M+1 // 13645
A=A-1 // 13646
M=D // 13647
@256 // 13648
D=A // 13649
@SP // 13650
AM=M-1 // 13651
A=M // 13652
M=D // 13653

////PushWriter{source=PushInstruction("constant 512"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 9"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13654
D=M // 13655
@9 // 13656
D=D+A // 13657
@SP // 13658
AM=M+1 // 13659
A=A-1 // 13660
M=D // 13661
@512 // 13662
D=A // 13663
@SP // 13664
AM=M-1 // 13665
A=M // 13666
M=D // 13667

////PushWriter{source=PushInstruction("constant 1024"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 10"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13668
D=M // 13669
@10 // 13670
D=D+A // 13671
@SP // 13672
AM=M+1 // 13673
A=A-1 // 13674
M=D // 13675
@1024 // 13676
D=A // 13677
@SP // 13678
AM=M-1 // 13679
A=M // 13680
M=D // 13681

////PushWriter{source=PushInstruction("constant 2048"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 11"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13682
D=M // 13683
@11 // 13684
D=D+A // 13685
@SP // 13686
AM=M+1 // 13687
A=A-1 // 13688
M=D // 13689
@2048 // 13690
D=A // 13691
@SP // 13692
AM=M-1 // 13693
A=M // 13694
M=D // 13695

////PushWriter{source=PushInstruction("constant 4096"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 12"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13696
D=M // 13697
@12 // 13698
D=D+A // 13699
@SP // 13700
AM=M+1 // 13701
A=A-1 // 13702
M=D // 13703
@4096 // 13704
D=A // 13705
@SP // 13706
AM=M-1 // 13707
A=M // 13708
M=D // 13709

////PushWriter{source=PushInstruction("constant 8192"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 13"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13710
D=M // 13711
@13 // 13712
D=D+A // 13713
@SP // 13714
AM=M+1 // 13715
A=A-1 // 13716
M=D // 13717
@8192 // 13718
D=A // 13719
@SP // 13720
AM=M-1 // 13721
A=M // 13722
M=D // 13723

////PushWriter{source=PushInstruction("constant 16384"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 14"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 13724
D=M // 13725
@14 // 13726
D=D+A // 13727
@SP // 13728
AM=M+1 // 13729
A=A-1 // 13730
M=D // 13731
@16384 // 13732
D=A // 13733
@SP // 13734
AM=M-1 // 13735
A=M // 13736
M=D // 13737

////PushInstruction("constant 0")
@SP // 13738
AM=M+1 // 13739
A=A-1 // 13740
M=0 // 13741
@RETURN // 13742
0;JMP // 13743

////FunctionInstruction{functionName='Int32.do_div', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_div with 0
(Int32.do_div)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 13744
A=M // 13745
D=M // 13746
@3 // 13747
M=D // 13748

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 0"), PushInstruction("argument 1")], call=CallInstruction{Int32.do_left_shift_bytes_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 13749
D=A // 13750
@SP // 13751
M=D+M // 13752
@3 // 13753
D=M // 13754
@SP // 13755
A=M-1 // 13756
M=0 // 13757
A=A-1 // 13758
M=D // 13759
A=A-1 // 13760
@1 // 13761
D=A // 13762
@SP // 13763
M=D+M // 13764
@ARG // 13765
A=M+1 // 13766
D=M // 13767
@SP // 13768
A=M-1 // 13769
M=D // 13770
A=A-1 // 13771
// call Int32.do_left_shift_bytes_div
@8 // 13772
D=A // 13773
@14 // 13774
M=D // 13775
@Int32.do_left_shift_bytes_div // 13776
D=A // 13777
@13 // 13778
M=D // 13779
@Int32.do_div.ret.0 // 13780
D=A // 13781
@CALL // 13782
0;JMP // 13783
(Int32.do_div.ret.0)
@SP // 13784
M=M-1 // 13785

////PushInstruction("constant 0")
@SP // 13786
AM=M+1 // 13787
A=A-1 // 13788
M=0 // 13789
@RETURN // 13790
0;JMP // 13791

////FunctionInstruction{functionName='Int32.do_neg', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_div=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_neg with 0
(Int32.do_neg)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 13792
A=M // 13793
D=M // 13794
@3 // 13795
M=D // 13796

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 13797
A=M // 13798
D=M // 13799
@SP // 13800
AM=M+1 // 13801
A=A-1 // 13802
M=D // 13803
@THIS // 13804
A=M // 13805
D=M // 13806
@0 // 13807
A=D+A // 13808
D=M // 13809
D=!D // 13810
@255 // 13811
D=D&A // 13812
@SP // 13813
AM=M-1 // 13814
A=M // 13815
M=D // 13816

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 1"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 13817
A=M // 13818
D=M // 13819
@SP // 13820
AM=M+1 // 13821
A=A-1 // 13822
M=D+1 // 13823
@THIS // 13824
A=M // 13825
D=M // 13826
A=D+1 // 13827
D=M // 13828
D=!D // 13829
@255 // 13830
D=D&A // 13831
@SP // 13832
AM=M-1 // 13833
A=M // 13834
M=D // 13835

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 2"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 13836
A=M // 13837
D=M // 13838
@2 // 13839
D=D+A // 13840
@SP // 13841
AM=M+1 // 13842
A=A-1 // 13843
M=D // 13844
@THIS // 13845
A=M // 13846
D=M // 13847
@2 // 13848
A=D+A // 13849
D=M // 13850
D=!D // 13851
@255 // 13852
D=D&A // 13853
@SP // 13854
AM=M-1 // 13855
A=M // 13856
M=D // 13857

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 3"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 13858
A=M // 13859
D=M // 13860
@3 // 13861
D=D+A // 13862
@SP // 13863
AM=M+1 // 13864
A=A-1 // 13865
M=D // 13866
@THIS // 13867
A=M // 13868
D=M // 13869
@3 // 13870
A=D+A // 13871
D=M // 13872
D=!D // 13873
@255 // 13874
D=D&A // 13875
@SP // 13876
AM=M-1 // 13877
A=M // 13878
M=D // 13879

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 13880
A=M // 13881
D=M // 13882
@SP // 13883
AM=M+1 // 13884
A=A-1 // 13885
M=D // 13886
@THIS // 13887
A=M // 13888
D=M // 13889
@0 // 13890
A=D+A // 13891
D=M // 13892
D=D+1 // 13893
@SP // 13894
AM=M-1 // 13895
A=M // 13896
M=D // 13897

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE1}}
@Int32.do_neg.GT.24 // 13898
D=A // 13899
@SP // 13900
AM=M+1 // 13901
A=A-1 // 13902
M=D // 13903
@THIS // 13904
A=M // 13905
D=M // 13906
@0 // 13907
A=D+A // 13908
D=M // 13909
@256 // 13910
D=D-A // 13911
@DO_GT // 13912
0;JMP // 13913
(Int32.do_neg.GT.24)
@SP // 13914
AM=M+1 // 13915
A=A-1 // 13916
M=D // 13917
@Int32.do_neg.EQ.25 // 13918
D=A // 13919
@SP // 13920
AM=M+1 // 13921
A=A-1 // 13922
M=D // 13923
@THIS // 13924
A=M // 13925
D=M // 13926
@0 // 13927
A=D+A // 13928
D=M // 13929
@256 // 13930
D=D-A // 13931
@DO_EQ // 13932
0;JMP // 13933
(Int32.do_neg.EQ.25)
@SP // 13934
AM=M-1 // 13935
D=D|M // 13936
@Int32.do_neg$IF_TRUE1 // 13937
D;JNE // 13938

////GotoInstruction{label='Int32.do_neg$IF_FALSE1}
// goto Int32.do_neg$IF_FALSE1
@Int32.do_neg$IF_FALSE1 // 13939
0;JMP // 13940

////LabelInstruction{label='Int32.do_neg$IF_TRUE1}
// label Int32.do_neg$IF_TRUE1
(Int32.do_neg$IF_TRUE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 13941
A=M // 13942
D=M // 13943
@SP // 13944
AM=M+1 // 13945
A=A-1 // 13946
M=D // 13947
@THIS // 13948
A=M // 13949
D=M // 13950
@0 // 13951
A=D+A // 13952
D=M // 13953
@256 // 13954
D=D-A // 13955
@SP // 13956
AM=M-1 // 13957
A=M // 13958
M=D // 13959

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 13960
A=M // 13961
D=M // 13962
@SP // 13963
AM=M+1 // 13964
A=A-1 // 13965
M=D+1 // 13966
@THIS // 13967
A=M // 13968
D=M // 13969
A=D+1 // 13970
D=M // 13971
D=D+1 // 13972
@SP // 13973
AM=M-1 // 13974
A=M // 13975
M=D // 13976

////LabelInstruction{label='Int32.do_neg$IF_FALSE1}
// label Int32.do_neg$IF_FALSE1
(Int32.do_neg$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE2}}
@Int32.do_neg.GT.26 // 13977
D=A // 13978
@SP // 13979
AM=M+1 // 13980
A=A-1 // 13981
M=D // 13982
@THIS // 13983
A=M // 13984
D=M // 13985
A=D+1 // 13986
D=M // 13987
@256 // 13988
D=D-A // 13989
@DO_GT // 13990
0;JMP // 13991
(Int32.do_neg.GT.26)
@SP // 13992
AM=M+1 // 13993
A=A-1 // 13994
M=D // 13995
@Int32.do_neg.EQ.27 // 13996
D=A // 13997
@SP // 13998
AM=M+1 // 13999
A=A-1 // 14000
M=D // 14001
@THIS // 14002
A=M // 14003
D=M // 14004
A=D+1 // 14005
D=M // 14006
@256 // 14007
D=D-A // 14008
@DO_EQ // 14009
0;JMP // 14010
(Int32.do_neg.EQ.27)
@SP // 14011
AM=M-1 // 14012
D=D|M // 14013
@Int32.do_neg$IF_TRUE2 // 14014
D;JNE // 14015

////GotoInstruction{label='Int32.do_neg$IF_FALSE2}
// goto Int32.do_neg$IF_FALSE2
@Int32.do_neg$IF_FALSE2 // 14016
0;JMP // 14017

////LabelInstruction{label='Int32.do_neg$IF_TRUE2}
// label Int32.do_neg$IF_TRUE2
(Int32.do_neg$IF_TRUE2)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 14018
A=M // 14019
D=M // 14020
@SP // 14021
AM=M+1 // 14022
A=A-1 // 14023
M=D+1 // 14024
@THIS // 14025
A=M // 14026
D=M // 14027
A=D+1 // 14028
D=M // 14029
@256 // 14030
D=D-A // 14031
@SP // 14032
AM=M-1 // 14033
A=M // 14034
M=D // 14035

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 14036
A=M // 14037
D=M // 14038
@2 // 14039
D=D+A // 14040
@SP // 14041
AM=M+1 // 14042
A=A-1 // 14043
M=D // 14044
@THIS // 14045
A=M // 14046
D=M // 14047
@2 // 14048
A=D+A // 14049
D=M // 14050
D=D+1 // 14051
@SP // 14052
AM=M-1 // 14053
A=M // 14054
M=D // 14055

////LabelInstruction{label='Int32.do_neg$IF_FALSE2}
// label Int32.do_neg$IF_FALSE2
(Int32.do_neg$IF_FALSE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 2"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 2"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE3}}
@Int32.do_neg.GT.28 // 14056
D=A // 14057
@SP // 14058
AM=M+1 // 14059
A=A-1 // 14060
M=D // 14061
@THIS // 14062
A=M // 14063
D=M // 14064
@2 // 14065
A=D+A // 14066
D=M // 14067
@256 // 14068
D=D-A // 14069
@DO_GT // 14070
0;JMP // 14071
(Int32.do_neg.GT.28)
@SP // 14072
AM=M+1 // 14073
A=A-1 // 14074
M=D // 14075
@Int32.do_neg.EQ.29 // 14076
D=A // 14077
@SP // 14078
AM=M+1 // 14079
A=A-1 // 14080
M=D // 14081
@THIS // 14082
A=M // 14083
D=M // 14084
@2 // 14085
A=D+A // 14086
D=M // 14087
@256 // 14088
D=D-A // 14089
@DO_EQ // 14090
0;JMP // 14091
(Int32.do_neg.EQ.29)
@SP // 14092
AM=M-1 // 14093
D=D|M // 14094
@Int32.do_neg$IF_TRUE3 // 14095
D;JNE // 14096

////GotoInstruction{label='Int32.do_neg$IF_FALSE3}
// goto Int32.do_neg$IF_FALSE3
@Int32.do_neg$IF_FALSE3 // 14097
0;JMP // 14098

////LabelInstruction{label='Int32.do_neg$IF_TRUE3}
// label Int32.do_neg$IF_TRUE3
(Int32.do_neg$IF_TRUE3)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 14099
A=M // 14100
D=M // 14101
@2 // 14102
D=D+A // 14103
@SP // 14104
AM=M+1 // 14105
A=A-1 // 14106
M=D // 14107
@THIS // 14108
A=M // 14109
D=M // 14110
@2 // 14111
A=D+A // 14112
D=M // 14113
@256 // 14114
D=D-A // 14115
@SP // 14116
AM=M-1 // 14117
A=M // 14118
M=D // 14119

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 14120
A=M // 14121
D=M // 14122
@3 // 14123
D=D+A // 14124
@SP // 14125
AM=M+1 // 14126
A=A-1 // 14127
M=D // 14128
@THIS // 14129
A=M // 14130
D=M // 14131
@3 // 14132
A=D+A // 14133
D=M // 14134
D=D+1 // 14135
@SP // 14136
AM=M-1 // 14137
A=M // 14138
M=D // 14139

////LabelInstruction{label='Int32.do_neg$IF_FALSE3}
// label Int32.do_neg$IF_FALSE3
(Int32.do_neg$IF_FALSE3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 256"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE4}}
@Int32.do_neg.GT.30 // 14140
D=A // 14141
@SP // 14142
AM=M+1 // 14143
A=A-1 // 14144
M=D // 14145
@THIS // 14146
A=M // 14147
D=M // 14148
@3 // 14149
A=D+A // 14150
D=M // 14151
@256 // 14152
D=D-A // 14153
@DO_GT // 14154
0;JMP // 14155
(Int32.do_neg.GT.30)
@SP // 14156
AM=M+1 // 14157
A=A-1 // 14158
M=D // 14159
@Int32.do_neg.EQ.31 // 14160
D=A // 14161
@SP // 14162
AM=M+1 // 14163
A=A-1 // 14164
M=D // 14165
@THIS // 14166
A=M // 14167
D=M // 14168
@3 // 14169
A=D+A // 14170
D=M // 14171
@256 // 14172
D=D-A // 14173
@DO_EQ // 14174
0;JMP // 14175
(Int32.do_neg.EQ.31)
@SP // 14176
AM=M-1 // 14177
D=D|M // 14178
@Int32.do_neg$IF_TRUE4 // 14179
D;JNE // 14180

////GotoInstruction{label='Int32.do_neg$IF_FALSE4}
// goto Int32.do_neg$IF_FALSE4
@Int32.do_neg$IF_FALSE4 // 14181
0;JMP // 14182

////LabelInstruction{label='Int32.do_neg$IF_TRUE4}
// label Int32.do_neg$IF_TRUE4
(Int32.do_neg$IF_TRUE4)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 14183
A=M // 14184
D=M // 14185
@3 // 14186
D=D+A // 14187
@SP // 14188
AM=M+1 // 14189
A=A-1 // 14190
M=D // 14191
@THIS // 14192
A=M // 14193
D=M // 14194
@3 // 14195
A=D+A // 14196
D=M // 14197
@256 // 14198
D=D-A // 14199
@SP // 14200
AM=M-1 // 14201
A=M // 14202
M=D // 14203

////LabelInstruction{label='Int32.do_neg$IF_FALSE4}
// label Int32.do_neg$IF_FALSE4
(Int32.do_neg$IF_FALSE4)

////PushInstruction("constant 0")
@SP // 14204
AM=M+1 // 14205
A=A-1 // 14206
M=0 // 14207
@RETURN // 14208
0;JMP // 14209

////FunctionInstruction{functionName='Int32.do_sqrt', numLocals=6, funcMapping={Int32.is_positive=1, Int32.do_div=1, Int32.do_sub=4, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_sqrt with 6
(Int32.do_sqrt)
@6 // 14210
D=A // 14211
@SP // 14212
AM=D+M // 14213
A=A-1 // 14214
M=0 // 14215
A=A-1 // 14216
M=0 // 14217
A=A-1 // 14218
M=0 // 14219
A=A-1 // 14220
M=0 // 14221
A=A-1 // 14222
M=0 // 14223
A=A-1 // 14224
M=0 // 14225

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 14226
A=M // 14227
D=M // 14228
@3 // 14229
M=D // 14230

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_zero}}, ifGoto=IfGotoInstruction{label='Int32.do_sqrt$IF_TRUE1}}
@3 // 14231
D=M // 14232
@SP // 14233
AM=M+1 // 14234
A=A-1 // 14235
M=D // 14236
// call Int32.is_zero
@6 // 14237
D=A // 14238
@14 // 14239
M=D // 14240
@Int32.is_zero // 14241
D=A // 14242
@13 // 14243
M=D // 14244
@Int32.do_sqrt.ret.0 // 14245
D=A // 14246
@CALL // 14247
0;JMP // 14248
(Int32.do_sqrt.ret.0)
@SP // 14249
AM=M-1 // 14250
D=M // 14251
@Int32.do_sqrt$IF_TRUE1 // 14252
D;JNE // 14253

////GotoInstruction{label='Int32.do_sqrt$IF_FALSE1}
// goto Int32.do_sqrt$IF_FALSE1
@Int32.do_sqrt$IF_FALSE1 // 14254
0;JMP // 14255

////LabelInstruction{label='Int32.do_sqrt$IF_TRUE1}
// label Int32.do_sqrt$IF_TRUE1
(Int32.do_sqrt$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 14256
AM=M+1 // 14257
A=A-1 // 14258
M=0 // 14259
@RETURN // 14260
0;JMP // 14261

////LabelInstruction{label='Int32.do_sqrt$IF_FALSE1}
// label Int32.do_sqrt$IF_FALSE1
(Int32.do_sqrt$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 2}
//}

@2 // 14262
D=A // 14263
@SP // 14264
AM=M+1 // 14265
A=A-1 // 14266
M=D // 14267
// call Int32.new
@6 // 14268
D=A // 14269
@14 // 14270
M=D // 14271
@Int32.new // 14272
D=A // 14273
@13 // 14274
M=D // 14275
@Int32.do_sqrt.ret.1 // 14276
D=A // 14277
@CALL // 14278
0;JMP // 14279
(Int32.do_sqrt.ret.1)
@SP // 14280
AM=M-1 // 14281
D=M // 14282
@LCL // 14283
A=M+1 // 14284
A=A+1 // 14285
M=D // 14286

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 14287
AM=M+1 // 14288
A=A-1 // 14289
M=-1 // 14290
// call Int32.new
@6 // 14291
D=A // 14292
@14 // 14293
M=D // 14294
@Int32.new // 14295
D=A // 14296
@13 // 14297
M=D // 14298
@Int32.do_sqrt.ret.2 // 14299
D=A // 14300
@CALL // 14301
0;JMP // 14302
(Int32.do_sqrt.ret.2)
@SP // 14303
AM=M-1 // 14304
D=M // 14305
@LCL // 14306
A=M // 14307
M=D // 14308

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.initial_sqrt_guess}}
//  pop:  PopInstruction{address=local 1}
//}

@3 // 14309
D=M // 14310
@SP // 14311
AM=M+1 // 14312
A=A-1 // 14313
M=D // 14314
// call Int32.initial_sqrt_guess
@6 // 14315
D=A // 14316
@14 // 14317
M=D // 14318
@Int32.initial_sqrt_guess // 14319
D=A // 14320
@13 // 14321
M=D // 14322
@Int32.do_sqrt.ret.3 // 14323
D=A // 14324
@CALL // 14325
0;JMP // 14326
(Int32.do_sqrt.ret.3)
@SP // 14327
AM=M-1 // 14328
D=M // 14329
@LCL // 14330
A=M+1 // 14331
M=D // 14332

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 14333
D=M // 14334
@4 // 14335
A=D+A // 14336
M=0 // 14337

////LabelInstruction{label='Int32.do_sqrt_WHILE_EXP1}
// label Int32.do_sqrt_WHILE_EXP1
(Int32.do_sqrt_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 4"),
//                right:
//                    PushInstruction("constant 20"),
//                binaryOp: "LT"
//            ),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.cmp}},
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_sqrt_WHILE_END1}}
@Int32.do_sqrt.LT.32 // 14338
D=A // 14339
@SP // 14340
AM=M+1 // 14341
A=A-1 // 14342
M=D // 14343
@LCL // 14344
D=M // 14345
@4 // 14346
A=D+A // 14347
D=M // 14348
@20 // 14349
D=D-A // 14350
@DO_LT // 14351
0;JMP // 14352
(Int32.do_sqrt.LT.32)
@SP // 14353
AM=M+1 // 14354
A=A-1 // 14355
M=D // 14356
@Int32.do_sqrt.EQ.33 // 14357
D=A // 14358
@SP // 14359
AM=M+1 // 14360
A=A-1 // 14361
M=D // 14362
@LCL // 14363
A=M // 14364
D=M // 14365
@SP // 14366
AM=M+1 // 14367
A=A-1 // 14368
M=D // 14369
@LCL // 14370
A=M+1 // 14371
D=M // 14372
@SP // 14373
AM=M+1 // 14374
A=A-1 // 14375
M=D // 14376
// call Int32.cmp
@7 // 14377
D=A // 14378
@14 // 14379
M=D // 14380
@Int32.cmp // 14381
D=A // 14382
@13 // 14383
M=D // 14384
@Int32.do_sqrt.ret.4 // 14385
D=A // 14386
@CALL // 14387
0;JMP // 14388
(Int32.do_sqrt.ret.4)
@SP // 14389
AM=M-1 // 14390
D=M // 14391
@DO_EQ // 14392
0;JMP // 14393
(Int32.do_sqrt.EQ.33)
D=!D // 14394
@SP // 14395
AM=M-1 // 14396
D=D&M // 14397
D=!D // 14398
@Int32.do_sqrt_WHILE_END1 // 14399
D;JNE // 14400

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@3 // 14401
D=M // 14402
@SP // 14403
AM=M+1 // 14404
A=A-1 // 14405
M=D // 14406
// call Int32.clone
@6 // 14407
D=A // 14408
@14 // 14409
M=D // 14410
@Int32.clone // 14411
D=A // 14412
@13 // 14413
M=D // 14414
@Int32.do_sqrt.ret.5 // 14415
D=A // 14416
@CALL // 14417
0;JMP // 14418
(Int32.do_sqrt.ret.5)
@SP // 14419
AM=M-1 // 14420
D=M // 14421
@LCL // 14422
A=M+1 // 14423
A=A+1 // 14424
A=A+1 // 14425
M=D // 14426

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 1")], call=CallInstruction{Int32.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14427
A=M+1 // 14428
A=A+1 // 14429
A=A+1 // 14430
D=M // 14431
@SP // 14432
AM=M+1 // 14433
A=A-1 // 14434
M=D // 14435
@LCL // 14436
A=M+1 // 14437
D=M // 14438
@SP // 14439
AM=M+1 // 14440
A=A-1 // 14441
M=D // 14442
// call Int32.do_div
@7 // 14443
D=A // 14444
@14 // 14445
M=D // 14446
@Int32.do_div // 14447
D=A // 14448
@13 // 14449
M=D // 14450
@Int32.do_sqrt.ret.6 // 14451
D=A // 14452
@CALL // 14453
0;JMP // 14454
(Int32.do_sqrt.ret.6)
@SP // 14455
M=M-1 // 14456

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14457
A=M // 14458
D=M // 14459
@SP // 14460
AM=M+1 // 14461
A=A-1 // 14462
M=D // 14463
// call Int32.dispose
@6 // 14464
D=A // 14465
@14 // 14466
M=D // 14467
@Int32.dispose // 14468
D=A // 14469
@13 // 14470
M=D // 14471
@Int32.do_sqrt.ret.7 // 14472
D=A // 14473
@CALL // 14474
0;JMP // 14475
(Int32.do_sqrt.ret.7)
@SP // 14476
M=M-1 // 14477

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 14478
A=M+1 // 14479
D=M // 14480
@SP // 14481
AM=M+1 // 14482
A=A-1 // 14483
M=D // 14484
// call Int32.clone
@6 // 14485
D=A // 14486
@14 // 14487
M=D // 14488
@Int32.clone // 14489
D=A // 14490
@13 // 14491
M=D // 14492
@Int32.do_sqrt.ret.8 // 14493
D=A // 14494
@CALL // 14495
0;JMP // 14496
(Int32.do_sqrt.ret.8)
@SP // 14497
AM=M-1 // 14498
D=M // 14499
@LCL // 14500
A=M // 14501
M=D // 14502

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 3")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14503
A=M+1 // 14504
D=M // 14505
@SP // 14506
AM=M+1 // 14507
A=A-1 // 14508
M=D // 14509
@LCL // 14510
A=M+1 // 14511
A=A+1 // 14512
A=A+1 // 14513
D=M // 14514
@SP // 14515
AM=M+1 // 14516
A=A-1 // 14517
M=D // 14518
// call Int32.do_add
@7 // 14519
D=A // 14520
@14 // 14521
M=D // 14522
@Int32.do_add // 14523
D=A // 14524
@13 // 14525
M=D // 14526
@Int32.do_sqrt.ret.9 // 14527
D=A // 14528
@CALL // 14529
0;JMP // 14530
(Int32.do_sqrt.ret.9)
@SP // 14531
M=M-1 // 14532

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 2")], call=CallInstruction{Int32.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14533
A=M+1 // 14534
D=M // 14535
@SP // 14536
AM=M+1 // 14537
A=A-1 // 14538
M=D // 14539
@LCL // 14540
A=M+1 // 14541
A=A+1 // 14542
D=M // 14543
@SP // 14544
AM=M+1 // 14545
A=A-1 // 14546
M=D // 14547
// call Int32.do_div
@7 // 14548
D=A // 14549
@14 // 14550
M=D // 14551
@Int32.do_div // 14552
D=A // 14553
@13 // 14554
M=D // 14555
@Int32.do_sqrt.ret.10 // 14556
D=A // 14557
@CALL // 14558
0;JMP // 14559
(Int32.do_sqrt.ret.10)
@SP // 14560
M=M-1 // 14561

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14562
A=M+1 // 14563
A=A+1 // 14564
A=A+1 // 14565
D=M // 14566
@SP // 14567
AM=M+1 // 14568
A=A-1 // 14569
M=D // 14570
// call Int32.dispose
@6 // 14571
D=A // 14572
@14 // 14573
M=D // 14574
@Int32.dispose // 14575
D=A // 14576
@13 // 14577
M=D // 14578
@Int32.do_sqrt.ret.11 // 14579
D=A // 14580
@CALL // 14581
0;JMP // 14582
(Int32.do_sqrt.ret.11)
@SP // 14583
M=M-1 // 14584

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 14585
D=M // 14586
@4 // 14587
A=D+A // 14588
M=M+1 // 14589

////GotoInstruction{label='Int32.do_sqrt_WHILE_EXP1}
// goto Int32.do_sqrt_WHILE_EXP1
@Int32.do_sqrt_WHILE_EXP1 // 14590
0;JMP // 14591

////LabelInstruction{label='Int32.do_sqrt_WHILE_END1}
// label Int32.do_sqrt_WHILE_END1
(Int32.do_sqrt_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 14592
A=M+1 // 14593
D=M // 14594
@SP // 14595
AM=M+1 // 14596
A=A-1 // 14597
M=D // 14598
// call Int32.getParts
@6 // 14599
D=A // 14600
@14 // 14601
M=D // 14602
@Int32.getParts // 14603
D=A // 14604
@13 // 14605
M=D // 14606
@Int32.do_sqrt.ret.12 // 14607
D=A // 14608
@CALL // 14609
0;JMP // 14610
(Int32.do_sqrt.ret.12)
@LCL // 14611
D=M // 14612
@5 // 14613
A=D+A // 14614
D=A // 14615
@R13 // 14616
M=D // 14617
@SP // 14618
AM=M-1 // 14619
D=M // 14620
@R13 // 14621
A=M // 14622
M=D // 14623

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 14624
A=M // 14625
D=M // 14626
@SP // 14627
AM=M+1 // 14628
A=A-1 // 14629
M=D // 14630
@LCL // 14631
D=M // 14632
@5 // 14633
A=D+A // 14634
D=M // 14635
@0 // 14636
A=D+A // 14637
D=M // 14638
@SP // 14639
AM=M-1 // 14640
A=M // 14641
M=D // 14642

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 14643
A=M // 14644
D=M // 14645
@SP // 14646
AM=M+1 // 14647
A=A-1 // 14648
M=D+1 // 14649
@LCL // 14650
D=M // 14651
@5 // 14652
A=D+A // 14653
D=M // 14654
A=D+1 // 14655
D=M // 14656
@SP // 14657
AM=M-1 // 14658
A=M // 14659
M=D // 14660

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 14661
A=M // 14662
D=M // 14663
@2 // 14664
D=D+A // 14665
@SP // 14666
AM=M+1 // 14667
A=A-1 // 14668
M=D // 14669
@LCL // 14670
D=M // 14671
@5 // 14672
A=D+A // 14673
D=M // 14674
@2 // 14675
A=D+A // 14676
D=M // 14677
@SP // 14678
AM=M-1 // 14679
A=M // 14680
M=D // 14681

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 14682
A=M // 14683
D=M // 14684
@3 // 14685
D=D+A // 14686
@SP // 14687
AM=M+1 // 14688
A=A-1 // 14689
M=D // 14690
@LCL // 14691
D=M // 14692
@5 // 14693
A=D+A // 14694
D=M // 14695
@3 // 14696
A=D+A // 14697
D=M // 14698
@SP // 14699
AM=M-1 // 14700
A=M // 14701
M=D // 14702

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14703
A=M+1 // 14704
A=A+1 // 14705
D=M // 14706
@SP // 14707
AM=M+1 // 14708
A=A-1 // 14709
M=D // 14710
// call Int32.dispose
@6 // 14711
D=A // 14712
@14 // 14713
M=D // 14714
@Int32.dispose // 14715
D=A // 14716
@13 // 14717
M=D // 14718
@Int32.do_sqrt.ret.13 // 14719
D=A // 14720
@CALL // 14721
0;JMP // 14722
(Int32.do_sqrt.ret.13)
@SP // 14723
M=M-1 // 14724

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14725
A=M+1 // 14726
D=M // 14727
@SP // 14728
AM=M+1 // 14729
A=A-1 // 14730
M=D // 14731
// call Int32.dispose
@6 // 14732
D=A // 14733
@14 // 14734
M=D // 14735
@Int32.dispose // 14736
D=A // 14737
@13 // 14738
M=D // 14739
@Int32.do_sqrt.ret.14 // 14740
D=A // 14741
@CALL // 14742
0;JMP // 14743
(Int32.do_sqrt.ret.14)
@SP // 14744
M=M-1 // 14745

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 14746
A=M // 14747
D=M // 14748
@SP // 14749
AM=M+1 // 14750
A=A-1 // 14751
M=D // 14752
// call Int32.dispose
@6 // 14753
D=A // 14754
@14 // 14755
M=D // 14756
@Int32.dispose // 14757
D=A // 14758
@13 // 14759
M=D // 14760
@Int32.do_sqrt.ret.15 // 14761
D=A // 14762
@CALL // 14763
0;JMP // 14764
(Int32.do_sqrt.ret.15)
@SP // 14765
M=M-1 // 14766

////PushInstruction("constant 0")
@SP // 14767
AM=M+1 // 14768
A=A-1 // 14769
M=0 // 14770
@RETURN // 14771
0;JMP // 14772

////FunctionInstruction{functionName='Int32.u4_array_div_u4_array', numLocals=15, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.u4_array_div_u4_array with 15
(Int32.u4_array_div_u4_array)
@15 // 14773
D=A // 14774
@SP // 14775
AM=D+M // 14776
A=A-1 // 14777
M=0 // 14778
A=A-1 // 14779
M=0 // 14780
A=A-1 // 14781
M=0 // 14782
A=A-1 // 14783
M=0 // 14784
A=A-1 // 14785
M=0 // 14786
A=A-1 // 14787
M=0 // 14788
A=A-1 // 14789
M=0 // 14790
A=A-1 // 14791
M=0 // 14792
A=A-1 // 14793
M=0 // 14794
A=A-1 // 14795
M=0 // 14796
A=A-1 // 14797
M=0 // 14798
A=A-1 // 14799
M=0 // 14800
A=A-1 // 14801
M=0 // 14802
A=A-1 // 14803
M=0 // 14804
A=A-1 // 14805
M=0 // 14806

////PushPopPair {
//  push: PushInstruction("constant 16")
//  pop:  PopInstruction{address=local 0}
//}

@16 // 14807
D=A // 14808
@LCL // 14809
A=M // 14810
M=D // 14811

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 6}
//}

@16 // 14812
D=A // 14813
@SP // 14814
AM=M+1 // 14815
A=A-1 // 14816
M=D // 14817
// call Array.new
@6 // 14818
D=A // 14819
@14 // 14820
M=D // 14821
@Array.new // 14822
D=A // 14823
@13 // 14824
M=D // 14825
@Int32.u4_array_div_u4_array.ret.0 // 14826
D=A // 14827
@CALL // 14828
0;JMP // 14829
(Int32.u4_array_div_u4_array.ret.0)
@LCL // 14830
D=M // 14831
@6 // 14832
A=D+A // 14833
D=A // 14834
@R13 // 14835
M=D // 14836
@SP // 14837
AM=M-1 // 14838
D=M // 14839
@R13 // 14840
A=M // 14841
M=D // 14842

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE1}}
@Int32.u4_array_div_u4_array.EQ.34 // 14843
D=A // 14844
@SP // 14845
AM=M+1 // 14846
A=A-1 // 14847
M=D // 14848
@ARG // 14849
A=M+1 // 14850
A=A+1 // 14851
D=M // 14852
D=D-1 // 14853
@DO_EQ // 14854
0;JMP // 14855
(Int32.u4_array_div_u4_array.EQ.34)
@Int32.u4_array_div_u4_array$IF_TRUE1 // 14856
D;JNE // 14857

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE1}
// goto Int32.u4_array_div_u4_array$IF_FALSE1
@Int32.u4_array_div_u4_array$IF_FALSE1 // 14858
0;JMP // 14859

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE1}
// label Int32.u4_array_div_u4_array$IF_TRUE1
(Int32.u4_array_div_u4_array$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 14860
A=M+1 // 14861
A=A+1 // 14862
A=A+1 // 14863
M=0 // 14864

////PushPopPair {
//  push: PushInstruction("constant 15")
//  pop:  PopInstruction{address=local 2}
//}

@15 // 14865
D=A // 14866
@LCL // 14867
A=M+1 // 14868
A=A+1 // 14869
M=D // 14870

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP1}
// label Int32.u4_array_div_u4_array_WHILE_EXP1
(Int32.u4_array_div_u4_array_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 2"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 2"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END1}}
@Int32.u4_array_div_u4_array.GT.35 // 14871
D=A // 14872
@SP // 14873
AM=M+1 // 14874
A=A-1 // 14875
M=D // 14876
@LCL // 14877
A=M+1 // 14878
A=A+1 // 14879
D=M // 14880
@DO_GT // 14881
0;JMP // 14882
(Int32.u4_array_div_u4_array.GT.35)
@SP // 14883
AM=M+1 // 14884
A=A-1 // 14885
M=D // 14886
@Int32.u4_array_div_u4_array.EQ.36 // 14887
D=A // 14888
@SP // 14889
AM=M+1 // 14890
A=A-1 // 14891
M=D // 14892
@LCL // 14893
A=M+1 // 14894
A=A+1 // 14895
D=M // 14896
@DO_EQ // 14897
0;JMP // 14898
(Int32.u4_array_div_u4_array.EQ.36)
@SP // 14899
AM=M-1 // 14900
D=D|M // 14901
D=!D // 14902
@Int32.u4_array_div_u4_array_WHILE_END1 // 14903
D;JNE // 14904

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 0")], call=CallInstruction{Math.multiply}},
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("local 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 14905
A=M+1 // 14906
A=A+1 // 14907
A=A+1 // 14908
D=M // 14909
@SP // 14910
AM=M+1 // 14911
A=A-1 // 14912
M=D // 14913
@LCL // 14914
A=M // 14915
D=M // 14916
@SP // 14917
AM=M+1 // 14918
A=A-1 // 14919
M=D // 14920
// call Math.multiply
@7 // 14921
D=A // 14922
@14 // 14923
M=D // 14924
@Math.multiply // 14925
D=A // 14926
@13 // 14927
M=D // 14928
@Int32.u4_array_div_u4_array.ret.1 // 14929
D=A // 14930
@CALL // 14931
0;JMP // 14932
(Int32.u4_array_div_u4_array.ret.1)
@ARG // 14933
A=M // 14934
D=M // 14935
@SP // 14936
AM=M+1 // 14937
A=A-1 // 14938
M=D // 14939
@LCL // 14940
A=M+1 // 14941
A=A+1 // 14942
D=M // 14943
@SP // 14944
AM=M-1 // 14945
A=D+M // 14946
D=M // 14947
@SP // 14948
AM=M-1 // 14949
D=D+M // 14950
@SP // 14951
AM=M+1 // 14952
A=A-1 // 14953
M=D // 14954
@LCL // 14955
D=M // 14956
@4 // 14957
A=D+A // 14958
D=A // 14959
@R13 // 14960
M=D // 14961
@SP // 14962
AM=M-1 // 14963
D=M // 14964
@R13 // 14965
A=M // 14966
M=D // 14967

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 4"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 14968
D=M // 14969
@6 // 14970
A=D+A // 14971
D=M // 14972
@SP // 14973
AM=M+1 // 14974
A=A-1 // 14975
M=D // 14976
@LCL // 14977
A=M+1 // 14978
A=A+1 // 14979
D=M // 14980
@SP // 14981
AM=M-1 // 14982
D=D+M // 14983
@SP // 14984
AM=M+1 // 14985
A=A-1 // 14986
M=D // 14987
@LCL // 14988
D=M // 14989
@4 // 14990
A=D+A // 14991
D=M // 14992
@SP // 14993
AM=M+1 // 14994
A=A-1 // 14995
M=D // 14996
@ARG // 14997
A=M+1 // 14998
D=M // 14999
@0 // 15000
A=D+A // 15001
D=M // 15002
@SP // 15003
AM=M+1 // 15004
A=A-1 // 15005
M=D // 15006
// call Math.divide
@7 // 15007
D=A // 15008
@14 // 15009
M=D // 15010
@Math.divide // 15011
D=A // 15012
@13 // 15013
M=D // 15014
@Int32.u4_array_div_u4_array.ret.2 // 15015
D=A // 15016
@CALL // 15017
0;JMP // 15018
(Int32.u4_array_div_u4_array.ret.2)
@SP // 15019
AM=M-1 // 15020
D=M // 15021
@SP // 15022
AM=M-1 // 15023
A=M // 15024
M=D // 15025

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 6"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        )
//), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 15026
D=M // 15027
@4 // 15028
A=D+A // 15029
D=M // 15030
@SP // 15031
AM=M+1 // 15032
A=A-1 // 15033
M=D // 15034
@LCL // 15035
D=M // 15036
@6 // 15037
A=D+A // 15038
D=M // 15039
@SP // 15040
AM=M+1 // 15041
A=A-1 // 15042
M=D // 15043
@LCL // 15044
A=M+1 // 15045
A=A+1 // 15046
D=M // 15047
@SP // 15048
AM=M-1 // 15049
A=D+M // 15050
D=M // 15051
@SP // 15052
AM=M+1 // 15053
A=A-1 // 15054
M=D // 15055
@ARG // 15056
A=M+1 // 15057
D=M // 15058
@0 // 15059
A=D+A // 15060
D=M // 15061
@SP // 15062
AM=M+1 // 15063
A=A-1 // 15064
M=D // 15065
// call Math.multiply
@7 // 15066
D=A // 15067
@14 // 15068
M=D // 15069
@Math.multiply // 15070
D=A // 15071
@13 // 15072
M=D // 15073
@Int32.u4_array_div_u4_array.ret.3 // 15074
D=A // 15075
@CALL // 15076
0;JMP // 15077
(Int32.u4_array_div_u4_array.ret.3)
@SP // 15078
AM=M-1 // 15079
D=M // 15080
@SP // 15081
AM=M-1 // 15082
D=M-D // 15083
@LCL // 15084
A=M+1 // 15085
A=A+1 // 15086
A=A+1 // 15087
M=D // 15088

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 15089
A=M+1 // 15090
A=A+1 // 15091
M=M-1 // 15092

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP1}
// goto Int32.u4_array_div_u4_array_WHILE_EXP1
@Int32.u4_array_div_u4_array_WHILE_EXP1 // 15093
0;JMP // 15094

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END1}
// label Int32.u4_array_div_u4_array_WHILE_END1
(Int32.u4_array_div_u4_array_WHILE_END1)

////PushInstruction("local 6")
@LCL // 15095
D=M // 15096
@6 // 15097
A=D+A // 15098
D=M // 15099
@SP // 15100
AM=M+1 // 15101
A=A-1 // 15102
M=D // 15103
@RETURN // 15104
0;JMP // 15105

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE1}
// label Int32.u4_array_div_u4_array$IF_FALSE1
(Int32.u4_array_div_u4_array$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Int32.nlz_u4}}
//  pop:  PopInstruction{address=local 5}
//}

@ARG // 15106
A=M+1 // 15107
D=M // 15108
@SP // 15109
AM=M+1 // 15110
A=A-1 // 15111
M=D // 15112
@ARG // 15113
A=M+1 // 15114
A=A+1 // 15115
D=M // 15116
D=D-1 // 15117
@SP // 15118
AM=M-1 // 15119
A=D+M // 15120
D=M // 15121
@SP // 15122
AM=M+1 // 15123
A=A-1 // 15124
M=D // 15125
// call Int32.nlz_u4
@6 // 15126
D=A // 15127
@14 // 15128
M=D // 15129
@Int32.nlz_u4 // 15130
D=A // 15131
@13 // 15132
M=D // 15133
@Int32.u4_array_div_u4_array.ret.4 // 15134
D=A // 15135
@CALL // 15136
0;JMP // 15137
(Int32.u4_array_div_u4_array.ret.4)
@LCL // 15138
D=M // 15139
@5 // 15140
A=D+A // 15141
D=A // 15142
@R13 // 15143
M=D // 15144
@SP // 15145
AM=M-1 // 15146
D=M // 15147
@R13 // 15148
A=M // 15149
M=D // 15150

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 7}
//}

@8 // 15151
D=A // 15152
@SP // 15153
AM=M+1 // 15154
A=A-1 // 15155
M=D // 15156
// call Array.new
@6 // 15157
D=A // 15158
@14 // 15159
M=D // 15160
@Array.new // 15161
D=A // 15162
@13 // 15163
M=D // 15164
@Int32.u4_array_div_u4_array.ret.5 // 15165
D=A // 15166
@CALL // 15167
0;JMP // 15168
(Int32.u4_array_div_u4_array.ret.5)
@LCL // 15169
D=M // 15170
@7 // 15171
A=D+A // 15172
D=A // 15173
@R13 // 15174
M=D // 15175
@SP // 15176
AM=M-1 // 15177
D=M // 15178
@R13 // 15179
A=M // 15180
M=D // 15181

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 15182
A=M+1 // 15183
A=A+1 // 15184
D=M // 15185
D=D-1 // 15186
@LCL // 15187
A=M+1 // 15188
M=D // 15189

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP2}
// label Int32.u4_array_div_u4_array_WHILE_EXP2
(Int32.u4_array_div_u4_array_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END2}}
@Int32.u4_array_div_u4_array.GT.37 // 15190
D=A // 15191
@SP // 15192
AM=M+1 // 15193
A=A-1 // 15194
M=D // 15195
@LCL // 15196
A=M+1 // 15197
D=M // 15198
D=D-1 // 15199
@DO_GT // 15200
0;JMP // 15201
(Int32.u4_array_div_u4_array.GT.37)
@SP // 15202
AM=M+1 // 15203
A=A-1 // 15204
M=D // 15205
@Int32.u4_array_div_u4_array.EQ.38 // 15206
D=A // 15207
@SP // 15208
AM=M+1 // 15209
A=A-1 // 15210
M=D // 15211
@LCL // 15212
A=M+1 // 15213
D=M // 15214
D=D-1 // 15215
@DO_EQ // 15216
0;JMP // 15217
(Int32.u4_array_div_u4_array.EQ.38)
@SP // 15218
AM=M-1 // 15219
D=D|M // 15220
D=!D // 15221
@Int32.u4_array_div_u4_array_WHILE_END2 // 15222
D;JNE // 15223

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//            right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}},
//            binaryOp: "OR"
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 15224
D=M // 15225
@7 // 15226
A=D+A // 15227
D=M // 15228
@SP // 15229
AM=M+1 // 15230
A=A-1 // 15231
M=D // 15232
@LCL // 15233
A=M+1 // 15234
D=M // 15235
@SP // 15236
AM=M-1 // 15237
D=D+M // 15238
@SP // 15239
AM=M+1 // 15240
A=A-1 // 15241
M=D // 15242
@ARG // 15243
A=M+1 // 15244
D=M // 15245
@SP // 15246
AM=M+1 // 15247
A=A-1 // 15248
M=D // 15249
@LCL // 15250
A=M+1 // 15251
D=M // 15252
@SP // 15253
AM=M-1 // 15254
A=D+M // 15255
D=M // 15256
@SP // 15257
AM=M+1 // 15258
A=A-1 // 15259
M=D // 15260
@LCL // 15261
D=M // 15262
@5 // 15263
A=D+A // 15264
D=M // 15265
@SP // 15266
AM=M+1 // 15267
A=A-1 // 15268
M=D // 15269
// call Int32.leftshift
@7 // 15270
D=A // 15271
@14 // 15272
M=D // 15273
@Int32.leftshift // 15274
D=A // 15275
@13 // 15276
M=D // 15277
@Int32.u4_array_div_u4_array.ret.6 // 15278
D=A // 15279
@CALL // 15280
0;JMP // 15281
(Int32.u4_array_div_u4_array.ret.6)
@ARG // 15282
A=M+1 // 15283
D=M // 15284
@SP // 15285
AM=M+1 // 15286
A=A-1 // 15287
M=D // 15288
@LCL // 15289
A=M+1 // 15290
D=M // 15291
D=D-1 // 15292
@SP // 15293
AM=M-1 // 15294
A=D+M // 15295
D=M // 15296
@SP // 15297
AM=M+1 // 15298
A=A-1 // 15299
M=D // 15300
@LCL // 15301
D=M // 15302
@5 // 15303
A=D+A // 15304
D=M // 15305
@4 // 15306
D=A-D // 15307
@SP // 15308
AM=M+1 // 15309
A=A-1 // 15310
M=D // 15311
// call Int32.arith_rightshift
@7 // 15312
D=A // 15313
@14 // 15314
M=D // 15315
@Int32.arith_rightshift // 15316
D=A // 15317
@13 // 15318
M=D // 15319
@Int32.u4_array_div_u4_array.ret.7 // 15320
D=A // 15321
@CALL // 15322
0;JMP // 15323
(Int32.u4_array_div_u4_array.ret.7)
@SP // 15324
AM=M-1 // 15325
D=M // 15326
@SP // 15327
AM=M-1 // 15328
D=D|M // 15329
@15 // 15330
D=D&A // 15331
@SP // 15332
AM=M-1 // 15333
A=M // 15334
M=D // 15335

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15336
A=M+1 // 15337
M=M-1 // 15338

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP2}
// goto Int32.u4_array_div_u4_array_WHILE_EXP2
@Int32.u4_array_div_u4_array_WHILE_EXP2 // 15339
0;JMP // 15340

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END2}
// label Int32.u4_array_div_u4_array_WHILE_END2
(Int32.u4_array_div_u4_array_WHILE_END2)

////PushWriter{source=BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 15341
D=M // 15342
@7 // 15343
A=D+A // 15344
D=M // 15345
@SP // 15346
AM=M+1 // 15347
A=A-1 // 15348
M=D // 15349
@ARG // 15350
A=M+1 // 15351
D=M // 15352
@0 // 15353
A=D+A // 15354
D=M // 15355
@SP // 15356
AM=M+1 // 15357
A=A-1 // 15358
M=D // 15359
@LCL // 15360
D=M // 15361
@5 // 15362
A=D+A // 15363
D=M // 15364
@SP // 15365
AM=M+1 // 15366
A=A-1 // 15367
M=D // 15368
// call Int32.leftshift
@7 // 15369
D=A // 15370
@14 // 15371
M=D // 15372
@Int32.leftshift // 15373
D=A // 15374
@13 // 15375
M=D // 15376
@Int32.u4_array_div_u4_array.ret.8 // 15377
D=A // 15378
@CALL // 15379
0;JMP // 15380
(Int32.u4_array_div_u4_array.ret.8)
@SP // 15381
AM=M-1 // 15382
D=M // 15383
@15 // 15384
D=D&A // 15385
@SP // 15386
AM=M-1 // 15387
A=M // 15388
M=D // 15389

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 17")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 8}
//}

@17 // 15390
D=A // 15391
@SP // 15392
AM=M+1 // 15393
A=A-1 // 15394
M=D // 15395
// call Array.new
@6 // 15396
D=A // 15397
@14 // 15398
M=D // 15399
@Array.new // 15400
D=A // 15401
@13 // 15402
M=D // 15403
@Int32.u4_array_div_u4_array.ret.9 // 15404
D=A // 15405
@CALL // 15406
0;JMP // 15407
(Int32.u4_array_div_u4_array.ret.9)
@LCL // 15408
D=M // 15409
@8 // 15410
A=D+A // 15411
D=A // 15412
@R13 // 15413
M=D // 15414
@SP // 15415
AM=M-1 // 15416
D=M // 15417
@R13 // 15418
A=M // 15419
M=D // 15420

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 15"),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 16"),
//    binaryOp: "ADD"
//)}
@LCL // 15421
D=M // 15422
@8 // 15423
A=D+A // 15424
D=M // 15425
@16 // 15426
D=D+A // 15427
@SP // 15428
AM=M+1 // 15429
A=A-1 // 15430
M=D // 15431
@ARG // 15432
A=M // 15433
D=M // 15434
@15 // 15435
A=D+A // 15436
D=M // 15437
@SP // 15438
AM=M+1 // 15439
A=A-1 // 15440
M=D // 15441
@LCL // 15442
D=M // 15443
@5 // 15444
A=D+A // 15445
D=M // 15446
@4 // 15447
D=A-D // 15448
@SP // 15449
AM=M+1 // 15450
A=A-1 // 15451
M=D // 15452
// call Int32.arith_rightshift
@7 // 15453
D=A // 15454
@14 // 15455
M=D // 15456
@Int32.arith_rightshift // 15457
D=A // 15458
@13 // 15459
M=D // 15460
@Int32.u4_array_div_u4_array.ret.10 // 15461
D=A // 15462
@CALL // 15463
0;JMP // 15464
(Int32.u4_array_div_u4_array.ret.10)
@SP // 15465
AM=M-1 // 15466
D=M // 15467
@SP // 15468
AM=M-1 // 15469
A=M // 15470
M=D // 15471

////PushPopPair {
//  push: PushInstruction("constant 15")
//  pop:  PopInstruction{address=local 1}
//}

@15 // 15472
D=A // 15473
@LCL // 15474
A=M+1 // 15475
M=D // 15476

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP3}
// label Int32.u4_array_div_u4_array_WHILE_EXP3
(Int32.u4_array_div_u4_array_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END3}}
@Int32.u4_array_div_u4_array.GT.39 // 15477
D=A // 15478
@SP // 15479
AM=M+1 // 15480
A=A-1 // 15481
M=D // 15482
@LCL // 15483
A=M+1 // 15484
D=M // 15485
D=D-1 // 15486
@DO_GT // 15487
0;JMP // 15488
(Int32.u4_array_div_u4_array.GT.39)
@SP // 15489
AM=M+1 // 15490
A=A-1 // 15491
M=D // 15492
@Int32.u4_array_div_u4_array.EQ.40 // 15493
D=A // 15494
@SP // 15495
AM=M+1 // 15496
A=A-1 // 15497
M=D // 15498
@LCL // 15499
A=M+1 // 15500
D=M // 15501
D=D-1 // 15502
@DO_EQ // 15503
0;JMP // 15504
(Int32.u4_array_div_u4_array.EQ.40)
@SP // 15505
AM=M-1 // 15506
D=D|M // 15507
D=!D // 15508
@Int32.u4_array_div_u4_array_WHILE_END3 // 15509
D;JNE // 15510

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//            right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}},
//            binaryOp: "OR"
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 15511
D=M // 15512
@8 // 15513
A=D+A // 15514
D=M // 15515
@SP // 15516
AM=M+1 // 15517
A=A-1 // 15518
M=D // 15519
@LCL // 15520
A=M+1 // 15521
D=M // 15522
@SP // 15523
AM=M-1 // 15524
D=D+M // 15525
@SP // 15526
AM=M+1 // 15527
A=A-1 // 15528
M=D // 15529
@ARG // 15530
A=M // 15531
D=M // 15532
@SP // 15533
AM=M+1 // 15534
A=A-1 // 15535
M=D // 15536
@LCL // 15537
A=M+1 // 15538
D=M // 15539
@SP // 15540
AM=M-1 // 15541
A=D+M // 15542
D=M // 15543
@SP // 15544
AM=M+1 // 15545
A=A-1 // 15546
M=D // 15547
@LCL // 15548
D=M // 15549
@5 // 15550
A=D+A // 15551
D=M // 15552
@SP // 15553
AM=M+1 // 15554
A=A-1 // 15555
M=D // 15556
// call Int32.leftshift
@7 // 15557
D=A // 15558
@14 // 15559
M=D // 15560
@Int32.leftshift // 15561
D=A // 15562
@13 // 15563
M=D // 15564
@Int32.u4_array_div_u4_array.ret.11 // 15565
D=A // 15566
@CALL // 15567
0;JMP // 15568
(Int32.u4_array_div_u4_array.ret.11)
@ARG // 15569
A=M // 15570
D=M // 15571
@SP // 15572
AM=M+1 // 15573
A=A-1 // 15574
M=D // 15575
@LCL // 15576
A=M+1 // 15577
D=M // 15578
D=D-1 // 15579
@SP // 15580
AM=M-1 // 15581
A=D+M // 15582
D=M // 15583
@SP // 15584
AM=M+1 // 15585
A=A-1 // 15586
M=D // 15587
@LCL // 15588
D=M // 15589
@5 // 15590
A=D+A // 15591
D=M // 15592
@4 // 15593
D=A-D // 15594
@SP // 15595
AM=M+1 // 15596
A=A-1 // 15597
M=D // 15598
// call Int32.arith_rightshift
@7 // 15599
D=A // 15600
@14 // 15601
M=D // 15602
@Int32.arith_rightshift // 15603
D=A // 15604
@13 // 15605
M=D // 15606
@Int32.u4_array_div_u4_array.ret.12 // 15607
D=A // 15608
@CALL // 15609
0;JMP // 15610
(Int32.u4_array_div_u4_array.ret.12)
@SP // 15611
AM=M-1 // 15612
D=M // 15613
@SP // 15614
AM=M-1 // 15615
D=D|M // 15616
@15 // 15617
D=D&A // 15618
@SP // 15619
AM=M-1 // 15620
A=M // 15621
M=D // 15622

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15623
A=M+1 // 15624
M=M-1 // 15625

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP3}
// goto Int32.u4_array_div_u4_array_WHILE_EXP3
@Int32.u4_array_div_u4_array_WHILE_EXP3 // 15626
0;JMP // 15627

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END3}
// label Int32.u4_array_div_u4_array_WHILE_END3
(Int32.u4_array_div_u4_array_WHILE_END3)

////PushWriter{source=BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 15628
D=M // 15629
@8 // 15630
A=D+A // 15631
D=M // 15632
@SP // 15633
AM=M+1 // 15634
A=A-1 // 15635
M=D // 15636
@ARG // 15637
A=M // 15638
D=M // 15639
@0 // 15640
A=D+A // 15641
D=M // 15642
@SP // 15643
AM=M+1 // 15644
A=A-1 // 15645
M=D // 15646
@LCL // 15647
D=M // 15648
@5 // 15649
A=D+A // 15650
D=M // 15651
@SP // 15652
AM=M+1 // 15653
A=A-1 // 15654
M=D // 15655
// call Int32.leftshift
@7 // 15656
D=A // 15657
@14 // 15658
M=D // 15659
@Int32.leftshift // 15660
D=A // 15661
@13 // 15662
M=D // 15663
@Int32.u4_array_div_u4_array.ret.13 // 15664
D=A // 15665
@CALL // 15666
0;JMP // 15667
(Int32.u4_array_div_u4_array.ret.13)
@SP // 15668
AM=M-1 // 15669
D=M // 15670
@15 // 15671
D=D&A // 15672
@SP // 15673
AM=M-1 // 15674
A=M // 15675
M=D // 15676

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 16"),
//    right:
//        PushInstruction("argument 2"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 15677
A=M+1 // 15678
A=A+1 // 15679
D=M // 15680
@16 // 15681
D=A-D // 15682
@LCL // 15683
A=M+1 // 15684
A=A+1 // 15685
M=D // 15686

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP4}
// label Int32.u4_array_div_u4_array_WHILE_EXP4
(Int32.u4_array_div_u4_array_WHILE_EXP4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 2"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 2"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END4}}
@Int32.u4_array_div_u4_array.GT.41 // 15687
D=A // 15688
@SP // 15689
AM=M+1 // 15690
A=A-1 // 15691
M=D // 15692
@LCL // 15693
A=M+1 // 15694
A=A+1 // 15695
D=M // 15696
@DO_GT // 15697
0;JMP // 15698
(Int32.u4_array_div_u4_array.GT.41)
@SP // 15699
AM=M+1 // 15700
A=A-1 // 15701
M=D // 15702
@Int32.u4_array_div_u4_array.EQ.42 // 15703
D=A // 15704
@SP // 15705
AM=M+1 // 15706
A=A-1 // 15707
M=D // 15708
@LCL // 15709
A=M+1 // 15710
A=A+1 // 15711
D=M // 15712
@DO_EQ // 15713
0;JMP // 15714
(Int32.u4_array_div_u4_array.EQ.42)
@SP // 15715
AM=M-1 // 15716
D=D|M // 15717
D=!D // 15718
@Int32.u4_array_div_u4_array_WHILE_END4 // 15719
D;JNE // 15720

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 8"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("argument 2"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 0")], call=CallInstruction{Math.multiply}},
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 2"),
//                                    right:
//                                        PushInstruction("argument 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 15721
D=M // 15722
@8 // 15723
A=D+A // 15724
D=M // 15725
@SP // 15726
AM=M+1 // 15727
A=A-1 // 15728
M=D // 15729
@LCL // 15730
A=M+1 // 15731
A=A+1 // 15732
D=M // 15733
@SP // 15734
AM=M+1 // 15735
A=A-1 // 15736
M=D // 15737
@ARG // 15738
A=M+1 // 15739
A=A+1 // 15740
D=M // 15741
@SP // 15742
AM=M-1 // 15743
D=D+M // 15744
@SP // 15745
AM=M-1 // 15746
A=D+M // 15747
D=M // 15748
@SP // 15749
AM=M+1 // 15750
A=A-1 // 15751
M=D // 15752
@LCL // 15753
A=M // 15754
D=M // 15755
@SP // 15756
AM=M+1 // 15757
A=A-1 // 15758
M=D // 15759
// call Math.multiply
@7 // 15760
D=A // 15761
@14 // 15762
M=D // 15763
@Math.multiply // 15764
D=A // 15765
@13 // 15766
M=D // 15767
@Int32.u4_array_div_u4_array.ret.14 // 15768
D=A // 15769
@CALL // 15770
0;JMP // 15771
(Int32.u4_array_div_u4_array.ret.14)
@LCL // 15772
D=M // 15773
@8 // 15774
A=D+A // 15775
D=M // 15776
@SP // 15777
AM=M+1 // 15778
A=A-1 // 15779
M=D // 15780
@LCL // 15781
A=M+1 // 15782
A=A+1 // 15783
D=M // 15784
@SP // 15785
AM=M+1 // 15786
A=A-1 // 15787
M=D // 15788
@ARG // 15789
A=M+1 // 15790
A=A+1 // 15791
D=M // 15792
@SP // 15793
AM=M-1 // 15794
D=D+M // 15795
D=D-1 // 15796
@SP // 15797
AM=M-1 // 15798
A=D+M // 15799
D=M // 15800
@SP // 15801
AM=M-1 // 15802
D=D+M // 15803
@SP // 15804
AM=M+1 // 15805
A=A-1 // 15806
M=D // 15807
@LCL // 15808
D=M // 15809
@4 // 15810
A=D+A // 15811
D=A // 15812
@R13 // 15813
M=D // 15814
@SP // 15815
AM=M-1 // 15816
D=M // 15817
@R13 // 15818
A=M // 15819
M=D // 15820

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 15821
D=M // 15822
@4 // 15823
A=D+A // 15824
D=M // 15825
@SP // 15826
AM=M+1 // 15827
A=A-1 // 15828
M=D // 15829
@LCL // 15830
D=M // 15831
@7 // 15832
A=D+A // 15833
D=M // 15834
@SP // 15835
AM=M+1 // 15836
A=A-1 // 15837
M=D // 15838
@ARG // 15839
A=M+1 // 15840
A=A+1 // 15841
D=M // 15842
D=D-1 // 15843
@SP // 15844
AM=M-1 // 15845
A=D+M // 15846
D=M // 15847
@SP // 15848
AM=M+1 // 15849
A=A-1 // 15850
M=D // 15851
// call Math.divide
@7 // 15852
D=A // 15853
@14 // 15854
M=D // 15855
@Math.divide // 15856
D=A // 15857
@13 // 15858
M=D // 15859
@Int32.u4_array_div_u4_array.ret.15 // 15860
D=A // 15861
@CALL // 15862
0;JMP // 15863
(Int32.u4_array_div_u4_array.ret.15)
@LCL // 15864
D=M // 15865
@9 // 15866
A=D+A // 15867
D=A // 15868
@R13 // 15869
M=D // 15870
@SP // 15871
AM=M-1 // 15872
D=M // 15873
@R13 // 15874
A=M // 15875
M=D // 15876

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 15877
D=M // 15878
@4 // 15879
A=D+A // 15880
D=M // 15881
@SP // 15882
AM=M+1 // 15883
A=A-1 // 15884
M=D // 15885
@LCL // 15886
D=M // 15887
@9 // 15888
A=D+A // 15889
D=M // 15890
@SP // 15891
AM=M+1 // 15892
A=A-1 // 15893
M=D // 15894
@LCL // 15895
D=M // 15896
@7 // 15897
A=D+A // 15898
D=M // 15899
@SP // 15900
AM=M+1 // 15901
A=A-1 // 15902
M=D // 15903
@ARG // 15904
A=M+1 // 15905
A=A+1 // 15906
D=M // 15907
D=D-1 // 15908
@SP // 15909
AM=M-1 // 15910
A=D+M // 15911
D=M // 15912
@SP // 15913
AM=M+1 // 15914
A=A-1 // 15915
M=D // 15916
// call Math.multiply
@7 // 15917
D=A // 15918
@14 // 15919
M=D // 15920
@Math.multiply // 15921
D=A // 15922
@13 // 15923
M=D // 15924
@Int32.u4_array_div_u4_array.ret.16 // 15925
D=A // 15926
@CALL // 15927
0;JMP // 15928
(Int32.u4_array_div_u4_array.ret.16)
@SP // 15929
AM=M-1 // 15930
D=M // 15931
@SP // 15932
AM=M-1 // 15933
D=M-D // 15934
@SP // 15935
AM=M+1 // 15936
A=A-1 // 15937
M=D // 15938
@LCL // 15939
D=M // 15940
@10 // 15941
A=D+A // 15942
D=A // 15943
@R13 // 15944
M=D // 15945
@SP // 15946
AM=M-1 // 15947
D=M // 15948
@R13 // 15949
A=M // 15950
M=D // 15951

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 15952
D=M // 15953
@11 // 15954
A=D+A // 15955
M=0 // 15956

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP5}
// label Int32.u4_array_div_u4_array_WHILE_EXP5
(Int32.u4_array_div_u4_array_WHILE_EXP5)

////ConditionalGroup{push=PushInstruction("local 11"), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END5}}
@LCL // 15957
D=M // 15958
@11 // 15959
A=D+A // 15960
D=M // 15961
@Int32.u4_array_div_u4_array_WHILE_END5 // 15962
D;JNE // 15963

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 15964
D=M // 15965
@11 // 15966
A=D+A // 15967
M=-1 // 15968

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 9"),
//                    right:
//                        PushInstruction("local 0"),
//                    binaryOp: "GT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 9"),
//                    right:
//                        PushInstruction("local 0"),
//                    binaryOp: "EQ"
//                ),
//            binaryOp: "OR"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//            right:
//                BinaryPushGroup(
//                    left:
//CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 10")], call=CallInstruction{Math.multiply}},
//                    right:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 8"),
//                                    right:
//                                        BinaryPushGroup(
//                                            left:
//                                                BinaryPushGroup(
//                                                    left:
//                                                        PushInstruction("local 2"),
//                                                    right:
//                                                        PushInstruction("argument 2"),
//                                                    binaryOp: "ADD"
//                                                ),
//                                            right:
//                                                PushInstruction("constant 2"),
//                                            binaryOp: "SUB"
//                                        ),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "GT"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE2}}
@Int32.u4_array_div_u4_array.GT.43 // 15969
D=A // 15970
@SP // 15971
AM=M+1 // 15972
A=A-1 // 15973
M=D // 15974
@LCL // 15975
D=M // 15976
@9 // 15977
A=D+A // 15978
D=M // 15979
@SP // 15980
AM=M+1 // 15981
A=A-1 // 15982
M=D // 15983
@LCL // 15984
A=M // 15985
D=M // 15986
@SP // 15987
AM=M-1 // 15988
D=M-D // 15989
@DO_GT // 15990
0;JMP // 15991
(Int32.u4_array_div_u4_array.GT.43)
@SP // 15992
AM=M+1 // 15993
A=A-1 // 15994
M=D // 15995
@Int32.u4_array_div_u4_array.EQ.44 // 15996
D=A // 15997
@SP // 15998
AM=M+1 // 15999
A=A-1 // 16000
M=D // 16001
@LCL // 16002
D=M // 16003
@9 // 16004
A=D+A // 16005
D=M // 16006
@SP // 16007
AM=M+1 // 16008
A=A-1 // 16009
M=D // 16010
@LCL // 16011
A=M // 16012
D=M // 16013
@SP // 16014
AM=M-1 // 16015
D=M-D // 16016
@DO_EQ // 16017
0;JMP // 16018
(Int32.u4_array_div_u4_array.EQ.44)
@SP // 16019
AM=M-1 // 16020
D=D|M // 16021
@SP // 16022
AM=M+1 // 16023
A=A-1 // 16024
M=D // 16025
@Int32.u4_array_div_u4_array.GT.45 // 16026
D=A // 16027
@SP // 16028
AM=M+1 // 16029
A=A-1 // 16030
M=D // 16031
@LCL // 16032
D=M // 16033
@9 // 16034
A=D+A // 16035
D=M // 16036
@SP // 16037
AM=M+1 // 16038
A=A-1 // 16039
M=D // 16040
@LCL // 16041
D=M // 16042
@7 // 16043
A=D+A // 16044
D=M // 16045
@SP // 16046
AM=M+1 // 16047
A=A-1 // 16048
M=D // 16049
@ARG // 16050
A=M+1 // 16051
A=A+1 // 16052
D=M // 16053
@2 // 16054
D=D-A // 16055
@SP // 16056
AM=M-1 // 16057
A=D+M // 16058
D=M // 16059
@SP // 16060
AM=M+1 // 16061
A=A-1 // 16062
M=D // 16063
// call Math.multiply
@7 // 16064
D=A // 16065
@14 // 16066
M=D // 16067
@Math.multiply // 16068
D=A // 16069
@13 // 16070
M=D // 16071
@Int32.u4_array_div_u4_array.ret.17 // 16072
D=A // 16073
@CALL // 16074
0;JMP // 16075
(Int32.u4_array_div_u4_array.ret.17)
@LCL // 16076
A=M // 16077
D=M // 16078
@SP // 16079
AM=M+1 // 16080
A=A-1 // 16081
M=D // 16082
@LCL // 16083
D=M // 16084
@10 // 16085
A=D+A // 16086
D=M // 16087
@SP // 16088
AM=M+1 // 16089
A=A-1 // 16090
M=D // 16091
// call Math.multiply
@7 // 16092
D=A // 16093
@14 // 16094
M=D // 16095
@Math.multiply // 16096
D=A // 16097
@13 // 16098
M=D // 16099
@Int32.u4_array_div_u4_array.ret.18 // 16100
D=A // 16101
@CALL // 16102
0;JMP // 16103
(Int32.u4_array_div_u4_array.ret.18)
@LCL // 16104
D=M // 16105
@8 // 16106
A=D+A // 16107
D=M // 16108
@SP // 16109
AM=M+1 // 16110
A=A-1 // 16111
M=D // 16112
@LCL // 16113
A=M+1 // 16114
A=A+1 // 16115
D=M // 16116
@SP // 16117
AM=M+1 // 16118
A=A-1 // 16119
M=D // 16120
@ARG // 16121
A=M+1 // 16122
A=A+1 // 16123
D=M // 16124
@SP // 16125
AM=M-1 // 16126
D=D+M // 16127
@2 // 16128
D=D-A // 16129
@SP // 16130
AM=M-1 // 16131
A=D+M // 16132
D=M // 16133
@SP // 16134
AM=M-1 // 16135
D=D+M // 16136
@SP // 16137
AM=M-1 // 16138
D=M-D // 16139
@DO_GT // 16140
0;JMP // 16141
(Int32.u4_array_div_u4_array.GT.45)
@SP // 16142
AM=M-1 // 16143
D=D|M // 16144
@Int32.u4_array_div_u4_array$IF_TRUE2 // 16145
D;JNE // 16146

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE2}
// goto Int32.u4_array_div_u4_array$IF_FALSE2
@Int32.u4_array_div_u4_array$IF_FALSE2 // 16147
0;JMP // 16148

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE2}
// label Int32.u4_array_div_u4_array$IF_TRUE2
(Int32.u4_array_div_u4_array$IF_TRUE2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 16149
D=M // 16150
@9 // 16151
A=D+A // 16152
M=M-1 // 16153

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("argument 2"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 16154
D=M // 16155
@10 // 16156
A=D+A // 16157
D=M // 16158
@SP // 16159
AM=M+1 // 16160
A=A-1 // 16161
M=D // 16162
@LCL // 16163
D=M // 16164
@7 // 16165
A=D+A // 16166
D=M // 16167
@SP // 16168
AM=M+1 // 16169
A=A-1 // 16170
M=D // 16171
@ARG // 16172
A=M+1 // 16173
A=A+1 // 16174
D=M // 16175
D=D-1 // 16176
@SP // 16177
AM=M-1 // 16178
A=D+M // 16179
D=M // 16180
@SP // 16181
AM=M-1 // 16182
D=D+M // 16183
@SP // 16184
AM=M+1 // 16185
A=A-1 // 16186
M=D // 16187
@LCL // 16188
D=M // 16189
@10 // 16190
A=D+A // 16191
D=A // 16192
@R13 // 16193
M=D // 16194
@SP // 16195
AM=M-1 // 16196
D=M // 16197
@R13 // 16198
A=M // 16199
M=D // 16200

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE3}}
@Int32.u4_array_div_u4_array.LT.46 // 16201
D=A // 16202
@SP // 16203
AM=M+1 // 16204
A=A-1 // 16205
M=D // 16206
@LCL // 16207
D=M // 16208
@10 // 16209
A=D+A // 16210
D=M // 16211
@SP // 16212
AM=M+1 // 16213
A=A-1 // 16214
M=D // 16215
@LCL // 16216
A=M // 16217
D=M // 16218
@SP // 16219
AM=M-1 // 16220
D=M-D // 16221
@DO_LT // 16222
0;JMP // 16223
(Int32.u4_array_div_u4_array.LT.46)
@Int32.u4_array_div_u4_array$IF_TRUE3 // 16224
D;JNE // 16225

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE3}
// goto Int32.u4_array_div_u4_array$IF_FALSE3
@Int32.u4_array_div_u4_array$IF_FALSE3 // 16226
0;JMP // 16227

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE3}
// label Int32.u4_array_div_u4_array$IF_TRUE3
(Int32.u4_array_div_u4_array$IF_TRUE3)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 16228
D=M // 16229
@11 // 16230
A=D+A // 16231
M=0 // 16232

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE3}
// label Int32.u4_array_div_u4_array$IF_FALSE3
(Int32.u4_array_div_u4_array$IF_FALSE3)

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE2}
// label Int32.u4_array_div_u4_array$IF_FALSE2
(Int32.u4_array_div_u4_array$IF_FALSE2)

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP5}
// goto Int32.u4_array_div_u4_array_WHILE_EXP5
@Int32.u4_array_div_u4_array_WHILE_EXP5 // 16233
0;JMP // 16234

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END5}
// label Int32.u4_array_div_u4_array_WHILE_END5
(Int32.u4_array_div_u4_array_WHILE_END5)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 16235
D=M // 16236
@12 // 16237
A=D+A // 16238
M=0 // 16239

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 16240
A=M+1 // 16241
M=0 // 16242

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP6}
// label Int32.u4_array_div_u4_array_WHILE_EXP6
(Int32.u4_array_div_u4_array_WHILE_EXP6)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END6}}
@Int32.u4_array_div_u4_array.LT.47 // 16243
D=A // 16244
@SP // 16245
AM=M+1 // 16246
A=A-1 // 16247
M=D // 16248
@LCL // 16249
A=M+1 // 16250
D=M // 16251
@SP // 16252
AM=M+1 // 16253
A=A-1 // 16254
M=D // 16255
@ARG // 16256
A=M+1 // 16257
A=A+1 // 16258
D=M // 16259
@SP // 16260
AM=M-1 // 16261
D=M-D // 16262
@DO_LT // 16263
0;JMP // 16264
(Int32.u4_array_div_u4_array.LT.47)
D=!D // 16265
@Int32.u4_array_div_u4_array_WHILE_END6 // 16266
D;JNE // 16267

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 16268
D=M // 16269
@9 // 16270
A=D+A // 16271
D=M // 16272
@SP // 16273
AM=M+1 // 16274
A=A-1 // 16275
M=D // 16276
@LCL // 16277
D=M // 16278
@7 // 16279
A=D+A // 16280
D=M // 16281
@SP // 16282
AM=M+1 // 16283
A=A-1 // 16284
M=D // 16285
@LCL // 16286
A=M+1 // 16287
D=M // 16288
@SP // 16289
AM=M-1 // 16290
A=D+M // 16291
D=M // 16292
@SP // 16293
AM=M+1 // 16294
A=A-1 // 16295
M=D // 16296
// call Math.multiply
@7 // 16297
D=A // 16298
@14 // 16299
M=D // 16300
@Math.multiply // 16301
D=A // 16302
@13 // 16303
M=D // 16304
@Int32.u4_array_div_u4_array.ret.19 // 16305
D=A // 16306
@CALL // 16307
0;JMP // 16308
(Int32.u4_array_div_u4_array.ret.19)
@LCL // 16309
D=M // 16310
@13 // 16311
A=D+A // 16312
D=A // 16313
@R13 // 16314
M=D // 16315
@SP // 16316
AM=M-1 // 16317
D=M // 16318
@R13 // 16319
A=M // 16320
M=D // 16321

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 1"),
//                                    right:
//                                        PushInstruction("local 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("local 12"),
//            binaryOp: "SUB"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 13"),
//            right:
//                PushInstruction("constant 15"),
//            binaryOp: "AND"
//        ),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 16322
D=M // 16323
@8 // 16324
A=D+A // 16325
D=M // 16326
@SP // 16327
AM=M+1 // 16328
A=A-1 // 16329
M=D // 16330
@LCL // 16331
A=M+1 // 16332
A=A+1 // 16333
D=M // 16334
A=A-1 // 16335
D=D+M // 16336
@SP // 16337
AM=M-1 // 16338
A=D+M // 16339
D=M // 16340
@SP // 16341
AM=M+1 // 16342
A=A-1 // 16343
M=D // 16344
@LCL // 16345
D=M // 16346
@12 // 16347
A=D+A // 16348
D=M // 16349
@SP // 16350
AM=M-1 // 16351
D=M-D // 16352
@SP // 16353
AM=M+1 // 16354
A=A-1 // 16355
M=D // 16356
@LCL // 16357
D=M // 16358
@13 // 16359
A=D+A // 16360
D=M // 16361
@15 // 16362
D=D&A // 16363
@SP // 16364
AM=M-1 // 16365
D=M-D // 16366
@SP // 16367
AM=M+1 // 16368
A=A-1 // 16369
M=D // 16370
@LCL // 16371
D=M // 16372
@14 // 16373
A=D+A // 16374
D=A // 16375
@R13 // 16376
M=D // 16377
@SP // 16378
AM=M-1 // 16379
D=M // 16380
@R13 // 16381
A=M // 16382
M=D // 16383

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 16384
D=M // 16385
@8 // 16386
A=D+A // 16387
D=M // 16388
@SP // 16389
AM=M+1 // 16390
A=A-1 // 16391
M=D // 16392
@LCL // 16393
A=M+1 // 16394
A=A+1 // 16395
D=M // 16396
A=A-1 // 16397
D=D+M // 16398
@SP // 16399
AM=M-1 // 16400
D=D+M // 16401
@SP // 16402
AM=M+1 // 16403
A=A-1 // 16404
M=D // 16405
@LCL // 16406
D=M // 16407
@14 // 16408
A=D+A // 16409
D=M // 16410
@15 // 16411
D=D&A // 16412
@SP // 16413
AM=M-1 // 16414
A=M // 16415
M=D // 16416

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//CallGroup{pushes=[PushInstruction("local 14"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 16417
D=M // 16418
@13 // 16419
A=D+A // 16420
D=M // 16421
@SP // 16422
AM=M+1 // 16423
A=A-1 // 16424
M=D // 16425
@4 // 16426
D=A // 16427
@SP // 16428
AM=M+1 // 16429
A=A-1 // 16430
M=D // 16431
// call Int32.arith_rightshift
@7 // 16432
D=A // 16433
@14 // 16434
M=D // 16435
@Int32.arith_rightshift // 16436
D=A // 16437
@13 // 16438
M=D // 16439
@Int32.u4_array_div_u4_array.ret.20 // 16440
D=A // 16441
@CALL // 16442
0;JMP // 16443
(Int32.u4_array_div_u4_array.ret.20)
@LCL // 16444
D=M // 16445
@14 // 16446
A=D+A // 16447
D=M // 16448
@SP // 16449
AM=M+1 // 16450
A=A-1 // 16451
M=D // 16452
@4 // 16453
D=A // 16454
@SP // 16455
AM=M+1 // 16456
A=A-1 // 16457
M=D // 16458
// call Int32.arith_rightshift
@7 // 16459
D=A // 16460
@14 // 16461
M=D // 16462
@Int32.arith_rightshift // 16463
D=A // 16464
@13 // 16465
M=D // 16466
@Int32.u4_array_div_u4_array.ret.21 // 16467
D=A // 16468
@CALL // 16469
0;JMP // 16470
(Int32.u4_array_div_u4_array.ret.21)
@SP // 16471
AM=M-1 // 16472
D=M // 16473
@SP // 16474
AM=M-1 // 16475
D=M-D // 16476
@SP // 16477
AM=M+1 // 16478
A=A-1 // 16479
M=D // 16480
@LCL // 16481
D=M // 16482
@12 // 16483
A=D+A // 16484
D=A // 16485
@R13 // 16486
M=D // 16487
@SP // 16488
AM=M-1 // 16489
D=M // 16490
@R13 // 16491
A=M // 16492
M=D // 16493

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 16494
A=M+1 // 16495
M=M+1 // 16496

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP6}
// goto Int32.u4_array_div_u4_array_WHILE_EXP6
@Int32.u4_array_div_u4_array_WHILE_EXP6 // 16497
0;JMP // 16498

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END6}
// label Int32.u4_array_div_u4_array_WHILE_END6
(Int32.u4_array_div_u4_array_WHILE_END6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("argument 2"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 16499
D=M // 16500
@8 // 16501
A=D+A // 16502
D=M // 16503
@SP // 16504
AM=M+1 // 16505
A=A-1 // 16506
M=D // 16507
@LCL // 16508
A=M+1 // 16509
A=A+1 // 16510
D=M // 16511
@SP // 16512
AM=M+1 // 16513
A=A-1 // 16514
M=D // 16515
@ARG // 16516
A=M+1 // 16517
A=A+1 // 16518
D=M // 16519
@SP // 16520
AM=M-1 // 16521
D=D+M // 16522
@SP // 16523
AM=M-1 // 16524
A=D+M // 16525
D=M // 16526
@SP // 16527
AM=M+1 // 16528
A=A-1 // 16529
M=D // 16530
@LCL // 16531
D=M // 16532
@12 // 16533
A=D+A // 16534
D=M // 16535
@SP // 16536
AM=M-1 // 16537
D=M-D // 16538
@SP // 16539
AM=M+1 // 16540
A=A-1 // 16541
M=D // 16542
@LCL // 16543
D=M // 16544
@14 // 16545
A=D+A // 16546
D=A // 16547
@R13 // 16548
M=D // 16549
@SP // 16550
AM=M-1 // 16551
D=M // 16552
@R13 // 16553
A=M // 16554
M=D // 16555

////PushWriter{source=PushInstruction("local 14"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 16556
D=M // 16557
@8 // 16558
A=D+A // 16559
D=M // 16560
@SP // 16561
AM=M+1 // 16562
A=A-1 // 16563
M=D // 16564
@LCL // 16565
A=M+1 // 16566
A=A+1 // 16567
D=M // 16568
@SP // 16569
AM=M+1 // 16570
A=A-1 // 16571
M=D // 16572
@ARG // 16573
A=M+1 // 16574
A=A+1 // 16575
D=M // 16576
@SP // 16577
AM=M-1 // 16578
D=D+M // 16579
@SP // 16580
AM=M-1 // 16581
D=D+M // 16582
@SP // 16583
AM=M+1 // 16584
A=A-1 // 16585
M=D // 16586
@LCL // 16587
D=M // 16588
@14 // 16589
A=D+A // 16590
D=M // 16591
@SP // 16592
AM=M-1 // 16593
A=M // 16594
M=D // 16595

////PushWriter{source=PushInstruction("local 9"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 16596
D=M // 16597
@6 // 16598
A=D+A // 16599
D=M // 16600
@SP // 16601
AM=M+1 // 16602
A=A-1 // 16603
M=D // 16604
@LCL // 16605
A=M+1 // 16606
A=A+1 // 16607
D=M // 16608
@SP // 16609
AM=M-1 // 16610
D=D+M // 16611
@SP // 16612
AM=M+1 // 16613
A=A-1 // 16614
M=D // 16615
@LCL // 16616
D=M // 16617
@9 // 16618
A=D+A // 16619
D=M // 16620
@SP // 16621
AM=M-1 // 16622
A=M // 16623
M=D // 16624

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE4}}
@Int32.u4_array_div_u4_array.LT.48 // 16625
D=A // 16626
@SP // 16627
AM=M+1 // 16628
A=A-1 // 16629
M=D // 16630
@LCL // 16631
D=M // 16632
@14 // 16633
A=D+A // 16634
D=M // 16635
@DO_LT // 16636
0;JMP // 16637
(Int32.u4_array_div_u4_array.LT.48)
@Int32.u4_array_div_u4_array$IF_TRUE4 // 16638
D;JNE // 16639

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE4}
// goto Int32.u4_array_div_u4_array$IF_FALSE4
@Int32.u4_array_div_u4_array$IF_FALSE4 // 16640
0;JMP // 16641

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE4}
// label Int32.u4_array_div_u4_array$IF_TRUE4
(Int32.u4_array_div_u4_array$IF_TRUE4)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 16642
D=M // 16643
@12 // 16644
A=D+A // 16645
M=0 // 16646

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 6"),
//                    right:
//                        PushInstruction("local 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 16647
D=M // 16648
@6 // 16649
A=D+A // 16650
D=M // 16651
@SP // 16652
AM=M+1 // 16653
A=A-1 // 16654
M=D // 16655
@LCL // 16656
A=M+1 // 16657
A=A+1 // 16658
D=M // 16659
@SP // 16660
AM=M-1 // 16661
D=D+M // 16662
@SP // 16663
AM=M+1 // 16664
A=A-1 // 16665
M=D // 16666
@LCL // 16667
D=M // 16668
@6 // 16669
A=D+A // 16670
D=M // 16671
@SP // 16672
AM=M+1 // 16673
A=A-1 // 16674
M=D // 16675
@LCL // 16676
A=M+1 // 16677
A=A+1 // 16678
D=M // 16679
@SP // 16680
AM=M-1 // 16681
A=D+M // 16682
D=M // 16683
D=D-1 // 16684
@SP // 16685
AM=M-1 // 16686
A=M // 16687
M=D // 16688

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 16689
A=M+1 // 16690
M=0 // 16691

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP7}
// label Int32.u4_array_div_u4_array_WHILE_EXP7
(Int32.u4_array_div_u4_array_WHILE_EXP7)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END7}}
@Int32.u4_array_div_u4_array.LT.49 // 16692
D=A // 16693
@SP // 16694
AM=M+1 // 16695
A=A-1 // 16696
M=D // 16697
@LCL // 16698
A=M+1 // 16699
D=M // 16700
@SP // 16701
AM=M+1 // 16702
A=A-1 // 16703
M=D // 16704
@ARG // 16705
A=M+1 // 16706
A=A+1 // 16707
D=M // 16708
@SP // 16709
AM=M-1 // 16710
D=M-D // 16711
@DO_LT // 16712
0;JMP // 16713
(Int32.u4_array_div_u4_array.LT.49)
D=!D // 16714
@Int32.u4_array_div_u4_array_WHILE_END7 // 16715
D;JNE // 16716

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 1"),
//                                    right:
//                                        PushInstruction("local 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 7"),
//                            right:
//                                PushInstruction("local 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 16717
D=M // 16718
@8 // 16719
A=D+A // 16720
D=M // 16721
@SP // 16722
AM=M+1 // 16723
A=A-1 // 16724
M=D // 16725
@LCL // 16726
A=M+1 // 16727
A=A+1 // 16728
D=M // 16729
A=A-1 // 16730
D=D+M // 16731
@SP // 16732
AM=M-1 // 16733
A=D+M // 16734
D=M // 16735
@SP // 16736
AM=M+1 // 16737
A=A-1 // 16738
M=D // 16739
@LCL // 16740
D=M // 16741
@7 // 16742
A=D+A // 16743
D=M // 16744
@SP // 16745
AM=M+1 // 16746
A=A-1 // 16747
M=D // 16748
@LCL // 16749
A=M+1 // 16750
D=M // 16751
@SP // 16752
AM=M-1 // 16753
A=D+M // 16754
D=M // 16755
@SP // 16756
AM=M-1 // 16757
D=D+M // 16758
@SP // 16759
AM=M+1 // 16760
A=A-1 // 16761
M=D // 16762
@LCL // 16763
D=M // 16764
@12 // 16765
A=D+A // 16766
D=M // 16767
@SP // 16768
AM=M-1 // 16769
D=D+M // 16770
@SP // 16771
AM=M+1 // 16772
A=A-1 // 16773
M=D // 16774
@LCL // 16775
D=M // 16776
@14 // 16777
A=D+A // 16778
D=A // 16779
@R13 // 16780
M=D // 16781
@SP // 16782
AM=M-1 // 16783
D=M // 16784
@R13 // 16785
A=M // 16786
M=D // 16787

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 16788
D=M // 16789
@8 // 16790
A=D+A // 16791
D=M // 16792
@SP // 16793
AM=M+1 // 16794
A=A-1 // 16795
M=D // 16796
@LCL // 16797
A=M+1 // 16798
A=A+1 // 16799
D=M // 16800
A=A-1 // 16801
D=D+M // 16802
@SP // 16803
AM=M-1 // 16804
D=D+M // 16805
@SP // 16806
AM=M+1 // 16807
A=A-1 // 16808
M=D // 16809
@LCL // 16810
D=M // 16811
@14 // 16812
A=D+A // 16813
D=M // 16814
@15 // 16815
D=D&A // 16816
@SP // 16817
AM=M-1 // 16818
A=M // 16819
M=D // 16820

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 14"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 16821
D=M // 16822
@14 // 16823
A=D+A // 16824
D=M // 16825
@SP // 16826
AM=M+1 // 16827
A=A-1 // 16828
M=D // 16829
@4 // 16830
D=A // 16831
@SP // 16832
AM=M+1 // 16833
A=A-1 // 16834
M=D // 16835
// call Int32.arith_rightshift
@7 // 16836
D=A // 16837
@14 // 16838
M=D // 16839
@Int32.arith_rightshift // 16840
D=A // 16841
@13 // 16842
M=D // 16843
@Int32.u4_array_div_u4_array.ret.22 // 16844
D=A // 16845
@CALL // 16846
0;JMP // 16847
(Int32.u4_array_div_u4_array.ret.22)
@LCL // 16848
D=M // 16849
@12 // 16850
A=D+A // 16851
D=A // 16852
@R13 // 16853
M=D // 16854
@SP // 16855
AM=M-1 // 16856
D=M // 16857
@R13 // 16858
A=M // 16859
M=D // 16860

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 16861
A=M+1 // 16862
M=M+1 // 16863

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP7}
// goto Int32.u4_array_div_u4_array_WHILE_EXP7
@Int32.u4_array_div_u4_array_WHILE_EXP7 // 16864
0;JMP // 16865

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END7}
// label Int32.u4_array_div_u4_array_WHILE_END7
(Int32.u4_array_div_u4_array_WHILE_END7)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("argument 2"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 16866
D=M // 16867
@8 // 16868
A=D+A // 16869
D=M // 16870
@SP // 16871
AM=M+1 // 16872
A=A-1 // 16873
M=D // 16874
@LCL // 16875
A=M+1 // 16876
A=A+1 // 16877
D=M // 16878
@SP // 16879
AM=M+1 // 16880
A=A-1 // 16881
M=D // 16882
@ARG // 16883
A=M+1 // 16884
A=A+1 // 16885
D=M // 16886
@SP // 16887
AM=M-1 // 16888
D=D+M // 16889
@SP // 16890
AM=M-1 // 16891
D=D+M // 16892
@SP // 16893
AM=M+1 // 16894
A=A-1 // 16895
M=D // 16896
@LCL // 16897
D=M // 16898
@8 // 16899
A=D+A // 16900
D=M // 16901
@SP // 16902
AM=M+1 // 16903
A=A-1 // 16904
M=D // 16905
@LCL // 16906
A=M+1 // 16907
A=A+1 // 16908
D=M // 16909
@SP // 16910
AM=M+1 // 16911
A=A-1 // 16912
M=D // 16913
@ARG // 16914
A=M+1 // 16915
A=A+1 // 16916
D=M // 16917
@SP // 16918
AM=M-1 // 16919
D=D+M // 16920
@SP // 16921
AM=M-1 // 16922
A=D+M // 16923
D=M // 16924
@SP // 16925
AM=M+1 // 16926
A=A-1 // 16927
M=D // 16928
@LCL // 16929
D=M // 16930
@12 // 16931
A=D+A // 16932
D=M // 16933
@SP // 16934
AM=M-1 // 16935
D=D+M // 16936
@SP // 16937
AM=M-1 // 16938
A=M // 16939
M=D // 16940

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_FALSE4}
// label Int32.u4_array_div_u4_array$IF_FALSE4
(Int32.u4_array_div_u4_array$IF_FALSE4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 16941
A=M+1 // 16942
A=A+1 // 16943
M=M-1 // 16944

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP4}
// goto Int32.u4_array_div_u4_array_WHILE_EXP4
@Int32.u4_array_div_u4_array_WHILE_EXP4 // 16945
0;JMP // 16946

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END4}
// label Int32.u4_array_div_u4_array_WHILE_END4
(Int32.u4_array_div_u4_array_WHILE_END4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16947
D=M // 16948
@7 // 16949
A=D+A // 16950
D=M // 16951
@SP // 16952
AM=M+1 // 16953
A=A-1 // 16954
M=D // 16955
// call Array.dispose
@6 // 16956
D=A // 16957
@14 // 16958
M=D // 16959
@Array.dispose // 16960
D=A // 16961
@13 // 16962
M=D // 16963
@Int32.u4_array_div_u4_array.ret.23 // 16964
D=A // 16965
@CALL // 16966
0;JMP // 16967
(Int32.u4_array_div_u4_array.ret.23)
@SP // 16968
M=M-1 // 16969

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 8")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16970
D=M // 16971
@8 // 16972
A=D+A // 16973
D=M // 16974
@SP // 16975
AM=M+1 // 16976
A=A-1 // 16977
M=D // 16978
// call Array.dispose
@6 // 16979
D=A // 16980
@14 // 16981
M=D // 16982
@Array.dispose // 16983
D=A // 16984
@13 // 16985
M=D // 16986
@Int32.u4_array_div_u4_array.ret.24 // 16987
D=A // 16988
@CALL // 16989
0;JMP // 16990
(Int32.u4_array_div_u4_array.ret.24)
@SP // 16991
M=M-1 // 16992

////PushInstruction("local 6")
@LCL // 16993
D=M // 16994
@6 // 16995
A=D+A // 16996
D=M // 16997
@SP // 16998
AM=M+1 // 16999
A=A-1 // 17000
M=D // 17001
@RETURN // 17002
0;JMP // 17003

////FunctionInstruction{functionName='String.appendChar', numLocals=1, funcMapping={String.dispose=1, String.length=0}}
// function String.appendChar with 1
(String.appendChar)
@SP // 17004
AM=M+1 // 17005
A=A-1 // 17006
M=0 // 17007

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 17008
A=M // 17009
D=M // 17010
@3 // 17011
M=D // 17012

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("this 1"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.appendChar$IF_TRUE1}}
@String.appendChar.EQ.50 // 17013
D=A // 17014
@SP // 17015
AM=M+1 // 17016
A=A-1 // 17017
M=D // 17018
@THIS // 17019
A=M+1 // 17020
A=A+1 // 17021
D=M // 17022
A=A-1 // 17023
D=M-D // 17024
@DO_EQ // 17025
0;JMP // 17026
(String.appendChar.EQ.50)
@String.appendChar$IF_TRUE1 // 17027
D;JNE // 17028

////GotoInstruction{label='String.appendChar$IF_FALSE1}
// goto String.appendChar$IF_FALSE1
@String.appendChar$IF_FALSE1 // 17029
0;JMP // 17030

////LabelInstruction{label='String.appendChar$IF_TRUE1}
// label String.appendChar$IF_TRUE1
(String.appendChar$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("this 2"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "ADD"
//)], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 17031
A=M+1 // 17032
A=A+1 // 17033
D=M // 17034
D=D+M // 17035
@SP // 17036
AM=M+1 // 17037
A=A-1 // 17038
M=D // 17039
// call Array.new
@6 // 17040
D=A // 17041
@14 // 17042
M=D // 17043
@Array.new // 17044
D=A // 17045
@13 // 17046
M=D // 17047
@String.appendChar.ret.0 // 17048
D=A // 17049
@CALL // 17050
0;JMP // 17051
(String.appendChar.ret.0)
@SP // 17052
AM=M-1 // 17053
D=M // 17054
@LCL // 17055
A=M // 17056
M=D // 17057

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("local 0"), PushInstruction("this 1")], call=CallInstruction{Memory.copy}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 17058
A=M // 17059
D=M // 17060
@SP // 17061
AM=M+1 // 17062
A=A-1 // 17063
M=D // 17064
@LCL // 17065
A=M // 17066
D=M // 17067
@SP // 17068
AM=M+1 // 17069
A=A-1 // 17070
M=D // 17071
@THIS // 17072
A=M+1 // 17073
D=M // 17074
@SP // 17075
AM=M+1 // 17076
A=A-1 // 17077
M=D // 17078
// call Memory.copy
@8 // 17079
D=A // 17080
@14 // 17081
M=D // 17082
@Memory.copy // 17083
D=A // 17084
@13 // 17085
M=D // 17086
@String.appendChar.ret.1 // 17087
D=A // 17088
@CALL // 17089
0;JMP // 17090
(String.appendChar.ret.1)
@SP // 17091
M=M-1 // 17092

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 17093
A=M // 17094
D=M // 17095
@SP // 17096
AM=M+1 // 17097
A=A-1 // 17098
M=D // 17099
// call Array.dispose
@6 // 17100
D=A // 17101
@14 // 17102
M=D // 17103
@Array.dispose // 17104
D=A // 17105
@13 // 17106
M=D // 17107
@String.appendChar.ret.2 // 17108
D=A // 17109
@CALL // 17110
0;JMP // 17111
(String.appendChar.ret.2)
@SP // 17112
M=M-1 // 17113

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("this 2"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 17114
A=M+1 // 17115
A=A+1 // 17116
D=M // 17117
@THIS // 17118
A=M+1 // 17119
A=A+1 // 17120
M=D+M // 17121

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=this 0}
//}

@LCL // 17122
A=M // 17123
D=M // 17124
@THIS // 17125
A=M // 17126
M=D // 17127

////LabelInstruction{label='String.appendChar$IF_FALSE1}
// label String.appendChar$IF_FALSE1
(String.appendChar$IF_FALSE1)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("this 1"),
//    binaryOp: "ADD"
//)}
@THIS // 17128
A=M+1 // 17129
D=M // 17130
A=A-1 // 17131
D=D+M // 17132
@SP // 17133
AM=M+1 // 17134
A=A-1 // 17135
M=D // 17136
@ARG // 17137
A=M+1 // 17138
D=M // 17139
@SP // 17140
AM=M-1 // 17141
A=M // 17142
M=D // 17143

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("this 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 17144
A=M+1 // 17145
M=M+1 // 17146

////PushInstruction("pointer 0")
@3 // 17147
D=M // 17148
@SP // 17149
AM=M+1 // 17150
A=A-1 // 17151
M=D // 17152
@RETURN // 17153
0;JMP // 17154

////FunctionInstruction{functionName='Main.render', numLocals=28, funcMapping={Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.getFourFifths=4}}
// function Main.render with 28
(Main.render)
@28 // 17155
D=A // 17156
@SP // 17157
AM=D+M // 17158
A=A-1 // 17159
M=0 // 17160
A=A-1 // 17161
M=0 // 17162
A=A-1 // 17163
M=0 // 17164
A=A-1 // 17165
M=0 // 17166
A=A-1 // 17167
M=0 // 17168
A=A-1 // 17169
M=0 // 17170
A=A-1 // 17171
M=0 // 17172
A=A-1 // 17173
M=0 // 17174
A=A-1 // 17175
M=0 // 17176
A=A-1 // 17177
M=0 // 17178
A=A-1 // 17179
M=0 // 17180
A=A-1 // 17181
M=0 // 17182
A=A-1 // 17183
M=0 // 17184
A=A-1 // 17185
M=0 // 17186
A=A-1 // 17187
M=0 // 17188
A=A-1 // 17189
M=0 // 17190
A=A-1 // 17191
M=0 // 17192
A=A-1 // 17193
M=0 // 17194
A=A-1 // 17195
M=0 // 17196
A=A-1 // 17197
M=0 // 17198
A=A-1 // 17199
M=0 // 17200
A=A-1 // 17201
M=0 // 17202
A=A-1 // 17203
M=0 // 17204
A=A-1 // 17205
M=0 // 17206
A=A-1 // 17207
M=0 // 17208
A=A-1 // 17209
M=0 // 17210
A=A-1 // 17211
M=0 // 17212
A=A-1 // 17213
M=0 // 17214

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}}], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 12}
//}

@ARG // 17215
A=M // 17216
D=M // 17217
@SP // 17218
AM=M+1 // 17219
A=A-1 // 17220
M=D // 17221
// call Scene.getWidth
@6 // 17222
D=A // 17223
@14 // 17224
M=D // 17225
@Scene.getWidth // 17226
D=A // 17227
@13 // 17228
M=D // 17229
@Main.render.ret.0 // 17230
D=A // 17231
@CALL // 17232
0;JMP // 17233
(Main.render.ret.0)
// call Array.new
@6 // 17234
D=A // 17235
@14 // 17236
M=D // 17237
@Array.new // 17238
D=A // 17239
@13 // 17240
M=D // 17241
@Main.render.ret.1 // 17242
D=A // 17243
@CALL // 17244
0;JMP // 17245
(Main.render.ret.1)
@LCL // 17246
D=M // 17247
@12 // 17248
A=D+A // 17249
D=A // 17250
@R13 // 17251
M=D // 17252
@SP // 17253
AM=M-1 // 17254
D=M // 17255
@R13 // 17256
A=M // 17257
M=D // 17258

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}}], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 13}
//}

@ARG // 17259
A=M // 17260
D=M // 17261
@SP // 17262
AM=M+1 // 17263
A=A-1 // 17264
M=D // 17265
// call Scene.getWidth
@6 // 17266
D=A // 17267
@14 // 17268
M=D // 17269
@Scene.getWidth // 17270
D=A // 17271
@13 // 17272
M=D // 17273
@Main.render.ret.2 // 17274
D=A // 17275
@CALL // 17276
0;JMP // 17277
(Main.render.ret.2)
// call Array.new
@6 // 17278
D=A // 17279
@14 // 17280
M=D // 17281
@Array.new // 17282
D=A // 17283
@13 // 17284
M=D // 17285
@Main.render.ret.3 // 17286
D=A // 17287
@CALL // 17288
0;JMP // 17289
(Main.render.ret.3)
@LCL // 17290
D=M // 17291
@13 // 17292
A=D+A // 17293
D=A // 17294
@R13 // 17295
M=D // 17296
@SP // 17297
AM=M-1 // 17298
D=M // 17299
@R13 // 17300
A=M // 17301
M=D // 17302

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 17303
D=M // 17304
@15 // 17305
A=D+A // 17306
M=0 // 17307

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 17308
D=M // 17309
@11 // 17310
A=D+A // 17311
M=0 // 17312

////LabelInstruction{label='Main.render_WHILE_EXP1}
// label Main.render_WHILE_EXP1
(Main.render_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 11"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END1}}
@Main.render.LT.51 // 17313
D=A // 17314
@SP // 17315
AM=M+1 // 17316
A=A-1 // 17317
M=D // 17318
@LCL // 17319
D=M // 17320
@11 // 17321
A=D+A // 17322
D=M // 17323
@SP // 17324
AM=M+1 // 17325
A=A-1 // 17326
M=D // 17327
@ARG // 17328
A=M // 17329
D=M // 17330
@SP // 17331
AM=M+1 // 17332
A=A-1 // 17333
M=D // 17334
// call Scene.getWidth
@6 // 17335
D=A // 17336
@14 // 17337
M=D // 17338
@Scene.getWidth // 17339
D=A // 17340
@13 // 17341
M=D // 17342
@Main.render.ret.4 // 17343
D=A // 17344
@CALL // 17345
0;JMP // 17346
(Main.render.ret.4)
@SP // 17347
AM=M-1 // 17348
D=M // 17349
@SP // 17350
AM=M-1 // 17351
D=M-D // 17352
@DO_LT // 17353
0;JMP // 17354
(Main.render.LT.51)
D=!D // 17355
@Main.render_WHILE_END1 // 17356
D;JNE // 17357

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 12"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 17358
D=M // 17359
@12 // 17360
A=D+A // 17361
D=M // 17362
A=A-1 // 17363
D=D+M // 17364
@SP // 17365
AM=M+1 // 17366
A=A-1 // 17367
M=D // 17368
D=0 // 17369
@SP // 17370
AM=M-1 // 17371
A=M // 17372
M=D // 17373

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 17374
D=M // 17375
@13 // 17376
A=D+A // 17377
D=M // 17378
A=A-1 // 17379
A=A-1 // 17380
D=D+M // 17381
@SP // 17382
AM=M+1 // 17383
A=A-1 // 17384
M=D // 17385
D=0 // 17386
@SP // 17387
AM=M-1 // 17388
A=M // 17389
M=D // 17390

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 11"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 17391
D=M // 17392
@11 // 17393
A=D+A // 17394
M=M+1 // 17395

////GotoInstruction{label='Main.render_WHILE_EXP1}
// goto Main.render_WHILE_EXP1
@Main.render_WHILE_EXP1 // 17396
0;JMP // 17397

////LabelInstruction{label='Main.render_WHILE_END1}
// label Main.render_WHILE_END1
(Main.render_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.getOneHalf}}
//  pop:  PopInstruction{address=local 0}
//}

// call Main.getOneHalf
@5 // 17398
D=A // 17399
@14 // 17400
M=D // 17401
@Main.getOneHalf // 17402
D=A // 17403
@13 // 17404
M=D // 17405
@Main.render.ret.5 // 17406
D=A // 17407
@CALL // 17408
0;JMP // 17409
(Main.render.ret.5)
@SP // 17410
AM=M-1 // 17411
D=M // 17412
@LCL // 17413
A=M // 17414
M=D // 17415

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@SP // 17416
AM=M+1 // 17417
A=A-1 // 17418
M=0 // 17419
// call Number.new
@6 // 17420
D=A // 17421
@14 // 17422
M=D // 17423
@Number.new // 17424
D=A // 17425
@13 // 17426
M=D // 17427
@Main.render.ret.6 // 17428
D=A // 17429
@CALL // 17430
0;JMP // 17431
(Main.render.ret.6)
@SP // 17432
AM=M-1 // 17433
D=M // 17434
@LCL // 17435
A=M+1 // 17436
M=D // 17437

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 2}
//}

@SP // 17438
AM=M+1 // 17439
A=A-1 // 17440
M=1 // 17441
// call Number.new
@6 // 17442
D=A // 17443
@14 // 17444
M=D // 17445
@Number.new // 17446
D=A // 17447
@13 // 17448
M=D // 17449
@Main.render.ret.7 // 17450
D=A // 17451
@CALL // 17452
0;JMP // 17453
(Main.render.ret.7)
@SP // 17454
AM=M-1 // 17455
D=M // 17456
@LCL // 17457
A=M+1 // 17458
A=A+1 // 17459
M=D // 17460

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 3}
//}

@2 // 17461
D=A // 17462
@SP // 17463
AM=M+1 // 17464
A=A-1 // 17465
M=D // 17466
// call Number.new
@6 // 17467
D=A // 17468
@14 // 17469
M=D // 17470
@Number.new // 17471
D=A // 17472
@13 // 17473
M=D // 17474
@Main.render.ret.8 // 17475
D=A // 17476
@CALL // 17477
0;JMP // 17478
(Main.render.ret.8)
@SP // 17479
AM=M-1 // 17480
D=M // 17481
@LCL // 17482
A=M+1 // 17483
A=A+1 // 17484
A=A+1 // 17485
M=D // 17486

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 4}
//}

@3 // 17487
D=A // 17488
@SP // 17489
AM=M+1 // 17490
A=A-1 // 17491
M=D // 17492
// call Number.new
@6 // 17493
D=A // 17494
@14 // 17495
M=D // 17496
@Number.new // 17497
D=A // 17498
@13 // 17499
M=D // 17500
@Main.render.ret.9 // 17501
D=A // 17502
@CALL // 17503
0;JMP // 17504
(Main.render.ret.9)
@LCL // 17505
D=M // 17506
@4 // 17507
A=D+A // 17508
D=A // 17509
@R13 // 17510
M=D // 17511
@SP // 17512
AM=M-1 // 17513
D=M // 17514
@R13 // 17515
A=M // 17516
M=D // 17517

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 5}
//}

@5 // 17518
D=A // 17519
@SP // 17520
AM=M+1 // 17521
A=A-1 // 17522
M=D // 17523
// call Number.new
@6 // 17524
D=A // 17525
@14 // 17526
M=D // 17527
@Number.new // 17528
D=A // 17529
@13 // 17530
M=D // 17531
@Main.render.ret.10 // 17532
D=A // 17533
@CALL // 17534
0;JMP // 17535
(Main.render.ret.10)
@LCL // 17536
D=M // 17537
@5 // 17538
A=D+A // 17539
D=A // 17540
@R13 // 17541
M=D // 17542
@SP // 17543
AM=M-1 // 17544
D=M // 17545
@R13 // 17546
A=M // 17547
M=D // 17548

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 7")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 6}
//}

@7 // 17549
D=A // 17550
@SP // 17551
AM=M+1 // 17552
A=A-1 // 17553
M=D // 17554
// call Number.new
@6 // 17555
D=A // 17556
@14 // 17557
M=D // 17558
@Number.new // 17559
D=A // 17560
@13 // 17561
M=D // 17562
@Main.render.ret.11 // 17563
D=A // 17564
@CALL // 17565
0;JMP // 17566
(Main.render.ret.11)
@LCL // 17567
D=M // 17568
@6 // 17569
A=D+A // 17570
D=A // 17571
@R13 // 17572
M=D // 17573
@SP // 17574
AM=M-1 // 17575
D=M // 17576
@R13 // 17577
A=M // 17578
M=D // 17579

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 7}
//}

@16 // 17580
D=A // 17581
@SP // 17582
AM=M+1 // 17583
A=A-1 // 17584
M=D // 17585
// call Number.new
@6 // 17586
D=A // 17587
@14 // 17588
M=D // 17589
@Number.new // 17590
D=A // 17591
@13 // 17592
M=D // 17593
@Main.render.ret.12 // 17594
D=A // 17595
@CALL // 17596
0;JMP // 17597
(Main.render.ret.12)
@LCL // 17598
D=M // 17599
@7 // 17600
A=D+A // 17601
D=A // 17602
@R13 // 17603
M=D // 17604
@SP // 17605
AM=M-1 // 17606
D=M // 17607
@R13 // 17608
A=M // 17609
M=D // 17610

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 8}
//}

@SP // 17611
AM=M+1 // 17612
A=A-1 // 17613
M=-1 // 17614
// call Number.new
@6 // 17615
D=A // 17616
@14 // 17617
M=D // 17618
@Number.new // 17619
D=A // 17620
@13 // 17621
M=D // 17622
@Main.render.ret.13 // 17623
D=A // 17624
@CALL // 17625
0;JMP // 17626
(Main.render.ret.13)
@LCL // 17627
D=M // 17628
@8 // 17629
A=D+A // 17630
D=A // 17631
@R13 // 17632
M=D // 17633
@SP // 17634
AM=M-1 // 17635
D=M // 17636
@R13 // 17637
A=M // 17638
M=D // 17639

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 17640
D=M // 17641
@9 // 17642
A=D+A // 17643
M=0 // 17644

////LabelInstruction{label='Main.render_WHILE_EXP2}
// label Main.render_WHILE_EXP2
(Main.render_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 9"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getHeight}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END2}}
@Main.render.LT.52 // 17645
D=A // 17646
@SP // 17647
AM=M+1 // 17648
A=A-1 // 17649
M=D // 17650
@LCL // 17651
D=M // 17652
@9 // 17653
A=D+A // 17654
D=M // 17655
@SP // 17656
AM=M+1 // 17657
A=A-1 // 17658
M=D // 17659
@ARG // 17660
A=M // 17661
D=M // 17662
@SP // 17663
AM=M+1 // 17664
A=A-1 // 17665
M=D // 17666
// call Scene.getHeight
@6 // 17667
D=A // 17668
@14 // 17669
M=D // 17670
@Scene.getHeight // 17671
D=A // 17672
@13 // 17673
M=D // 17674
@Main.render.ret.14 // 17675
D=A // 17676
@CALL // 17677
0;JMP // 17678
(Main.render.ret.14)
@SP // 17679
AM=M-1 // 17680
D=M // 17681
@SP // 17682
AM=M-1 // 17683
D=M-D // 17684
@DO_LT // 17685
0;JMP // 17686
(Main.render.LT.52)
D=!D // 17687
@Main.render_WHILE_END2 // 17688
D;JNE // 17689

////PushPopPair {
//  push: UnaryPushGroup(    BinaryPushGroup(
//        left:
//CallGroup{pushes=[CallGroup{pushes=[PushInstruction("local 9"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}}, PushInstruction("constant 2")], call=CallInstruction{Math.multiply}},
//        right:
//            PushInstruction("local 9"),
//        binaryOp: "EQ"
//    ),
//NOT)
//  pop:  PopInstruction{address=local 26}
//}

@Main.render.EQ.53 // 17690
D=A // 17691
@SP // 17692
AM=M+1 // 17693
A=A-1 // 17694
M=D // 17695
@LCL // 17696
D=M // 17697
@9 // 17698
A=D+A // 17699
D=M // 17700
@SP // 17701
AM=M+1 // 17702
A=A-1 // 17703
M=D // 17704
@2 // 17705
D=A // 17706
@SP // 17707
AM=M+1 // 17708
A=A-1 // 17709
M=D // 17710
// call Math.divide
@7 // 17711
D=A // 17712
@14 // 17713
M=D // 17714
@Math.divide // 17715
D=A // 17716
@13 // 17717
M=D // 17718
@Main.render.ret.15 // 17719
D=A // 17720
@CALL // 17721
0;JMP // 17722
(Main.render.ret.15)
@2 // 17723
D=A // 17724
@SP // 17725
AM=M+1 // 17726
A=A-1 // 17727
M=D // 17728
// call Math.multiply
@7 // 17729
D=A // 17730
@14 // 17731
M=D // 17732
@Math.multiply // 17733
D=A // 17734
@13 // 17735
M=D // 17736
@Main.render.ret.16 // 17737
D=A // 17738
@CALL // 17739
0;JMP // 17740
(Main.render.ret.16)
@LCL // 17741
D=M // 17742
@9 // 17743
A=D+A // 17744
D=M // 17745
@SP // 17746
AM=M-1 // 17747
D=M-D // 17748
@DO_EQ // 17749
0;JMP // 17750
(Main.render.EQ.53)
@SP // 17751
AM=M+1 // 17752
A=A-1 // 17753
M=D // 17754
@SP // 17755
A=M-1 // 17756
M=!D // 17757
@LCL // 17758
D=M // 17759
@26 // 17760
A=D+A // 17761
D=A // 17762
@R13 // 17763
M=D // 17764
@SP // 17765
AM=M-1 // 17766
D=M // 17767
@R13 // 17768
A=M // 17769
M=D // 17770

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=local 27}
//}

@LCL // 17771
D=M // 17772
@27 // 17773
A=D+A // 17774
M=-1 // 17775

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE1}}
@LCL // 17776
D=M // 17777
@26 // 17778
A=D+A // 17779
D=M // 17780
@Main.render$IF_TRUE1 // 17781
D;JNE // 17782

////GotoInstruction{label='Main.render$IF_FALSE1}
// goto Main.render$IF_FALSE1
@Main.render$IF_FALSE1 // 17783
0;JMP // 17784

////LabelInstruction{label='Main.render$IF_TRUE1}
// label Main.render$IF_TRUE1
(Main.render$IF_TRUE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@ARG // 17785
A=M // 17786
D=M // 17787
@SP // 17788
AM=M+1 // 17789
A=A-1 // 17790
M=D // 17791
// call Scene.getWidth
@6 // 17792
D=A // 17793
@14 // 17794
M=D // 17795
@Scene.getWidth // 17796
D=A // 17797
@13 // 17798
M=D // 17799
@Main.render.ret.17 // 17800
D=A // 17801
@CALL // 17802
0;JMP // 17803
(Main.render.ret.17)
@SP // 17804
AM=M-1 // 17805
D=M // 17806
D=D-1 // 17807
@SP // 17808
AM=M+1 // 17809
A=A-1 // 17810
M=D // 17811
@LCL // 17812
D=M // 17813
@10 // 17814
A=D+A // 17815
D=A // 17816
@R13 // 17817
M=D // 17818
@SP // 17819
AM=M-1 // 17820
D=M // 17821
@R13 // 17822
A=M // 17823
M=D // 17824

////GotoInstruction{label='Main.render$IF_END1}
// goto Main.render$IF_END1
@Main.render$IF_END1 // 17825
0;JMP // 17826

////LabelInstruction{label='Main.render$IF_FALSE1}
// label Main.render$IF_FALSE1
(Main.render$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 17827
D=M // 17828
@10 // 17829
A=D+A // 17830
M=0 // 17831

////LabelInstruction{label='Main.render$IF_END1}
// label Main.render$IF_END1
(Main.render$IF_END1)

////LabelInstruction{label='Main.render_WHILE_EXP3}
// label Main.render_WHILE_EXP3
(Main.render_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    PushInstruction("local 27"),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END3}}
@LCL // 17832
D=M // 17833
@27 // 17834
A=D+A // 17835
D=!M // 17836
@Main.render_WHILE_END3 // 17837
D;JNE // 17838

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 10"), PushInstruction("local 9"), PushInstruction("local 8"), PushInstruction("local 2"), PushInstruction("local 3"), PushInstruction("local 0")], call=CallInstruction{Main.getRawPixelColor}}
//  pop:  PopInstruction{address=local 24}
//}

@ARG // 17839
A=M // 17840
D=M // 17841
@SP // 17842
AM=M+1 // 17843
A=A-1 // 17844
M=D // 17845
@LCL // 17846
D=M // 17847
@10 // 17848
A=D+A // 17849
D=M // 17850
@SP // 17851
AM=M+1 // 17852
A=A-1 // 17853
M=D // 17854
@LCL // 17855
D=M // 17856
@9 // 17857
A=D+A // 17858
D=M // 17859
@SP // 17860
AM=M+1 // 17861
A=A-1 // 17862
M=D // 17863
@LCL // 17864
D=M // 17865
@8 // 17866
A=D+A // 17867
D=M // 17868
@SP // 17869
AM=M+1 // 17870
A=A-1 // 17871
M=D // 17872
@LCL // 17873
A=M+1 // 17874
A=A+1 // 17875
D=M // 17876
@SP // 17877
AM=M+1 // 17878
A=A-1 // 17879
M=D // 17880
@LCL // 17881
A=M+1 // 17882
A=A+1 // 17883
A=A+1 // 17884
D=M // 17885
@SP // 17886
AM=M+1 // 17887
A=A-1 // 17888
M=D // 17889
@LCL // 17890
A=M // 17891
D=M // 17892
@SP // 17893
AM=M+1 // 17894
A=A-1 // 17895
M=D // 17896
// call Main.getRawPixelColor
@12 // 17897
D=A // 17898
@14 // 17899
M=D // 17900
@Main.getRawPixelColor // 17901
D=A // 17902
@13 // 17903
M=D // 17904
@Main.render.ret.18 // 17905
D=A // 17906
@CALL // 17907
0;JMP // 17908
(Main.render.ret.18)
@LCL // 17909
D=M // 17910
@24 // 17911
A=D+A // 17912
D=A // 17913
@R13 // 17914
M=D // 17915
@SP // 17916
AM=M-1 // 17917
D=M // 17918
@R13 // 17919
A=M // 17920
M=D // 17921

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17922
D=M // 17923
@24 // 17924
A=D+A // 17925
D=M // 17926
@SP // 17927
AM=M+1 // 17928
A=A-1 // 17929
M=D // 17930
// call Number.do_sqrt
@6 // 17931
D=A // 17932
@14 // 17933
M=D // 17934
@Number.do_sqrt // 17935
D=A // 17936
@13 // 17937
M=D // 17938
@Main.render.ret.19 // 17939
D=A // 17940
@CALL // 17941
0;JMP // 17942
(Main.render.ret.19)
@SP // 17943
M=M-1 // 17944

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.new_from_int_frac}}
//  pop:  PopInstruction{address=local 25}
//}

@LCL // 17945
D=M // 17946
@15 // 17947
A=D+A // 17948
D=M // 17949
@SP // 17950
AM=M+1 // 17951
A=A-1 // 17952
M=D // 17953
// call Number.new_from_int_frac
@6 // 17954
D=A // 17955
@14 // 17956
M=D // 17957
@Number.new_from_int_frac // 17958
D=A // 17959
@13 // 17960
M=D // 17961
@Main.render.ret.20 // 17962
D=A // 17963
@CALL // 17964
0;JMP // 17965
(Main.render.ret.20)
@LCL // 17966
D=M // 17967
@25 // 17968
A=D+A // 17969
D=A // 17970
@R13 // 17971
M=D // 17972
@SP // 17973
AM=M-1 // 17974
D=M // 17975
@R13 // 17976
A=M // 17977
M=D // 17978

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 25")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17979
D=M // 17980
@24 // 17981
A=D+A // 17982
D=M // 17983
@SP // 17984
AM=M+1 // 17985
A=A-1 // 17986
M=D // 17987
@LCL // 17988
D=M // 17989
@25 // 17990
A=D+A // 17991
D=M // 17992
@SP // 17993
AM=M+1 // 17994
A=A-1 // 17995
M=D // 17996
// call Number.do_add
@7 // 17997
D=A // 17998
@14 // 17999
M=D // 18000
@Number.do_add // 18001
D=A // 18002
@13 // 18003
M=D // 18004
@Main.render.ret.21 // 18005
D=A // 18006
@CALL // 18007
0;JMP // 18008
(Main.render.ret.21)
@SP // 18009
M=M-1 // 18010

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 25")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18011
D=M // 18012
@25 // 18013
A=D+A // 18014
D=M // 18015
@SP // 18016
AM=M+1 // 18017
A=A-1 // 18018
M=D // 18019
// call Number.dispose
@6 // 18020
D=A // 18021
@14 // 18022
M=D // 18023
@Number.dispose // 18024
D=A // 18025
@13 // 18026
M=D // 18027
@Main.render.ret.22 // 18028
D=A // 18029
@CALL // 18030
0;JMP // 18031
(Main.render.ret.22)
@SP // 18032
M=M-1 // 18033

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 12"),
//            right:
//                PushInstruction("local 10"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Number.new_from_int_frac}}
//  pop:  PopInstruction{address=local 25}
//}

@LCL // 18034
D=M // 18035
@12 // 18036
A=D+A // 18037
D=M // 18038
A=A-1 // 18039
A=A-1 // 18040
A=D+M // 18041
D=M // 18042
@SP // 18043
AM=M+1 // 18044
A=A-1 // 18045
M=D // 18046
// call Number.new_from_int_frac
@6 // 18047
D=A // 18048
@14 // 18049
M=D // 18050
@Number.new_from_int_frac // 18051
D=A // 18052
@13 // 18053
M=D // 18054
@Main.render.ret.23 // 18055
D=A // 18056
@CALL // 18057
0;JMP // 18058
(Main.render.ret.23)
@LCL // 18059
D=M // 18060
@25 // 18061
A=D+A // 18062
D=A // 18063
@R13 // 18064
M=D // 18065
@SP // 18066
AM=M-1 // 18067
D=M // 18068
@R13 // 18069
A=M // 18070
M=D // 18071

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 25")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18072
D=M // 18073
@24 // 18074
A=D+A // 18075
D=M // 18076
@SP // 18077
AM=M+1 // 18078
A=A-1 // 18079
M=D // 18080
@LCL // 18081
D=M // 18082
@25 // 18083
A=D+A // 18084
D=M // 18085
@SP // 18086
AM=M+1 // 18087
A=A-1 // 18088
M=D // 18089
// call Number.do_add
@7 // 18090
D=A // 18091
@14 // 18092
M=D // 18093
@Number.do_add // 18094
D=A // 18095
@13 // 18096
M=D // 18097
@Main.render.ret.24 // 18098
D=A // 18099
@CALL // 18100
0;JMP // 18101
(Main.render.ret.24)
@SP // 18102
M=M-1 // 18103

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 25")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18104
D=M // 18105
@25 // 18106
A=D+A // 18107
D=M // 18108
@SP // 18109
AM=M+1 // 18110
A=A-1 // 18111
M=D // 18112
// call Number.dispose
@6 // 18113
D=A // 18114
@14 // 18115
M=D // 18116
@Number.dispose // 18117
D=A // 18118
@13 // 18119
M=D // 18120
@Main.render.ret.25 // 18121
D=A // 18122
@CALL // 18123
0;JMP // 18124
(Main.render.ret.25)
@SP // 18125
M=M-1 // 18126

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 0")], call=CallInstruction{Number.cmp}}
//  pop:  PopInstruction{address=local 17}
//}

@LCL // 18127
D=M // 18128
@24 // 18129
A=D+A // 18130
D=M // 18131
@SP // 18132
AM=M+1 // 18133
A=A-1 // 18134
M=D // 18135
@LCL // 18136
A=M // 18137
D=M // 18138
@SP // 18139
AM=M+1 // 18140
A=A-1 // 18141
M=D // 18142
// call Number.cmp
@7 // 18143
D=A // 18144
@14 // 18145
M=D // 18146
@Number.cmp // 18147
D=A // 18148
@13 // 18149
M=D // 18150
@Main.render.ret.26 // 18151
D=A // 18152
@CALL // 18153
0;JMP // 18154
(Main.render.ret.26)
@LCL // 18155
D=M // 18156
@17 // 18157
A=D+A // 18158
D=A // 18159
@R13 // 18160
M=D // 18161
@SP // 18162
AM=M-1 // 18163
D=M // 18164
@R13 // 18165
A=M // 18166
M=D // 18167

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 17"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 17"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//)
//  pop:  PopInstruction{address=local 23}
//}

@Main.render.GT.54 // 18168
D=A // 18169
@SP // 18170
AM=M+1 // 18171
A=A-1 // 18172
M=D // 18173
@LCL // 18174
D=M // 18175
@17 // 18176
A=D+A // 18177
D=M // 18178
@DO_GT // 18179
0;JMP // 18180
(Main.render.GT.54)
@SP // 18181
AM=M+1 // 18182
A=A-1 // 18183
M=D // 18184
@Main.render.EQ.55 // 18185
D=A // 18186
@SP // 18187
AM=M+1 // 18188
A=A-1 // 18189
M=D // 18190
@LCL // 18191
D=M // 18192
@17 // 18193
A=D+A // 18194
D=M // 18195
@DO_EQ // 18196
0;JMP // 18197
(Main.render.EQ.55)
@SP // 18198
AM=M-1 // 18199
D=D|M // 18200
@SP // 18201
AM=M+1 // 18202
A=A-1 // 18203
M=D // 18204
@LCL // 18205
D=M // 18206
@23 // 18207
A=D+A // 18208
D=A // 18209
@R13 // 18210
M=D // 18211
@SP // 18212
AM=M-1 // 18213
D=M // 18214
@R13 // 18215
A=M // 18216
M=D // 18217

////ConditionalGroup{push=PushInstruction("local 23"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE2}}
@LCL // 18218
D=M // 18219
@23 // 18220
A=D+A // 18221
D=M // 18222
@Main.render$IF_TRUE2 // 18223
D;JNE // 18224

////GotoInstruction{label='Main.render$IF_FALSE2}
// goto Main.render$IF_FALSE2
@Main.render$IF_FALSE2 // 18225
0;JMP // 18226

////LabelInstruction{label='Main.render$IF_TRUE2}
// label Main.render$IF_TRUE2
(Main.render$IF_TRUE2)

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=local 16}
//}

@LCL // 18227
A=M+1 // 18228
A=A+1 // 18229
D=M // 18230
@SP // 18231
AM=M+1 // 18232
A=A-1 // 18233
M=D // 18234
@LCL // 18235
D=M // 18236
@16 // 18237
A=D+A // 18238
D=A // 18239
@R13 // 18240
M=D // 18241
@SP // 18242
AM=M-1 // 18243
D=M // 18244
@R13 // 18245
A=M // 18246
M=D // 18247

////GotoInstruction{label='Main.render$IF_END2}
// goto Main.render$IF_END2
@Main.render$IF_END2 // 18248
0;JMP // 18249

////LabelInstruction{label='Main.render$IF_FALSE2}
// label Main.render$IF_FALSE2
(Main.render$IF_FALSE2)

////PushPopPair {
//  push: PushInstruction("local 1")
//  pop:  PopInstruction{address=local 16}
//}

@LCL // 18250
A=M+1 // 18251
D=M // 18252
@SP // 18253
AM=M+1 // 18254
A=A-1 // 18255
M=D // 18256
@LCL // 18257
D=M // 18258
@16 // 18259
A=D+A // 18260
D=A // 18261
@R13 // 18262
M=D // 18263
@SP // 18264
AM=M-1 // 18265
D=M // 18266
@R13 // 18267
A=M // 18268
M=D // 18269

////LabelInstruction{label='Main.render$IF_END2}
// label Main.render$IF_END2
(Main.render$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 18}
//}

@LCL // 18270
D=M // 18271
@24 // 18272
A=D+A // 18273
D=M // 18274
@SP // 18275
AM=M+1 // 18276
A=A-1 // 18277
M=D // 18278
// call Number.clone
@6 // 18279
D=A // 18280
@14 // 18281
M=D // 18282
@Number.clone // 18283
D=A // 18284
@13 // 18285
M=D // 18286
@Main.render.ret.27 // 18287
D=A // 18288
@CALL // 18289
0;JMP // 18290
(Main.render.ret.27)
@LCL // 18291
D=M // 18292
@18 // 18293
A=D+A // 18294
D=A // 18295
@R13 // 18296
M=D // 18297
@SP // 18298
AM=M-1 // 18299
D=M // 18300
@R13 // 18301
A=M // 18302
M=D // 18303

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18"), PushInstruction("local 16")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18304
D=M // 18305
@18 // 18306
A=D+A // 18307
D=M // 18308
@SP // 18309
AM=M+1 // 18310
A=A-1 // 18311
M=D // 18312
@LCL // 18313
D=M // 18314
@16 // 18315
A=D+A // 18316
D=M // 18317
@SP // 18318
AM=M+1 // 18319
A=A-1 // 18320
M=D // 18321
// call Number.do_sub
@7 // 18322
D=A // 18323
@14 // 18324
M=D // 18325
@Number.do_sub // 18326
D=A // 18327
@13 // 18328
M=D // 18329
@Main.render.ret.28 // 18330
D=A // 18331
@CALL // 18332
0;JMP // 18333
(Main.render.ret.28)
@SP // 18334
M=M-1 // 18335

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18"), PushInstruction("local 7")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18336
D=M // 18337
@18 // 18338
A=D+A // 18339
D=M // 18340
@SP // 18341
AM=M+1 // 18342
A=A-1 // 18343
M=D // 18344
@LCL // 18345
D=M // 18346
@7 // 18347
A=D+A // 18348
D=M // 18349
@SP // 18350
AM=M+1 // 18351
A=A-1 // 18352
M=D // 18353
// call Number.do_div
@7 // 18354
D=A // 18355
@14 // 18356
M=D // 18357
@Number.do_div // 18358
D=A // 18359
@13 // 18360
M=D // 18361
@Main.render.ret.29 // 18362
D=A // 18363
@CALL // 18364
0;JMP // 18365
(Main.render.ret.29)
@SP // 18366
M=M-1 // 18367

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE3}}
@Main.render.LT.56 // 18368
D=A // 18369
@SP // 18370
AM=M+1 // 18371
A=A-1 // 18372
M=D // 18373
@LCL // 18374
D=M // 18375
@10 // 18376
A=D+A // 18377
D=M // 18378
@SP // 18379
AM=M+1 // 18380
A=A-1 // 18381
M=D+1 // 18382
@ARG // 18383
A=M // 18384
D=M // 18385
@SP // 18386
AM=M+1 // 18387
A=A-1 // 18388
M=D // 18389
// call Scene.getWidth
@6 // 18390
D=A // 18391
@14 // 18392
M=D // 18393
@Scene.getWidth // 18394
D=A // 18395
@13 // 18396
M=D // 18397
@Main.render.ret.30 // 18398
D=A // 18399
@CALL // 18400
0;JMP // 18401
(Main.render.ret.30)
@SP // 18402
AM=M-1 // 18403
D=M // 18404
@SP // 18405
AM=M-1 // 18406
D=M-D // 18407
@DO_LT // 18408
0;JMP // 18409
(Main.render.LT.56)
@Main.render$IF_TRUE3 // 18410
D;JNE // 18411

////GotoInstruction{label='Main.render$IF_FALSE3}
// goto Main.render$IF_FALSE3
@Main.render$IF_FALSE3 // 18412
0;JMP // 18413

////LabelInstruction{label='Main.render$IF_TRUE3}
// label Main.render$IF_TRUE3
(Main.render$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 20}
//}

@LCL // 18414
D=M // 18415
@18 // 18416
A=D+A // 18417
D=M // 18418
@SP // 18419
AM=M+1 // 18420
A=A-1 // 18421
M=D // 18422
// call Number.clone
@6 // 18423
D=A // 18424
@14 // 18425
M=D // 18426
@Number.clone // 18427
D=A // 18428
@13 // 18429
M=D // 18430
@Main.render.ret.31 // 18431
D=A // 18432
@CALL // 18433
0;JMP // 18434
(Main.render.ret.31)
@LCL // 18435
D=M // 18436
@20 // 18437
A=D+A // 18438
D=A // 18439
@R13 // 18440
M=D // 18441
@SP // 18442
AM=M-1 // 18443
D=M // 18444
@R13 // 18445
A=M // 18446
M=D // 18447

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20"), PushInstruction("local 6")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18448
D=M // 18449
@20 // 18450
A=D+A // 18451
D=M // 18452
@SP // 18453
AM=M+1 // 18454
A=A-1 // 18455
M=D // 18456
@LCL // 18457
D=M // 18458
@6 // 18459
A=D+A // 18460
D=M // 18461
@SP // 18462
AM=M+1 // 18463
A=A-1 // 18464
M=D // 18465
// call Number.do_mul
@7 // 18466
D=A // 18467
@14 // 18468
M=D // 18469
@Number.do_mul // 18470
D=A // 18471
@13 // 18472
M=D // 18473
@Main.render.ret.32 // 18474
D=A // 18475
@CALL // 18476
0;JMP // 18477
(Main.render.ret.32)
@SP // 18478
M=M-1 // 18479

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20")], call=CallInstruction{Number.frac_to_i16}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 18480
D=M // 18481
@20 // 18482
A=D+A // 18483
D=M // 18484
@SP // 18485
AM=M+1 // 18486
A=A-1 // 18487
M=D // 18488
// call Number.frac_to_i16
@6 // 18489
D=A // 18490
@14 // 18491
M=D // 18492
@Number.frac_to_i16 // 18493
D=A // 18494
@13 // 18495
M=D // 18496
@Main.render.ret.33 // 18497
D=A // 18498
@CALL // 18499
0;JMP // 18500
(Main.render.ret.33)
@LCL // 18501
D=M // 18502
@15 // 18503
A=D+A // 18504
D=A // 18505
@R13 // 18506
M=D // 18507
@SP // 18508
AM=M-1 // 18509
D=M // 18510
@R13 // 18511
A=M // 18512
M=D // 18513

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18514
D=M // 18515
@20 // 18516
A=D+A // 18517
D=M // 18518
@SP // 18519
AM=M+1 // 18520
A=A-1 // 18521
M=D // 18522
// call Number.dispose
@6 // 18523
D=A // 18524
@14 // 18525
M=D // 18526
@Number.dispose // 18527
D=A // 18528
@13 // 18529
M=D // 18530
@Main.render.ret.34 // 18531
D=A // 18532
@CALL // 18533
0;JMP // 18534
(Main.render.ret.34)
@SP // 18535
M=M-1 // 18536

////LabelInstruction{label='Main.render$IF_FALSE3}
// label Main.render$IF_FALSE3
(Main.render$IF_FALSE3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 9"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getHeight}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE4}}
@Main.render.LT.57 // 18537
D=A // 18538
@SP // 18539
AM=M+1 // 18540
A=A-1 // 18541
M=D // 18542
@LCL // 18543
D=M // 18544
@9 // 18545
A=D+A // 18546
D=M // 18547
@SP // 18548
AM=M+1 // 18549
A=A-1 // 18550
M=D+1 // 18551
@ARG // 18552
A=M // 18553
D=M // 18554
@SP // 18555
AM=M+1 // 18556
A=A-1 // 18557
M=D // 18558
// call Scene.getHeight
@6 // 18559
D=A // 18560
@14 // 18561
M=D // 18562
@Scene.getHeight // 18563
D=A // 18564
@13 // 18565
M=D // 18566
@Main.render.ret.35 // 18567
D=A // 18568
@CALL // 18569
0;JMP // 18570
(Main.render.ret.35)
@SP // 18571
AM=M-1 // 18572
D=M // 18573
@SP // 18574
AM=M-1 // 18575
D=M-D // 18576
@DO_LT // 18577
0;JMP // 18578
(Main.render.LT.57)
@Main.render$IF_TRUE4 // 18579
D;JNE // 18580

////GotoInstruction{label='Main.render$IF_FALSE4}
// goto Main.render$IF_FALSE4
@Main.render$IF_FALSE4 // 18581
0;JMP // 18582

////LabelInstruction{label='Main.render$IF_TRUE4}
// label Main.render$IF_TRUE4
(Main.render$IF_TRUE4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE5}}
@Main.render.GT.58 // 18583
D=A // 18584
@SP // 18585
AM=M+1 // 18586
A=A-1 // 18587
M=D // 18588
@LCL // 18589
D=M // 18590
@10 // 18591
A=D+A // 18592
D=M // 18593
@DO_GT // 18594
0;JMP // 18595
(Main.render.GT.58)
@Main.render$IF_TRUE5 // 18596
D;JNE // 18597

////GotoInstruction{label='Main.render$IF_FALSE5}
// goto Main.render$IF_FALSE5
@Main.render$IF_FALSE5 // 18598
0;JMP // 18599

////LabelInstruction{label='Main.render$IF_TRUE5}
// label Main.render$IF_TRUE5
(Main.render$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 21}
//}

@LCL // 18600
D=M // 18601
@18 // 18602
A=D+A // 18603
D=M // 18604
@SP // 18605
AM=M+1 // 18606
A=A-1 // 18607
M=D // 18608
// call Number.clone
@6 // 18609
D=A // 18610
@14 // 18611
M=D // 18612
@Number.clone // 18613
D=A // 18614
@13 // 18615
M=D // 18616
@Main.render.ret.36 // 18617
D=A // 18618
@CALL // 18619
0;JMP // 18620
(Main.render.ret.36)
@LCL // 18621
D=M // 18622
@21 // 18623
A=D+A // 18624
D=A // 18625
@R13 // 18626
M=D // 18627
@SP // 18628
AM=M-1 // 18629
D=M // 18630
@R13 // 18631
A=M // 18632
M=D // 18633

////ConditionalGroup{push=UnaryPushGroup(    PushInstruction("local 26"),
//NOT), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE6}}
@LCL // 18634
D=M // 18635
@26 // 18636
A=D+A // 18637
D=!M // 18638
@Main.render$IF_TRUE6 // 18639
D;JNE // 18640

////GotoInstruction{label='Main.render$IF_FALSE6}
// goto Main.render$IF_FALSE6
@Main.render$IF_FALSE6 // 18641
0;JMP // 18642

////LabelInstruction{label='Main.render$IF_TRUE6}
// label Main.render$IF_TRUE6
(Main.render$IF_TRUE6)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 21"), PushInstruction("local 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18643
D=M // 18644
@21 // 18645
A=D+A // 18646
D=M // 18647
@SP // 18648
AM=M+1 // 18649
A=A-1 // 18650
M=D // 18651
@LCL // 18652
D=M // 18653
@4 // 18654
A=D+A // 18655
D=M // 18656
@SP // 18657
AM=M+1 // 18658
A=A-1 // 18659
M=D // 18660
// call Number.do_mul
@7 // 18661
D=A // 18662
@14 // 18663
M=D // 18664
@Number.do_mul // 18665
D=A // 18666
@13 // 18667
M=D // 18668
@Main.render.ret.37 // 18669
D=A // 18670
@CALL // 18671
0;JMP // 18672
(Main.render.ret.37)
@SP // 18673
M=M-1 // 18674

////LabelInstruction{label='Main.render$IF_FALSE6}
// label Main.render$IF_FALSE6
(Main.render$IF_FALSE6)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 21")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "SUB"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 18675
D=M // 18676
@13 // 18677
A=D+A // 18678
D=M // 18679
@SP // 18680
AM=M+1 // 18681
A=A-1 // 18682
M=D // 18683
@LCL // 18684
D=M // 18685
@10 // 18686
A=D+A // 18687
D=M // 18688
D=D-1 // 18689
@SP // 18690
AM=M-1 // 18691
D=D+M // 18692
@SP // 18693
AM=M+1 // 18694
A=A-1 // 18695
M=D // 18696
@LCL // 18697
D=M // 18698
@13 // 18699
A=D+A // 18700
D=M // 18701
@SP // 18702
AM=M+1 // 18703
A=A-1 // 18704
M=D // 18705
@LCL // 18706
D=M // 18707
@10 // 18708
A=D+A // 18709
D=M // 18710
D=D-1 // 18711
@SP // 18712
AM=M-1 // 18713
A=D+M // 18714
D=M // 18715
@SP // 18716
AM=M+1 // 18717
A=A-1 // 18718
M=D // 18719
@LCL // 18720
D=M // 18721
@21 // 18722
A=D+A // 18723
D=M // 18724
@SP // 18725
AM=M+1 // 18726
A=A-1 // 18727
M=D // 18728
// call Number.frac_to_i16
@6 // 18729
D=A // 18730
@14 // 18731
M=D // 18732
@Number.frac_to_i16 // 18733
D=A // 18734
@13 // 18735
M=D // 18736
@Main.render.ret.38 // 18737
D=A // 18738
@CALL // 18739
0;JMP // 18740
(Main.render.ret.38)
@SP // 18741
AM=M-1 // 18742
D=M // 18743
@SP // 18744
AM=M-1 // 18745
D=D+M // 18746
@SP // 18747
AM=M-1 // 18748
A=M // 18749
M=D // 18750

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 21")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18751
D=M // 18752
@21 // 18753
A=D+A // 18754
D=M // 18755
@SP // 18756
AM=M+1 // 18757
A=A-1 // 18758
M=D // 18759
// call Number.dispose
@6 // 18760
D=A // 18761
@14 // 18762
M=D // 18763
@Number.dispose // 18764
D=A // 18765
@13 // 18766
M=D // 18767
@Main.render.ret.39 // 18768
D=A // 18769
@CALL // 18770
0;JMP // 18771
(Main.render.ret.39)
@SP // 18772
M=M-1 // 18773

////LabelInstruction{label='Main.render$IF_FALSE5}
// label Main.render$IF_FALSE5
(Main.render$IF_FALSE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 19}
//}

@LCL // 18774
D=M // 18775
@18 // 18776
A=D+A // 18777
D=M // 18778
@SP // 18779
AM=M+1 // 18780
A=A-1 // 18781
M=D // 18782
// call Number.clone
@6 // 18783
D=A // 18784
@14 // 18785
M=D // 18786
@Number.clone // 18787
D=A // 18788
@13 // 18789
M=D // 18790
@Main.render.ret.40 // 18791
D=A // 18792
@CALL // 18793
0;JMP // 18794
(Main.render.ret.40)
@LCL // 18795
D=M // 18796
@19 // 18797
A=D+A // 18798
D=A // 18799
@R13 // 18800
M=D // 18801
@SP // 18802
AM=M-1 // 18803
D=M // 18804
@R13 // 18805
A=M // 18806
M=D // 18807

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 19"), PushInstruction("local 5")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18808
D=M // 18809
@19 // 18810
A=D+A // 18811
D=M // 18812
@SP // 18813
AM=M+1 // 18814
A=A-1 // 18815
M=D // 18816
@LCL // 18817
D=M // 18818
@5 // 18819
A=D+A // 18820
D=M // 18821
@SP // 18822
AM=M+1 // 18823
A=A-1 // 18824
M=D // 18825
// call Number.do_mul
@7 // 18826
D=A // 18827
@14 // 18828
M=D // 18829
@Number.do_mul // 18830
D=A // 18831
@13 // 18832
M=D // 18833
@Main.render.ret.41 // 18834
D=A // 18835
@CALL // 18836
0;JMP // 18837
(Main.render.ret.41)
@SP // 18838
M=M-1 // 18839

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 19")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 10"),
//    binaryOp: "ADD"
//)}
@LCL // 18840
D=M // 18841
@13 // 18842
A=D+A // 18843
D=M // 18844
A=A-1 // 18845
A=A-1 // 18846
A=A-1 // 18847
D=D+M // 18848
@SP // 18849
AM=M+1 // 18850
A=A-1 // 18851
M=D // 18852
@LCL // 18853
D=M // 18854
@13 // 18855
A=D+A // 18856
D=M // 18857
A=A-1 // 18858
A=A-1 // 18859
A=A-1 // 18860
A=D+M // 18861
D=M // 18862
@SP // 18863
AM=M+1 // 18864
A=A-1 // 18865
M=D // 18866
@LCL // 18867
D=M // 18868
@19 // 18869
A=D+A // 18870
D=M // 18871
@SP // 18872
AM=M+1 // 18873
A=A-1 // 18874
M=D // 18875
// call Number.frac_to_i16
@6 // 18876
D=A // 18877
@14 // 18878
M=D // 18879
@Number.frac_to_i16 // 18880
D=A // 18881
@13 // 18882
M=D // 18883
@Main.render.ret.42 // 18884
D=A // 18885
@CALL // 18886
0;JMP // 18887
(Main.render.ret.42)
@SP // 18888
AM=M-1 // 18889
D=M // 18890
@SP // 18891
AM=M-1 // 18892
D=D+M // 18893
@SP // 18894
AM=M-1 // 18895
A=M // 18896
M=D // 18897

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 19")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18898
D=M // 18899
@19 // 18900
A=D+A // 18901
D=M // 18902
@SP // 18903
AM=M+1 // 18904
A=A-1 // 18905
M=D // 18906
// call Number.dispose
@6 // 18907
D=A // 18908
@14 // 18909
M=D // 18910
@Number.dispose // 18911
D=A // 18912
@13 // 18913
M=D // 18914
@Main.render.ret.43 // 18915
D=A // 18916
@CALL // 18917
0;JMP // 18918
(Main.render.ret.43)
@SP // 18919
M=M-1 // 18920

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE7}}
@Main.render.LT.59 // 18921
D=A // 18922
@SP // 18923
AM=M+1 // 18924
A=A-1 // 18925
M=D // 18926
@LCL // 18927
D=M // 18928
@10 // 18929
A=D+A // 18930
D=M // 18931
@SP // 18932
AM=M+1 // 18933
A=A-1 // 18934
M=D+1 // 18935
@ARG // 18936
A=M // 18937
D=M // 18938
@SP // 18939
AM=M+1 // 18940
A=A-1 // 18941
M=D // 18942
// call Scene.getWidth
@6 // 18943
D=A // 18944
@14 // 18945
M=D // 18946
@Scene.getWidth // 18947
D=A // 18948
@13 // 18949
M=D // 18950
@Main.render.ret.44 // 18951
D=A // 18952
@CALL // 18953
0;JMP // 18954
(Main.render.ret.44)
@SP // 18955
AM=M-1 // 18956
D=M // 18957
@SP // 18958
AM=M-1 // 18959
D=M-D // 18960
@DO_LT // 18961
0;JMP // 18962
(Main.render.LT.59)
@Main.render$IF_TRUE7 // 18963
D;JNE // 18964

////GotoInstruction{label='Main.render$IF_FALSE7}
// goto Main.render$IF_FALSE7
@Main.render$IF_FALSE7 // 18965
0;JMP // 18966

////LabelInstruction{label='Main.render$IF_TRUE7}
// label Main.render$IF_TRUE7
(Main.render$IF_TRUE7)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 22}
//}

@LCL // 18967
D=M // 18968
@18 // 18969
A=D+A // 18970
D=M // 18971
@SP // 18972
AM=M+1 // 18973
A=A-1 // 18974
M=D // 18975
// call Number.clone
@6 // 18976
D=A // 18977
@14 // 18978
M=D // 18979
@Number.clone // 18980
D=A // 18981
@13 // 18982
M=D // 18983
@Main.render.ret.45 // 18984
D=A // 18985
@CALL // 18986
0;JMP // 18987
(Main.render.ret.45)
@LCL // 18988
D=M // 18989
@22 // 18990
A=D+A // 18991
D=A // 18992
@R13 // 18993
M=D // 18994
@SP // 18995
AM=M-1 // 18996
D=M // 18997
@R13 // 18998
A=M // 18999
M=D // 19000

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE8}}
@LCL // 19001
D=M // 19002
@26 // 19003
A=D+A // 19004
D=M // 19005
@Main.render$IF_TRUE8 // 19006
D;JNE // 19007

////GotoInstruction{label='Main.render$IF_FALSE8}
// goto Main.render$IF_FALSE8
@Main.render$IF_FALSE8 // 19008
0;JMP // 19009

////LabelInstruction{label='Main.render$IF_TRUE8}
// label Main.render$IF_TRUE8
(Main.render$IF_TRUE8)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 22"), PushInstruction("local 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19010
D=M // 19011
@22 // 19012
A=D+A // 19013
D=M // 19014
@SP // 19015
AM=M+1 // 19016
A=A-1 // 19017
M=D // 19018
@LCL // 19019
D=M // 19020
@4 // 19021
A=D+A // 19022
D=M // 19023
@SP // 19024
AM=M+1 // 19025
A=A-1 // 19026
M=D // 19027
// call Number.do_mul
@7 // 19028
D=A // 19029
@14 // 19030
M=D // 19031
@Number.do_mul // 19032
D=A // 19033
@13 // 19034
M=D // 19035
@Main.render.ret.46 // 19036
D=A // 19037
@CALL // 19038
0;JMP // 19039
(Main.render.ret.46)
@SP // 19040
M=M-1 // 19041

////LabelInstruction{label='Main.render$IF_FALSE8}
// label Main.render$IF_FALSE8
(Main.render$IF_FALSE8)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 22")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 19042
D=M // 19043
@13 // 19044
A=D+A // 19045
D=M // 19046
@SP // 19047
AM=M+1 // 19048
A=A-1 // 19049
M=D // 19050
@LCL // 19051
D=M // 19052
@10 // 19053
A=D+A // 19054
D=M // 19055
D=D+1 // 19056
@SP // 19057
AM=M-1 // 19058
D=D+M // 19059
@SP // 19060
AM=M+1 // 19061
A=A-1 // 19062
M=D // 19063
@LCL // 19064
D=M // 19065
@13 // 19066
A=D+A // 19067
D=M // 19068
@SP // 19069
AM=M+1 // 19070
A=A-1 // 19071
M=D // 19072
@LCL // 19073
D=M // 19074
@10 // 19075
A=D+A // 19076
D=M // 19077
D=D+1 // 19078
@SP // 19079
AM=M-1 // 19080
A=D+M // 19081
D=M // 19082
@SP // 19083
AM=M+1 // 19084
A=A-1 // 19085
M=D // 19086
@LCL // 19087
D=M // 19088
@22 // 19089
A=D+A // 19090
D=M // 19091
@SP // 19092
AM=M+1 // 19093
A=A-1 // 19094
M=D // 19095
// call Number.frac_to_i16
@6 // 19096
D=A // 19097
@14 // 19098
M=D // 19099
@Number.frac_to_i16 // 19100
D=A // 19101
@13 // 19102
M=D // 19103
@Main.render.ret.47 // 19104
D=A // 19105
@CALL // 19106
0;JMP // 19107
(Main.render.ret.47)
@SP // 19108
AM=M-1 // 19109
D=M // 19110
@SP // 19111
AM=M-1 // 19112
D=D+M // 19113
@SP // 19114
AM=M-1 // 19115
A=M // 19116
M=D // 19117

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 22")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19118
D=M // 19119
@22 // 19120
A=D+A // 19121
D=M // 19122
@SP // 19123
AM=M+1 // 19124
A=A-1 // 19125
M=D // 19126
// call Number.dispose
@6 // 19127
D=A // 19128
@14 // 19129
M=D // 19130
@Number.dispose // 19131
D=A // 19132
@13 // 19133
M=D // 19134
@Main.render.ret.48 // 19135
D=A // 19136
@CALL // 19137
0;JMP // 19138
(Main.render.ret.48)
@SP // 19139
M=M-1 // 19140

////LabelInstruction{label='Main.render$IF_FALSE7}
// label Main.render$IF_FALSE7
(Main.render$IF_FALSE7)

////LabelInstruction{label='Main.render$IF_FALSE4}
// label Main.render$IF_FALSE4
(Main.render$IF_FALSE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19141
D=M // 19142
@18 // 19143
A=D+A // 19144
D=M // 19145
@SP // 19146
AM=M+1 // 19147
A=A-1 // 19148
M=D // 19149
// call Number.dispose
@6 // 19150
D=A // 19151
@14 // 19152
M=D // 19153
@Number.dispose // 19154
D=A // 19155
@13 // 19156
M=D // 19157
@Main.render.ret.49 // 19158
D=A // 19159
@CALL // 19160
0;JMP // 19161
(Main.render.ret.49)
@SP // 19162
M=M-1 // 19163

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("local 23"),
//NOT)], call=CallInstruction{Screen.setColor}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19164
D=M // 19165
@23 // 19166
A=D+A // 19167
D=M // 19168
@SP // 19169
AM=M+1 // 19170
A=A-1 // 19171
M=D // 19172
@SP // 19173
A=M-1 // 19174
M=!D // 19175
// call Screen.setColor
@6 // 19176
D=A // 19177
@14 // 19178
M=D // 19179
@Screen.setColor // 19180
D=A // 19181
@13 // 19182
M=D // 19183
@Main.render.ret.50 // 19184
D=A // 19185
@CALL // 19186
0;JMP // 19187
(Main.render.ret.50)
@SP // 19188
M=M-1 // 19189

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 10"), PushInstruction("local 9")], call=CallInstruction{Screen.drawPixel}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19190
D=M // 19191
@10 // 19192
A=D+A // 19193
D=M // 19194
@SP // 19195
AM=M+1 // 19196
A=A-1 // 19197
M=D // 19198
@LCL // 19199
D=M // 19200
@9 // 19201
A=D+A // 19202
D=M // 19203
@SP // 19204
AM=M+1 // 19205
A=A-1 // 19206
M=D // 19207
// call Screen.drawPixel
@7 // 19208
D=A // 19209
@14 // 19210
M=D // 19211
@Screen.drawPixel // 19212
D=A // 19213
@13 // 19214
M=D // 19215
@Main.render.ret.51 // 19216
D=A // 19217
@CALL // 19218
0;JMP // 19219
(Main.render.ret.51)
@SP // 19220
M=M-1 // 19221

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19222
D=M // 19223
@24 // 19224
A=D+A // 19225
D=M // 19226
@SP // 19227
AM=M+1 // 19228
A=A-1 // 19229
M=D // 19230
// call Number.dispose
@6 // 19231
D=A // 19232
@14 // 19233
M=D // 19234
@Number.dispose // 19235
D=A // 19236
@13 // 19237
M=D // 19238
@Main.render.ret.52 // 19239
D=A // 19240
@CALL // 19241
0;JMP // 19242
(Main.render.ret.52)
@SP // 19243
M=M-1 // 19244

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE9}}
@LCL // 19245
D=M // 19246
@26 // 19247
A=D+A // 19248
D=M // 19249
@Main.render$IF_TRUE9 // 19250
D;JNE // 19251

////GotoInstruction{label='Main.render$IF_FALSE9}
// goto Main.render$IF_FALSE9
@Main.render$IF_FALSE9 // 19252
0;JMP // 19253

////LabelInstruction{label='Main.render$IF_TRUE9}
// label Main.render$IF_TRUE9
(Main.render$IF_TRUE9)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 19254
D=M // 19255
@10 // 19256
A=D+A // 19257
M=M-1 // 19258

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        UnaryPushGroup(            PushInstruction("constant 1"),
//NEG),
//    binaryOp: "GT"
//)
//  pop:  PopInstruction{address=local 27}
//}

@Main.render.GT.60 // 19259
D=A // 19260
@SP // 19261
AM=M+1 // 19262
A=A-1 // 19263
M=D // 19264
@LCL // 19265
D=M // 19266
@10 // 19267
A=D+A // 19268
D=M // 19269
D=D+1 // 19270
@DO_GT // 19271
0;JMP // 19272
(Main.render.GT.60)
@SP // 19273
AM=M+1 // 19274
A=A-1 // 19275
M=D // 19276
@LCL // 19277
D=M // 19278
@27 // 19279
A=D+A // 19280
D=A // 19281
@R13 // 19282
M=D // 19283
@SP // 19284
AM=M-1 // 19285
D=M // 19286
@R13 // 19287
A=M // 19288
M=D // 19289

////GotoInstruction{label='Main.render$IF_END9}
// goto Main.render$IF_END9
@Main.render$IF_END9 // 19290
0;JMP // 19291

////LabelInstruction{label='Main.render$IF_FALSE9}
// label Main.render$IF_FALSE9
(Main.render$IF_FALSE9)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 19292
D=M // 19293
@10 // 19294
A=D+A // 19295
M=M+1 // 19296

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//)
//  pop:  PopInstruction{address=local 27}
//}

@Main.render.LT.61 // 19297
D=A // 19298
@SP // 19299
AM=M+1 // 19300
A=A-1 // 19301
M=D // 19302
@LCL // 19303
D=M // 19304
@10 // 19305
A=D+A // 19306
D=M // 19307
@SP // 19308
AM=M+1 // 19309
A=A-1 // 19310
M=D // 19311
@ARG // 19312
A=M // 19313
D=M // 19314
@SP // 19315
AM=M+1 // 19316
A=A-1 // 19317
M=D // 19318
// call Scene.getWidth
@6 // 19319
D=A // 19320
@14 // 19321
M=D // 19322
@Scene.getWidth // 19323
D=A // 19324
@13 // 19325
M=D // 19326
@Main.render.ret.53 // 19327
D=A // 19328
@CALL // 19329
0;JMP // 19330
(Main.render.ret.53)
@SP // 19331
AM=M-1 // 19332
D=M // 19333
@SP // 19334
AM=M-1 // 19335
D=M-D // 19336
@DO_LT // 19337
0;JMP // 19338
(Main.render.LT.61)
@SP // 19339
AM=M+1 // 19340
A=A-1 // 19341
M=D // 19342
@LCL // 19343
D=M // 19344
@27 // 19345
A=D+A // 19346
D=A // 19347
@R13 // 19348
M=D // 19349
@SP // 19350
AM=M-1 // 19351
D=M // 19352
@R13 // 19353
A=M // 19354
M=D // 19355

////LabelInstruction{label='Main.render$IF_END9}
// label Main.render$IF_END9
(Main.render$IF_END9)

////GotoInstruction{label='Main.render_WHILE_EXP3}
// goto Main.render_WHILE_EXP3
@Main.render_WHILE_EXP3 // 19356
0;JMP // 19357

////LabelInstruction{label='Main.render_WHILE_END3}
// label Main.render_WHILE_END3
(Main.render_WHILE_END3)

////PushPopPair {
//  push: PushInstruction("local 12")
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 19358
D=M // 19359
@12 // 19360
A=D+A // 19361
D=M // 19362
@SP // 19363
AM=M+1 // 19364
A=A-1 // 19365
M=D // 19366
@LCL // 19367
D=M // 19368
@14 // 19369
A=D+A // 19370
D=A // 19371
@R13 // 19372
M=D // 19373
@SP // 19374
AM=M-1 // 19375
D=M // 19376
@R13 // 19377
A=M // 19378
M=D // 19379

////PushPopPair {
//  push: PushInstruction("local 13")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 19380
D=M // 19381
@13 // 19382
A=D+A // 19383
D=M // 19384
@SP // 19385
AM=M+1 // 19386
A=A-1 // 19387
M=D // 19388
@LCL // 19389
D=M // 19390
@12 // 19391
A=D+A // 19392
D=A // 19393
@R13 // 19394
M=D // 19395
@SP // 19396
AM=M-1 // 19397
D=M // 19398
@R13 // 19399
A=M // 19400
M=D // 19401

////PushPopPair {
//  push: PushInstruction("local 14")
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 19402
D=M // 19403
@14 // 19404
A=D+A // 19405
D=M // 19406
@SP // 19407
AM=M+1 // 19408
A=A-1 // 19409
M=D // 19410
@LCL // 19411
D=M // 19412
@13 // 19413
A=D+A // 19414
D=A // 19415
@R13 // 19416
M=D // 19417
@SP // 19418
AM=M-1 // 19419
D=M // 19420
@R13 // 19421
A=M // 19422
M=D // 19423

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 19424
D=M // 19425
@11 // 19426
A=D+A // 19427
M=0 // 19428

////LabelInstruction{label='Main.render_WHILE_EXP4}
// label Main.render_WHILE_EXP4
(Main.render_WHILE_EXP4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 11"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END4}}
@Main.render.LT.62 // 19429
D=A // 19430
@SP // 19431
AM=M+1 // 19432
A=A-1 // 19433
M=D // 19434
@LCL // 19435
D=M // 19436
@11 // 19437
A=D+A // 19438
D=M // 19439
@SP // 19440
AM=M+1 // 19441
A=A-1 // 19442
M=D // 19443
@ARG // 19444
A=M // 19445
D=M // 19446
@SP // 19447
AM=M+1 // 19448
A=A-1 // 19449
M=D // 19450
// call Scene.getWidth
@6 // 19451
D=A // 19452
@14 // 19453
M=D // 19454
@Scene.getWidth // 19455
D=A // 19456
@13 // 19457
M=D // 19458
@Main.render.ret.54 // 19459
D=A // 19460
@CALL // 19461
0;JMP // 19462
(Main.render.ret.54)
@SP // 19463
AM=M-1 // 19464
D=M // 19465
@SP // 19466
AM=M-1 // 19467
D=M-D // 19468
@DO_LT // 19469
0;JMP // 19470
(Main.render.LT.62)
D=!D // 19471
@Main.render_WHILE_END4 // 19472
D;JNE // 19473

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 19474
D=M // 19475
@13 // 19476
A=D+A // 19477
D=M // 19478
A=A-1 // 19479
A=A-1 // 19480
D=D+M // 19481
@SP // 19482
AM=M+1 // 19483
A=A-1 // 19484
M=D // 19485
D=0 // 19486
@SP // 19487
AM=M-1 // 19488
A=M // 19489
M=D // 19490

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 11"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 19491
D=M // 19492
@11 // 19493
A=D+A // 19494
M=M+1 // 19495

////GotoInstruction{label='Main.render_WHILE_EXP4}
// goto Main.render_WHILE_EXP4
@Main.render_WHILE_EXP4 // 19496
0;JMP // 19497

////LabelInstruction{label='Main.render_WHILE_END4}
// label Main.render_WHILE_END4
(Main.render_WHILE_END4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 19498
D=M // 19499
@9 // 19500
A=D+A // 19501
M=M+1 // 19502

////GotoInstruction{label='Main.render_WHILE_EXP2}
// goto Main.render_WHILE_EXP2
@Main.render_WHILE_EXP2 // 19503
0;JMP // 19504

////LabelInstruction{label='Main.render_WHILE_END2}
// label Main.render_WHILE_END2
(Main.render_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19505
A=M // 19506
D=M // 19507
@SP // 19508
AM=M+1 // 19509
A=A-1 // 19510
M=D // 19511
// call Number.dispose
@6 // 19512
D=A // 19513
@14 // 19514
M=D // 19515
@Number.dispose // 19516
D=A // 19517
@13 // 19518
M=D // 19519
@Main.render.ret.55 // 19520
D=A // 19521
@CALL // 19522
0;JMP // 19523
(Main.render.ret.55)
@SP // 19524
M=M-1 // 19525

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19526
A=M+1 // 19527
D=M // 19528
@SP // 19529
AM=M+1 // 19530
A=A-1 // 19531
M=D // 19532
// call Number.dispose
@6 // 19533
D=A // 19534
@14 // 19535
M=D // 19536
@Number.dispose // 19537
D=A // 19538
@13 // 19539
M=D // 19540
@Main.render.ret.56 // 19541
D=A // 19542
@CALL // 19543
0;JMP // 19544
(Main.render.ret.56)
@SP // 19545
M=M-1 // 19546

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19547
A=M+1 // 19548
A=A+1 // 19549
D=M // 19550
@SP // 19551
AM=M+1 // 19552
A=A-1 // 19553
M=D // 19554
// call Number.dispose
@6 // 19555
D=A // 19556
@14 // 19557
M=D // 19558
@Number.dispose // 19559
D=A // 19560
@13 // 19561
M=D // 19562
@Main.render.ret.57 // 19563
D=A // 19564
@CALL // 19565
0;JMP // 19566
(Main.render.ret.57)
@SP // 19567
M=M-1 // 19568

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19569
D=M // 19570
@4 // 19571
A=D+A // 19572
D=M // 19573
@SP // 19574
AM=M+1 // 19575
A=A-1 // 19576
M=D // 19577
// call Number.dispose
@6 // 19578
D=A // 19579
@14 // 19580
M=D // 19581
@Number.dispose // 19582
D=A // 19583
@13 // 19584
M=D // 19585
@Main.render.ret.58 // 19586
D=A // 19587
@CALL // 19588
0;JMP // 19589
(Main.render.ret.58)
@SP // 19590
M=M-1 // 19591

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19592
D=M // 19593
@5 // 19594
A=D+A // 19595
D=M // 19596
@SP // 19597
AM=M+1 // 19598
A=A-1 // 19599
M=D // 19600
// call Number.dispose
@6 // 19601
D=A // 19602
@14 // 19603
M=D // 19604
@Number.dispose // 19605
D=A // 19606
@13 // 19607
M=D // 19608
@Main.render.ret.59 // 19609
D=A // 19610
@CALL // 19611
0;JMP // 19612
(Main.render.ret.59)
@SP // 19613
M=M-1 // 19614

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19615
D=M // 19616
@6 // 19617
A=D+A // 19618
D=M // 19619
@SP // 19620
AM=M+1 // 19621
A=A-1 // 19622
M=D // 19623
// call Number.dispose
@6 // 19624
D=A // 19625
@14 // 19626
M=D // 19627
@Number.dispose // 19628
D=A // 19629
@13 // 19630
M=D // 19631
@Main.render.ret.60 // 19632
D=A // 19633
@CALL // 19634
0;JMP // 19635
(Main.render.ret.60)
@SP // 19636
M=M-1 // 19637

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19638
D=M // 19639
@7 // 19640
A=D+A // 19641
D=M // 19642
@SP // 19643
AM=M+1 // 19644
A=A-1 // 19645
M=D // 19646
// call Number.dispose
@6 // 19647
D=A // 19648
@14 // 19649
M=D // 19650
@Number.dispose // 19651
D=A // 19652
@13 // 19653
M=D // 19654
@Main.render.ret.61 // 19655
D=A // 19656
@CALL // 19657
0;JMP // 19658
(Main.render.ret.61)
@SP // 19659
M=M-1 // 19660

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19661
D=M // 19662
@12 // 19663
A=D+A // 19664
D=M // 19665
@SP // 19666
AM=M+1 // 19667
A=A-1 // 19668
M=D // 19669
// call Array.dispose
@6 // 19670
D=A // 19671
@14 // 19672
M=D // 19673
@Array.dispose // 19674
D=A // 19675
@13 // 19676
M=D // 19677
@Main.render.ret.62 // 19678
D=A // 19679
@CALL // 19680
0;JMP // 19681
(Main.render.ret.62)
@SP // 19682
M=M-1 // 19683

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19684
D=M // 19685
@13 // 19686
A=D+A // 19687
D=M // 19688
@SP // 19689
AM=M+1 // 19690
A=A-1 // 19691
M=D // 19692
// call Array.dispose
@6 // 19693
D=A // 19694
@14 // 19695
M=D // 19696
@Array.dispose // 19697
D=A // 19698
@13 // 19699
M=D // 19700
@Main.render.ret.63 // 19701
D=A // 19702
@CALL // 19703
0;JMP // 19704
(Main.render.ret.63)
@SP // 19705
M=M-1 // 19706

////PushInstruction("constant 0")
@SP // 19707
AM=M+1 // 19708
A=A-1 // 19709
M=0 // 19710
@RETURN // 19711
0;JMP // 19712

////FunctionInstruction{functionName='Int32.is_even', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.is_even with 0
(Int32.is_even)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19713
A=M // 19714
D=M // 19715
@3 // 19716
M=D // 19717

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//)
@Int32.is_even.EQ.63 // 19718
D=A // 19719
@SP // 19720
AM=M+1 // 19721
A=A-1 // 19722
M=D // 19723
@THIS // 19724
A=M // 19725
D=M // 19726
@0 // 19727
A=D+A // 19728
D=M // 19729
@1 // 19730
D=D&A // 19731
@DO_EQ // 19732
0;JMP // 19733
(Int32.is_even.EQ.63)
@SP // 19734
AM=M+1 // 19735
A=A-1 // 19736
M=D // 19737
@RETURN // 19738
0;JMP // 19739

////FunctionInstruction{functionName='Element.surface_normal', numLocals=0, funcMapping={Element.color=2}}
// function Element.surface_normal with 0
(Element.surface_normal)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19740
A=M // 19741
D=M // 19742
@3 // 19743
M=D // 19744

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.surface_normal$IF_TRUE1}}
@Element.surface_normal.EQ.64 // 19745
D=A // 19746
@SP // 19747
AM=M+1 // 19748
A=A-1 // 19749
M=D // 19750
@THIS // 19751
A=M // 19752
D=M // 19753
@DO_EQ // 19754
0;JMP // 19755
(Element.surface_normal.EQ.64)
D=!D // 19756
@Element.surface_normal$IF_TRUE1 // 19757
D;JNE // 19758

////GotoInstruction{label='Element.surface_normal$IF_FALSE1}
// goto Element.surface_normal$IF_FALSE1
@Element.surface_normal$IF_FALSE1 // 19759
0;JMP // 19760

////LabelInstruction{label='Element.surface_normal$IF_TRUE1}
// label Element.surface_normal$IF_TRUE1
(Element.surface_normal$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Plane.surface_normal}}
@THIS // 19761
A=M // 19762
D=M // 19763
@SP // 19764
AM=M+1 // 19765
A=A-1 // 19766
M=D // 19767
// call Plane.surface_normal
@6 // 19768
D=A // 19769
@14 // 19770
M=D // 19771
@Plane.surface_normal // 19772
D=A // 19773
@13 // 19774
M=D // 19775
@Element.surface_normal.ret.0 // 19776
D=A // 19777
@CALL // 19778
0;JMP // 19779
(Element.surface_normal.ret.0)
@RETURN // 19780
0;JMP // 19781

////LabelInstruction{label='Element.surface_normal$IF_FALSE1}
// label Element.surface_normal$IF_FALSE1
(Element.surface_normal$IF_FALSE1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.surface_normal$IF_TRUE2}}
@Element.surface_normal.EQ.65 // 19782
D=A // 19783
@SP // 19784
AM=M+1 // 19785
A=A-1 // 19786
M=D // 19787
@THIS // 19788
A=M+1 // 19789
D=M // 19790
@DO_EQ // 19791
0;JMP // 19792
(Element.surface_normal.EQ.65)
D=!D // 19793
@Element.surface_normal$IF_TRUE2 // 19794
D;JNE // 19795

////GotoInstruction{label='Element.surface_normal$IF_FALSE2}
// goto Element.surface_normal$IF_FALSE2
@Element.surface_normal$IF_FALSE2 // 19796
0;JMP // 19797

////LabelInstruction{label='Element.surface_normal$IF_TRUE2}
// label Element.surface_normal$IF_TRUE2
(Element.surface_normal$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Sphere.surface_normal}}
@THIS // 19798
A=M+1 // 19799
D=M // 19800
@SP // 19801
AM=M+1 // 19802
A=A-1 // 19803
M=D // 19804
@ARG // 19805
A=M+1 // 19806
D=M // 19807
@SP // 19808
AM=M+1 // 19809
A=A-1 // 19810
M=D // 19811
// call Sphere.surface_normal
@7 // 19812
D=A // 19813
@14 // 19814
M=D // 19815
@Sphere.surface_normal // 19816
D=A // 19817
@13 // 19818
M=D // 19819
@Element.surface_normal.ret.1 // 19820
D=A // 19821
@CALL // 19822
0;JMP // 19823
(Element.surface_normal.ret.1)
@RETURN // 19824
0;JMP // 19825

////LabelInstruction{label='Element.surface_normal$IF_FALSE2}
// label Element.surface_normal$IF_FALSE2
(Element.surface_normal$IF_FALSE2)

////PushInstruction("constant 0")
@SP // 19826
AM=M+1 // 19827
A=A-1 // 19828
M=0 // 19829
@RETURN // 19830
0;JMP // 19831

////FunctionInstruction{functionName='Vec3.dot', numLocals=3, funcMapping={Vec3.do_add=6, Vec3.clone=4, Vec3.new=1}}
// function Vec3.dot with 3
(Vec3.dot)
@3 // 19832
D=A // 19833
@SP // 19834
AM=D+M // 19835
A=A-1 // 19836
M=0 // 19837
A=A-1 // 19838
M=0 // 19839
A=A-1 // 19840
M=0 // 19841

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19842
A=M // 19843
D=M // 19844
@3 // 19845
M=D // 19846

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 19847
A=M // 19848
D=M // 19849
@SP // 19850
AM=M+1 // 19851
A=A-1 // 19852
M=D // 19853
// call Number.clone
@6 // 19854
D=A // 19855
@14 // 19856
M=D // 19857
@Number.clone // 19858
D=A // 19859
@13 // 19860
M=D // 19861
@Vec3.dot.ret.0 // 19862
D=A // 19863
@CALL // 19864
0;JMP // 19865
(Vec3.dot.ret.0)
@SP // 19866
AM=M-1 // 19867
D=M // 19868
@LCL // 19869
A=M // 19870
M=D // 19871

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19872
A=M // 19873
D=M // 19874
@SP // 19875
AM=M+1 // 19876
A=A-1 // 19877
M=D // 19878
@ARG // 19879
A=M+1 // 19880
D=M // 19881
@SP // 19882
AM=M+1 // 19883
A=A-1 // 19884
M=D // 19885
// call Vec3.getX
@6 // 19886
D=A // 19887
@14 // 19888
M=D // 19889
@Vec3.getX // 19890
D=A // 19891
@13 // 19892
M=D // 19893
@Vec3.dot.ret.1 // 19894
D=A // 19895
@CALL // 19896
0;JMP // 19897
(Vec3.dot.ret.1)
// call Number.do_mul
@7 // 19898
D=A // 19899
@14 // 19900
M=D // 19901
@Number.do_mul // 19902
D=A // 19903
@13 // 19904
M=D // 19905
@Vec3.dot.ret.2 // 19906
D=A // 19907
@CALL // 19908
0;JMP // 19909
(Vec3.dot.ret.2)
@SP // 19910
M=M-1 // 19911

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 19912
A=M+1 // 19913
D=M // 19914
@SP // 19915
AM=M+1 // 19916
A=A-1 // 19917
M=D // 19918
// call Number.clone
@6 // 19919
D=A // 19920
@14 // 19921
M=D // 19922
@Number.clone // 19923
D=A // 19924
@13 // 19925
M=D // 19926
@Vec3.dot.ret.3 // 19927
D=A // 19928
@CALL // 19929
0;JMP // 19930
(Vec3.dot.ret.3)
@SP // 19931
AM=M-1 // 19932
D=M // 19933
@LCL // 19934
A=M+1 // 19935
M=D // 19936

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19937
A=M+1 // 19938
D=M // 19939
@SP // 19940
AM=M+1 // 19941
A=A-1 // 19942
M=D // 19943
@ARG // 19944
A=M+1 // 19945
D=M // 19946
@SP // 19947
AM=M+1 // 19948
A=A-1 // 19949
M=D // 19950
// call Vec3.getY
@6 // 19951
D=A // 19952
@14 // 19953
M=D // 19954
@Vec3.getY // 19955
D=A // 19956
@13 // 19957
M=D // 19958
@Vec3.dot.ret.4 // 19959
D=A // 19960
@CALL // 19961
0;JMP // 19962
(Vec3.dot.ret.4)
// call Number.do_mul
@7 // 19963
D=A // 19964
@14 // 19965
M=D // 19966
@Number.do_mul // 19967
D=A // 19968
@13 // 19969
M=D // 19970
@Vec3.dot.ret.5 // 19971
D=A // 19972
@CALL // 19973
0;JMP // 19974
(Vec3.dot.ret.5)
@SP // 19975
M=M-1 // 19976

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 19977
A=M+1 // 19978
A=A+1 // 19979
D=M // 19980
@SP // 19981
AM=M+1 // 19982
A=A-1 // 19983
M=D // 19984
// call Number.clone
@6 // 19985
D=A // 19986
@14 // 19987
M=D // 19988
@Number.clone // 19989
D=A // 19990
@13 // 19991
M=D // 19992
@Vec3.dot.ret.6 // 19993
D=A // 19994
@CALL // 19995
0;JMP // 19996
(Vec3.dot.ret.6)
@SP // 19997
AM=M-1 // 19998
D=M // 19999
@LCL // 20000
A=M+1 // 20001
A=A+1 // 20002
M=D // 20003

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20004
A=M+1 // 20005
A=A+1 // 20006
D=M // 20007
@SP // 20008
AM=M+1 // 20009
A=A-1 // 20010
M=D // 20011
@ARG // 20012
A=M+1 // 20013
D=M // 20014
@SP // 20015
AM=M+1 // 20016
A=A-1 // 20017
M=D // 20018
// call Vec3.getZ
@6 // 20019
D=A // 20020
@14 // 20021
M=D // 20022
@Vec3.getZ // 20023
D=A // 20024
@13 // 20025
M=D // 20026
@Vec3.dot.ret.7 // 20027
D=A // 20028
@CALL // 20029
0;JMP // 20030
(Vec3.dot.ret.7)
// call Number.do_mul
@7 // 20031
D=A // 20032
@14 // 20033
M=D // 20034
@Number.do_mul // 20035
D=A // 20036
@13 // 20037
M=D // 20038
@Vec3.dot.ret.8 // 20039
D=A // 20040
@CALL // 20041
0;JMP // 20042
(Vec3.dot.ret.8)
@SP // 20043
M=M-1 // 20044

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20045
A=M // 20046
D=M // 20047
@SP // 20048
AM=M+1 // 20049
A=A-1 // 20050
M=D // 20051
@LCL // 20052
A=M+1 // 20053
D=M // 20054
@SP // 20055
AM=M+1 // 20056
A=A-1 // 20057
M=D // 20058
// call Number.do_add
@7 // 20059
D=A // 20060
@14 // 20061
M=D // 20062
@Number.do_add // 20063
D=A // 20064
@13 // 20065
M=D // 20066
@Vec3.dot.ret.9 // 20067
D=A // 20068
@CALL // 20069
0;JMP // 20070
(Vec3.dot.ret.9)
@SP // 20071
M=M-1 // 20072

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20073
A=M // 20074
D=M // 20075
@SP // 20076
AM=M+1 // 20077
A=A-1 // 20078
M=D // 20079
@LCL // 20080
A=M+1 // 20081
A=A+1 // 20082
D=M // 20083
@SP // 20084
AM=M+1 // 20085
A=A-1 // 20086
M=D // 20087
// call Number.do_add
@7 // 20088
D=A // 20089
@14 // 20090
M=D // 20091
@Number.do_add // 20092
D=A // 20093
@13 // 20094
M=D // 20095
@Vec3.dot.ret.10 // 20096
D=A // 20097
@CALL // 20098
0;JMP // 20099
(Vec3.dot.ret.10)
@SP // 20100
M=M-1 // 20101

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20102
A=M+1 // 20103
D=M // 20104
@SP // 20105
AM=M+1 // 20106
A=A-1 // 20107
M=D // 20108
// call Number.dispose
@6 // 20109
D=A // 20110
@14 // 20111
M=D // 20112
@Number.dispose // 20113
D=A // 20114
@13 // 20115
M=D // 20116
@Vec3.dot.ret.11 // 20117
D=A // 20118
@CALL // 20119
0;JMP // 20120
(Vec3.dot.ret.11)
@SP // 20121
M=M-1 // 20122

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20123
A=M+1 // 20124
A=A+1 // 20125
D=M // 20126
@SP // 20127
AM=M+1 // 20128
A=A-1 // 20129
M=D // 20130
// call Number.dispose
@6 // 20131
D=A // 20132
@14 // 20133
M=D // 20134
@Number.dispose // 20135
D=A // 20136
@13 // 20137
M=D // 20138
@Vec3.dot.ret.12 // 20139
D=A // 20140
@CALL // 20141
0;JMP // 20142
(Vec3.dot.ret.12)
@SP // 20143
M=M-1 // 20144

////PushInstruction("local 0")
@LCL // 20145
A=M // 20146
D=M // 20147
@SP // 20148
AM=M+1 // 20149
A=A-1 // 20150
M=D // 20151
@RETURN // 20152
0;JMP // 20153

////FunctionInstruction{functionName='Int32.new', numLocals=3, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.new with 3
(Int32.new)
@3 // 20154
D=A // 20155
@SP // 20156
AM=D+M // 20157
A=A-1 // 20158
M=0 // 20159
A=A-1 // 20160
M=0 // 20161
A=A-1 // 20162
M=0 // 20163

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 20164
AM=M+1 // 20165
A=A-1 // 20166
M=1 // 20167
// call Memory.alloc
@6 // 20168
D=A // 20169
@14 // 20170
M=D // 20171
@Memory.alloc // 20172
D=A // 20173
@13 // 20174
M=D // 20175
@Int32.new.ret.0 // 20176
D=A // 20177
@CALL // 20178
0;JMP // 20179
(Int32.new.ret.0)
@SP // 20180
AM=M-1 // 20181
D=M // 20182
@3 // 20183
M=D // 20184

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 20185
M=M+1 // 20186

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 20187
A=M // 20188
D=M // 20189
@255 // 20190
D=D&A // 20191
@LCL // 20192
A=M // 20193
M=D // 20194

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("constant 8")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 20195
A=M // 20196
D=M // 20197
@SP // 20198
AM=M+1 // 20199
A=A-1 // 20200
M=D // 20201
@8 // 20202
D=A // 20203
@SP // 20204
AM=M+1 // 20205
A=A-1 // 20206
M=D // 20207
// call Int32.arith_rightshift
@7 // 20208
D=A // 20209
@14 // 20210
M=D // 20211
@Int32.arith_rightshift // 20212
D=A // 20213
@13 // 20214
M=D // 20215
@Int32.new.ret.1 // 20216
D=A // 20217
@CALL // 20218
0;JMP // 20219
(Int32.new.ret.1)
@SP // 20220
AM=M-1 // 20221
D=M // 20222
@255 // 20223
D=D&A // 20224
@LCL // 20225
A=M+1 // 20226
M=D // 20227

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.new$IF_TRUE1}}
@Int32.new.LT.66 // 20228
D=A // 20229
@SP // 20230
AM=M+1 // 20231
A=A-1 // 20232
M=D // 20233
@ARG // 20234
A=M // 20235
D=M // 20236
@DO_LT // 20237
0;JMP // 20238
(Int32.new.LT.66)
@Int32.new$IF_TRUE1 // 20239
D;JNE // 20240

////GotoInstruction{label='Int32.new$IF_FALSE1}
// goto Int32.new$IF_FALSE1
@Int32.new$IF_FALSE1 // 20241
0;JMP // 20242

////LabelInstruction{label='Int32.new$IF_TRUE1}
// label Int32.new$IF_TRUE1
(Int32.new$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 255")
//  pop:  PopInstruction{address=local 2}
//}

@255 // 20243
D=A // 20244
@LCL // 20245
A=M+1 // 20246
A=A+1 // 20247
M=D // 20248

////GotoInstruction{label='Int32.new$IF_END1}
// goto Int32.new$IF_END1
@Int32.new$IF_END1 // 20249
0;JMP // 20250

////LabelInstruction{label='Int32.new$IF_FALSE1}
// label Int32.new$IF_FALSE1
(Int32.new$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 20251
A=M+1 // 20252
A=A+1 // 20253
M=0 // 20254

////LabelInstruction{label='Int32.new$IF_END1}
// label Int32.new$IF_END1
(Int32.new$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=this 0}
//}

@4 // 20255
D=A // 20256
@SP // 20257
AM=M+1 // 20258
A=A-1 // 20259
M=D // 20260
// call Array.new
@6 // 20261
D=A // 20262
@14 // 20263
M=D // 20264
@Array.new // 20265
D=A // 20266
@13 // 20267
M=D // 20268
@Int32.new.ret.2 // 20269
D=A // 20270
@CALL // 20271
0;JMP // 20272
(Int32.new.ret.2)
@SP // 20273
AM=M-1 // 20274
D=M // 20275
@THIS // 20276
A=M // 20277
M=D // 20278

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 20279
A=M // 20280
D=M // 20281
@SP // 20282
AM=M+1 // 20283
A=A-1 // 20284
M=D // 20285
@LCL // 20286
A=M // 20287
D=M // 20288
@SP // 20289
AM=M-1 // 20290
A=M // 20291
M=D // 20292

////PushWriter{source=PushInstruction("local 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 20293
A=M // 20294
D=M // 20295
@SP // 20296
AM=M+1 // 20297
A=A-1 // 20298
M=D+1 // 20299
@LCL // 20300
A=M+1 // 20301
D=M // 20302
@SP // 20303
AM=M-1 // 20304
A=M // 20305
M=D // 20306

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 20307
A=M // 20308
D=M // 20309
@2 // 20310
D=D+A // 20311
@SP // 20312
AM=M+1 // 20313
A=A-1 // 20314
M=D // 20315
@LCL // 20316
A=M+1 // 20317
A=A+1 // 20318
D=M // 20319
@SP // 20320
AM=M-1 // 20321
A=M // 20322
M=D // 20323

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 20324
A=M // 20325
D=M // 20326
@3 // 20327
D=D+A // 20328
@SP // 20329
AM=M+1 // 20330
A=A-1 // 20331
M=D // 20332
@LCL // 20333
A=M+1 // 20334
A=A+1 // 20335
D=M // 20336
@SP // 20337
AM=M-1 // 20338
A=M // 20339
M=D // 20340

////PushInstruction("pointer 0")
@3 // 20341
D=M // 20342
@SP // 20343
AM=M+1 // 20344
A=A-1 // 20345
M=D // 20346
@RETURN // 20347
0;JMP // 20348

////FunctionInstruction{functionName='Plane.dispose', numLocals=0, funcMapping={Plane.initialize=16, Plane.new=1, Plane.color=29}}
// function Plane.dispose with 0
(Plane.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 20349
A=M // 20350
D=M // 20351
@3 // 20352
M=D // 20353

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20354
A=M // 20355
D=M // 20356
@SP // 20357
AM=M+1 // 20358
A=A-1 // 20359
M=D // 20360
// call Vec3.dispose
@6 // 20361
D=A // 20362
@14 // 20363
M=D // 20364
@Vec3.dispose // 20365
D=A // 20366
@13 // 20367
M=D // 20368
@Plane.dispose.ret.0 // 20369
D=A // 20370
@CALL // 20371
0;JMP // 20372
(Plane.dispose.ret.0)
@SP // 20373
M=M-1 // 20374

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20375
A=M+1 // 20376
D=M // 20377
@SP // 20378
AM=M+1 // 20379
A=A-1 // 20380
M=D // 20381
// call Vec3.dispose
@6 // 20382
D=A // 20383
@14 // 20384
M=D // 20385
@Vec3.dispose // 20386
D=A // 20387
@13 // 20388
M=D // 20389
@Plane.dispose.ret.1 // 20390
D=A // 20391
@CALL // 20392
0;JMP // 20393
(Plane.dispose.ret.1)
@SP // 20394
M=M-1 // 20395

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20396
A=M+1 // 20397
A=A+1 // 20398
D=M // 20399
@SP // 20400
AM=M+1 // 20401
A=A-1 // 20402
M=D // 20403
// call Number.dispose
@6 // 20404
D=A // 20405
@14 // 20406
M=D // 20407
@Number.dispose // 20408
D=A // 20409
@13 // 20410
M=D // 20411
@Plane.dispose.ret.2 // 20412
D=A // 20413
@CALL // 20414
0;JMP // 20415
(Plane.dispose.ret.2)
@SP // 20416
M=M-1 // 20417

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 20418
D=M // 20419
@SP // 20420
AM=M+1 // 20421
A=A-1 // 20422
M=D // 20423
// call Memory.deAlloc
@6 // 20424
D=A // 20425
@14 // 20426
M=D // 20427
@Memory.deAlloc // 20428
D=A // 20429
@13 // 20430
M=D // 20431
@Plane.dispose.ret.3 // 20432
D=A // 20433
@CALL // 20434
0;JMP // 20435
(Plane.dispose.ret.3)
@SP // 20436
M=M-1 // 20437

////PushInstruction("constant 0")
@SP // 20438
AM=M+1 // 20439
A=A-1 // 20440
M=0 // 20441
@RETURN // 20442
0;JMP // 20443

////FunctionInstruction{functionName='Output.printString', numLocals=2, funcMapping={Output.init=97, Output.println=0, Output.getMap=0, Output.create=1}}
// function Output.printString with 2
(Output.printString)
@SP // 20444
M=M+1 // 20445
AM=M+1 // 20446
A=A-1 // 20447
M=0 // 20448
A=A-1 // 20449
M=0 // 20450

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20451
A=M // 20452
M=0 // 20453

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{String.length}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 20454
A=M // 20455
D=M // 20456
@SP // 20457
AM=M+1 // 20458
A=A-1 // 20459
M=D // 20460
// call String.length
@6 // 20461
D=A // 20462
@14 // 20463
M=D // 20464
@String.length // 20465
D=A // 20466
@13 // 20467
M=D // 20468
@Output.printString.ret.0 // 20469
D=A // 20470
@CALL // 20471
0;JMP // 20472
(Output.printString.ret.0)
@SP // 20473
AM=M-1 // 20474
D=M // 20475
@LCL // 20476
A=M+1 // 20477
M=D // 20478

////LabelInstruction{label='Output.printString_WHILE_EXP1}
// label Output.printString_WHILE_EXP1
(Output.printString_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("local 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Output.printString_WHILE_END1}}
@Output.printString.LT.67 // 20479
D=A // 20480
@SP // 20481
AM=M+1 // 20482
A=A-1 // 20483
M=D // 20484
@LCL // 20485
A=M+1 // 20486
D=M // 20487
A=A-1 // 20488
D=M-D // 20489
@DO_LT // 20490
0;JMP // 20491
(Output.printString.LT.67)
D=!D // 20492
@Output.printString_WHILE_END1 // 20493
D;JNE // 20494

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 0")], call=CallInstruction{String.charAt}}], call=CallInstruction{Output.printChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@ARG // 20495
A=M // 20496
D=M // 20497
@SP // 20498
AM=M+1 // 20499
A=A-1 // 20500
M=D // 20501
@LCL // 20502
A=M // 20503
D=M // 20504
@SP // 20505
AM=M+1 // 20506
A=A-1 // 20507
M=D // 20508
// call String.charAt
@7 // 20509
D=A // 20510
@14 // 20511
M=D // 20512
@String.charAt // 20513
D=A // 20514
@13 // 20515
M=D // 20516
@Output.printString.ret.1 // 20517
D=A // 20518
@CALL // 20519
0;JMP // 20520
(Output.printString.ret.1)
// call Output.printChar
@6 // 20521
D=A // 20522
@14 // 20523
M=D // 20524
@Output.printChar // 20525
D=A // 20526
@13 // 20527
M=D // 20528
@Output.printString.ret.2 // 20529
D=A // 20530
@CALL // 20531
0;JMP // 20532
(Output.printString.ret.2)
@SP // 20533
M=M-1 // 20534

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20535
A=M // 20536
M=M+1 // 20537

////GotoInstruction{label='Output.printString_WHILE_EXP1}
// goto Output.printString_WHILE_EXP1
@Output.printString_WHILE_EXP1 // 20538
0;JMP // 20539

////LabelInstruction{label='Output.printString_WHILE_END1}
// label Output.printString_WHILE_END1
(Output.printString_WHILE_END1)

////PushInstruction("constant 0")
@SP // 20540
AM=M+1 // 20541
A=A-1 // 20542
M=0 // 20543
@RETURN // 20544
0;JMP // 20545

////FunctionInstruction{functionName='Number.is_less_than', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.do_neg=1}}
// function Number.is_less_than with 0
(Number.is_less_than)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 20546
A=M // 20547
D=M // 20548
@3 // 20549
M=D // 20550

////BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.cmp}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//)
@Number.is_less_than.LT.68 // 20551
D=A // 20552
@SP // 20553
AM=M+1 // 20554
A=A-1 // 20555
M=D // 20556
@THIS // 20557
A=M // 20558
D=M // 20559
@SP // 20560
AM=M+1 // 20561
A=A-1 // 20562
M=D // 20563
@ARG // 20564
A=M+1 // 20565
D=M // 20566
@SP // 20567
AM=M+1 // 20568
A=A-1 // 20569
M=D // 20570
// call Number.getV
@6 // 20571
D=A // 20572
@14 // 20573
M=D // 20574
@Number.getV // 20575
D=A // 20576
@13 // 20577
M=D // 20578
@Number.is_less_than.ret.0 // 20579
D=A // 20580
@CALL // 20581
0;JMP // 20582
(Number.is_less_than.ret.0)
// call Int32.cmp
@7 // 20583
D=A // 20584
@14 // 20585
M=D // 20586
@Int32.cmp // 20587
D=A // 20588
@13 // 20589
M=D // 20590
@Number.is_less_than.ret.1 // 20591
D=A // 20592
@CALL // 20593
0;JMP // 20594
(Number.is_less_than.ret.1)
@SP // 20595
AM=M-1 // 20596
D=M // 20597
@DO_LT // 20598
0;JMP // 20599
(Number.is_less_than.LT.68)
@SP // 20600
AM=M+1 // 20601
A=A-1 // 20602
M=D // 20603
@RETURN // 20604
0;JMP // 20605

////FunctionInstruction{functionName='Vec3.do_cross', numLocals=6, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.clone=4, Vec3.new=1}}
// function Vec3.do_cross with 6
(Vec3.do_cross)
@6 // 20606
D=A // 20607
@SP // 20608
AM=D+M // 20609
A=A-1 // 20610
M=0 // 20611
A=A-1 // 20612
M=0 // 20613
A=A-1 // 20614
M=0 // 20615
A=A-1 // 20616
M=0 // 20617
A=A-1 // 20618
M=0 // 20619
A=A-1 // 20620
M=0 // 20621

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 20622
A=M // 20623
D=M // 20624
@3 // 20625
M=D // 20626

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 20627
A=M+1 // 20628
D=M // 20629
@SP // 20630
AM=M+1 // 20631
A=A-1 // 20632
M=D // 20633
// call Number.clone
@6 // 20634
D=A // 20635
@14 // 20636
M=D // 20637
@Number.clone // 20638
D=A // 20639
@13 // 20640
M=D // 20641
@Vec3.do_cross.ret.0 // 20642
D=A // 20643
@CALL // 20644
0;JMP // 20645
(Vec3.do_cross.ret.0)
@SP // 20646
AM=M-1 // 20647
D=M // 20648
@LCL // 20649
A=M // 20650
M=D // 20651

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20652
A=M // 20653
D=M // 20654
@SP // 20655
AM=M+1 // 20656
A=A-1 // 20657
M=D // 20658
@ARG // 20659
A=M+1 // 20660
D=M // 20661
@SP // 20662
AM=M+1 // 20663
A=A-1 // 20664
M=D // 20665
// call Vec3.getZ
@6 // 20666
D=A // 20667
@14 // 20668
M=D // 20669
@Vec3.getZ // 20670
D=A // 20671
@13 // 20672
M=D // 20673
@Vec3.do_cross.ret.1 // 20674
D=A // 20675
@CALL // 20676
0;JMP // 20677
(Vec3.do_cross.ret.1)
// call Number.do_mul
@7 // 20678
D=A // 20679
@14 // 20680
M=D // 20681
@Number.do_mul // 20682
D=A // 20683
@13 // 20684
M=D // 20685
@Vec3.do_cross.ret.2 // 20686
D=A // 20687
@CALL // 20688
0;JMP // 20689
(Vec3.do_cross.ret.2)
@SP // 20690
M=M-1 // 20691

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 20692
A=M+1 // 20693
A=A+1 // 20694
D=M // 20695
@SP // 20696
AM=M+1 // 20697
A=A-1 // 20698
M=D // 20699
// call Number.clone
@6 // 20700
D=A // 20701
@14 // 20702
M=D // 20703
@Number.clone // 20704
D=A // 20705
@13 // 20706
M=D // 20707
@Vec3.do_cross.ret.3 // 20708
D=A // 20709
@CALL // 20710
0;JMP // 20711
(Vec3.do_cross.ret.3)
@SP // 20712
AM=M-1 // 20713
D=M // 20714
@LCL // 20715
A=M+1 // 20716
M=D // 20717

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20718
A=M+1 // 20719
D=M // 20720
@SP // 20721
AM=M+1 // 20722
A=A-1 // 20723
M=D // 20724
@ARG // 20725
A=M+1 // 20726
D=M // 20727
@SP // 20728
AM=M+1 // 20729
A=A-1 // 20730
M=D // 20731
// call Vec3.getY
@6 // 20732
D=A // 20733
@14 // 20734
M=D // 20735
@Vec3.getY // 20736
D=A // 20737
@13 // 20738
M=D // 20739
@Vec3.do_cross.ret.4 // 20740
D=A // 20741
@CALL // 20742
0;JMP // 20743
(Vec3.do_cross.ret.4)
// call Number.do_mul
@7 // 20744
D=A // 20745
@14 // 20746
M=D // 20747
@Number.do_mul // 20748
D=A // 20749
@13 // 20750
M=D // 20751
@Vec3.do_cross.ret.5 // 20752
D=A // 20753
@CALL // 20754
0;JMP // 20755
(Vec3.do_cross.ret.5)
@SP // 20756
M=M-1 // 20757

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20758
A=M // 20759
D=M // 20760
@SP // 20761
AM=M+1 // 20762
A=A-1 // 20763
M=D // 20764
@LCL // 20765
A=M+1 // 20766
D=M // 20767
@SP // 20768
AM=M+1 // 20769
A=A-1 // 20770
M=D // 20771
// call Number.do_sub
@7 // 20772
D=A // 20773
@14 // 20774
M=D // 20775
@Number.do_sub // 20776
D=A // 20777
@13 // 20778
M=D // 20779
@Vec3.do_cross.ret.6 // 20780
D=A // 20781
@CALL // 20782
0;JMP // 20783
(Vec3.do_cross.ret.6)
@SP // 20784
M=M-1 // 20785

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 20786
A=M+1 // 20787
A=A+1 // 20788
D=M // 20789
@SP // 20790
AM=M+1 // 20791
A=A-1 // 20792
M=D // 20793
// call Number.clone
@6 // 20794
D=A // 20795
@14 // 20796
M=D // 20797
@Number.clone // 20798
D=A // 20799
@13 // 20800
M=D // 20801
@Vec3.do_cross.ret.7 // 20802
D=A // 20803
@CALL // 20804
0;JMP // 20805
(Vec3.do_cross.ret.7)
@SP // 20806
AM=M-1 // 20807
D=M // 20808
@LCL // 20809
A=M+1 // 20810
A=A+1 // 20811
M=D // 20812

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20813
A=M+1 // 20814
A=A+1 // 20815
D=M // 20816
@SP // 20817
AM=M+1 // 20818
A=A-1 // 20819
M=D // 20820
@ARG // 20821
A=M+1 // 20822
D=M // 20823
@SP // 20824
AM=M+1 // 20825
A=A-1 // 20826
M=D // 20827
// call Vec3.getX
@6 // 20828
D=A // 20829
@14 // 20830
M=D // 20831
@Vec3.getX // 20832
D=A // 20833
@13 // 20834
M=D // 20835
@Vec3.do_cross.ret.8 // 20836
D=A // 20837
@CALL // 20838
0;JMP // 20839
(Vec3.do_cross.ret.8)
// call Number.do_mul
@7 // 20840
D=A // 20841
@14 // 20842
M=D // 20843
@Number.do_mul // 20844
D=A // 20845
@13 // 20846
M=D // 20847
@Vec3.do_cross.ret.9 // 20848
D=A // 20849
@CALL // 20850
0;JMP // 20851
(Vec3.do_cross.ret.9)
@SP // 20852
M=M-1 // 20853

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@THIS // 20854
A=M // 20855
D=M // 20856
@SP // 20857
AM=M+1 // 20858
A=A-1 // 20859
M=D // 20860
// call Number.clone
@6 // 20861
D=A // 20862
@14 // 20863
M=D // 20864
@Number.clone // 20865
D=A // 20866
@13 // 20867
M=D // 20868
@Vec3.do_cross.ret.10 // 20869
D=A // 20870
@CALL // 20871
0;JMP // 20872
(Vec3.do_cross.ret.10)
@SP // 20873
AM=M-1 // 20874
D=M // 20875
@LCL // 20876
A=M+1 // 20877
A=A+1 // 20878
A=A+1 // 20879
M=D // 20880

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20881
A=M+1 // 20882
A=A+1 // 20883
A=A+1 // 20884
D=M // 20885
@SP // 20886
AM=M+1 // 20887
A=A-1 // 20888
M=D // 20889
@ARG // 20890
A=M+1 // 20891
D=M // 20892
@SP // 20893
AM=M+1 // 20894
A=A-1 // 20895
M=D // 20896
// call Vec3.getZ
@6 // 20897
D=A // 20898
@14 // 20899
M=D // 20900
@Vec3.getZ // 20901
D=A // 20902
@13 // 20903
M=D // 20904
@Vec3.do_cross.ret.11 // 20905
D=A // 20906
@CALL // 20907
0;JMP // 20908
(Vec3.do_cross.ret.11)
// call Number.do_mul
@7 // 20909
D=A // 20910
@14 // 20911
M=D // 20912
@Number.do_mul // 20913
D=A // 20914
@13 // 20915
M=D // 20916
@Vec3.do_cross.ret.12 // 20917
D=A // 20918
@CALL // 20919
0;JMP // 20920
(Vec3.do_cross.ret.12)
@SP // 20921
M=M-1 // 20922

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 3")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20923
A=M+1 // 20924
A=A+1 // 20925
D=M // 20926
@SP // 20927
AM=M+1 // 20928
A=A-1 // 20929
M=D // 20930
@LCL // 20931
A=M+1 // 20932
A=A+1 // 20933
A=A+1 // 20934
D=M // 20935
@SP // 20936
AM=M+1 // 20937
A=A-1 // 20938
M=D // 20939
// call Number.do_sub
@7 // 20940
D=A // 20941
@14 // 20942
M=D // 20943
@Number.do_sub // 20944
D=A // 20945
@13 // 20946
M=D // 20947
@Vec3.do_cross.ret.13 // 20948
D=A // 20949
@CALL // 20950
0;JMP // 20951
(Vec3.do_cross.ret.13)
@SP // 20952
M=M-1 // 20953

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 4}
//}

@THIS // 20954
A=M // 20955
D=M // 20956
@SP // 20957
AM=M+1 // 20958
A=A-1 // 20959
M=D // 20960
// call Number.clone
@6 // 20961
D=A // 20962
@14 // 20963
M=D // 20964
@Number.clone // 20965
D=A // 20966
@13 // 20967
M=D // 20968
@Vec3.do_cross.ret.14 // 20969
D=A // 20970
@CALL // 20971
0;JMP // 20972
(Vec3.do_cross.ret.14)
@LCL // 20973
D=M // 20974
@4 // 20975
A=D+A // 20976
D=A // 20977
@R13 // 20978
M=D // 20979
@SP // 20980
AM=M-1 // 20981
D=M // 20982
@R13 // 20983
A=M // 20984
M=D // 20985

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20986
D=M // 20987
@4 // 20988
A=D+A // 20989
D=M // 20990
@SP // 20991
AM=M+1 // 20992
A=A-1 // 20993
M=D // 20994
@ARG // 20995
A=M+1 // 20996
D=M // 20997
@SP // 20998
AM=M+1 // 20999
A=A-1 // 21000
M=D // 21001
// call Vec3.getY
@6 // 21002
D=A // 21003
@14 // 21004
M=D // 21005
@Vec3.getY // 21006
D=A // 21007
@13 // 21008
M=D // 21009
@Vec3.do_cross.ret.15 // 21010
D=A // 21011
@CALL // 21012
0;JMP // 21013
(Vec3.do_cross.ret.15)
// call Number.do_mul
@7 // 21014
D=A // 21015
@14 // 21016
M=D // 21017
@Number.do_mul // 21018
D=A // 21019
@13 // 21020
M=D // 21021
@Vec3.do_cross.ret.16 // 21022
D=A // 21023
@CALL // 21024
0;JMP // 21025
(Vec3.do_cross.ret.16)
@SP // 21026
M=M-1 // 21027

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 5}
//}

@THIS // 21028
A=M+1 // 21029
D=M // 21030
@SP // 21031
AM=M+1 // 21032
A=A-1 // 21033
M=D // 21034
// call Number.clone
@6 // 21035
D=A // 21036
@14 // 21037
M=D // 21038
@Number.clone // 21039
D=A // 21040
@13 // 21041
M=D // 21042
@Vec3.do_cross.ret.17 // 21043
D=A // 21044
@CALL // 21045
0;JMP // 21046
(Vec3.do_cross.ret.17)
@LCL // 21047
D=M // 21048
@5 // 21049
A=D+A // 21050
D=A // 21051
@R13 // 21052
M=D // 21053
@SP // 21054
AM=M-1 // 21055
D=M // 21056
@R13 // 21057
A=M // 21058
M=D // 21059

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21060
D=M // 21061
@5 // 21062
A=D+A // 21063
D=M // 21064
@SP // 21065
AM=M+1 // 21066
A=A-1 // 21067
M=D // 21068
@ARG // 21069
A=M+1 // 21070
D=M // 21071
@SP // 21072
AM=M+1 // 21073
A=A-1 // 21074
M=D // 21075
// call Vec3.getX
@6 // 21076
D=A // 21077
@14 // 21078
M=D // 21079
@Vec3.getX // 21080
D=A // 21081
@13 // 21082
M=D // 21083
@Vec3.do_cross.ret.18 // 21084
D=A // 21085
@CALL // 21086
0;JMP // 21087
(Vec3.do_cross.ret.18)
// call Number.do_mul
@7 // 21088
D=A // 21089
@14 // 21090
M=D // 21091
@Number.do_mul // 21092
D=A // 21093
@13 // 21094
M=D // 21095
@Vec3.do_cross.ret.19 // 21096
D=A // 21097
@CALL // 21098
0;JMP // 21099
(Vec3.do_cross.ret.19)
@SP // 21100
M=M-1 // 21101

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 5")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21102
D=M // 21103
@4 // 21104
A=D+A // 21105
D=M // 21106
@SP // 21107
AM=M+1 // 21108
A=A-1 // 21109
M=D // 21110
@LCL // 21111
D=M // 21112
@5 // 21113
A=D+A // 21114
D=M // 21115
@SP // 21116
AM=M+1 // 21117
A=A-1 // 21118
M=D // 21119
// call Number.do_sub
@7 // 21120
D=A // 21121
@14 // 21122
M=D // 21123
@Number.do_sub // 21124
D=A // 21125
@13 // 21126
M=D // 21127
@Vec3.do_cross.ret.20 // 21128
D=A // 21129
@CALL // 21130
0;JMP // 21131
(Vec3.do_cross.ret.20)
@SP // 21132
M=M-1 // 21133

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21134
A=M+1 // 21135
D=M // 21136
@SP // 21137
AM=M+1 // 21138
A=A-1 // 21139
M=D // 21140
// call Number.dispose
@6 // 21141
D=A // 21142
@14 // 21143
M=D // 21144
@Number.dispose // 21145
D=A // 21146
@13 // 21147
M=D // 21148
@Vec3.do_cross.ret.21 // 21149
D=A // 21150
@CALL // 21151
0;JMP // 21152
(Vec3.do_cross.ret.21)
@SP // 21153
M=M-1 // 21154

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21155
A=M+1 // 21156
A=A+1 // 21157
A=A+1 // 21158
D=M // 21159
@SP // 21160
AM=M+1 // 21161
A=A-1 // 21162
M=D // 21163
// call Number.dispose
@6 // 21164
D=A // 21165
@14 // 21166
M=D // 21167
@Number.dispose // 21168
D=A // 21169
@13 // 21170
M=D // 21171
@Vec3.do_cross.ret.22 // 21172
D=A // 21173
@CALL // 21174
0;JMP // 21175
(Vec3.do_cross.ret.22)
@SP // 21176
M=M-1 // 21177

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21178
D=M // 21179
@5 // 21180
A=D+A // 21181
D=M // 21182
@SP // 21183
AM=M+1 // 21184
A=A-1 // 21185
M=D // 21186
// call Number.dispose
@6 // 21187
D=A // 21188
@14 // 21189
M=D // 21190
@Number.dispose // 21191
D=A // 21192
@13 // 21193
M=D // 21194
@Vec3.do_cross.ret.23 // 21195
D=A // 21196
@CALL // 21197
0;JMP // 21198
(Vec3.do_cross.ret.23)
@SP // 21199
M=M-1 // 21200

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 21201
A=M // 21202
D=M // 21203
@SP // 21204
AM=M+1 // 21205
A=A-1 // 21206
M=D // 21207
// call Number.dispose
@6 // 21208
D=A // 21209
@14 // 21210
M=D // 21211
@Number.dispose // 21212
D=A // 21213
@13 // 21214
M=D // 21215
@Vec3.do_cross.ret.24 // 21216
D=A // 21217
@CALL // 21218
0;JMP // 21219
(Vec3.do_cross.ret.24)
@SP // 21220
M=M-1 // 21221

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 21222
A=M+1 // 21223
D=M // 21224
@SP // 21225
AM=M+1 // 21226
A=A-1 // 21227
M=D // 21228
// call Number.dispose
@6 // 21229
D=A // 21230
@14 // 21231
M=D // 21232
@Number.dispose // 21233
D=A // 21234
@13 // 21235
M=D // 21236
@Vec3.do_cross.ret.25 // 21237
D=A // 21238
@CALL // 21239
0;JMP // 21240
(Vec3.do_cross.ret.25)
@SP // 21241
M=M-1 // 21242

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 21243
A=M+1 // 21244
A=A+1 // 21245
D=M // 21246
@SP // 21247
AM=M+1 // 21248
A=A-1 // 21249
M=D // 21250
// call Number.dispose
@6 // 21251
D=A // 21252
@14 // 21253
M=D // 21254
@Number.dispose // 21255
D=A // 21256
@13 // 21257
M=D // 21258
@Vec3.do_cross.ret.26 // 21259
D=A // 21260
@CALL // 21261
0;JMP // 21262
(Vec3.do_cross.ret.26)
@SP // 21263
M=M-1 // 21264

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=this 0}
//}

@LCL // 21265
A=M // 21266
D=M // 21267
@THIS // 21268
A=M // 21269
M=D // 21270

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=this 1}
//}

@LCL // 21271
A=M+1 // 21272
A=A+1 // 21273
D=M // 21274
@THIS // 21275
A=M+1 // 21276
M=D // 21277

////PushPopPair {
//  push: PushInstruction("local 4")
//  pop:  PopInstruction{address=this 2}
//}

@LCL // 21278
D=M // 21279
@4 // 21280
A=D+A // 21281
D=M // 21282
@THIS // 21283
A=M+1 // 21284
A=A+1 // 21285
M=D // 21286

////PushInstruction("constant 0")
@SP // 21287
AM=M+1 // 21288
A=A-1 // 21289
M=0 // 21290
@RETURN // 21291
0;JMP // 21292

////FunctionInstruction{functionName='Math.multiply', numLocals=3, funcMapping={Math.abs=1, Math.max=0}}
// function Math.multiply with 3
(Math.multiply)
@3 // 21293
D=A // 21294
@SP // 21295
AM=D+M // 21296
A=A-1 // 21297
M=0 // 21298
A=A-1 // 21299
M=0 // 21300
A=A-1 // 21301
M=0 // 21302

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE1}}
@Math.multiply.EQ.69 // 21303
D=A // 21304
@SP // 21305
AM=M+1 // 21306
A=A-1 // 21307
M=D // 21308
@ARG // 21309
A=M // 21310
D=M // 21311
@DO_EQ // 21312
0;JMP // 21313
(Math.multiply.EQ.69)
@SP // 21314
AM=M+1 // 21315
A=A-1 // 21316
M=D // 21317
@Math.multiply.EQ.70 // 21318
D=A // 21319
@SP // 21320
AM=M+1 // 21321
A=A-1 // 21322
M=D // 21323
@ARG // 21324
A=M+1 // 21325
D=M // 21326
@DO_EQ // 21327
0;JMP // 21328
(Math.multiply.EQ.70)
@SP // 21329
AM=M-1 // 21330
D=D|M // 21331
@Math.multiply$IF_TRUE1 // 21332
D;JNE // 21333

////GotoInstruction{label='Math.multiply$IF_FALSE1}
// goto Math.multiply$IF_FALSE1
@Math.multiply$IF_FALSE1 // 21334
0;JMP // 21335

////LabelInstruction{label='Math.multiply$IF_TRUE1}
// label Math.multiply$IF_TRUE1
(Math.multiply$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 21336
AM=M+1 // 21337
A=A-1 // 21338
M=0 // 21339
@RETURN // 21340
0;JMP // 21341

////LabelInstruction{label='Math.multiply$IF_FALSE1}
// label Math.multiply$IF_FALSE1
(Math.multiply$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE2}}
@Math.multiply.EQ.71 // 21342
D=A // 21343
@SP // 21344
AM=M+1 // 21345
A=A-1 // 21346
M=D // 21347
@ARG // 21348
A=M // 21349
D=M // 21350
D=D-1 // 21351
@DO_EQ // 21352
0;JMP // 21353
(Math.multiply.EQ.71)
@Math.multiply$IF_TRUE2 // 21354
D;JNE // 21355

////GotoInstruction{label='Math.multiply$IF_FALSE2}
// goto Math.multiply$IF_FALSE2
@Math.multiply$IF_FALSE2 // 21356
0;JMP // 21357

////LabelInstruction{label='Math.multiply$IF_TRUE2}
// label Math.multiply$IF_TRUE2
(Math.multiply$IF_TRUE2)

////PushInstruction("argument 1")
@ARG // 21358
A=M+1 // 21359
D=M // 21360
@SP // 21361
AM=M+1 // 21362
A=A-1 // 21363
M=D // 21364
@RETURN // 21365
0;JMP // 21366

////LabelInstruction{label='Math.multiply$IF_FALSE2}
// label Math.multiply$IF_FALSE2
(Math.multiply$IF_FALSE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE3}}
@Math.multiply.EQ.72 // 21367
D=A // 21368
@SP // 21369
AM=M+1 // 21370
A=A-1 // 21371
M=D // 21372
@ARG // 21373
A=M+1 // 21374
D=M // 21375
D=D-1 // 21376
@DO_EQ // 21377
0;JMP // 21378
(Math.multiply.EQ.72)
@Math.multiply$IF_TRUE3 // 21379
D;JNE // 21380

////GotoInstruction{label='Math.multiply$IF_FALSE3}
// goto Math.multiply$IF_FALSE3
@Math.multiply$IF_FALSE3 // 21381
0;JMP // 21382

////LabelInstruction{label='Math.multiply$IF_TRUE3}
// label Math.multiply$IF_TRUE3
(Math.multiply$IF_TRUE3)

////PushInstruction("argument 0")
@ARG // 21383
A=M // 21384
D=M // 21385
@SP // 21386
AM=M+1 // 21387
A=A-1 // 21388
M=D // 21389
@RETURN // 21390
0;JMP // 21391

////LabelInstruction{label='Math.multiply$IF_FALSE3}
// label Math.multiply$IF_FALSE3
(Math.multiply$IF_FALSE3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE4}}
@Math.multiply.EQ.73 // 21392
D=A // 21393
@SP // 21394
AM=M+1 // 21395
A=A-1 // 21396
M=D // 21397
@ARG // 21398
A=M // 21399
D=M // 21400
@2 // 21401
D=D-A // 21402
@DO_EQ // 21403
0;JMP // 21404
(Math.multiply.EQ.73)
@Math.multiply$IF_TRUE4 // 21405
D;JNE // 21406

////GotoInstruction{label='Math.multiply$IF_FALSE4}
// goto Math.multiply$IF_FALSE4
@Math.multiply$IF_FALSE4 // 21407
0;JMP // 21408

////LabelInstruction{label='Math.multiply$IF_TRUE4}
// label Math.multiply$IF_TRUE4
(Math.multiply$IF_TRUE4)

////BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("argument 1"),
//    binaryOp: "ADD"
//)
@ARG // 21409
A=M+1 // 21410
D=M // 21411
D=D+M // 21412
@SP // 21413
AM=M+1 // 21414
A=A-1 // 21415
M=D // 21416
@RETURN // 21417
0;JMP // 21418

////LabelInstruction{label='Math.multiply$IF_FALSE4}
// label Math.multiply$IF_FALSE4
(Math.multiply$IF_FALSE4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE5}}
@Math.multiply.EQ.74 // 21419
D=A // 21420
@SP // 21421
AM=M+1 // 21422
A=A-1 // 21423
M=D // 21424
@ARG // 21425
A=M+1 // 21426
D=M // 21427
@2 // 21428
D=D-A // 21429
@DO_EQ // 21430
0;JMP // 21431
(Math.multiply.EQ.74)
@Math.multiply$IF_TRUE5 // 21432
D;JNE // 21433

////GotoInstruction{label='Math.multiply$IF_FALSE5}
// goto Math.multiply$IF_FALSE5
@Math.multiply$IF_FALSE5 // 21434
0;JMP // 21435

////LabelInstruction{label='Math.multiply$IF_TRUE5}
// label Math.multiply$IF_TRUE5
(Math.multiply$IF_TRUE5)

////BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
@ARG // 21436
A=M // 21437
D=M // 21438
D=D+M // 21439
@SP // 21440
AM=M+1 // 21441
A=A-1 // 21442
M=D // 21443
@RETURN // 21444
0;JMP // 21445

////LabelInstruction{label='Math.multiply$IF_FALSE5}
// label Math.multiply$IF_FALSE5
(Math.multiply$IF_FALSE5)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 21446
A=M+1 // 21447
A=A+1 // 21448
M=1 // 21449

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 21450
A=M+1 // 21451
M=0 // 21452

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 21453
A=M // 21454
M=0 // 21455

////LabelInstruction{label='Math.multiply_WHILE_EXP1}
// label Math.multiply_WHILE_EXP1
(Math.multiply_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.multiply_WHILE_END1}}
@Math.multiply.LT.75 // 21456
D=A // 21457
@SP // 21458
AM=M+1 // 21459
A=A-1 // 21460
M=D // 21461
@LCL // 21462
A=M+1 // 21463
D=M // 21464
@16 // 21465
D=D-A // 21466
@DO_LT // 21467
0;JMP // 21468
(Math.multiply.LT.75)
D=!D // 21469
@Math.multiply_WHILE_END1 // 21470
D;JNE // 21471

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("argument 1"),
//                right:
//                    PushInstruction("local 2"),
//                binaryOp: "AND"
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE6}}
@Math.multiply.EQ.76 // 21472
D=A // 21473
@SP // 21474
AM=M+1 // 21475
A=A-1 // 21476
M=D // 21477
@ARG // 21478
A=M+1 // 21479
D=M // 21480
@SP // 21481
AM=M+1 // 21482
A=A-1 // 21483
M=D // 21484
@LCL // 21485
A=M+1 // 21486
A=A+1 // 21487
D=M // 21488
@SP // 21489
AM=M-1 // 21490
D=D&M // 21491
@DO_EQ // 21492
0;JMP // 21493
(Math.multiply.EQ.76)
D=!D // 21494
@Math.multiply$IF_TRUE6 // 21495
D;JNE // 21496

////GotoInstruction{label='Math.multiply$IF_FALSE6}
// goto Math.multiply$IF_FALSE6
@Math.multiply$IF_FALSE6 // 21497
0;JMP // 21498

////LabelInstruction{label='Math.multiply$IF_TRUE6}
// label Math.multiply$IF_TRUE6
(Math.multiply$IF_TRUE6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 21499
A=M // 21500
D=M // 21501
@LCL // 21502
A=M // 21503
M=D+M // 21504

////LabelInstruction{label='Math.multiply$IF_FALSE6}
// label Math.multiply$IF_FALSE6
(Math.multiply$IF_FALSE6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=argument 0}
//}

@ARG // 21505
A=M // 21506
D=M // 21507
@ARG // 21508
A=M // 21509
M=D+M // 21510

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 21511
A=M+1 // 21512
M=M+1 // 21513

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 21514
A=M+1 // 21515
A=A+1 // 21516
D=M // 21517
@LCL // 21518
A=M+1 // 21519
A=A+1 // 21520
M=D+M // 21521

////GotoInstruction{label='Math.multiply_WHILE_EXP1}
// goto Math.multiply_WHILE_EXP1
@Math.multiply_WHILE_EXP1 // 21522
0;JMP // 21523

////LabelInstruction{label='Math.multiply_WHILE_END1}
// label Math.multiply_WHILE_END1
(Math.multiply_WHILE_END1)

////PushInstruction("local 0")
@LCL // 21524
A=M // 21525
D=M // 21526
@SP // 21527
AM=M+1 // 21528
A=A-1 // 21529
M=D // 21530
@RETURN // 21531
0;JMP // 21532

////FunctionInstruction{functionName='Int32.do_left_shift_bytes', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_left_shift_bytes with 0
(Int32.do_left_shift_bytes)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 21533
A=M // 21534
D=M // 21535
@3 // 21536
M=D // 21537

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes$IF_TRUE1}}
@Int32.do_left_shift_bytes.LT.77 // 21538
D=A // 21539
@SP // 21540
AM=M+1 // 21541
A=A-1 // 21542
M=D // 21543
@ARG // 21544
A=M+1 // 21545
D=M // 21546
@DO_LT // 21547
0;JMP // 21548
(Int32.do_left_shift_bytes.LT.77)
@SP // 21549
AM=M+1 // 21550
A=A-1 // 21551
M=D // 21552
@Int32.do_left_shift_bytes.EQ.78 // 21553
D=A // 21554
@SP // 21555
AM=M+1 // 21556
A=A-1 // 21557
M=D // 21558
@ARG // 21559
A=M+1 // 21560
D=M // 21561
@DO_EQ // 21562
0;JMP // 21563
(Int32.do_left_shift_bytes.EQ.78)
@SP // 21564
AM=M-1 // 21565
D=D|M // 21566
@Int32.do_left_shift_bytes$IF_TRUE1 // 21567
D;JNE // 21568

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_FALSE1}
// goto Int32.do_left_shift_bytes$IF_FALSE1
@Int32.do_left_shift_bytes$IF_FALSE1 // 21569
0;JMP // 21570

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_TRUE1}
// label Int32.do_left_shift_bytes$IF_TRUE1
(Int32.do_left_shift_bytes$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 21571
AM=M+1 // 21572
A=A-1 // 21573
M=0 // 21574
@RETURN // 21575
0;JMP // 21576

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_FALSE1}
// label Int32.do_left_shift_bytes$IF_FALSE1
(Int32.do_left_shift_bytes$IF_FALSE1)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 3"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 21577
A=M // 21578
D=M // 21579
@3 // 21580
D=D+A // 21581
@SP // 21582
AM=M+1 // 21583
A=A-1 // 21584
M=D // 21585
@THIS // 21586
A=M // 21587
D=M // 21588
@SP // 21589
AM=M+1 // 21590
A=A-1 // 21591
M=D // 21592
@ARG // 21593
A=M+1 // 21594
D=M // 21595
@3 // 21596
D=A-D // 21597
@SP // 21598
AM=M-1 // 21599
A=D+M // 21600
D=M // 21601
@SP // 21602
AM=M-1 // 21603
A=M // 21604
M=D // 21605

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes$IF_TRUE2}}
@Int32.do_left_shift_bytes.LT.79 // 21606
D=A // 21607
@SP // 21608
AM=M+1 // 21609
A=A-1 // 21610
M=D // 21611
@ARG // 21612
A=M+1 // 21613
D=M // 21614
@3 // 21615
D=D-A // 21616
@DO_LT // 21617
0;JMP // 21618
(Int32.do_left_shift_bytes.LT.79)
@Int32.do_left_shift_bytes$IF_TRUE2 // 21619
D;JNE // 21620

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_FALSE2}
// goto Int32.do_left_shift_bytes$IF_FALSE2
@Int32.do_left_shift_bytes$IF_FALSE2 // 21621
0;JMP // 21622

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_TRUE2}
// label Int32.do_left_shift_bytes$IF_TRUE2
(Int32.do_left_shift_bytes$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 2"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 21623
A=M // 21624
D=M // 21625
@2 // 21626
D=D+A // 21627
@SP // 21628
AM=M+1 // 21629
A=A-1 // 21630
M=D // 21631
@THIS // 21632
A=M // 21633
D=M // 21634
@SP // 21635
AM=M+1 // 21636
A=A-1 // 21637
M=D // 21638
@ARG // 21639
A=M+1 // 21640
D=M // 21641
@2 // 21642
D=A-D // 21643
@SP // 21644
AM=M-1 // 21645
A=D+M // 21646
D=M // 21647
@SP // 21648
AM=M-1 // 21649
A=M // 21650
M=D // 21651

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_END2}
// goto Int32.do_left_shift_bytes$IF_END2
@Int32.do_left_shift_bytes$IF_END2 // 21652
0;JMP // 21653

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_FALSE2}
// label Int32.do_left_shift_bytes$IF_FALSE2
(Int32.do_left_shift_bytes$IF_FALSE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 21654
A=M // 21655
D=M // 21656
@2 // 21657
D=D+A // 21658
@SP // 21659
AM=M+1 // 21660
A=A-1 // 21661
M=D // 21662
D=0 // 21663
@SP // 21664
AM=M-1 // 21665
A=M // 21666
M=D // 21667

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_END2}
// label Int32.do_left_shift_bytes$IF_END2
(Int32.do_left_shift_bytes$IF_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes$IF_TRUE3}}
@Int32.do_left_shift_bytes.LT.80 // 21668
D=A // 21669
@SP // 21670
AM=M+1 // 21671
A=A-1 // 21672
M=D // 21673
@ARG // 21674
A=M+1 // 21675
D=M // 21676
@2 // 21677
D=D-A // 21678
@DO_LT // 21679
0;JMP // 21680
(Int32.do_left_shift_bytes.LT.80)
@Int32.do_left_shift_bytes$IF_TRUE3 // 21681
D;JNE // 21682

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_FALSE3}
// goto Int32.do_left_shift_bytes$IF_FALSE3
@Int32.do_left_shift_bytes$IF_FALSE3 // 21683
0;JMP // 21684

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_TRUE3}
// label Int32.do_left_shift_bytes$IF_TRUE3
(Int32.do_left_shift_bytes$IF_TRUE3)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 1"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 21685
A=M // 21686
D=M // 21687
@SP // 21688
AM=M+1 // 21689
A=A-1 // 21690
M=D+1 // 21691
@THIS // 21692
A=M // 21693
D=M // 21694
@SP // 21695
AM=M+1 // 21696
A=A-1 // 21697
M=D // 21698
@ARG // 21699
A=M+1 // 21700
D=M // 21701
D=D-1 // 21702
D=-D // 21703
@SP // 21704
AM=M-1 // 21705
A=D+M // 21706
D=M // 21707
@SP // 21708
AM=M-1 // 21709
A=M // 21710
M=D // 21711

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_END3}
// goto Int32.do_left_shift_bytes$IF_END3
@Int32.do_left_shift_bytes$IF_END3 // 21712
0;JMP // 21713

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_FALSE3}
// label Int32.do_left_shift_bytes$IF_FALSE3
(Int32.do_left_shift_bytes$IF_FALSE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 21714
A=M // 21715
D=M // 21716
@SP // 21717
AM=M+1 // 21718
A=A-1 // 21719
M=D+1 // 21720
D=0 // 21721
@SP // 21722
AM=M-1 // 21723
A=M // 21724
M=D // 21725

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_END3}
// label Int32.do_left_shift_bytes$IF_END3
(Int32.do_left_shift_bytes$IF_END3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 21726
A=M // 21727
D=M // 21728
@SP // 21729
AM=M+1 // 21730
A=A-1 // 21731
M=D // 21732
D=0 // 21733
@SP // 21734
AM=M-1 // 21735
A=M // 21736
M=D // 21737

////PushInstruction("constant 0")
@SP // 21738
AM=M+1 // 21739
A=A-1 // 21740
M=0 // 21741
@RETURN // 21742
0;JMP // 21743

////FunctionInstruction{functionName='Memory.copy', numLocals=1, funcMapping={Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.copy with 1
(Memory.copy)
@SP // 21744
AM=M+1 // 21745
A=A-1 // 21746
M=0 // 21747

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 21748
A=M // 21749
M=0 // 21750

////LabelInstruction{label='Memory.copy_WHILE_EXP1}
// label Memory.copy_WHILE_EXP1
(Memory.copy_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.copy_WHILE_END1}}
@Memory.copy.LT.81 // 21751
D=A // 21752
@SP // 21753
AM=M+1 // 21754
A=A-1 // 21755
M=D // 21756
@LCL // 21757
A=M // 21758
D=M // 21759
@SP // 21760
AM=M+1 // 21761
A=A-1 // 21762
M=D // 21763
@ARG // 21764
A=M+1 // 21765
A=A+1 // 21766
D=M // 21767
@SP // 21768
AM=M-1 // 21769
D=M-D // 21770
@DO_LT // 21771
0;JMP // 21772
(Memory.copy.LT.81)
D=!D // 21773
@Memory.copy_WHILE_END1 // 21774
D;JNE // 21775

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@ARG // 21776
A=M+1 // 21777
D=M // 21778
@SP // 21779
AM=M+1 // 21780
A=A-1 // 21781
M=D // 21782
@LCL // 21783
A=M // 21784
D=M // 21785
@SP // 21786
AM=M-1 // 21787
D=D+M // 21788
@SP // 21789
AM=M+1 // 21790
A=A-1 // 21791
M=D // 21792
@ARG // 21793
A=M // 21794
D=M // 21795
@SP // 21796
AM=M+1 // 21797
A=A-1 // 21798
M=D // 21799
@LCL // 21800
A=M // 21801
D=M // 21802
@SP // 21803
AM=M-1 // 21804
A=D+M // 21805
D=M // 21806
@SP // 21807
AM=M-1 // 21808
A=M // 21809
M=D // 21810

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 21811
A=M // 21812
M=M+1 // 21813

////GotoInstruction{label='Memory.copy_WHILE_EXP1}
// goto Memory.copy_WHILE_EXP1
@Memory.copy_WHILE_EXP1 // 21814
0;JMP // 21815

////LabelInstruction{label='Memory.copy_WHILE_END1}
// label Memory.copy_WHILE_END1
(Memory.copy_WHILE_END1)

////PushInstruction("constant 0")
@SP // 21816
AM=M+1 // 21817
A=A-1 // 21818
M=0 // 21819
@RETURN // 21820
0;JMP // 21821

////FunctionInstruction{functionName='Ray.getDirection', numLocals=0, funcMapping={}}
// function Ray.getDirection with 0
(Ray.getDirection)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 21822
A=M // 21823
D=M // 21824
@3 // 21825
M=D // 21826

////PushInstruction("this 1")
@THIS // 21827
A=M+1 // 21828
D=M // 21829
@SP // 21830
AM=M+1 // 21831
A=A-1 // 21832
M=D // 21833
@RETURN // 21834
0;JMP // 21835

////FunctionInstruction{functionName='Int32.arith_rightshift', numLocals=3, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.arith_rightshift with 3
(Int32.arith_rightshift)
@3 // 21836
D=A // 21837
@SP // 21838
AM=D+M // 21839
A=A-1 // 21840
M=0 // 21841
A=A-1 // 21842
M=0 // 21843
A=A-1 // 21844
M=0 // 21845

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE1}}
@Int32.arith_rightshift.EQ.82 // 21846
D=A // 21847
@SP // 21848
AM=M+1 // 21849
A=A-1 // 21850
M=D // 21851
@ARG // 21852
A=M // 21853
D=M // 21854
@DO_EQ // 21855
0;JMP // 21856
(Int32.arith_rightshift.EQ.82)
@Int32.arith_rightshift$IF_TRUE1 // 21857
D;JNE // 21858

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE1}
// goto Int32.arith_rightshift$IF_FALSE1
@Int32.arith_rightshift$IF_FALSE1 // 21859
0;JMP // 21860

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE1}
// label Int32.arith_rightshift$IF_TRUE1
(Int32.arith_rightshift$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 21861
AM=M+1 // 21862
A=A-1 // 21863
M=0 // 21864
@RETURN // 21865
0;JMP // 21866

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE1}
// label Int32.arith_rightshift$IF_FALSE1
(Int32.arith_rightshift$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE2}}
@Int32.arith_rightshift.EQ.83 // 21867
D=A // 21868
@SP // 21869
AM=M+1 // 21870
A=A-1 // 21871
M=D // 21872
@ARG // 21873
A=M+1 // 21874
D=M // 21875
@DO_EQ // 21876
0;JMP // 21877
(Int32.arith_rightshift.EQ.83)
@Int32.arith_rightshift$IF_TRUE2 // 21878
D;JNE // 21879

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE2}
// goto Int32.arith_rightshift$IF_FALSE2
@Int32.arith_rightshift$IF_FALSE2 // 21880
0;JMP // 21881

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE2}
// label Int32.arith_rightshift$IF_TRUE2
(Int32.arith_rightshift$IF_TRUE2)

////PushInstruction("argument 0")
@ARG // 21882
A=M // 21883
D=M // 21884
@SP // 21885
AM=M+1 // 21886
A=A-1 // 21887
M=D // 21888
@RETURN // 21889
0;JMP // 21890

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE2}
// label Int32.arith_rightshift$IF_FALSE2
(Int32.arith_rightshift$IF_FALSE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE3}}
@Int32.arith_rightshift.GT.84 // 21891
D=A // 21892
@SP // 21893
AM=M+1 // 21894
A=A-1 // 21895
M=D // 21896
@ARG // 21897
A=M // 21898
D=M // 21899
@DO_GT // 21900
0;JMP // 21901
(Int32.arith_rightshift.GT.84)
@Int32.arith_rightshift$IF_TRUE3 // 21902
D;JNE // 21903

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE3}
// goto Int32.arith_rightshift$IF_FALSE3
@Int32.arith_rightshift$IF_FALSE3 // 21904
0;JMP // 21905

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE3}
// label Int32.arith_rightshift$IF_TRUE3
(Int32.arith_rightshift$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 1"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 21906
A=M // 21907
D=M // 21908
@SP // 21909
AM=M+1 // 21910
A=A-1 // 21911
M=D // 21912
@Int32.1 // 21913
D=M // 21914
@SP // 21915
AM=M+1 // 21916
A=A-1 // 21917
M=D // 21918
@ARG // 21919
A=M+1 // 21920
D=M // 21921
@SP // 21922
AM=M-1 // 21923
A=D+M // 21924
D=M // 21925
@SP // 21926
AM=M+1 // 21927
A=A-1 // 21928
M=D // 21929
// call Math.divide
@7 // 21930
D=A // 21931
@14 // 21932
M=D // 21933
@Math.divide // 21934
D=A // 21935
@13 // 21936
M=D // 21937
@Int32.arith_rightshift.ret.0 // 21938
D=A // 21939
@CALL // 21940
0;JMP // 21941
(Int32.arith_rightshift.ret.0)
@SP // 21942
AM=M-1 // 21943
D=M // 21944
@LCL // 21945
A=M // 21946
M=D // 21947

////GotoInstruction{label='Int32.arith_rightshift$IF_END3}
// goto Int32.arith_rightshift$IF_END3
@Int32.arith_rightshift$IF_END3 // 21948
0;JMP // 21949

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE3}
// label Int32.arith_rightshift$IF_FALSE3
(Int32.arith_rightshift$IF_FALSE3)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 21950
A=M // 21951
D=M // 21952
@LCL // 21953
A=M // 21954
M=D // 21955

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 21956
A=M+1 // 21957
M=0 // 21958

////LabelInstruction{label='Int32.arith_rightshift_WHILE_EXP1}
// label Int32.arith_rightshift_WHILE_EXP1
(Int32.arith_rightshift_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift_WHILE_END1}}
@Int32.arith_rightshift.LT.85 // 21959
D=A // 21960
@SP // 21961
AM=M+1 // 21962
A=A-1 // 21963
M=D // 21964
@LCL // 21965
A=M+1 // 21966
D=M // 21967
@SP // 21968
AM=M+1 // 21969
A=A-1 // 21970
M=D // 21971
@ARG // 21972
A=M+1 // 21973
D=M // 21974
@SP // 21975
AM=M-1 // 21976
D=M-D // 21977
@DO_LT // 21978
0;JMP // 21979
(Int32.arith_rightshift.LT.85)
D=!D // 21980
@Int32.arith_rightshift_WHILE_END1 // 21981
D;JNE // 21982

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 21983
A=M // 21984
D=M // 21985
@SP // 21986
AM=M+1 // 21987
A=A-1 // 21988
M=D // 21989
@2 // 21990
D=A // 21991
@SP // 21992
AM=M+1 // 21993
A=A-1 // 21994
M=D // 21995
// call Math.divide
@7 // 21996
D=A // 21997
@14 // 21998
M=D // 21999
@Math.divide // 22000
D=A // 22001
@13 // 22002
M=D // 22003
@Int32.arith_rightshift.ret.1 // 22004
D=A // 22005
@CALL // 22006
0;JMP // 22007
(Int32.arith_rightshift.ret.1)
@SP // 22008
AM=M-1 // 22009
D=M // 22010
@LCL // 22011
A=M+1 // 22012
A=A+1 // 22013
M=D // 22014

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE4}}
@Int32.arith_rightshift.EQ.86 // 22015
D=A // 22016
@SP // 22017
AM=M+1 // 22018
A=A-1 // 22019
M=D // 22020
@LCL // 22021
A=M // 22022
D=M // 22023
@1 // 22024
D=D&A // 22025
@DO_EQ // 22026
0;JMP // 22027
(Int32.arith_rightshift.EQ.86)
@Int32.arith_rightshift$IF_TRUE4 // 22028
D;JNE // 22029

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE4}
// goto Int32.arith_rightshift$IF_FALSE4
@Int32.arith_rightshift$IF_FALSE4 // 22030
0;JMP // 22031

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE4}
// label Int32.arith_rightshift$IF_TRUE4
(Int32.arith_rightshift$IF_TRUE4)

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 22032
A=M+1 // 22033
A=A+1 // 22034
D=M // 22035
@LCL // 22036
A=M // 22037
M=D // 22038

////GotoInstruction{label='Int32.arith_rightshift$IF_END4}
// goto Int32.arith_rightshift$IF_END4
@Int32.arith_rightshift$IF_END4 // 22039
0;JMP // 22040

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE4}
// label Int32.arith_rightshift$IF_FALSE4
(Int32.arith_rightshift$IF_FALSE4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 22041
A=M+1 // 22042
A=A+1 // 22043
D=M // 22044
D=D-1 // 22045
@LCL // 22046
A=M // 22047
M=D // 22048

////LabelInstruction{label='Int32.arith_rightshift$IF_END4}
// label Int32.arith_rightshift$IF_END4
(Int32.arith_rightshift$IF_END4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        UnaryPushGroup(            PushInstruction("constant 1"),
//NEG),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE5}}
@Int32.arith_rightshift.EQ.87 // 22049
D=A // 22050
@SP // 22051
AM=M+1 // 22052
A=A-1 // 22053
M=D // 22054
@LCL // 22055
A=M // 22056
D=M // 22057
D=D+1 // 22058
@DO_EQ // 22059
0;JMP // 22060
(Int32.arith_rightshift.EQ.87)
@Int32.arith_rightshift$IF_TRUE5 // 22061
D;JNE // 22062

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE5}
// goto Int32.arith_rightshift$IF_FALSE5
@Int32.arith_rightshift$IF_FALSE5 // 22063
0;JMP // 22064

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE5}
// label Int32.arith_rightshift$IF_TRUE5
(Int32.arith_rightshift$IF_TRUE5)

////PushInstruction("local 0")
@LCL // 22065
A=M // 22066
D=M // 22067
@SP // 22068
AM=M+1 // 22069
A=A-1 // 22070
M=D // 22071
@RETURN // 22072
0;JMP // 22073

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE5}
// label Int32.arith_rightshift$IF_FALSE5
(Int32.arith_rightshift$IF_FALSE5)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 22074
A=M+1 // 22075
M=M+1 // 22076

////GotoInstruction{label='Int32.arith_rightshift_WHILE_EXP1}
// goto Int32.arith_rightshift_WHILE_EXP1
@Int32.arith_rightshift_WHILE_EXP1 // 22077
0;JMP // 22078

////LabelInstruction{label='Int32.arith_rightshift_WHILE_END1}
// label Int32.arith_rightshift_WHILE_END1
(Int32.arith_rightshift_WHILE_END1)

////LabelInstruction{label='Int32.arith_rightshift$IF_END3}
// label Int32.arith_rightshift$IF_END3
(Int32.arith_rightshift$IF_END3)

////PushInstruction("local 0")
@LCL // 22079
A=M // 22080
D=M // 22081
@SP // 22082
AM=M+1 // 22083
A=A-1 // 22084
M=D // 22085
@RETURN // 22086
0;JMP // 22087

////FunctionInstruction{functionName='Main.main', numLocals=9, funcMapping={Main.render=64, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.getFourFifths=4}}
// function Main.main with 9
(Main.main)
@9 // 22088
D=A // 22089
@SP // 22090
AM=D+M // 22091
A=A-1 // 22092
M=0 // 22093
A=A-1 // 22094
M=0 // 22095
A=A-1 // 22096
M=0 // 22097
A=A-1 // 22098
M=0 // 22099
A=A-1 // 22100
M=0 // 22101
A=A-1 // 22102
M=0 // 22103
A=A-1 // 22104
M=0 // 22105
A=A-1 // 22106
M=0 // 22107
A=A-1 // 22108
M=0 // 22109

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Int32.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Int32.initialize
@5 // 22110
D=A // 22111
@14 // 22112
M=D // 22113
@Int32.initialize // 22114
D=A // 22115
@13 // 22116
M=D // 22117
@Main.main.ret.0 // 22118
D=A // 22119
@CALL // 22120
0;JMP // 22121
(Main.main.ret.0)
@SP // 22122
M=M-1 // 22123

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Number.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Number.initialize
@5 // 22124
D=A // 22125
@14 // 22126
M=D // 22127
@Number.initialize // 22128
D=A // 22129
@13 // 22130
M=D // 22131
@Main.main.ret.1 // 22132
D=A // 22133
@CALL // 22134
0;JMP // 22135
(Main.main.ret.1)
@SP // 22136
M=M-1 // 22137

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Plane.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Plane.initialize
@5 // 22138
D=A // 22139
@14 // 22140
M=D // 22141
@Plane.initialize // 22142
D=A // 22143
@13 // 22144
M=D // 22145
@Main.main.ret.2 // 22146
D=A // 22147
@CALL // 22148
0;JMP // 22149
(Main.main.ret.2)
@SP // 22150
M=M-1 // 22151

////PushPopPair {
//  push: PushInstruction("constant 5")
//  pop:  PopInstruction{address=local 1}
//}

@5 // 22152
D=A // 22153
@LCL // 22154
A=M+1 // 22155
M=D // 22156

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 22157
A=M+1 // 22158
D=M // 22159
@SP // 22160
AM=M+1 // 22161
A=A-1 // 22162
M=D // 22163
// call Array.new
@6 // 22164
D=A // 22165
@14 // 22166
M=D // 22167
@Array.new // 22168
D=A // 22169
@13 // 22170
M=D // 22171
@Main.main.ret.3 // 22172
D=A // 22173
@CALL // 22174
0;JMP // 22175
(Main.main.ret.3)
@SP // 22176
AM=M-1 // 22177
D=M // 22178
@LCL // 22179
A=M+1 // 22180
A=A+1 // 22181
M=D // 22182

////PushPopPair {
//  push: PushInstruction("constant 3")
//  pop:  PopInstruction{address=local 3}
//}

@3 // 22183
D=A // 22184
@LCL // 22185
A=M+1 // 22186
A=A+1 // 22187
A=A+1 // 22188
M=D // 22189

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 22190
A=M+1 // 22191
A=A+1 // 22192
A=A+1 // 22193
D=M // 22194
@SP // 22195
AM=M+1 // 22196
A=A-1 // 22197
M=D // 22198
// call Array.new
@6 // 22199
D=A // 22200
@14 // 22201
M=D // 22202
@Array.new // 22203
D=A // 22204
@13 // 22205
M=D // 22206
@Main.main.ret.4 // 22207
D=A // 22208
@CALL // 22209
0;JMP // 22210
(Main.main.ret.4)
@LCL // 22211
D=M // 22212
@4 // 22213
A=D+A // 22214
D=A // 22215
@R13 // 22216
M=D // 22217
@SP // 22218
AM=M-1 // 22219
D=M // 22220
@R13 // 22221
A=M // 22222
M=D // 22223

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 6"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getNegativeOneHalf}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 5"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getThreeHalves}}, CallGroup{pushes=[], call=CallInstruction{Main.getFourFifths}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 22224
A=M+1 // 22225
A=A+1 // 22226
D=M // 22227
@SP // 22228
AM=M+1 // 22229
A=A-1 // 22230
M=D // 22231
@6 // 22232
D=-A // 22233
@SP // 22234
AM=M+1 // 22235
A=A-1 // 22236
M=D // 22237
// call Number.new
@6 // 22238
D=A // 22239
@14 // 22240
M=D // 22241
@Number.new // 22242
D=A // 22243
@13 // 22244
M=D // 22245
@Main.main.ret.5 // 22246
D=A // 22247
@CALL // 22248
0;JMP // 22249
(Main.main.ret.5)
// call Main.getNegativeOneHalf
@5 // 22250
D=A // 22251
@14 // 22252
M=D // 22253
@Main.getNegativeOneHalf // 22254
D=A // 22255
@13 // 22256
M=D // 22257
@Main.main.ret.6 // 22258
D=A // 22259
@CALL // 22260
0;JMP // 22261
(Main.main.ret.6)
@5 // 22262
D=-A // 22263
@SP // 22264
AM=M+1 // 22265
A=A-1 // 22266
M=D // 22267
// call Number.new
@6 // 22268
D=A // 22269
@14 // 22270
M=D // 22271
@Number.new // 22272
D=A // 22273
@13 // 22274
M=D // 22275
@Main.main.ret.7 // 22276
D=A // 22277
@CALL // 22278
0;JMP // 22279
(Main.main.ret.7)
// call Vec3.new
@8 // 22280
D=A // 22281
@14 // 22282
M=D // 22283
@Vec3.new // 22284
D=A // 22285
@13 // 22286
M=D // 22287
@Main.main.ret.8 // 22288
D=A // 22289
@CALL // 22290
0;JMP // 22291
(Main.main.ret.8)
// call Main.getThreeHalves
@5 // 22292
D=A // 22293
@14 // 22294
M=D // 22295
@Main.getThreeHalves // 22296
D=A // 22297
@13 // 22298
M=D // 22299
@Main.main.ret.9 // 22300
D=A // 22301
@CALL // 22302
0;JMP // 22303
(Main.main.ret.9)
// call Main.getFourFifths
@5 // 22304
D=A // 22305
@14 // 22306
M=D // 22307
@Main.getFourFifths // 22308
D=A // 22309
@13 // 22310
M=D // 22311
@Main.main.ret.10 // 22312
D=A // 22313
@CALL // 22314
0;JMP // 22315
(Main.main.ret.10)
// call Sphere.new
@8 // 22316
D=A // 22317
@14 // 22318
M=D // 22319
@Sphere.new // 22320
D=A // 22321
@13 // 22322
M=D // 22323
@Main.main.ret.11 // 22324
D=A // 22325
@CALL // 22326
0;JMP // 22327
(Main.main.ret.11)
// call Element.sphere
@6 // 22328
D=A // 22329
@14 // 22330
M=D // 22331
@Element.sphere // 22332
D=A // 22333
@13 // 22334
M=D // 22335
@Main.main.ret.12 // 22336
D=A // 22337
@CALL // 22338
0;JMP // 22339
(Main.main.ret.12)
@SP // 22340
AM=M-1 // 22341
D=M // 22342
@SP // 22343
AM=M-1 // 22344
A=M // 22345
M=D // 22346

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 5"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getThreeFifths}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 22347
A=M+1 // 22348
A=A+1 // 22349
D=M // 22350
@SP // 22351
AM=M+1 // 22352
A=A-1 // 22353
M=D+1 // 22354
@SP // 22355
AM=M+1 // 22356
A=A-1 // 22357
M=-1 // 22358
// call Number.new
@6 // 22359
D=A // 22360
@14 // 22361
M=D // 22362
@Number.new // 22363
D=A // 22364
@13 // 22365
M=D // 22366
@Main.main.ret.13 // 22367
D=A // 22368
@CALL // 22369
0;JMP // 22370
(Main.main.ret.13)
@SP // 22371
AM=M+1 // 22372
A=A-1 // 22373
M=-1 // 22374
// call Number.new
@6 // 22375
D=A // 22376
@14 // 22377
M=D // 22378
@Number.new // 22379
D=A // 22380
@13 // 22381
M=D // 22382
@Main.main.ret.14 // 22383
D=A // 22384
@CALL // 22385
0;JMP // 22386
(Main.main.ret.14)
@5 // 22387
D=-A // 22388
@SP // 22389
AM=M+1 // 22390
A=A-1 // 22391
M=D // 22392
// call Number.new
@6 // 22393
D=A // 22394
@14 // 22395
M=D // 22396
@Number.new // 22397
D=A // 22398
@13 // 22399
M=D // 22400
@Main.main.ret.15 // 22401
D=A // 22402
@CALL // 22403
0;JMP // 22404
(Main.main.ret.15)
// call Vec3.new
@8 // 22405
D=A // 22406
@14 // 22407
M=D // 22408
@Vec3.new // 22409
D=A // 22410
@13 // 22411
M=D // 22412
@Main.main.ret.16 // 22413
D=A // 22414
@CALL // 22415
0;JMP // 22416
(Main.main.ret.16)
@SP // 22417
AM=M+1 // 22418
A=A-1 // 22419
M=1 // 22420
// call Number.new
@6 // 22421
D=A // 22422
@14 // 22423
M=D // 22424
@Number.new // 22425
D=A // 22426
@13 // 22427
M=D // 22428
@Main.main.ret.17 // 22429
D=A // 22430
@CALL // 22431
0;JMP // 22432
(Main.main.ret.17)
// call Main.getThreeFifths
@5 // 22433
D=A // 22434
@14 // 22435
M=D // 22436
@Main.getThreeFifths // 22437
D=A // 22438
@13 // 22439
M=D // 22440
@Main.main.ret.18 // 22441
D=A // 22442
@CALL // 22443
0;JMP // 22444
(Main.main.ret.18)
// call Sphere.new
@8 // 22445
D=A // 22446
@14 // 22447
M=D // 22448
@Sphere.new // 22449
D=A // 22450
@13 // 22451
M=D // 22452
@Main.main.ret.19 // 22453
D=A // 22454
@CALL // 22455
0;JMP // 22456
(Main.main.ret.19)
// call Element.sphere
@6 // 22457
D=A // 22458
@14 // 22459
M=D // 22460
@Element.sphere // 22461
D=A // 22462
@13 // 22463
M=D // 22464
@Main.main.ret.20 // 22465
D=A // 22466
@CALL // 22467
0;JMP // 22468
(Main.main.ret.20)
@SP // 22469
AM=M-1 // 22470
D=M // 22471
@SP // 22472
AM=M-1 // 22473
A=M // 22474
M=D // 22475

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 3"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 22476
A=M+1 // 22477
A=A+1 // 22478
D=M // 22479
@2 // 22480
D=D+A // 22481
@SP // 22482
AM=M+1 // 22483
A=A-1 // 22484
M=D // 22485
@2 // 22486
D=A // 22487
@SP // 22488
AM=M+1 // 22489
A=A-1 // 22490
M=D // 22491
// call Number.new
@6 // 22492
D=A // 22493
@14 // 22494
M=D // 22495
@Number.new // 22496
D=A // 22497
@13 // 22498
M=D // 22499
@Main.main.ret.21 // 22500
D=A // 22501
@CALL // 22502
0;JMP // 22503
(Main.main.ret.21)
@SP // 22504
AM=M+1 // 22505
A=A-1 // 22506
M=0 // 22507
// call Number.new
@6 // 22508
D=A // 22509
@14 // 22510
M=D // 22511
@Number.new // 22512
D=A // 22513
@13 // 22514
M=D // 22515
@Main.main.ret.22 // 22516
D=A // 22517
@CALL // 22518
0;JMP // 22519
(Main.main.ret.22)
@3 // 22520
D=-A // 22521
@SP // 22522
AM=M+1 // 22523
A=A-1 // 22524
M=D // 22525
// call Number.new
@6 // 22526
D=A // 22527
@14 // 22528
M=D // 22529
@Number.new // 22530
D=A // 22531
@13 // 22532
M=D // 22533
@Main.main.ret.23 // 22534
D=A // 22535
@CALL // 22536
0;JMP // 22537
(Main.main.ret.23)
// call Vec3.new
@8 // 22538
D=A // 22539
@14 // 22540
M=D // 22541
@Vec3.new // 22542
D=A // 22543
@13 // 22544
M=D // 22545
@Main.main.ret.24 // 22546
D=A // 22547
@CALL // 22548
0;JMP // 22549
(Main.main.ret.24)
@2 // 22550
D=A // 22551
@SP // 22552
AM=M+1 // 22553
A=A-1 // 22554
M=D // 22555
// call Number.new
@6 // 22556
D=A // 22557
@14 // 22558
M=D // 22559
@Number.new // 22560
D=A // 22561
@13 // 22562
M=D // 22563
@Main.main.ret.25 // 22564
D=A // 22565
@CALL // 22566
0;JMP // 22567
(Main.main.ret.25)
@SP // 22568
AM=M+1 // 22569
A=A-1 // 22570
M=1 // 22571
// call Number.new
@6 // 22572
D=A // 22573
@14 // 22574
M=D // 22575
@Number.new // 22576
D=A // 22577
@13 // 22578
M=D // 22579
@Main.main.ret.26 // 22580
D=A // 22581
@CALL // 22582
0;JMP // 22583
(Main.main.ret.26)
// call Sphere.new
@8 // 22584
D=A // 22585
@14 // 22586
M=D // 22587
@Sphere.new // 22588
D=A // 22589
@13 // 22590
M=D // 22591
@Main.main.ret.27 // 22592
D=A // 22593
@CALL // 22594
0;JMP // 22595
(Main.main.ret.27)
// call Element.sphere
@6 // 22596
D=A // 22597
@14 // 22598
M=D // 22599
@Element.sphere // 22600
D=A // 22601
@13 // 22602
M=D // 22603
@Main.main.ret.28 // 22604
D=A // 22605
@CALL // 22606
0;JMP // 22607
(Main.main.ret.28)
@SP // 22608
AM=M-1 // 22609
D=M // 22610
@SP // 22611
AM=M-1 // 22612
A=M // 22613
M=D // 22614

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 25"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, PushInstruction("constant 0")], call=CallInstruction{Plane.new}}], call=CallInstruction{Element.plane}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 22615
A=M+1 // 22616
A=A+1 // 22617
D=M // 22618
@3 // 22619
D=D+A // 22620
@SP // 22621
AM=M+1 // 22622
A=A-1 // 22623
M=D // 22624
@SP // 22625
AM=M+1 // 22626
A=A-1 // 22627
M=0 // 22628
// call Number.new
@6 // 22629
D=A // 22630
@14 // 22631
M=D // 22632
@Number.new // 22633
D=A // 22634
@13 // 22635
M=D // 22636
@Main.main.ret.29 // 22637
D=A // 22638
@CALL // 22639
0;JMP // 22640
(Main.main.ret.29)
@SP // 22641
AM=M+1 // 22642
A=A-1 // 22643
M=0 // 22644
// call Number.new
@6 // 22645
D=A // 22646
@14 // 22647
M=D // 22648
@Number.new // 22649
D=A // 22650
@13 // 22651
M=D // 22652
@Main.main.ret.30 // 22653
D=A // 22654
@CALL // 22655
0;JMP // 22656
(Main.main.ret.30)
@25 // 22657
D=-A // 22658
@SP // 22659
AM=M+1 // 22660
A=A-1 // 22661
M=D // 22662
// call Number.new
@6 // 22663
D=A // 22664
@14 // 22665
M=D // 22666
@Number.new // 22667
D=A // 22668
@13 // 22669
M=D // 22670
@Main.main.ret.31 // 22671
D=A // 22672
@CALL // 22673
0;JMP // 22674
(Main.main.ret.31)
// call Vec3.new
@8 // 22675
D=A // 22676
@14 // 22677
M=D // 22678
@Vec3.new // 22679
D=A // 22680
@13 // 22681
M=D // 22682
@Main.main.ret.32 // 22683
D=A // 22684
@CALL // 22685
0;JMP // 22686
(Main.main.ret.32)
@SP // 22687
AM=M+1 // 22688
A=A-1 // 22689
M=0 // 22690
// call Number.new
@6 // 22691
D=A // 22692
@14 // 22693
M=D // 22694
@Number.new // 22695
D=A // 22696
@13 // 22697
M=D // 22698
@Main.main.ret.33 // 22699
D=A // 22700
@CALL // 22701
0;JMP // 22702
(Main.main.ret.33)
@SP // 22703
AM=M+1 // 22704
A=A-1 // 22705
M=0 // 22706
// call Number.new
@6 // 22707
D=A // 22708
@14 // 22709
M=D // 22710
@Number.new // 22711
D=A // 22712
@13 // 22713
M=D // 22714
@Main.main.ret.34 // 22715
D=A // 22716
@CALL // 22717
0;JMP // 22718
(Main.main.ret.34)
@SP // 22719
AM=M+1 // 22720
A=A-1 // 22721
M=-1 // 22722
// call Number.new
@6 // 22723
D=A // 22724
@14 // 22725
M=D // 22726
@Number.new // 22727
D=A // 22728
@13 // 22729
M=D // 22730
@Main.main.ret.35 // 22731
D=A // 22732
@CALL // 22733
0;JMP // 22734
(Main.main.ret.35)
// call Vec3.new
@8 // 22735
D=A // 22736
@14 // 22737
M=D // 22738
@Vec3.new // 22739
D=A // 22740
@13 // 22741
M=D // 22742
@Main.main.ret.36 // 22743
D=A // 22744
@CALL // 22745
0;JMP // 22746
(Main.main.ret.36)
@SP // 22747
AM=M+1 // 22748
A=A-1 // 22749
M=1 // 22750
// call Number.new
@6 // 22751
D=A // 22752
@14 // 22753
M=D // 22754
@Number.new // 22755
D=A // 22756
@13 // 22757
M=D // 22758
@Main.main.ret.37 // 22759
D=A // 22760
@CALL // 22761
0;JMP // 22762
(Main.main.ret.37)
@SP // 22763
AM=M+1 // 22764
A=A-1 // 22765
M=0 // 22766
// call Plane.new
@9 // 22767
D=A // 22768
@14 // 22769
M=D // 22770
@Plane.new // 22771
D=A // 22772
@13 // 22773
M=D // 22774
@Main.main.ret.38 // 22775
D=A // 22776
@CALL // 22777
0;JMP // 22778
(Main.main.ret.38)
// call Element.plane
@6 // 22779
D=A // 22780
@14 // 22781
M=D // 22782
@Element.plane // 22783
D=A // 22784
@13 // 22785
M=D // 22786
@Main.main.ret.39 // 22787
D=A // 22788
@CALL // 22789
0;JMP // 22790
(Main.main.ret.39)
@SP // 22791
AM=M-1 // 22792
D=M // 22793
@SP // 22794
AM=M-1 // 22795
A=M // 22796
M=D // 22797

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 2"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)], call=CallInstruction{Plane.new}}], call=CallInstruction{Element.plane}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 22798
A=M+1 // 22799
A=A+1 // 22800
D=M // 22801
@4 // 22802
D=D+A // 22803
@SP // 22804
AM=M+1 // 22805
A=A-1 // 22806
M=D // 22807
@SP // 22808
AM=M+1 // 22809
A=A-1 // 22810
M=0 // 22811
// call Number.new
@6 // 22812
D=A // 22813
@14 // 22814
M=D // 22815
@Number.new // 22816
D=A // 22817
@13 // 22818
M=D // 22819
@Main.main.ret.40 // 22820
D=A // 22821
@CALL // 22822
0;JMP // 22823
(Main.main.ret.40)
@2 // 22824
D=-A // 22825
@SP // 22826
AM=M+1 // 22827
A=A-1 // 22828
M=D // 22829
// call Number.new
@6 // 22830
D=A // 22831
@14 // 22832
M=D // 22833
@Number.new // 22834
D=A // 22835
@13 // 22836
M=D // 22837
@Main.main.ret.41 // 22838
D=A // 22839
@CALL // 22840
0;JMP // 22841
(Main.main.ret.41)
@SP // 22842
AM=M+1 // 22843
A=A-1 // 22844
M=0 // 22845
// call Number.new
@6 // 22846
D=A // 22847
@14 // 22848
M=D // 22849
@Number.new // 22850
D=A // 22851
@13 // 22852
M=D // 22853
@Main.main.ret.42 // 22854
D=A // 22855
@CALL // 22856
0;JMP // 22857
(Main.main.ret.42)
// call Vec3.new
@8 // 22858
D=A // 22859
@14 // 22860
M=D // 22861
@Vec3.new // 22862
D=A // 22863
@13 // 22864
M=D // 22865
@Main.main.ret.43 // 22866
D=A // 22867
@CALL // 22868
0;JMP // 22869
(Main.main.ret.43)
@SP // 22870
AM=M+1 // 22871
A=A-1 // 22872
M=0 // 22873
// call Number.new
@6 // 22874
D=A // 22875
@14 // 22876
M=D // 22877
@Number.new // 22878
D=A // 22879
@13 // 22880
M=D // 22881
@Main.main.ret.44 // 22882
D=A // 22883
@CALL // 22884
0;JMP // 22885
(Main.main.ret.44)
@SP // 22886
AM=M+1 // 22887
A=A-1 // 22888
M=-1 // 22889
// call Number.new
@6 // 22890
D=A // 22891
@14 // 22892
M=D // 22893
@Number.new // 22894
D=A // 22895
@13 // 22896
M=D // 22897
@Main.main.ret.45 // 22898
D=A // 22899
@CALL // 22900
0;JMP // 22901
(Main.main.ret.45)
@SP // 22902
AM=M+1 // 22903
A=A-1 // 22904
M=0 // 22905
// call Number.new
@6 // 22906
D=A // 22907
@14 // 22908
M=D // 22909
@Number.new // 22910
D=A // 22911
@13 // 22912
M=D // 22913
@Main.main.ret.46 // 22914
D=A // 22915
@CALL // 22916
0;JMP // 22917
(Main.main.ret.46)
// call Vec3.new
@8 // 22918
D=A // 22919
@14 // 22920
M=D // 22921
@Vec3.new // 22922
D=A // 22923
@13 // 22924
M=D // 22925
@Main.main.ret.47 // 22926
D=A // 22927
@CALL // 22928
0;JMP // 22929
(Main.main.ret.47)
@SP // 22930
AM=M+1 // 22931
A=A-1 // 22932
M=-1 // 22933
// call Number.new
@6 // 22934
D=A // 22935
@14 // 22936
M=D // 22937
@Number.new // 22938
D=A // 22939
@13 // 22940
M=D // 22941
@Main.main.ret.48 // 22942
D=A // 22943
@CALL // 22944
0;JMP // 22945
(Main.main.ret.48)
@SP // 22946
AM=M+1 // 22947
A=A-1 // 22948
M=-1 // 22949
// call Plane.new
@9 // 22950
D=A // 22951
@14 // 22952
M=D // 22953
@Plane.new // 22954
D=A // 22955
@13 // 22956
M=D // 22957
@Main.main.ret.49 // 22958
D=A // 22959
@CALL // 22960
0;JMP // 22961
(Main.main.ret.49)
// call Element.plane
@6 // 22962
D=A // 22963
@14 // 22964
M=D // 22965
@Element.plane // 22966
D=A // 22967
@13 // 22968
M=D // 22969
@Main.main.ret.50 // 22970
D=A // 22971
@CALL // 22972
0;JMP // 22973
(Main.main.ret.50)
@SP // 22974
AM=M-1 // 22975
D=M // 22976
@SP // 22977
AM=M-1 // 22978
A=M // 22979
M=D // 22980

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 5}
//}

@SP // 22981
AM=M+1 // 22982
A=A-1 // 22983
M=0 // 22984
// call Number.new
@6 // 22985
D=A // 22986
@14 // 22987
M=D // 22988
@Number.new // 22989
D=A // 22990
@13 // 22991
M=D // 22992
@Main.main.ret.51 // 22993
D=A // 22994
@CALL // 22995
0;JMP // 22996
(Main.main.ret.51)
@SP // 22997
AM=M+1 // 22998
A=A-1 // 22999
M=-1 // 23000
// call Number.new
@6 // 23001
D=A // 23002
@14 // 23003
M=D // 23004
@Number.new // 23005
D=A // 23006
@13 // 23007
M=D // 23008
@Main.main.ret.52 // 23009
D=A // 23010
@CALL // 23011
0;JMP // 23012
(Main.main.ret.52)
@SP // 23013
AM=M+1 // 23014
A=A-1 // 23015
M=-1 // 23016
// call Number.new
@6 // 23017
D=A // 23018
@14 // 23019
M=D // 23020
@Number.new // 23021
D=A // 23022
@13 // 23023
M=D // 23024
@Main.main.ret.53 // 23025
D=A // 23026
@CALL // 23027
0;JMP // 23028
(Main.main.ret.53)
// call Vec3.new
@8 // 23029
D=A // 23030
@14 // 23031
M=D // 23032
@Vec3.new // 23033
D=A // 23034
@13 // 23035
M=D // 23036
@Main.main.ret.54 // 23037
D=A // 23038
@CALL // 23039
0;JMP // 23040
(Main.main.ret.54)
@LCL // 23041
D=M // 23042
@5 // 23043
A=D+A // 23044
D=A // 23045
@R13 // 23046
M=D // 23047
@SP // 23048
AM=M-1 // 23049
D=M // 23050
@R13 // 23051
A=M // 23052
M=D // 23053

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23054
D=M // 23055
@5 // 23056
A=D+A // 23057
D=M // 23058
@SP // 23059
AM=M+1 // 23060
A=A-1 // 23061
M=D // 23062
// call Vec3.do_normalize
@6 // 23063
D=A // 23064
@14 // 23065
M=D // 23066
@Vec3.do_normalize // 23067
D=A // 23068
@13 // 23069
M=D // 23070
@Main.main.ret.55 // 23071
D=A // 23072
@CALL // 23073
0;JMP // 23074
(Main.main.ret.55)
@SP // 23075
M=M-1 // 23076

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 6}
//}

@SP // 23077
AM=M+1 // 23078
A=A-1 // 23079
M=-1 // 23080
// call Number.new
@6 // 23081
D=A // 23082
@14 // 23083
M=D // 23084
@Number.new // 23085
D=A // 23086
@13 // 23087
M=D // 23088
@Main.main.ret.56 // 23089
D=A // 23090
@CALL // 23091
0;JMP // 23092
(Main.main.ret.56)
@SP // 23093
AM=M+1 // 23094
A=A-1 // 23095
M=-1 // 23096
// call Number.new
@6 // 23097
D=A // 23098
@14 // 23099
M=D // 23100
@Number.new // 23101
D=A // 23102
@13 // 23103
M=D // 23104
@Main.main.ret.57 // 23105
D=A // 23106
@CALL // 23107
0;JMP // 23108
(Main.main.ret.57)
@SP // 23109
AM=M+1 // 23110
A=A-1 // 23111
M=0 // 23112
// call Number.new
@6 // 23113
D=A // 23114
@14 // 23115
M=D // 23116
@Number.new // 23117
D=A // 23118
@13 // 23119
M=D // 23120
@Main.main.ret.58 // 23121
D=A // 23122
@CALL // 23123
0;JMP // 23124
(Main.main.ret.58)
// call Vec3.new
@8 // 23125
D=A // 23126
@14 // 23127
M=D // 23128
@Vec3.new // 23129
D=A // 23130
@13 // 23131
M=D // 23132
@Main.main.ret.59 // 23133
D=A // 23134
@CALL // 23135
0;JMP // 23136
(Main.main.ret.59)
@LCL // 23137
D=M // 23138
@6 // 23139
A=D+A // 23140
D=A // 23141
@R13 // 23142
M=D // 23143
@SP // 23144
AM=M-1 // 23145
D=M // 23146
@R13 // 23147
A=M // 23148
M=D // 23149

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23150
D=M // 23151
@6 // 23152
A=D+A // 23153
D=M // 23154
@SP // 23155
AM=M+1 // 23156
A=A-1 // 23157
M=D // 23158
// call Vec3.do_normalize
@6 // 23159
D=A // 23160
@14 // 23161
M=D // 23162
@Vec3.do_normalize // 23163
D=A // 23164
@13 // 23165
M=D // 23166
@Main.main.ret.60 // 23167
D=A // 23168
@CALL // 23169
0;JMP // 23170
(Main.main.ret.60)
@SP // 23171
M=M-1 // 23172

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[], call=CallInstruction{Main.getOneHalf}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 7}
//}

// call Main.getOneHalf
@5 // 23173
D=A // 23174
@14 // 23175
M=D // 23176
@Main.getOneHalf // 23177
D=A // 23178
@13 // 23179
M=D // 23180
@Main.main.ret.61 // 23181
D=A // 23182
@CALL // 23183
0;JMP // 23184
(Main.main.ret.61)
@SP // 23185
AM=M+1 // 23186
A=A-1 // 23187
M=-1 // 23188
// call Number.new
@6 // 23189
D=A // 23190
@14 // 23191
M=D // 23192
@Number.new // 23193
D=A // 23194
@13 // 23195
M=D // 23196
@Main.main.ret.62 // 23197
D=A // 23198
@CALL // 23199
0;JMP // 23200
(Main.main.ret.62)
@SP // 23201
AM=M+1 // 23202
A=A-1 // 23203
M=0 // 23204
// call Number.new
@6 // 23205
D=A // 23206
@14 // 23207
M=D // 23208
@Number.new // 23209
D=A // 23210
@13 // 23211
M=D // 23212
@Main.main.ret.63 // 23213
D=A // 23214
@CALL // 23215
0;JMP // 23216
(Main.main.ret.63)
// call Vec3.new
@8 // 23217
D=A // 23218
@14 // 23219
M=D // 23220
@Vec3.new // 23221
D=A // 23222
@13 // 23223
M=D // 23224
@Main.main.ret.64 // 23225
D=A // 23226
@CALL // 23227
0;JMP // 23228
(Main.main.ret.64)
@LCL // 23229
D=M // 23230
@7 // 23231
A=D+A // 23232
D=A // 23233
@R13 // 23234
M=D // 23235
@SP // 23236
AM=M-1 // 23237
D=M // 23238
@R13 // 23239
A=M // 23240
M=D // 23241

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23242
D=M // 23243
@7 // 23244
A=D+A // 23245
D=M // 23246
@SP // 23247
AM=M+1 // 23248
A=A-1 // 23249
M=D // 23250
// call Vec3.do_normalize
@6 // 23251
D=A // 23252
@14 // 23253
M=D // 23254
@Vec3.do_normalize // 23255
D=A // 23256
@13 // 23257
M=D // 23258
@Main.main.ret.65 // 23259
D=A // 23260
@CALL // 23261
0;JMP // 23262
(Main.main.ret.65)
@SP // 23263
M=M-1 // 23264

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[], call=CallInstruction{Main.getOneFiftieth}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 23265
D=M // 23266
@4 // 23267
A=D+A // 23268
D=M // 23269
@SP // 23270
AM=M+1 // 23271
A=A-1 // 23272
M=D // 23273
@LCL // 23274
D=M // 23275
@5 // 23276
A=D+A // 23277
D=M // 23278
@SP // 23279
AM=M+1 // 23280
A=A-1 // 23281
M=D // 23282
// call Main.getOneFiftieth
@5 // 23283
D=A // 23284
@14 // 23285
M=D // 23286
@Main.getOneFiftieth // 23287
D=A // 23288
@13 // 23289
M=D // 23290
@Main.main.ret.66 // 23291
D=A // 23292
@CALL // 23293
0;JMP // 23294
(Main.main.ret.66)
// call DirectionalLight.new
@7 // 23295
D=A // 23296
@14 // 23297
M=D // 23298
@DirectionalLight.new // 23299
D=A // 23300
@13 // 23301
M=D // 23302
@Main.main.ret.67 // 23303
D=A // 23304
@CALL // 23305
0;JMP // 23306
(Main.main.ret.67)
@SP // 23307
AM=M-1 // 23308
D=M // 23309
@SP // 23310
AM=M-1 // 23311
A=M // 23312
M=D // 23313

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[], call=CallInstruction{Main.getNineTenths}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 23314
D=M // 23315
@4 // 23316
A=D+A // 23317
D=M // 23318
@SP // 23319
AM=M+1 // 23320
A=A-1 // 23321
M=D+1 // 23322
@LCL // 23323
D=M // 23324
@6 // 23325
A=D+A // 23326
D=M // 23327
@SP // 23328
AM=M+1 // 23329
A=A-1 // 23330
M=D // 23331
// call Main.getNineTenths
@5 // 23332
D=A // 23333
@14 // 23334
M=D // 23335
@Main.getNineTenths // 23336
D=A // 23337
@13 // 23338
M=D // 23339
@Main.main.ret.68 // 23340
D=A // 23341
@CALL // 23342
0;JMP // 23343
(Main.main.ret.68)
// call DirectionalLight.new
@7 // 23344
D=A // 23345
@14 // 23346
M=D // 23347
@DirectionalLight.new // 23348
D=A // 23349
@13 // 23350
M=D // 23351
@Main.main.ret.69 // 23352
D=A // 23353
@CALL // 23354
0;JMP // 23355
(Main.main.ret.69)
@SP // 23356
AM=M-1 // 23357
D=M // 23358
@SP // 23359
AM=M-1 // 23360
A=M // 23361
M=D // 23362

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 7"), CallGroup{pushes=[], call=CallInstruction{Main.getThreeTenths}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 23363
D=M // 23364
@4 // 23365
A=D+A // 23366
D=M // 23367
@2 // 23368
D=D+A // 23369
@SP // 23370
AM=M+1 // 23371
A=A-1 // 23372
M=D // 23373
@LCL // 23374
D=M // 23375
@7 // 23376
A=D+A // 23377
D=M // 23378
@SP // 23379
AM=M+1 // 23380
A=A-1 // 23381
M=D // 23382
// call Main.getThreeTenths
@5 // 23383
D=A // 23384
@14 // 23385
M=D // 23386
@Main.getThreeTenths // 23387
D=A // 23388
@13 // 23389
M=D // 23390
@Main.main.ret.70 // 23391
D=A // 23392
@CALL // 23393
0;JMP // 23394
(Main.main.ret.70)
// call DirectionalLight.new
@7 // 23395
D=A // 23396
@14 // 23397
M=D // 23398
@DirectionalLight.new // 23399
D=A // 23400
@13 // 23401
M=D // 23402
@Main.main.ret.71 // 23403
D=A // 23404
@CALL // 23405
0;JMP // 23406
(Main.main.ret.71)
@SP // 23407
AM=M-1 // 23408
D=M // 23409
@SP // 23410
AM=M-1 // 23411
A=M // 23412
M=D // 23413

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 512"), PushInstruction("constant 256"), PushInstruction("local 2"), PushInstruction("local 1"), PushInstruction("local 4"), PushInstruction("local 3")], call=CallInstruction{Scene.new}}
//  pop:  PopInstruction{address=local 0}
//}

@512 // 23414
D=A // 23415
@SP // 23416
AM=M+1 // 23417
A=A-1 // 23418
M=D // 23419
@256 // 23420
D=A // 23421
@SP // 23422
AM=M+1 // 23423
A=A-1 // 23424
M=D // 23425
@LCL // 23426
A=M+1 // 23427
A=A+1 // 23428
D=M // 23429
@SP // 23430
AM=M+1 // 23431
A=A-1 // 23432
M=D // 23433
@LCL // 23434
A=M+1 // 23435
D=M // 23436
@SP // 23437
AM=M+1 // 23438
A=A-1 // 23439
M=D // 23440
@LCL // 23441
D=M // 23442
@4 // 23443
A=D+A // 23444
D=M // 23445
@SP // 23446
AM=M+1 // 23447
A=A-1 // 23448
M=D // 23449
@LCL // 23450
A=M+1 // 23451
A=A+1 // 23452
A=A+1 // 23453
D=M // 23454
@SP // 23455
AM=M+1 // 23456
A=A-1 // 23457
M=D // 23458
// call Scene.new
@11 // 23459
D=A // 23460
@14 // 23461
M=D // 23462
@Scene.new // 23463
D=A // 23464
@13 // 23465
M=D // 23466
@Main.main.ret.72 // 23467
D=A // 23468
@CALL // 23469
0;JMP // 23470
(Main.main.ret.72)
@SP // 23471
AM=M-1 // 23472
D=M // 23473
@LCL // 23474
A=M // 23475
M=D // 23476

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Main.render}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23477
A=M // 23478
D=M // 23479
@SP // 23480
AM=M+1 // 23481
A=A-1 // 23482
M=D // 23483
// call Main.render
@6 // 23484
D=A // 23485
@14 // 23486
M=D // 23487
@Main.render // 23488
D=A // 23489
@13 // 23490
M=D // 23491
@Main.main.ret.73 // 23492
D=A // 23493
@CALL // 23494
0;JMP // 23495
(Main.main.ret.73)
@SP // 23496
M=M-1 // 23497

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Scene.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23498
A=M // 23499
D=M // 23500
@SP // 23501
AM=M+1 // 23502
A=A-1 // 23503
M=D // 23504
// call Scene.dispose
@6 // 23505
D=A // 23506
@14 // 23507
M=D // 23508
@Scene.dispose // 23509
D=A // 23510
@13 // 23511
M=D // 23512
@Main.main.ret.74 // 23513
D=A // 23514
@CALL // 23515
0;JMP // 23516
(Main.main.ret.74)
@SP // 23517
M=M-1 // 23518

////PushInstruction("constant 0")
@SP // 23519
AM=M+1 // 23520
A=A-1 // 23521
M=0 // 23522
@RETURN // 23523
0;JMP // 23524

////FunctionInstruction{functionName='Plane.intersect', numLocals=3, funcMapping={Plane.initialize=16, Plane.new=1, Plane.dispose=4, Plane.color=29}}
// function Plane.intersect with 3
(Plane.intersect)
@3 // 23525
D=A // 23526
@SP // 23527
AM=D+M // 23528
A=A-1 // 23529
M=0 // 23530
A=A-1 // 23531
M=0 // 23532
A=A-1 // 23533
M=0 // 23534

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 23535
A=M // 23536
D=M // 23537
@3 // 23538
M=D // 23539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 23540
A=M+1 // 23541
D=M // 23542
@SP // 23543
AM=M+1 // 23544
A=A-1 // 23545
M=D // 23546
@ARG // 23547
A=M+1 // 23548
D=M // 23549
@SP // 23550
AM=M+1 // 23551
A=A-1 // 23552
M=D // 23553
// call Ray.getDirection
@6 // 23554
D=A // 23555
@14 // 23556
M=D // 23557
@Ray.getDirection // 23558
D=A // 23559
@13 // 23560
M=D // 23561
@Plane.intersect.ret.0 // 23562
D=A // 23563
@CALL // 23564
0;JMP // 23565
(Plane.intersect.ret.0)
// call Vec3.dot
@7 // 23566
D=A // 23567
@14 // 23568
M=D // 23569
@Vec3.dot // 23570
D=A // 23571
@13 // 23572
M=D // 23573
@Plane.intersect.ret.1 // 23574
D=A // 23575
@CALL // 23576
0;JMP // 23577
(Plane.intersect.ret.1)
@SP // 23578
AM=M-1 // 23579
D=M // 23580
@LCL // 23581
A=M // 23582
M=D // 23583

////ConditionalGroup{push=UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.is_positive}},
//NOT), ifGoto=IfGotoInstruction{label='Plane.intersect$IF_TRUE1}}
@LCL // 23584
A=M // 23585
D=M // 23586
@SP // 23587
AM=M+1 // 23588
A=A-1 // 23589
M=D // 23590
// call Number.is_positive
@6 // 23591
D=A // 23592
@14 // 23593
M=D // 23594
@Number.is_positive // 23595
D=A // 23596
@13 // 23597
M=D // 23598
@Plane.intersect.ret.2 // 23599
D=A // 23600
@CALL // 23601
0;JMP // 23602
(Plane.intersect.ret.2)
@SP // 23603
AM=M-1 // 23604
D=M // 23605
D=!D // 23606
@Plane.intersect$IF_TRUE1 // 23607
D;JNE // 23608

////GotoInstruction{label='Plane.intersect$IF_FALSE1}
// goto Plane.intersect$IF_FALSE1
@Plane.intersect$IF_FALSE1 // 23609
0;JMP // 23610

////LabelInstruction{label='Plane.intersect$IF_TRUE1}
// label Plane.intersect$IF_TRUE1
(Plane.intersect$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23611
A=M // 23612
D=M // 23613
@SP // 23614
AM=M+1 // 23615
A=A-1 // 23616
M=D // 23617
// call Number.dispose
@6 // 23618
D=A // 23619
@14 // 23620
M=D // 23621
@Number.dispose // 23622
D=A // 23623
@13 // 23624
M=D // 23625
@Plane.intersect.ret.3 // 23626
D=A // 23627
@CALL // 23628
0;JMP // 23629
(Plane.intersect.ret.3)
@SP // 23630
M=M-1 // 23631

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 23632
AM=M+1 // 23633
A=A-1 // 23634
M=-1 // 23635
// call Number.new
@6 // 23636
D=A // 23637
@14 // 23638
M=D // 23639
@Number.new // 23640
D=A // 23641
@13 // 23642
M=D // 23643
@Plane.intersect.ret.4 // 23644
D=A // 23645
@CALL // 23646
0;JMP // 23647
(Plane.intersect.ret.4)
@RETURN // 23648
0;JMP // 23649

////LabelInstruction{label='Plane.intersect$IF_FALSE1}
// label Plane.intersect$IF_FALSE1
(Plane.intersect$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 23650
A=M // 23651
D=M // 23652
@SP // 23653
AM=M+1 // 23654
A=A-1 // 23655
M=D // 23656
// call Vec3.clone
@6 // 23657
D=A // 23658
@14 // 23659
M=D // 23660
@Vec3.clone // 23661
D=A // 23662
@13 // 23663
M=D // 23664
@Plane.intersect.ret.5 // 23665
D=A // 23666
@CALL // 23667
0;JMP // 23668
(Plane.intersect.ret.5)
@SP // 23669
AM=M-1 // 23670
D=M // 23671
@LCL // 23672
A=M+1 // 23673
M=D // 23674

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getOrigin}}], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23675
A=M+1 // 23676
D=M // 23677
@SP // 23678
AM=M+1 // 23679
A=A-1 // 23680
M=D // 23681
@ARG // 23682
A=M+1 // 23683
D=M // 23684
@SP // 23685
AM=M+1 // 23686
A=A-1 // 23687
M=D // 23688
// call Ray.getOrigin
@6 // 23689
D=A // 23690
@14 // 23691
M=D // 23692
@Ray.getOrigin // 23693
D=A // 23694
@13 // 23695
M=D // 23696
@Plane.intersect.ret.6 // 23697
D=A // 23698
@CALL // 23699
0;JMP // 23700
(Plane.intersect.ret.6)
// call Vec3.do_sub
@7 // 23701
D=A // 23702
@14 // 23703
M=D // 23704
@Vec3.do_sub // 23705
D=A // 23706
@13 // 23707
M=D // 23708
@Plane.intersect.ret.7 // 23709
D=A // 23710
@CALL // 23711
0;JMP // 23712
(Plane.intersect.ret.7)
@SP // 23713
M=M-1 // 23714

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 1")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 23715
A=M+1 // 23716
D=M // 23717
@SP // 23718
AM=M+1 // 23719
A=A-1 // 23720
M=D // 23721
@THIS // 23722
A=M+1 // 23723
D=M // 23724
@SP // 23725
AM=M+1 // 23726
A=A-1 // 23727
M=D // 23728
// call Vec3.dot
@7 // 23729
D=A // 23730
@14 // 23731
M=D // 23732
@Vec3.dot // 23733
D=A // 23734
@13 // 23735
M=D // 23736
@Plane.intersect.ret.8 // 23737
D=A // 23738
@CALL // 23739
0;JMP // 23740
(Plane.intersect.ret.8)
@SP // 23741
AM=M-1 // 23742
D=M // 23743
@LCL // 23744
A=M+1 // 23745
A=A+1 // 23746
M=D // 23747

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23748
A=M+1 // 23749
A=A+1 // 23750
D=M // 23751
@SP // 23752
AM=M+1 // 23753
A=A-1 // 23754
M=D // 23755
@LCL // 23756
A=M // 23757
D=M // 23758
@SP // 23759
AM=M+1 // 23760
A=A-1 // 23761
M=D // 23762
// call Number.do_div
@7 // 23763
D=A // 23764
@14 // 23765
M=D // 23766
@Number.do_div // 23767
D=A // 23768
@13 // 23769
M=D // 23770
@Plane.intersect.ret.9 // 23771
D=A // 23772
@CALL // 23773
0;JMP // 23774
(Plane.intersect.ret.9)
@SP // 23775
M=M-1 // 23776

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23777
A=M // 23778
D=M // 23779
@SP // 23780
AM=M+1 // 23781
A=A-1 // 23782
M=D // 23783
// call Number.dispose
@6 // 23784
D=A // 23785
@14 // 23786
M=D // 23787
@Number.dispose // 23788
D=A // 23789
@13 // 23790
M=D // 23791
@Plane.intersect.ret.10 // 23792
D=A // 23793
@CALL // 23794
0;JMP // 23795
(Plane.intersect.ret.10)
@SP // 23796
M=M-1 // 23797

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23798
A=M+1 // 23799
D=M // 23800
@SP // 23801
AM=M+1 // 23802
A=A-1 // 23803
M=D // 23804
// call Vec3.dispose
@6 // 23805
D=A // 23806
@14 // 23807
M=D // 23808
@Vec3.dispose // 23809
D=A // 23810
@13 // 23811
M=D // 23812
@Plane.intersect.ret.11 // 23813
D=A // 23814
@CALL // 23815
0;JMP // 23816
(Plane.intersect.ret.11)
@SP // 23817
M=M-1 // 23818

////ConditionalGroup{push=UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.is_negative}},
//NOT), ifGoto=IfGotoInstruction{label='Plane.intersect$IF_TRUE2}}
@LCL // 23819
A=M+1 // 23820
A=A+1 // 23821
D=M // 23822
@SP // 23823
AM=M+1 // 23824
A=A-1 // 23825
M=D // 23826
// call Number.is_negative
@6 // 23827
D=A // 23828
@14 // 23829
M=D // 23830
@Number.is_negative // 23831
D=A // 23832
@13 // 23833
M=D // 23834
@Plane.intersect.ret.12 // 23835
D=A // 23836
@CALL // 23837
0;JMP // 23838
(Plane.intersect.ret.12)
@SP // 23839
AM=M-1 // 23840
D=M // 23841
D=!D // 23842
@Plane.intersect$IF_TRUE2 // 23843
D;JNE // 23844

////GotoInstruction{label='Plane.intersect$IF_FALSE2}
// goto Plane.intersect$IF_FALSE2
@Plane.intersect$IF_FALSE2 // 23845
0;JMP // 23846

////LabelInstruction{label='Plane.intersect$IF_TRUE2}
// label Plane.intersect$IF_TRUE2
(Plane.intersect$IF_TRUE2)

////PushInstruction("local 2")
@LCL // 23847
A=M+1 // 23848
A=A+1 // 23849
D=M // 23850
@SP // 23851
AM=M+1 // 23852
A=A-1 // 23853
M=D // 23854
@RETURN // 23855
0;JMP // 23856

////GotoInstruction{label='Plane.intersect$IF_END2}
// goto Plane.intersect$IF_END2
@Plane.intersect$IF_END2 // 23857
0;JMP // 23858

////LabelInstruction{label='Plane.intersect$IF_FALSE2}
// label Plane.intersect$IF_FALSE2
(Plane.intersect$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23859
A=M+1 // 23860
A=A+1 // 23861
D=M // 23862
@SP // 23863
AM=M+1 // 23864
A=A-1 // 23865
M=D // 23866
// call Number.dispose
@6 // 23867
D=A // 23868
@14 // 23869
M=D // 23870
@Number.dispose // 23871
D=A // 23872
@13 // 23873
M=D // 23874
@Plane.intersect.ret.13 // 23875
D=A // 23876
@CALL // 23877
0;JMP // 23878
(Plane.intersect.ret.13)
@SP // 23879
M=M-1 // 23880

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 23881
AM=M+1 // 23882
A=A-1 // 23883
M=-1 // 23884
// call Number.new
@6 // 23885
D=A // 23886
@14 // 23887
M=D // 23888
@Number.new // 23889
D=A // 23890
@13 // 23891
M=D // 23892
@Plane.intersect.ret.14 // 23893
D=A // 23894
@CALL // 23895
0;JMP // 23896
(Plane.intersect.ret.14)
@RETURN // 23897
0;JMP // 23898

////LabelInstruction{label='Plane.intersect$IF_END2}
// label Plane.intersect$IF_END2
(Plane.intersect$IF_END2)

////FunctionInstruction{functionName='Scene.new', numLocals=0, funcMapping={}}
// function Scene.new with 0
(Scene.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 9")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@9 // 23899
D=A // 23900
@SP // 23901
AM=M+1 // 23902
A=A-1 // 23903
M=D // 23904
// call Memory.alloc
@6 // 23905
D=A // 23906
@14 // 23907
M=D // 23908
@Memory.alloc // 23909
D=A // 23910
@13 // 23911
M=D // 23912
@Scene.new.ret.0 // 23913
D=A // 23914
@CALL // 23915
0;JMP // 23916
(Scene.new.ret.0)
@SP // 23917
AM=M-1 // 23918
D=M // 23919
@3 // 23920
M=D // 23921

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 23922
A=M // 23923
D=M // 23924
@THIS // 23925
A=M // 23926
M=D // 23927

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 23928
A=M+1 // 23929
D=M // 23930
@THIS // 23931
A=M+1 // 23932
M=D // 23933

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 5}
//}

@ARG // 23934
A=M+1 // 23935
A=A+1 // 23936
D=M // 23937
@SP // 23938
AM=M+1 // 23939
A=A-1 // 23940
M=D // 23941
@THIS // 23942
D=M // 23943
@5 // 23944
A=D+A // 23945
D=A // 23946
@R13 // 23947
M=D // 23948
@SP // 23949
AM=M-1 // 23950
D=M // 23951
@R13 // 23952
A=M // 23953
M=D // 23954

////PushPopPair {
//  push: PushInstruction("argument 3")
//  pop:  PopInstruction{address=this 6}
//}

@ARG // 23955
A=M+1 // 23956
A=A+1 // 23957
A=A+1 // 23958
D=M // 23959
@SP // 23960
AM=M+1 // 23961
A=A-1 // 23962
M=D // 23963
@THIS // 23964
D=M // 23965
@6 // 23966
A=D+A // 23967
D=A // 23968
@R13 // 23969
M=D // 23970
@SP // 23971
AM=M-1 // 23972
D=M // 23973
@R13 // 23974
A=M // 23975
M=D // 23976

////PushPopPair {
//  push: PushInstruction("argument 4")
//  pop:  PopInstruction{address=this 7}
//}

@ARG // 23977
D=M // 23978
@4 // 23979
A=D+A // 23980
D=M // 23981
@SP // 23982
AM=M+1 // 23983
A=A-1 // 23984
M=D // 23985
@THIS // 23986
D=M // 23987
@7 // 23988
A=D+A // 23989
D=A // 23990
@R13 // 23991
M=D // 23992
@SP // 23993
AM=M-1 // 23994
D=M // 23995
@R13 // 23996
A=M // 23997
M=D // 23998

////PushPopPair {
//  push: PushInstruction("argument 5")
//  pop:  PopInstruction{address=this 8}
//}

@ARG // 23999
D=M // 24000
@5 // 24001
A=D+A // 24002
D=M // 24003
@SP // 24004
AM=M+1 // 24005
A=A-1 // 24006
M=D // 24007
@THIS // 24008
D=M // 24009
@8 // 24010
A=D+A // 24011
D=A // 24012
@R13 // 24013
M=D // 24014
@SP // 24015
AM=M-1 // 24016
D=M // 24017
@R13 // 24018
A=M // 24019
M=D // 24020

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=this 3}
//}

@THIS // 24021
A=M // 24022
D=M // 24023
@SP // 24024
AM=M+1 // 24025
A=A-1 // 24026
M=D // 24027
// call Number.new
@6 // 24028
D=A // 24029
@14 // 24030
M=D // 24031
@Number.new // 24032
D=A // 24033
@13 // 24034
M=D // 24035
@Scene.new.ret.1 // 24036
D=A // 24037
@CALL // 24038
0;JMP // 24039
(Scene.new.ret.1)
@SP // 24040
AM=M-1 // 24041
D=M // 24042
@THIS // 24043
A=M+1 // 24044
A=A+1 // 24045
A=A+1 // 24046
M=D // 24047

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=this 4}
//}

@THIS // 24048
A=M+1 // 24049
D=M // 24050
@SP // 24051
AM=M+1 // 24052
A=A-1 // 24053
M=D // 24054
// call Number.new
@6 // 24055
D=A // 24056
@14 // 24057
M=D // 24058
@Number.new // 24059
D=A // 24060
@13 // 24061
M=D // 24062
@Scene.new.ret.2 // 24063
D=A // 24064
@CALL // 24065
0;JMP // 24066
(Scene.new.ret.2)
@THIS // 24067
D=M // 24068
@4 // 24069
A=D+A // 24070
D=A // 24071
@R13 // 24072
M=D // 24073
@SP // 24074
AM=M-1 // 24075
D=M // 24076
@R13 // 24077
A=M // 24078
M=D // 24079

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 24080
A=M+1 // 24081
A=A+1 // 24082
A=A+1 // 24083
D=M // 24084
@SP // 24085
AM=M+1 // 24086
A=A-1 // 24087
M=D // 24088
// call Number.clone
@6 // 24089
D=A // 24090
@14 // 24091
M=D // 24092
@Number.clone // 24093
D=A // 24094
@13 // 24095
M=D // 24096
@Scene.new.ret.3 // 24097
D=A // 24098
@CALL // 24099
0;JMP // 24100
(Scene.new.ret.3)
@SP // 24101
AM=M-1 // 24102
D=M // 24103
@THIS // 24104
A=M+1 // 24105
A=A+1 // 24106
M=D // 24107

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("this 4")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24108
A=M+1 // 24109
A=A+1 // 24110
D=M // 24111
@SP // 24112
AM=M+1 // 24113
A=A-1 // 24114
M=D // 24115
@THIS // 24116
D=M // 24117
@4 // 24118
A=D+A // 24119
D=M // 24120
@SP // 24121
AM=M+1 // 24122
A=A-1 // 24123
M=D // 24124
// call Number.do_div
@7 // 24125
D=A // 24126
@14 // 24127
M=D // 24128
@Number.do_div // 24129
D=A // 24130
@13 // 24131
M=D // 24132
@Scene.new.ret.4 // 24133
D=A // 24134
@CALL // 24135
0;JMP // 24136
(Scene.new.ret.4)
@SP // 24137
M=M-1 // 24138

////PushInstruction("pointer 0")
@3 // 24139
D=M // 24140
@SP // 24141
AM=M+1 // 24142
A=A-1 // 24143
M=D // 24144
@RETURN // 24145
0;JMP // 24146

////FunctionInstruction{functionName='Scene.create_prime_ray', numLocals=3, funcMapping={Scene.new=5}}
// function Scene.create_prime_ray with 3
(Scene.create_prime_ray)
@3 // 24147
D=A // 24148
@SP // 24149
AM=D+M // 24150
A=A-1 // 24151
M=0 // 24152
A=A-1 // 24153
M=0 // 24154
A=A-1 // 24155
M=0 // 24156

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24157
A=M // 24158
D=M // 24159
@3 // 24160
M=D // 24161

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 24162
A=M+1 // 24163
D=M // 24164
@SP // 24165
AM=M+1 // 24166
A=A-1 // 24167
M=D // 24168
// call Number.new
@6 // 24169
D=A // 24170
@14 // 24171
M=D // 24172
@Number.new // 24173
D=A // 24174
@13 // 24175
M=D // 24176
@Scene.create_prime_ray.ret.0 // 24177
D=A // 24178
@CALL // 24179
0;JMP // 24180
(Scene.create_prime_ray.ret.0)
@SP // 24181
AM=M-1 // 24182
D=M // 24183
@LCL // 24184
A=M // 24185
M=D // 24186

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24187
A=M // 24188
D=M // 24189
@SP // 24190
AM=M+1 // 24191
A=A-1 // 24192
M=D // 24193
@ARG // 24194
D=M // 24195
@5 // 24196
A=D+A // 24197
D=M // 24198
@SP // 24199
AM=M+1 // 24200
A=A-1 // 24201
M=D // 24202
// call Number.do_add
@7 // 24203
D=A // 24204
@14 // 24205
M=D // 24206
@Number.do_add // 24207
D=A // 24208
@13 // 24209
M=D // 24210
@Scene.create_prime_ray.ret.1 // 24211
D=A // 24212
@CALL // 24213
0;JMP // 24214
(Scene.create_prime_ray.ret.1)
@SP // 24215
M=M-1 // 24216

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 3")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24217
A=M // 24218
D=M // 24219
@SP // 24220
AM=M+1 // 24221
A=A-1 // 24222
M=D // 24223
@THIS // 24224
A=M+1 // 24225
A=A+1 // 24226
A=A+1 // 24227
D=M // 24228
@SP // 24229
AM=M+1 // 24230
A=A-1 // 24231
M=D // 24232
// call Number.do_div
@7 // 24233
D=A // 24234
@14 // 24235
M=D // 24236
@Number.do_div // 24237
D=A // 24238
@13 // 24239
M=D // 24240
@Scene.create_prime_ray.ret.2 // 24241
D=A // 24242
@CALL // 24243
0;JMP // 24244
(Scene.create_prime_ray.ret.2)
@SP // 24245
M=M-1 // 24246

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24247
A=M // 24248
D=M // 24249
@SP // 24250
AM=M+1 // 24251
A=A-1 // 24252
M=D // 24253
@ARG // 24254
D=M // 24255
@4 // 24256
A=D+A // 24257
D=M // 24258
@SP // 24259
AM=M+1 // 24260
A=A-1 // 24261
M=D // 24262
// call Number.do_mul
@7 // 24263
D=A // 24264
@14 // 24265
M=D // 24266
@Number.do_mul // 24267
D=A // 24268
@13 // 24269
M=D // 24270
@Scene.create_prime_ray.ret.3 // 24271
D=A // 24272
@CALL // 24273
0;JMP // 24274
(Scene.create_prime_ray.ret.3)
@SP // 24275
M=M-1 // 24276

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 3")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24277
A=M // 24278
D=M // 24279
@SP // 24280
AM=M+1 // 24281
A=A-1 // 24282
M=D // 24283
@ARG // 24284
A=M+1 // 24285
A=A+1 // 24286
A=A+1 // 24287
D=M // 24288
@SP // 24289
AM=M+1 // 24290
A=A-1 // 24291
M=D // 24292
// call Number.do_sub
@7 // 24293
D=A // 24294
@14 // 24295
M=D // 24296
@Number.do_sub // 24297
D=A // 24298
@13 // 24299
M=D // 24300
@Scene.create_prime_ray.ret.4 // 24301
D=A // 24302
@CALL // 24303
0;JMP // 24304
(Scene.create_prime_ray.ret.4)
@SP // 24305
M=M-1 // 24306

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 2")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24307
A=M // 24308
D=M // 24309
@SP // 24310
AM=M+1 // 24311
A=A-1 // 24312
M=D // 24313
@THIS // 24314
A=M+1 // 24315
A=A+1 // 24316
D=M // 24317
@SP // 24318
AM=M+1 // 24319
A=A-1 // 24320
M=D // 24321
// call Number.do_mul
@7 // 24322
D=A // 24323
@14 // 24324
M=D // 24325
@Number.do_mul // 24326
D=A // 24327
@13 // 24328
M=D // 24329
@Scene.create_prime_ray.ret.5 // 24330
D=A // 24331
@CALL // 24332
0;JMP // 24333
(Scene.create_prime_ray.ret.5)
@SP // 24334
M=M-1 // 24335

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 24336
A=M+1 // 24337
A=A+1 // 24338
D=M // 24339
@SP // 24340
AM=M+1 // 24341
A=A-1 // 24342
M=D // 24343
// call Number.new
@6 // 24344
D=A // 24345
@14 // 24346
M=D // 24347
@Number.new // 24348
D=A // 24349
@13 // 24350
M=D // 24351
@Scene.create_prime_ray.ret.6 // 24352
D=A // 24353
@CALL // 24354
0;JMP // 24355
(Scene.create_prime_ray.ret.6)
@SP // 24356
AM=M-1 // 24357
D=M // 24358
@LCL // 24359
A=M+1 // 24360
M=D // 24361

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24362
A=M+1 // 24363
D=M // 24364
@SP // 24365
AM=M+1 // 24366
A=A-1 // 24367
M=D // 24368
@ARG // 24369
D=M // 24370
@5 // 24371
A=D+A // 24372
D=M // 24373
@SP // 24374
AM=M+1 // 24375
A=A-1 // 24376
M=D // 24377
// call Number.do_add
@7 // 24378
D=A // 24379
@14 // 24380
M=D // 24381
@Number.do_add // 24382
D=A // 24383
@13 // 24384
M=D // 24385
@Scene.create_prime_ray.ret.7 // 24386
D=A // 24387
@CALL // 24388
0;JMP // 24389
(Scene.create_prime_ray.ret.7)
@SP // 24390
M=M-1 // 24391

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 4")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24392
A=M+1 // 24393
D=M // 24394
@SP // 24395
AM=M+1 // 24396
A=A-1 // 24397
M=D // 24398
@THIS // 24399
D=M // 24400
@4 // 24401
A=D+A // 24402
D=M // 24403
@SP // 24404
AM=M+1 // 24405
A=A-1 // 24406
M=D // 24407
// call Number.do_div
@7 // 24408
D=A // 24409
@14 // 24410
M=D // 24411
@Number.do_div // 24412
D=A // 24413
@13 // 24414
M=D // 24415
@Scene.create_prime_ray.ret.8 // 24416
D=A // 24417
@CALL // 24418
0;JMP // 24419
(Scene.create_prime_ray.ret.8)
@SP // 24420
M=M-1 // 24421

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24422
A=M+1 // 24423
D=M // 24424
@SP // 24425
AM=M+1 // 24426
A=A-1 // 24427
M=D // 24428
// call Number.do_neg
@6 // 24429
D=A // 24430
@14 // 24431
M=D // 24432
@Number.do_neg // 24433
D=A // 24434
@13 // 24435
M=D // 24436
@Scene.create_prime_ray.ret.9 // 24437
D=A // 24438
@CALL // 24439
0;JMP // 24440
(Scene.create_prime_ray.ret.9)
@SP // 24441
M=M-1 // 24442

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24443
A=M+1 // 24444
D=M // 24445
@SP // 24446
AM=M+1 // 24447
A=A-1 // 24448
M=D // 24449
@ARG // 24450
D=M // 24451
@4 // 24452
A=D+A // 24453
D=M // 24454
@SP // 24455
AM=M+1 // 24456
A=A-1 // 24457
M=D // 24458
// call Number.do_mul
@7 // 24459
D=A // 24460
@14 // 24461
M=D // 24462
@Number.do_mul // 24463
D=A // 24464
@13 // 24465
M=D // 24466
@Scene.create_prime_ray.ret.10 // 24467
D=A // 24468
@CALL // 24469
0;JMP // 24470
(Scene.create_prime_ray.ret.10)
@SP // 24471
M=M-1 // 24472

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 3")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24473
A=M+1 // 24474
D=M // 24475
@SP // 24476
AM=M+1 // 24477
A=A-1 // 24478
M=D // 24479
@ARG // 24480
A=M+1 // 24481
A=A+1 // 24482
A=A+1 // 24483
D=M // 24484
@SP // 24485
AM=M+1 // 24486
A=A-1 // 24487
M=D // 24488
// call Number.do_add
@7 // 24489
D=A // 24490
@14 // 24491
M=D // 24492
@Number.do_add // 24493
D=A // 24494
@13 // 24495
M=D // 24496
@Scene.create_prime_ray.ret.11 // 24497
D=A // 24498
@CALL // 24499
0;JMP // 24500
(Scene.create_prime_ray.ret.11)
@SP // 24501
M=M-1 // 24502

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1"), CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 24503
A=M // 24504
D=M // 24505
@SP // 24506
AM=M+1 // 24507
A=A-1 // 24508
M=D // 24509
@LCL // 24510
A=M+1 // 24511
D=M // 24512
@SP // 24513
AM=M+1 // 24514
A=A-1 // 24515
M=D // 24516
@SP // 24517
AM=M+1 // 24518
A=A-1 // 24519
M=-1 // 24520
// call Number.new
@6 // 24521
D=A // 24522
@14 // 24523
M=D // 24524
@Number.new // 24525
D=A // 24526
@13 // 24527
M=D // 24528
@Scene.create_prime_ray.ret.12 // 24529
D=A // 24530
@CALL // 24531
0;JMP // 24532
(Scene.create_prime_ray.ret.12)
// call Vec3.new
@8 // 24533
D=A // 24534
@14 // 24535
M=D // 24536
@Vec3.new // 24537
D=A // 24538
@13 // 24539
M=D // 24540
@Scene.create_prime_ray.ret.13 // 24541
D=A // 24542
@CALL // 24543
0;JMP // 24544
(Scene.create_prime_ray.ret.13)
@SP // 24545
AM=M-1 // 24546
D=M // 24547
@LCL // 24548
A=M+1 // 24549
A=A+1 // 24550
M=D // 24551

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24552
A=M+1 // 24553
A=A+1 // 24554
D=M // 24555
@SP // 24556
AM=M+1 // 24557
A=A-1 // 24558
M=D // 24559
// call Vec3.do_normalize
@6 // 24560
D=A // 24561
@14 // 24562
M=D // 24563
@Vec3.do_normalize // 24564
D=A // 24565
@13 // 24566
M=D // 24567
@Scene.create_prime_ray.ret.14 // 24568
D=A // 24569
@CALL // 24570
0;JMP // 24571
(Scene.create_prime_ray.ret.14)
@SP // 24572
M=M-1 // 24573

////CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, PushInstruction("local 2")], call=CallInstruction{Ray.new}}
@SP // 24574
AM=M+1 // 24575
A=A-1 // 24576
M=0 // 24577
// call Number.new
@6 // 24578
D=A // 24579
@14 // 24580
M=D // 24581
@Number.new // 24582
D=A // 24583
@13 // 24584
M=D // 24585
@Scene.create_prime_ray.ret.15 // 24586
D=A // 24587
@CALL // 24588
0;JMP // 24589
(Scene.create_prime_ray.ret.15)
@SP // 24590
AM=M+1 // 24591
A=A-1 // 24592
M=0 // 24593
// call Number.new
@6 // 24594
D=A // 24595
@14 // 24596
M=D // 24597
@Number.new // 24598
D=A // 24599
@13 // 24600
M=D // 24601
@Scene.create_prime_ray.ret.16 // 24602
D=A // 24603
@CALL // 24604
0;JMP // 24605
(Scene.create_prime_ray.ret.16)
@SP // 24606
AM=M+1 // 24607
A=A-1 // 24608
M=0 // 24609
// call Number.new
@6 // 24610
D=A // 24611
@14 // 24612
M=D // 24613
@Number.new // 24614
D=A // 24615
@13 // 24616
M=D // 24617
@Scene.create_prime_ray.ret.17 // 24618
D=A // 24619
@CALL // 24620
0;JMP // 24621
(Scene.create_prime_ray.ret.17)
// call Vec3.new
@8 // 24622
D=A // 24623
@14 // 24624
M=D // 24625
@Vec3.new // 24626
D=A // 24627
@13 // 24628
M=D // 24629
@Scene.create_prime_ray.ret.18 // 24630
D=A // 24631
@CALL // 24632
0;JMP // 24633
(Scene.create_prime_ray.ret.18)
@LCL // 24634
A=M+1 // 24635
A=A+1 // 24636
D=M // 24637
@SP // 24638
AM=M+1 // 24639
A=A-1 // 24640
M=D // 24641
// call Ray.new
@7 // 24642
D=A // 24643
@14 // 24644
M=D // 24645
@Ray.new // 24646
D=A // 24647
@13 // 24648
M=D // 24649
@Scene.create_prime_ray.ret.19 // 24650
D=A // 24651
@CALL // 24652
0;JMP // 24653
(Scene.create_prime_ray.ret.19)
@RETURN // 24654
0;JMP // 24655

////FunctionInstruction{functionName='Sphere.dispose', numLocals=0, funcMapping={Sphere.new=1}}
// function Sphere.dispose with 0
(Sphere.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24656
A=M // 24657
D=M // 24658
@3 // 24659
M=D // 24660

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24661
A=M // 24662
D=M // 24663
@SP // 24664
AM=M+1 // 24665
A=A-1 // 24666
M=D // 24667
// call Vec3.dispose
@6 // 24668
D=A // 24669
@14 // 24670
M=D // 24671
@Vec3.dispose // 24672
D=A // 24673
@13 // 24674
M=D // 24675
@Sphere.dispose.ret.0 // 24676
D=A // 24677
@CALL // 24678
0;JMP // 24679
(Sphere.dispose.ret.0)
@SP // 24680
M=M-1 // 24681

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24682
A=M+1 // 24683
D=M // 24684
@SP // 24685
AM=M+1 // 24686
A=A-1 // 24687
M=D // 24688
// call Number.dispose
@6 // 24689
D=A // 24690
@14 // 24691
M=D // 24692
@Number.dispose // 24693
D=A // 24694
@13 // 24695
M=D // 24696
@Sphere.dispose.ret.1 // 24697
D=A // 24698
@CALL // 24699
0;JMP // 24700
(Sphere.dispose.ret.1)
@SP // 24701
M=M-1 // 24702

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24703
A=M+1 // 24704
A=A+1 // 24705
D=M // 24706
@SP // 24707
AM=M+1 // 24708
A=A-1 // 24709
M=D // 24710
// call Number.dispose
@6 // 24711
D=A // 24712
@14 // 24713
M=D // 24714
@Number.dispose // 24715
D=A // 24716
@13 // 24717
M=D // 24718
@Sphere.dispose.ret.2 // 24719
D=A // 24720
@CALL // 24721
0;JMP // 24722
(Sphere.dispose.ret.2)
@SP // 24723
M=M-1 // 24724

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 24725
D=M // 24726
@SP // 24727
AM=M+1 // 24728
A=A-1 // 24729
M=D // 24730
// call Memory.deAlloc
@6 // 24731
D=A // 24732
@14 // 24733
M=D // 24734
@Memory.deAlloc // 24735
D=A // 24736
@13 // 24737
M=D // 24738
@Sphere.dispose.ret.3 // 24739
D=A // 24740
@CALL // 24741
0;JMP // 24742
(Sphere.dispose.ret.3)
@SP // 24743
M=M-1 // 24744

////PushInstruction("constant 0")
@SP // 24745
AM=M+1 // 24746
A=A-1 // 24747
M=0 // 24748
@RETURN // 24749
0;JMP // 24750

////FunctionInstruction{functionName='Int32.do_add', numLocals=1, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_add with 1
(Int32.do_add)
@SP // 24751
AM=M+1 // 24752
A=A-1 // 24753
M=0 // 24754

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24755
A=M // 24756
D=M // 24757
@3 // 24758
M=D // 24759

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 24760
A=M+1 // 24761
D=M // 24762
@SP // 24763
AM=M+1 // 24764
A=A-1 // 24765
M=D // 24766
// call Int32.getParts
@6 // 24767
D=A // 24768
@14 // 24769
M=D // 24770
@Int32.getParts // 24771
D=A // 24772
@13 // 24773
M=D // 24774
@Int32.do_add.ret.0 // 24775
D=A // 24776
@CALL // 24777
0;JMP // 24778
(Int32.do_add.ret.0)
@SP // 24779
AM=M-1 // 24780
D=M // 24781
@LCL // 24782
A=M // 24783
M=D // 24784

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 24785
A=M // 24786
D=M // 24787
@SP // 24788
AM=M+1 // 24789
A=A-1 // 24790
M=D // 24791
@THIS // 24792
A=M // 24793
D=M // 24794
@0 // 24795
A=D+A // 24796
D=M // 24797
@SP // 24798
AM=M+1 // 24799
A=A-1 // 24800
M=D // 24801
@LCL // 24802
A=M // 24803
D=M // 24804
@0 // 24805
A=D+A // 24806
D=M // 24807
@SP // 24808
AM=M-1 // 24809
D=D+M // 24810
@SP // 24811
AM=M-1 // 24812
A=M // 24813
M=D // 24814

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 24815
A=M // 24816
D=M // 24817
@SP // 24818
AM=M+1 // 24819
A=A-1 // 24820
M=D+1 // 24821
@THIS // 24822
A=M // 24823
D=M // 24824
A=D+1 // 24825
D=M // 24826
@SP // 24827
AM=M+1 // 24828
A=A-1 // 24829
M=D // 24830
@LCL // 24831
A=M // 24832
D=M // 24833
A=D+1 // 24834
D=M // 24835
@SP // 24836
AM=M-1 // 24837
D=D+M // 24838
@SP // 24839
AM=M-1 // 24840
A=M // 24841
M=D // 24842

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 24843
A=M // 24844
D=M // 24845
@2 // 24846
D=D+A // 24847
@SP // 24848
AM=M+1 // 24849
A=A-1 // 24850
M=D // 24851
@THIS // 24852
A=M // 24853
D=M // 24854
@2 // 24855
A=D+A // 24856
D=M // 24857
@SP // 24858
AM=M+1 // 24859
A=A-1 // 24860
M=D // 24861
@LCL // 24862
A=M // 24863
D=M // 24864
@2 // 24865
A=D+A // 24866
D=M // 24867
@SP // 24868
AM=M-1 // 24869
D=D+M // 24870
@SP // 24871
AM=M-1 // 24872
A=M // 24873
M=D // 24874

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 24875
A=M // 24876
D=M // 24877
@3 // 24878
D=D+A // 24879
@SP // 24880
AM=M+1 // 24881
A=A-1 // 24882
M=D // 24883
@THIS // 24884
A=M // 24885
D=M // 24886
@3 // 24887
A=D+A // 24888
D=M // 24889
@SP // 24890
AM=M+1 // 24891
A=A-1 // 24892
M=D // 24893
@LCL // 24894
A=M // 24895
D=M // 24896
@3 // 24897
A=D+A // 24898
D=M // 24899
@SP // 24900
AM=M-1 // 24901
D=D+M // 24902
@SP // 24903
AM=M-1 // 24904
A=M // 24905
M=D // 24906

////LabelInstruction{label='Int32.do_add_WHILE_EXP1}
// label Int32.do_add_WHILE_EXP1
(Int32.do_add_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 0"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 0"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add_WHILE_END1}}
@Int32.do_add.GT.88 // 24907
D=A // 24908
@SP // 24909
AM=M+1 // 24910
A=A-1 // 24911
M=D // 24912
@THIS // 24913
A=M // 24914
D=M // 24915
@0 // 24916
A=D+A // 24917
D=M // 24918
@256 // 24919
D=D-A // 24920
@DO_GT // 24921
0;JMP // 24922
(Int32.do_add.GT.88)
@SP // 24923
AM=M+1 // 24924
A=A-1 // 24925
M=D // 24926
@Int32.do_add.EQ.89 // 24927
D=A // 24928
@SP // 24929
AM=M+1 // 24930
A=A-1 // 24931
M=D // 24932
@THIS // 24933
A=M // 24934
D=M // 24935
@0 // 24936
A=D+A // 24937
D=M // 24938
@256 // 24939
D=D-A // 24940
@DO_EQ // 24941
0;JMP // 24942
(Int32.do_add.EQ.89)
@SP // 24943
AM=M-1 // 24944
D=D|M // 24945
D=!D // 24946
@Int32.do_add_WHILE_END1 // 24947
D;JNE // 24948

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 24949
A=M // 24950
D=M // 24951
@SP // 24952
AM=M+1 // 24953
A=A-1 // 24954
M=D // 24955
@THIS // 24956
A=M // 24957
D=M // 24958
@0 // 24959
A=D+A // 24960
D=M // 24961
@256 // 24962
D=D-A // 24963
@SP // 24964
AM=M-1 // 24965
A=M // 24966
M=D // 24967

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 24968
A=M // 24969
D=M // 24970
@SP // 24971
AM=M+1 // 24972
A=A-1 // 24973
M=D+1 // 24974
@THIS // 24975
A=M // 24976
D=M // 24977
A=D+1 // 24978
D=M // 24979
D=D+1 // 24980
@SP // 24981
AM=M-1 // 24982
A=M // 24983
M=D // 24984

////GotoInstruction{label='Int32.do_add_WHILE_EXP1}
// goto Int32.do_add_WHILE_EXP1
@Int32.do_add_WHILE_EXP1 // 24985
0;JMP // 24986

////LabelInstruction{label='Int32.do_add_WHILE_END1}
// label Int32.do_add_WHILE_END1
(Int32.do_add_WHILE_END1)

////LabelInstruction{label='Int32.do_add_WHILE_EXP2}
// label Int32.do_add_WHILE_EXP2
(Int32.do_add_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 1"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 1"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add_WHILE_END2}}
@Int32.do_add.GT.90 // 24987
D=A // 24988
@SP // 24989
AM=M+1 // 24990
A=A-1 // 24991
M=D // 24992
@THIS // 24993
A=M // 24994
D=M // 24995
A=D+1 // 24996
D=M // 24997
@256 // 24998
D=D-A // 24999
@DO_GT // 25000
0;JMP // 25001
(Int32.do_add.GT.90)
@SP // 25002
AM=M+1 // 25003
A=A-1 // 25004
M=D // 25005
@Int32.do_add.EQ.91 // 25006
D=A // 25007
@SP // 25008
AM=M+1 // 25009
A=A-1 // 25010
M=D // 25011
@THIS // 25012
A=M // 25013
D=M // 25014
A=D+1 // 25015
D=M // 25016
@256 // 25017
D=D-A // 25018
@DO_EQ // 25019
0;JMP // 25020
(Int32.do_add.EQ.91)
@SP // 25021
AM=M-1 // 25022
D=D|M // 25023
D=!D // 25024
@Int32.do_add_WHILE_END2 // 25025
D;JNE // 25026

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 25027
A=M // 25028
D=M // 25029
@SP // 25030
AM=M+1 // 25031
A=A-1 // 25032
M=D+1 // 25033
@THIS // 25034
A=M // 25035
D=M // 25036
A=D+1 // 25037
D=M // 25038
@256 // 25039
D=D-A // 25040
@SP // 25041
AM=M-1 // 25042
A=M // 25043
M=D // 25044

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 25045
A=M // 25046
D=M // 25047
@2 // 25048
D=D+A // 25049
@SP // 25050
AM=M+1 // 25051
A=A-1 // 25052
M=D // 25053
@THIS // 25054
A=M // 25055
D=M // 25056
@2 // 25057
A=D+A // 25058
D=M // 25059
D=D+1 // 25060
@SP // 25061
AM=M-1 // 25062
A=M // 25063
M=D // 25064

////GotoInstruction{label='Int32.do_add_WHILE_EXP2}
// goto Int32.do_add_WHILE_EXP2
@Int32.do_add_WHILE_EXP2 // 25065
0;JMP // 25066

////LabelInstruction{label='Int32.do_add_WHILE_END2}
// label Int32.do_add_WHILE_END2
(Int32.do_add_WHILE_END2)

////LabelInstruction{label='Int32.do_add_WHILE_EXP3}
// label Int32.do_add_WHILE_EXP3
(Int32.do_add_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 2"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 2"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add_WHILE_END3}}
@Int32.do_add.GT.92 // 25067
D=A // 25068
@SP // 25069
AM=M+1 // 25070
A=A-1 // 25071
M=D // 25072
@THIS // 25073
A=M // 25074
D=M // 25075
@2 // 25076
A=D+A // 25077
D=M // 25078
@256 // 25079
D=D-A // 25080
@DO_GT // 25081
0;JMP // 25082
(Int32.do_add.GT.92)
@SP // 25083
AM=M+1 // 25084
A=A-1 // 25085
M=D // 25086
@Int32.do_add.EQ.93 // 25087
D=A // 25088
@SP // 25089
AM=M+1 // 25090
A=A-1 // 25091
M=D // 25092
@THIS // 25093
A=M // 25094
D=M // 25095
@2 // 25096
A=D+A // 25097
D=M // 25098
@256 // 25099
D=D-A // 25100
@DO_EQ // 25101
0;JMP // 25102
(Int32.do_add.EQ.93)
@SP // 25103
AM=M-1 // 25104
D=D|M // 25105
D=!D // 25106
@Int32.do_add_WHILE_END3 // 25107
D;JNE // 25108

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 25109
A=M // 25110
D=M // 25111
@2 // 25112
D=D+A // 25113
@SP // 25114
AM=M+1 // 25115
A=A-1 // 25116
M=D // 25117
@THIS // 25118
A=M // 25119
D=M // 25120
@2 // 25121
A=D+A // 25122
D=M // 25123
@256 // 25124
D=D-A // 25125
@SP // 25126
AM=M-1 // 25127
A=M // 25128
M=D // 25129

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 25130
A=M // 25131
D=M // 25132
@3 // 25133
D=D+A // 25134
@SP // 25135
AM=M+1 // 25136
A=A-1 // 25137
M=D // 25138
@THIS // 25139
A=M // 25140
D=M // 25141
@3 // 25142
A=D+A // 25143
D=M // 25144
D=D+1 // 25145
@SP // 25146
AM=M-1 // 25147
A=M // 25148
M=D // 25149

////GotoInstruction{label='Int32.do_add_WHILE_EXP3}
// goto Int32.do_add_WHILE_EXP3
@Int32.do_add_WHILE_EXP3 // 25150
0;JMP // 25151

////LabelInstruction{label='Int32.do_add_WHILE_END3}
// label Int32.do_add_WHILE_END3
(Int32.do_add_WHILE_END3)

////LabelInstruction{label='Int32.do_add_WHILE_EXP4}
// label Int32.do_add_WHILE_EXP4
(Int32.do_add_WHILE_EXP4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 3"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 3"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//                right:
//                    PushInstruction("constant 256"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add_WHILE_END4}}
@Int32.do_add.GT.94 // 25152
D=A // 25153
@SP // 25154
AM=M+1 // 25155
A=A-1 // 25156
M=D // 25157
@THIS // 25158
A=M // 25159
D=M // 25160
@3 // 25161
A=D+A // 25162
D=M // 25163
@256 // 25164
D=D-A // 25165
@DO_GT // 25166
0;JMP // 25167
(Int32.do_add.GT.94)
@SP // 25168
AM=M+1 // 25169
A=A-1 // 25170
M=D // 25171
@Int32.do_add.EQ.95 // 25172
D=A // 25173
@SP // 25174
AM=M+1 // 25175
A=A-1 // 25176
M=D // 25177
@THIS // 25178
A=M // 25179
D=M // 25180
@3 // 25181
A=D+A // 25182
D=M // 25183
@256 // 25184
D=D-A // 25185
@DO_EQ // 25186
0;JMP // 25187
(Int32.do_add.EQ.95)
@SP // 25188
AM=M-1 // 25189
D=D|M // 25190
D=!D // 25191
@Int32.do_add_WHILE_END4 // 25192
D;JNE // 25193

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 25194
A=M // 25195
D=M // 25196
@3 // 25197
D=D+A // 25198
@SP // 25199
AM=M+1 // 25200
A=A-1 // 25201
M=D // 25202
@THIS // 25203
A=M // 25204
D=M // 25205
@3 // 25206
A=D+A // 25207
D=M // 25208
@256 // 25209
D=D-A // 25210
@SP // 25211
AM=M-1 // 25212
A=M // 25213
M=D // 25214

////GotoInstruction{label='Int32.do_add_WHILE_EXP4}
// goto Int32.do_add_WHILE_EXP4
@Int32.do_add_WHILE_EXP4 // 25215
0;JMP // 25216

////LabelInstruction{label='Int32.do_add_WHILE_END4}
// label Int32.do_add_WHILE_END4
(Int32.do_add_WHILE_END4)

////PushInstruction("constant 0")
@SP // 25217
AM=M+1 // 25218
A=A-1 // 25219
M=0 // 25220
@RETURN // 25221
0;JMP // 25222

////FunctionInstruction{functionName='Main.getThreeFifths', numLocals=2, funcMapping={Main.render=64, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getThreeFifths with 2
(Main.getThreeFifths)
@SP // 25223
M=M+1 // 25224
AM=M+1 // 25225
A=A-1 // 25226
M=0 // 25227
A=A-1 // 25228
M=0 // 25229

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 25230
D=A // 25231
@SP // 25232
AM=M+1 // 25233
A=A-1 // 25234
M=D // 25235
// call Number.new
@6 // 25236
D=A // 25237
@14 // 25238
M=D // 25239
@Number.new // 25240
D=A // 25241
@13 // 25242
M=D // 25243
@Main.getThreeFifths.ret.0 // 25244
D=A // 25245
@CALL // 25246
0;JMP // 25247
(Main.getThreeFifths.ret.0)
@SP // 25248
AM=M-1 // 25249
D=M // 25250
@LCL // 25251
A=M // 25252
M=D // 25253

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@5 // 25254
D=A // 25255
@SP // 25256
AM=M+1 // 25257
A=A-1 // 25258
M=D // 25259
// call Number.new
@6 // 25260
D=A // 25261
@14 // 25262
M=D // 25263
@Number.new // 25264
D=A // 25265
@13 // 25266
M=D // 25267
@Main.getThreeFifths.ret.1 // 25268
D=A // 25269
@CALL // 25270
0;JMP // 25271
(Main.getThreeFifths.ret.1)
@SP // 25272
AM=M-1 // 25273
D=M // 25274
@LCL // 25275
A=M+1 // 25276
M=D // 25277

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25278
A=M // 25279
D=M // 25280
@SP // 25281
AM=M+1 // 25282
A=A-1 // 25283
M=D // 25284
@LCL // 25285
A=M+1 // 25286
D=M // 25287
@SP // 25288
AM=M+1 // 25289
A=A-1 // 25290
M=D // 25291
// call Number.do_div
@7 // 25292
D=A // 25293
@14 // 25294
M=D // 25295
@Number.do_div // 25296
D=A // 25297
@13 // 25298
M=D // 25299
@Main.getThreeFifths.ret.2 // 25300
D=A // 25301
@CALL // 25302
0;JMP // 25303
(Main.getThreeFifths.ret.2)
@SP // 25304
M=M-1 // 25305

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25306
A=M+1 // 25307
D=M // 25308
@SP // 25309
AM=M+1 // 25310
A=A-1 // 25311
M=D // 25312
// call Number.dispose
@6 // 25313
D=A // 25314
@14 // 25315
M=D // 25316
@Number.dispose // 25317
D=A // 25318
@13 // 25319
M=D // 25320
@Main.getThreeFifths.ret.3 // 25321
D=A // 25322
@CALL // 25323
0;JMP // 25324
(Main.getThreeFifths.ret.3)
@SP // 25325
M=M-1 // 25326

////PushInstruction("local 0")
@LCL // 25327
A=M // 25328
D=M // 25329
@SP // 25330
AM=M+1 // 25331
A=A-1 // 25332
M=D // 25333
@RETURN // 25334
0;JMP // 25335

////FunctionInstruction{functionName='Memory.add_node', numLocals=2, funcMapping={Memory.copy=0, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.add_node with 2
(Memory.add_node)
@SP // 25336
M=M+1 // 25337
AM=M+1 // 25338
A=A-1 // 25339
M=0 // 25340
A=A-1 // 25341
M=0 // 25342

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 25343
A=M+1 // 25344
D=M // 25345
@2 // 25346
D=D+A // 25347
@SP // 25348
AM=M+1 // 25349
A=A-1 // 25350
M=D // 25351
D=0 // 25352
@SP // 25353
AM=M-1 // 25354
A=M // 25355
M=D // 25356

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 25357
A=M+1 // 25358
D=M // 25359
@3 // 25360
D=D+A // 25361
@SP // 25362
AM=M+1 // 25363
A=A-1 // 25364
M=D // 25365
D=0 // 25366
@SP // 25367
AM=M-1 // 25368
A=M // 25369
M=D // 25370

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE1}}
@Memory.add_node.EQ.96 // 25371
D=A // 25372
@SP // 25373
AM=M+1 // 25374
A=A-1 // 25375
M=D // 25376
@ARG // 25377
A=M // 25378
D=M // 25379
@0 // 25380
A=D+A // 25381
D=M // 25382
@DO_EQ // 25383
0;JMP // 25384
(Memory.add_node.EQ.96)
@Memory.add_node$IF_TRUE1 // 25385
D;JNE // 25386

////GotoInstruction{label='Memory.add_node$IF_FALSE1}
// goto Memory.add_node$IF_FALSE1
@Memory.add_node$IF_FALSE1 // 25387
0;JMP // 25388

////LabelInstruction{label='Memory.add_node$IF_TRUE1}
// label Memory.add_node$IF_TRUE1
(Memory.add_node$IF_TRUE1)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 25389
A=M // 25390
D=M // 25391
@SP // 25392
AM=M+1 // 25393
A=A-1 // 25394
M=D // 25395
@ARG // 25396
A=M+1 // 25397
D=M // 25398
@SP // 25399
AM=M-1 // 25400
A=M // 25401
M=D // 25402

////PushInstruction("constant 0")
@SP // 25403
AM=M+1 // 25404
A=A-1 // 25405
M=0 // 25406
@RETURN // 25407
0;JMP // 25408

////LabelInstruction{label='Memory.add_node$IF_FALSE1}
// label Memory.add_node$IF_FALSE1
(Memory.add_node$IF_FALSE1)

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 25409
A=M // 25410
D=M // 25411
@0 // 25412
A=D+A // 25413
D=M // 25414
@LCL // 25415
A=M // 25416
M=D // 25417

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25418
A=M+1 // 25419
M=0 // 25420

////LabelInstruction{label='Memory.add_node_WHILE_EXP1}
// label Memory.add_node_WHILE_EXP1
(Memory.add_node_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 0"),
//                                    right:
//                                        PushInstruction("constant 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("argument 1"),
//                                    right:
//                                        PushInstruction("constant 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    binaryOp: "GT"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.add_node_WHILE_END1}}
@Memory.add_node.EQ.97 // 25421
D=A // 25422
@SP // 25423
AM=M+1 // 25424
A=A-1 // 25425
M=D // 25426
@LCL // 25427
A=M // 25428
D=M // 25429
@DO_EQ // 25430
0;JMP // 25431
(Memory.add_node.EQ.97)
@SP // 25432
AM=M+1 // 25433
A=A-1 // 25434
M=D // 25435
@SP // 25436
A=M-1 // 25437
M=!D // 25438
@Memory.add_node.GT.98 // 25439
D=A // 25440
@SP // 25441
AM=M+1 // 25442
A=A-1 // 25443
M=D // 25444
@LCL // 25445
A=M // 25446
D=M // 25447
@0 // 25448
A=D+A // 25449
D=M // 25450
@SP // 25451
AM=M+1 // 25452
A=A-1 // 25453
M=D // 25454
@ARG // 25455
A=M+1 // 25456
D=M // 25457
@0 // 25458
A=D+A // 25459
D=M // 25460
@SP // 25461
AM=M-1 // 25462
D=M-D // 25463
@DO_GT // 25464
0;JMP // 25465
(Memory.add_node.GT.98)
D=!D // 25466
@SP // 25467
AM=M-1 // 25468
D=D&M // 25469
D=!D // 25470
@Memory.add_node_WHILE_END1 // 25471
D;JNE // 25472

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25473
A=M // 25474
D=M // 25475
@LCL // 25476
A=M+1 // 25477
M=D // 25478

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25479
A=M // 25480
D=M // 25481
@3 // 25482
A=D+A // 25483
D=M // 25484
@LCL // 25485
A=M // 25486
M=D // 25487

////GotoInstruction{label='Memory.add_node_WHILE_EXP1}
// goto Memory.add_node_WHILE_EXP1
@Memory.add_node_WHILE_EXP1 // 25488
0;JMP // 25489

////LabelInstruction{label='Memory.add_node_WHILE_END1}
// label Memory.add_node_WHILE_END1
(Memory.add_node_WHILE_END1)

////ConditionalGroup{push=UnaryPushGroup(    PushInstruction("local 1"),
//NOT), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE2}}
@LCL // 25490
A=M+1 // 25491
D=!M // 25492
@Memory.add_node$IF_TRUE2 // 25493
D;JNE // 25494

////GotoInstruction{label='Memory.add_node$IF_FALSE2}
// goto Memory.add_node$IF_FALSE2
@Memory.add_node$IF_FALSE2 // 25495
0;JMP // 25496

////LabelInstruction{label='Memory.add_node$IF_TRUE2}
// label Memory.add_node$IF_TRUE2
(Memory.add_node$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 25497
A=M+1 // 25498
D=M // 25499
@3 // 25500
D=D+A // 25501
@SP // 25502
AM=M+1 // 25503
A=A-1 // 25504
M=D // 25505
@ARG // 25506
A=M // 25507
D=M // 25508
@0 // 25509
A=D+A // 25510
D=M // 25511
@SP // 25512
AM=M-1 // 25513
A=M // 25514
M=D // 25515

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 25516
A=M // 25517
D=M // 25518
@0 // 25519
D=D+A // 25520
@2 // 25521
D=D+A // 25522
@SP // 25523
AM=M+1 // 25524
A=A-1 // 25525
M=D // 25526
@ARG // 25527
A=M+1 // 25528
D=M // 25529
@SP // 25530
AM=M-1 // 25531
A=M // 25532
M=D // 25533

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 25534
A=M // 25535
D=M // 25536
@SP // 25537
AM=M+1 // 25538
A=A-1 // 25539
M=D // 25540
@ARG // 25541
A=M+1 // 25542
D=M // 25543
@SP // 25544
AM=M-1 // 25545
A=M // 25546
M=D // 25547

////GotoInstruction{label='Memory.add_node$IF_END2}
// goto Memory.add_node$IF_END2
@Memory.add_node$IF_END2 // 25548
0;JMP // 25549

////LabelInstruction{label='Memory.add_node$IF_FALSE2}
// label Memory.add_node$IF_FALSE2
(Memory.add_node$IF_FALSE2)

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 25550
A=M+1 // 25551
D=M // 25552
@3 // 25553
D=D+A // 25554
@SP // 25555
AM=M+1 // 25556
A=A-1 // 25557
M=D // 25558
@LCL // 25559
A=M // 25560
D=M // 25561
@SP // 25562
AM=M-1 // 25563
A=M // 25564
M=D // 25565

////PushWriter{source=PushInstruction("local 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 25566
A=M+1 // 25567
D=M // 25568
@2 // 25569
D=D+A // 25570
@SP // 25571
AM=M+1 // 25572
A=A-1 // 25573
M=D // 25574
@LCL // 25575
A=M+1 // 25576
D=M // 25577
@SP // 25578
AM=M-1 // 25579
A=M // 25580
M=D // 25581

////ConditionalGroup{push=PushInstruction("local 0"), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE3}}
@LCL // 25582
A=M // 25583
D=M // 25584
@Memory.add_node$IF_TRUE3 // 25585
D;JNE // 25586

////GotoInstruction{label='Memory.add_node$IF_FALSE3}
// goto Memory.add_node$IF_FALSE3
@Memory.add_node$IF_FALSE3 // 25587
0;JMP // 25588

////LabelInstruction{label='Memory.add_node$IF_TRUE3}
// label Memory.add_node$IF_TRUE3
(Memory.add_node$IF_TRUE3)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 25589
A=M // 25590
D=M // 25591
@2 // 25592
D=D+A // 25593
@SP // 25594
AM=M+1 // 25595
A=A-1 // 25596
M=D // 25597
@ARG // 25598
A=M+1 // 25599
D=M // 25600
@SP // 25601
AM=M-1 // 25602
A=M // 25603
M=D // 25604

////LabelInstruction{label='Memory.add_node$IF_FALSE3}
// label Memory.add_node$IF_FALSE3
(Memory.add_node$IF_FALSE3)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 25605
A=M+1 // 25606
D=M // 25607
@3 // 25608
D=D+A // 25609
@SP // 25610
AM=M+1 // 25611
A=A-1 // 25612
M=D // 25613
@ARG // 25614
A=M+1 // 25615
D=M // 25616
@SP // 25617
AM=M-1 // 25618
A=M // 25619
M=D // 25620

////LabelInstruction{label='Memory.add_node$IF_END2}
// label Memory.add_node$IF_END2
(Memory.add_node$IF_END2)

////PushInstruction("constant 0")
@SP // 25621
AM=M+1 // 25622
A=A-1 // 25623
M=0 // 25624
@RETURN // 25625
0;JMP // 25626

////FunctionInstruction{functionName='Vec3.do_sub', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.clone=4, Vec3.do_cross=27, Vec3.new=1}}
// function Vec3.do_sub with 0
(Vec3.do_sub)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25627
A=M // 25628
D=M // 25629
@3 // 25630
M=D // 25631

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25632
A=M // 25633
D=M // 25634
@SP // 25635
AM=M+1 // 25636
A=A-1 // 25637
M=D // 25638
@ARG // 25639
A=M+1 // 25640
D=M // 25641
@SP // 25642
AM=M+1 // 25643
A=A-1 // 25644
M=D // 25645
// call Vec3.getX
@6 // 25646
D=A // 25647
@14 // 25648
M=D // 25649
@Vec3.getX // 25650
D=A // 25651
@13 // 25652
M=D // 25653
@Vec3.do_sub.ret.0 // 25654
D=A // 25655
@CALL // 25656
0;JMP // 25657
(Vec3.do_sub.ret.0)
// call Number.do_sub
@7 // 25658
D=A // 25659
@14 // 25660
M=D // 25661
@Number.do_sub // 25662
D=A // 25663
@13 // 25664
M=D // 25665
@Vec3.do_sub.ret.1 // 25666
D=A // 25667
@CALL // 25668
0;JMP // 25669
(Vec3.do_sub.ret.1)
@SP // 25670
M=M-1 // 25671

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25672
A=M+1 // 25673
D=M // 25674
@SP // 25675
AM=M+1 // 25676
A=A-1 // 25677
M=D // 25678
@ARG // 25679
A=M+1 // 25680
D=M // 25681
@SP // 25682
AM=M+1 // 25683
A=A-1 // 25684
M=D // 25685
// call Vec3.getY
@6 // 25686
D=A // 25687
@14 // 25688
M=D // 25689
@Vec3.getY // 25690
D=A // 25691
@13 // 25692
M=D // 25693
@Vec3.do_sub.ret.2 // 25694
D=A // 25695
@CALL // 25696
0;JMP // 25697
(Vec3.do_sub.ret.2)
// call Number.do_sub
@7 // 25698
D=A // 25699
@14 // 25700
M=D // 25701
@Number.do_sub // 25702
D=A // 25703
@13 // 25704
M=D // 25705
@Vec3.do_sub.ret.3 // 25706
D=A // 25707
@CALL // 25708
0;JMP // 25709
(Vec3.do_sub.ret.3)
@SP // 25710
M=M-1 // 25711

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25712
A=M+1 // 25713
A=A+1 // 25714
D=M // 25715
@SP // 25716
AM=M+1 // 25717
A=A-1 // 25718
M=D // 25719
@ARG // 25720
A=M+1 // 25721
D=M // 25722
@SP // 25723
AM=M+1 // 25724
A=A-1 // 25725
M=D // 25726
// call Vec3.getZ
@6 // 25727
D=A // 25728
@14 // 25729
M=D // 25730
@Vec3.getZ // 25731
D=A // 25732
@13 // 25733
M=D // 25734
@Vec3.do_sub.ret.4 // 25735
D=A // 25736
@CALL // 25737
0;JMP // 25738
(Vec3.do_sub.ret.4)
// call Number.do_sub
@7 // 25739
D=A // 25740
@14 // 25741
M=D // 25742
@Number.do_sub // 25743
D=A // 25744
@13 // 25745
M=D // 25746
@Vec3.do_sub.ret.5 // 25747
D=A // 25748
@CALL // 25749
0;JMP // 25750
(Vec3.do_sub.ret.5)
@SP // 25751
M=M-1 // 25752

////PushInstruction("constant 0")
@SP // 25753
AM=M+1 // 25754
A=A-1 // 25755
M=0 // 25756
@RETURN // 25757
0;JMP // 25758

////FunctionInstruction{functionName='Scene.trace', numLocals=6, funcMapping={Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.trace with 6
(Scene.trace)
@6 // 25759
D=A // 25760
@SP // 25761
AM=D+M // 25762
A=A-1 // 25763
M=0 // 25764
A=A-1 // 25765
M=0 // 25766
A=A-1 // 25767
M=0 // 25768
A=A-1 // 25769
M=0 // 25770
A=A-1 // 25771
M=0 // 25772
A=A-1 // 25773
M=0 // 25774

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25775
A=M // 25776
D=M // 25777
@3 // 25778
M=D // 25779

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25780
A=M // 25781
M=0 // 25782

////LabelInstruction{label='Scene.trace_WHILE_EXP1}
// label Scene.trace_WHILE_EXP1
(Scene.trace_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("this 6"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace_WHILE_END1}}
@Scene.trace.LT.99 // 25783
D=A // 25784
@SP // 25785
AM=M+1 // 25786
A=A-1 // 25787
M=D // 25788
@LCL // 25789
A=M+1 // 25790
D=M // 25791
@SP // 25792
AM=M+1 // 25793
A=A-1 // 25794
M=D // 25795
@THIS // 25796
D=M // 25797
@6 // 25798
A=D+A // 25799
D=M // 25800
@SP // 25801
AM=M-1 // 25802
D=M-D // 25803
@DO_LT // 25804
0;JMP // 25805
(Scene.trace.LT.99)
D=!D // 25806
@Scene.trace_WHILE_END1 // 25807
D;JNE // 25808

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 5"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 25809
D=M // 25810
@5 // 25811
A=D+A // 25812
D=M // 25813
@SP // 25814
AM=M+1 // 25815
A=A-1 // 25816
M=D // 25817
@LCL // 25818
A=M+1 // 25819
D=M // 25820
@SP // 25821
AM=M-1 // 25822
A=D+M // 25823
D=M // 25824
@LCL // 25825
A=M+1 // 25826
A=A+1 // 25827
M=D // 25828

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("argument 1")], call=CallInstruction{Element.intersect}}
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 25829
A=M+1 // 25830
A=A+1 // 25831
D=M // 25832
@SP // 25833
AM=M+1 // 25834
A=A-1 // 25835
M=D // 25836
@ARG // 25837
A=M+1 // 25838
D=M // 25839
@SP // 25840
AM=M+1 // 25841
A=A-1 // 25842
M=D // 25843
// call Element.intersect
@7 // 25844
D=A // 25845
@14 // 25846
M=D // 25847
@Element.intersect // 25848
D=A // 25849
@13 // 25850
M=D // 25851
@Scene.trace.ret.0 // 25852
D=A // 25853
@CALL // 25854
0;JMP // 25855
(Scene.trace.ret.0)
@SP // 25856
AM=M-1 // 25857
D=M // 25858
@LCL // 25859
A=M+1 // 25860
A=A+1 // 25861
A=A+1 // 25862
M=D // 25863

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 25864
D=M // 25865
@5 // 25866
A=D+A // 25867
M=0 // 25868

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE1}}
@Scene.trace.EQ.100 // 25869
D=A // 25870
@SP // 25871
AM=M+1 // 25872
A=A-1 // 25873
M=D // 25874
@LCL // 25875
A=M // 25876
D=M // 25877
@DO_EQ // 25878
0;JMP // 25879
(Scene.trace.EQ.100)
D=!D // 25880
@Scene.trace$IF_TRUE1 // 25881
D;JNE // 25882

////GotoInstruction{label='Scene.trace$IF_FALSE1}
// goto Scene.trace$IF_FALSE1
@Scene.trace$IF_FALSE1 // 25883
0;JMP // 25884

////LabelInstruction{label='Scene.trace$IF_TRUE1}
// label Scene.trace$IF_TRUE1
(Scene.trace$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Intersection.getDistanceFromOrigin}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 25885
A=M // 25886
D=M // 25887
@SP // 25888
AM=M+1 // 25889
A=A-1 // 25890
M=D // 25891
// call Intersection.getDistanceFromOrigin
@6 // 25892
D=A // 25893
@14 // 25894
M=D // 25895
@Intersection.getDistanceFromOrigin // 25896
D=A // 25897
@13 // 25898
M=D // 25899
@Scene.trace.ret.1 // 25900
D=A // 25901
@CALL // 25902
0;JMP // 25903
(Scene.trace.ret.1)
@LCL // 25904
D=M // 25905
@4 // 25906
A=D+A // 25907
D=A // 25908
@R13 // 25909
M=D // 25910
@SP // 25911
AM=M-1 // 25912
D=M // 25913
@R13 // 25914
A=M // 25915
M=D // 25916

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 4")], call=CallInstruction{Number.is_less_than}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 25917
A=M+1 // 25918
A=A+1 // 25919
A=A+1 // 25920
D=M // 25921
@SP // 25922
AM=M+1 // 25923
A=A-1 // 25924
M=D // 25925
@LCL // 25926
D=M // 25927
@4 // 25928
A=D+A // 25929
D=M // 25930
@SP // 25931
AM=M+1 // 25932
A=A-1 // 25933
M=D // 25934
// call Number.is_less_than
@7 // 25935
D=A // 25936
@14 // 25937
M=D // 25938
@Number.is_less_than // 25939
D=A // 25940
@13 // 25941
M=D // 25942
@Scene.trace.ret.2 // 25943
D=A // 25944
@CALL // 25945
0;JMP // 25946
(Scene.trace.ret.2)
@LCL // 25947
D=M // 25948
@5 // 25949
A=D+A // 25950
D=A // 25951
@R13 // 25952
M=D // 25953
@SP // 25954
AM=M-1 // 25955
D=M // 25956
@R13 // 25957
A=M // 25958
M=D // 25959

////LabelInstruction{label='Scene.trace$IF_FALSE1}
// label Scene.trace$IF_FALSE1
(Scene.trace$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.is_negative}},
//NOT),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//            right:
//                PushInstruction("local 5"),
//            binaryOp: "OR"
//        ),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE2}}
@LCL // 25960
A=M+1 // 25961
A=A+1 // 25962
A=A+1 // 25963
D=M // 25964
@SP // 25965
AM=M+1 // 25966
A=A-1 // 25967
M=D // 25968
// call Number.is_negative
@6 // 25969
D=A // 25970
@14 // 25971
M=D // 25972
@Number.is_negative // 25973
D=A // 25974
@13 // 25975
M=D // 25976
@Scene.trace.ret.3 // 25977
D=A // 25978
@CALL // 25979
0;JMP // 25980
(Scene.trace.ret.3)
@SP // 25981
A=M-1 // 25982
M=!D // 25983
@Scene.trace.EQ.101 // 25984
D=A // 25985
@SP // 25986
AM=M+1 // 25987
A=A-1 // 25988
M=D // 25989
@LCL // 25990
A=M // 25991
D=M // 25992
@DO_EQ // 25993
0;JMP // 25994
(Scene.trace.EQ.101)
@SP // 25995
AM=M+1 // 25996
A=A-1 // 25997
M=D // 25998
@LCL // 25999
D=M // 26000
@5 // 26001
A=D+A // 26002
D=M // 26003
@SP // 26004
AM=M-1 // 26005
D=D|M // 26006
@SP // 26007
AM=M-1 // 26008
D=D&M // 26009
@Scene.trace$IF_TRUE2 // 26010
D;JNE // 26011

////GotoInstruction{label='Scene.trace$IF_FALSE2}
// goto Scene.trace$IF_FALSE2
@Scene.trace$IF_FALSE2 // 26012
0;JMP // 26013

////LabelInstruction{label='Scene.trace$IF_TRUE2}
// label Scene.trace$IF_TRUE2
(Scene.trace$IF_TRUE2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE3}}
@Scene.trace.EQ.102 // 26014
D=A // 26015
@SP // 26016
AM=M+1 // 26017
A=A-1 // 26018
M=D // 26019
@LCL // 26020
A=M // 26021
D=M // 26022
@DO_EQ // 26023
0;JMP // 26024
(Scene.trace.EQ.102)
D=!D // 26025
@Scene.trace$IF_TRUE3 // 26026
D;JNE // 26027

////GotoInstruction{label='Scene.trace$IF_FALSE3}
// goto Scene.trace$IF_FALSE3
@Scene.trace$IF_FALSE3 // 26028
0;JMP // 26029

////LabelInstruction{label='Scene.trace$IF_TRUE3}
// label Scene.trace$IF_TRUE3
(Scene.trace$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26030
A=M // 26031
D=M // 26032
@SP // 26033
AM=M+1 // 26034
A=A-1 // 26035
M=D // 26036
// call Intersection.dispose
@6 // 26037
D=A // 26038
@14 // 26039
M=D // 26040
@Intersection.dispose // 26041
D=A // 26042
@13 // 26043
M=D // 26044
@Scene.trace.ret.4 // 26045
D=A // 26046
@CALL // 26047
0;JMP // 26048
(Scene.trace.ret.4)
@SP // 26049
M=M-1 // 26050

////LabelInstruction{label='Scene.trace$IF_FALSE3}
// label Scene.trace$IF_FALSE3
(Scene.trace$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 2")], call=CallInstruction{Intersection.new}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 26051
A=M+1 // 26052
A=A+1 // 26053
A=A+1 // 26054
D=M // 26055
@SP // 26056
AM=M+1 // 26057
A=A-1 // 26058
M=D // 26059
@LCL // 26060
A=M+1 // 26061
A=A+1 // 26062
D=M // 26063
@SP // 26064
AM=M+1 // 26065
A=A-1 // 26066
M=D // 26067
// call Intersection.new
@7 // 26068
D=A // 26069
@14 // 26070
M=D // 26071
@Intersection.new // 26072
D=A // 26073
@13 // 26074
M=D // 26075
@Scene.trace.ret.5 // 26076
D=A // 26077
@CALL // 26078
0;JMP // 26079
(Scene.trace.ret.5)
@SP // 26080
AM=M-1 // 26081
D=M // 26082
@LCL // 26083
A=M // 26084
M=D // 26085

////GotoInstruction{label='Scene.trace$IF_END2}
// goto Scene.trace$IF_END2
@Scene.trace$IF_END2 // 26086
0;JMP // 26087

////LabelInstruction{label='Scene.trace$IF_FALSE2}
// label Scene.trace$IF_FALSE2
(Scene.trace$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26088
A=M+1 // 26089
A=A+1 // 26090
A=A+1 // 26091
D=M // 26092
@SP // 26093
AM=M+1 // 26094
A=A-1 // 26095
M=D // 26096
// call Number.dispose
@6 // 26097
D=A // 26098
@14 // 26099
M=D // 26100
@Number.dispose // 26101
D=A // 26102
@13 // 26103
M=D // 26104
@Scene.trace.ret.6 // 26105
D=A // 26106
@CALL // 26107
0;JMP // 26108
(Scene.trace.ret.6)
@SP // 26109
M=M-1 // 26110

////LabelInstruction{label='Scene.trace$IF_END2}
// label Scene.trace$IF_END2
(Scene.trace$IF_END2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 26111
A=M+1 // 26112
M=M+1 // 26113

////GotoInstruction{label='Scene.trace_WHILE_EXP1}
// goto Scene.trace_WHILE_EXP1
@Scene.trace_WHILE_EXP1 // 26114
0;JMP // 26115

////LabelInstruction{label='Scene.trace_WHILE_END1}
// label Scene.trace_WHILE_END1
(Scene.trace_WHILE_END1)

////PushInstruction("local 0")
@LCL // 26116
A=M // 26117
D=M // 26118
@SP // 26119
AM=M+1 // 26120
A=A-1 // 26121
M=D // 26122
@RETURN // 26123
0;JMP // 26124

////FunctionInstruction{functionName='Int32.is_negative', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.is_negative with 0
(Int32.is_negative)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26125
A=M // 26126
D=M // 26127
@3 // 26128
M=D // 26129

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 128"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 128"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//)
@Int32.is_negative.GT.103 // 26130
D=A // 26131
@SP // 26132
AM=M+1 // 26133
A=A-1 // 26134
M=D // 26135
@THIS // 26136
A=M // 26137
D=M // 26138
@3 // 26139
A=D+A // 26140
D=M // 26141
@128 // 26142
D=D-A // 26143
@DO_GT // 26144
0;JMP // 26145
(Int32.is_negative.GT.103)
@SP // 26146
AM=M+1 // 26147
A=A-1 // 26148
M=D // 26149
@Int32.is_negative.EQ.104 // 26150
D=A // 26151
@SP // 26152
AM=M+1 // 26153
A=A-1 // 26154
M=D // 26155
@THIS // 26156
A=M // 26157
D=M // 26158
@3 // 26159
A=D+A // 26160
D=M // 26161
@128 // 26162
D=D-A // 26163
@DO_EQ // 26164
0;JMP // 26165
(Int32.is_negative.EQ.104)
@SP // 26166
AM=M-1 // 26167
D=D|M // 26168
@SP // 26169
AM=M+1 // 26170
A=A-1 // 26171
M=D // 26172
@RETURN // 26173
0;JMP // 26174

////FunctionInstruction{functionName='Sys.init', numLocals=0, funcMapping={Sys.halt=0}}
// function Sys.init with 0
(Sys.init)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Memory.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Memory.init
@5 // 26175
D=A // 26176
@14 // 26177
M=D // 26178
@Memory.init // 26179
D=A // 26180
@13 // 26181
M=D // 26182
@Sys.init.ret.0 // 26183
D=A // 26184
@CALL // 26185
0;JMP // 26186
(Sys.init.ret.0)
@SP // 26187
M=M-1 // 26188

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Math.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Math.init
@5 // 26189
D=A // 26190
@14 // 26191
M=D // 26192
@Math.init // 26193
D=A // 26194
@13 // 26195
M=D // 26196
@Sys.init.ret.1 // 26197
D=A // 26198
@CALL // 26199
0;JMP // 26200
(Sys.init.ret.1)
@SP // 26201
M=M-1 // 26202

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Screen.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Screen.init
@5 // 26203
D=A // 26204
@14 // 26205
M=D // 26206
@Screen.init // 26207
D=A // 26208
@13 // 26209
M=D // 26210
@Sys.init.ret.2 // 26211
D=A // 26212
@CALL // 26213
0;JMP // 26214
(Sys.init.ret.2)
@SP // 26215
M=M-1 // 26216

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.init
@5 // 26217
D=A // 26218
@14 // 26219
M=D // 26220
@Output.init // 26221
D=A // 26222
@13 // 26223
M=D // 26224
@Sys.init.ret.3 // 26225
D=A // 26226
@CALL // 26227
0;JMP // 26228
(Sys.init.ret.3)
@SP // 26229
M=M-1 // 26230

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Keyboard.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Keyboard.init
@5 // 26231
D=A // 26232
@14 // 26233
M=D // 26234
@Keyboard.init // 26235
D=A // 26236
@13 // 26237
M=D // 26238
@Sys.init.ret.4 // 26239
D=A // 26240
@CALL // 26241
0;JMP // 26242
(Sys.init.ret.4)
@SP // 26243
M=M-1 // 26244

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.main}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Main.main
@5 // 26245
D=A // 26246
@14 // 26247
M=D // 26248
@Main.main // 26249
D=A // 26250
@13 // 26251
M=D // 26252
@Sys.init.ret.5 // 26253
D=A // 26254
@CALL // 26255
0;JMP // 26256
(Sys.init.ret.5)
@SP // 26257
M=M-1 // 26258

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Sys.halt}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Sys.halt
@5 // 26259
D=A // 26260
@14 // 26261
M=D // 26262
@Sys.halt // 26263
D=A // 26264
@13 // 26265
M=D // 26266
@Sys.init.ret.6 // 26267
D=A // 26268
@CALL // 26269
0;JMP // 26270
(Sys.init.ret.6)
@SP // 26271
M=M-1 // 26272

////PushInstruction("constant 0")
@SP // 26273
AM=M+1 // 26274
A=A-1 // 26275
M=0 // 26276
@RETURN // 26277
0;JMP // 26278

////FunctionInstruction{functionName='Element.plane', numLocals=0, funcMapping={Element.surface_normal=2, Element.color=2}}
// function Element.plane with 0
(Element.plane)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 26279
D=A // 26280
@SP // 26281
AM=M+1 // 26282
A=A-1 // 26283
M=D // 26284
// call Memory.alloc
@6 // 26285
D=A // 26286
@14 // 26287
M=D // 26288
@Memory.alloc // 26289
D=A // 26290
@13 // 26291
M=D // 26292
@Element.plane.ret.0 // 26293
D=A // 26294
@CALL // 26295
0;JMP // 26296
(Element.plane.ret.0)
@SP // 26297
AM=M-1 // 26298
D=M // 26299
@3 // 26300
M=D // 26301

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 26302
A=M // 26303
D=M // 26304
@THIS // 26305
A=M // 26306
M=D // 26307

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 26308
A=M+1 // 26309
M=0 // 26310

////PushInstruction("pointer 0")
@3 // 26311
D=M // 26312
@SP // 26313
AM=M+1 // 26314
A=A-1 // 26315
M=D // 26316
@RETURN // 26317
0;JMP // 26318

////FunctionInstruction{functionName='Screen.setColor', numLocals=0, funcMapping={Screen.init=0}}
// function Screen.setColor with 0
(Screen.setColor)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=static 0}
//}

@ARG // 26319
A=M // 26320
D=M // 26321
@Screen.0 // 26322
M=D // 26323

////PushInstruction("constant 0")
@SP // 26324
AM=M+1 // 26325
A=A-1 // 26326
M=0 // 26327
@RETURN // 26328
0;JMP // 26329

////FunctionInstruction{functionName='Vec3.dispose', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.new=1}}
// function Vec3.dispose with 0
(Vec3.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26330
A=M // 26331
D=M // 26332
@3 // 26333
M=D // 26334

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Vec3.0 // 26335
M=M-1 // 26336

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26337
A=M // 26338
D=M // 26339
@SP // 26340
AM=M+1 // 26341
A=A-1 // 26342
M=D // 26343
// call Number.dispose
@6 // 26344
D=A // 26345
@14 // 26346
M=D // 26347
@Number.dispose // 26348
D=A // 26349
@13 // 26350
M=D // 26351
@Vec3.dispose.ret.0 // 26352
D=A // 26353
@CALL // 26354
0;JMP // 26355
(Vec3.dispose.ret.0)
@SP // 26356
M=M-1 // 26357

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26358
A=M+1 // 26359
D=M // 26360
@SP // 26361
AM=M+1 // 26362
A=A-1 // 26363
M=D // 26364
// call Number.dispose
@6 // 26365
D=A // 26366
@14 // 26367
M=D // 26368
@Number.dispose // 26369
D=A // 26370
@13 // 26371
M=D // 26372
@Vec3.dispose.ret.1 // 26373
D=A // 26374
@CALL // 26375
0;JMP // 26376
(Vec3.dispose.ret.1)
@SP // 26377
M=M-1 // 26378

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26379
A=M+1 // 26380
A=A+1 // 26381
D=M // 26382
@SP // 26383
AM=M+1 // 26384
A=A-1 // 26385
M=D // 26386
// call Number.dispose
@6 // 26387
D=A // 26388
@14 // 26389
M=D // 26390
@Number.dispose // 26391
D=A // 26392
@13 // 26393
M=D // 26394
@Vec3.dispose.ret.2 // 26395
D=A // 26396
@CALL // 26397
0;JMP // 26398
(Vec3.dispose.ret.2)
@SP // 26399
M=M-1 // 26400

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 26401
D=M // 26402
@SP // 26403
AM=M+1 // 26404
A=A-1 // 26405
M=D // 26406
// call Memory.deAlloc
@6 // 26407
D=A // 26408
@14 // 26409
M=D // 26410
@Memory.deAlloc // 26411
D=A // 26412
@13 // 26413
M=D // 26414
@Vec3.dispose.ret.3 // 26415
D=A // 26416
@CALL // 26417
0;JMP // 26418
(Vec3.dispose.ret.3)
@SP // 26419
M=M-1 // 26420

////PushInstruction("constant 0")
@SP // 26421
AM=M+1 // 26422
A=A-1 // 26423
M=0 // 26424
@RETURN // 26425
0;JMP // 26426

////FunctionInstruction{functionName='DirectionalLight.getColor', numLocals=0, funcMapping={}}
// function DirectionalLight.getColor with 0
(DirectionalLight.getColor)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26427
A=M // 26428
D=M // 26429
@3 // 26430
M=D // 26431

////PushInstruction("this 1")
@THIS // 26432
A=M+1 // 26433
D=M // 26434
@SP // 26435
AM=M+1 // 26436
A=A-1 // 26437
M=D // 26438
@RETURN // 26439
0;JMP // 26440

////FunctionInstruction{functionName='Math.init', numLocals=2, funcMapping={Math.abs=1, Math.max=0, Math.multiply=0}}
// function Math.init with 2
(Math.init)
@SP // 26441
M=M+1 // 26442
AM=M+1 // 26443
A=A-1 // 26444
M=0 // 26445
A=A-1 // 26446
M=0 // 26447

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 26448
A=M // 26449
M=1 // 26450

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 26451
A=M+1 // 26452
M=0 // 26453

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=static 0}
//}

@16 // 26454
D=A // 26455
@SP // 26456
AM=M+1 // 26457
A=A-1 // 26458
M=D // 26459
// call Array.new
@6 // 26460
D=A // 26461
@14 // 26462
M=D // 26463
@Array.new // 26464
D=A // 26465
@13 // 26466
M=D // 26467
@Math.init.ret.0 // 26468
D=A // 26469
@CALL // 26470
0;JMP // 26471
(Math.init.ret.0)
@SP // 26472
AM=M-1 // 26473
D=M // 26474
@Math.0 // 26475
M=D // 26476

////LabelInstruction{label='Math.init_WHILE_EXP1}
// label Math.init_WHILE_EXP1
(Math.init_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.init_WHILE_END1}}
@Math.init.LT.105 // 26477
D=A // 26478
@SP // 26479
AM=M+1 // 26480
A=A-1 // 26481
M=D // 26482
@LCL // 26483
A=M+1 // 26484
D=M // 26485
@16 // 26486
D=D-A // 26487
@DO_LT // 26488
0;JMP // 26489
(Math.init.LT.105)
D=!D // 26490
@Math.init_WHILE_END1 // 26491
D;JNE // 26492

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@Math.0 // 26493
D=M // 26494
@SP // 26495
AM=M+1 // 26496
A=A-1 // 26497
M=D // 26498
@LCL // 26499
A=M+1 // 26500
D=M // 26501
@SP // 26502
AM=M-1 // 26503
D=D+M // 26504
@SP // 26505
AM=M+1 // 26506
A=A-1 // 26507
M=D // 26508
@LCL // 26509
A=M // 26510
D=M // 26511
@SP // 26512
AM=M-1 // 26513
A=M // 26514
M=D // 26515

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 26516
A=M // 26517
D=M // 26518
@LCL // 26519
A=M // 26520
M=D+M // 26521

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 26522
A=M+1 // 26523
M=M+1 // 26524

////GotoInstruction{label='Math.init_WHILE_EXP1}
// goto Math.init_WHILE_EXP1
@Math.init_WHILE_EXP1 // 26525
0;JMP // 26526

////LabelInstruction{label='Math.init_WHILE_END1}
// label Math.init_WHILE_END1
(Math.init_WHILE_END1)

////PushInstruction("constant 0")
@SP // 26527
AM=M+1 // 26528
A=A-1 // 26529
M=0 // 26530
@RETURN // 26531
0;JMP // 26532

////FunctionInstruction{functionName='Main.getNegativeOneHalf', numLocals=2, funcMapping={Main.render=64, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getNegativeOneHalf with 2
(Main.getNegativeOneHalf)
@SP // 26533
M=M+1 // 26534
AM=M+1 // 26535
A=A-1 // 26536
M=0 // 26537
A=A-1 // 26538
M=0 // 26539

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 26540
AM=M+1 // 26541
A=A-1 // 26542
M=-1 // 26543
// call Number.new
@6 // 26544
D=A // 26545
@14 // 26546
M=D // 26547
@Number.new // 26548
D=A // 26549
@13 // 26550
M=D // 26551
@Main.getNegativeOneHalf.ret.0 // 26552
D=A // 26553
@CALL // 26554
0;JMP // 26555
(Main.getNegativeOneHalf.ret.0)
@SP // 26556
AM=M-1 // 26557
D=M // 26558
@LCL // 26559
A=M // 26560
M=D // 26561

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 26562
D=A // 26563
@SP // 26564
AM=M+1 // 26565
A=A-1 // 26566
M=D // 26567
// call Number.new
@6 // 26568
D=A // 26569
@14 // 26570
M=D // 26571
@Number.new // 26572
D=A // 26573
@13 // 26574
M=D // 26575
@Main.getNegativeOneHalf.ret.1 // 26576
D=A // 26577
@CALL // 26578
0;JMP // 26579
(Main.getNegativeOneHalf.ret.1)
@SP // 26580
AM=M-1 // 26581
D=M // 26582
@LCL // 26583
A=M+1 // 26584
M=D // 26585

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26586
A=M // 26587
D=M // 26588
@SP // 26589
AM=M+1 // 26590
A=A-1 // 26591
M=D // 26592
@LCL // 26593
A=M+1 // 26594
D=M // 26595
@SP // 26596
AM=M+1 // 26597
A=A-1 // 26598
M=D // 26599
// call Number.do_div
@7 // 26600
D=A // 26601
@14 // 26602
M=D // 26603
@Number.do_div // 26604
D=A // 26605
@13 // 26606
M=D // 26607
@Main.getNegativeOneHalf.ret.2 // 26608
D=A // 26609
@CALL // 26610
0;JMP // 26611
(Main.getNegativeOneHalf.ret.2)
@SP // 26612
M=M-1 // 26613

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26614
A=M+1 // 26615
D=M // 26616
@SP // 26617
AM=M+1 // 26618
A=A-1 // 26619
M=D // 26620
// call Number.dispose
@6 // 26621
D=A // 26622
@14 // 26623
M=D // 26624
@Number.dispose // 26625
D=A // 26626
@13 // 26627
M=D // 26628
@Main.getNegativeOneHalf.ret.3 // 26629
D=A // 26630
@CALL // 26631
0;JMP // 26632
(Main.getNegativeOneHalf.ret.3)
@SP // 26633
M=M-1 // 26634

////PushInstruction("local 0")
@LCL // 26635
A=M // 26636
D=M // 26637
@SP // 26638
AM=M+1 // 26639
A=A-1 // 26640
M=D // 26641
@RETURN // 26642
0;JMP // 26643

////FunctionInstruction{functionName='Main.getOneHalf', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getOneHalf with 2
(Main.getOneHalf)
@SP // 26644
M=M+1 // 26645
AM=M+1 // 26646
A=A-1 // 26647
M=0 // 26648
A=A-1 // 26649
M=0 // 26650

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 26651
AM=M+1 // 26652
A=A-1 // 26653
M=1 // 26654
// call Number.new
@6 // 26655
D=A // 26656
@14 // 26657
M=D // 26658
@Number.new // 26659
D=A // 26660
@13 // 26661
M=D // 26662
@Main.getOneHalf.ret.0 // 26663
D=A // 26664
@CALL // 26665
0;JMP // 26666
(Main.getOneHalf.ret.0)
@SP // 26667
AM=M-1 // 26668
D=M // 26669
@LCL // 26670
A=M // 26671
M=D // 26672

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 26673
D=A // 26674
@SP // 26675
AM=M+1 // 26676
A=A-1 // 26677
M=D // 26678
// call Number.new
@6 // 26679
D=A // 26680
@14 // 26681
M=D // 26682
@Number.new // 26683
D=A // 26684
@13 // 26685
M=D // 26686
@Main.getOneHalf.ret.1 // 26687
D=A // 26688
@CALL // 26689
0;JMP // 26690
(Main.getOneHalf.ret.1)
@SP // 26691
AM=M-1 // 26692
D=M // 26693
@LCL // 26694
A=M+1 // 26695
M=D // 26696

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26697
A=M // 26698
D=M // 26699
@SP // 26700
AM=M+1 // 26701
A=A-1 // 26702
M=D // 26703
@LCL // 26704
A=M+1 // 26705
D=M // 26706
@SP // 26707
AM=M+1 // 26708
A=A-1 // 26709
M=D // 26710
// call Number.do_div
@7 // 26711
D=A // 26712
@14 // 26713
M=D // 26714
@Number.do_div // 26715
D=A // 26716
@13 // 26717
M=D // 26718
@Main.getOneHalf.ret.2 // 26719
D=A // 26720
@CALL // 26721
0;JMP // 26722
(Main.getOneHalf.ret.2)
@SP // 26723
M=M-1 // 26724

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26725
A=M+1 // 26726
D=M // 26727
@SP // 26728
AM=M+1 // 26729
A=A-1 // 26730
M=D // 26731
// call Number.dispose
@6 // 26732
D=A // 26733
@14 // 26734
M=D // 26735
@Number.dispose // 26736
D=A // 26737
@13 // 26738
M=D // 26739
@Main.getOneHalf.ret.3 // 26740
D=A // 26741
@CALL // 26742
0;JMP // 26743
(Main.getOneHalf.ret.3)
@SP // 26744
M=M-1 // 26745

////PushInstruction("local 0")
@LCL // 26746
A=M // 26747
D=M // 26748
@SP // 26749
AM=M+1 // 26750
A=A-1 // 26751
M=D // 26752
@RETURN // 26753
0;JMP // 26754

////FunctionInstruction{functionName='Number.frac_to_i16', numLocals=1, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.is_less_than=2, Number.do_neg=1}}
// function Number.frac_to_i16 with 1
(Number.frac_to_i16)
@SP // 26755
AM=M+1 // 26756
A=A-1 // 26757
M=0 // 26758

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26759
A=M // 26760
D=M // 26761
@3 // 26762
M=D // 26763

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 26764
A=M // 26765
D=M // 26766
@SP // 26767
AM=M+1 // 26768
A=A-1 // 26769
M=D // 26770
// call Int32.getParts
@6 // 26771
D=A // 26772
@14 // 26773
M=D // 26774
@Int32.getParts // 26775
D=A // 26776
@13 // 26777
M=D // 26778
@Number.frac_to_i16.ret.0 // 26779
D=A // 26780
@CALL // 26781
0;JMP // 26782
(Number.frac_to_i16.ret.0)
@SP // 26783
AM=M-1 // 26784
D=M // 26785
@LCL // 26786
A=M // 26787
M=D // 26788

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Number.is_negative}}, ifGoto=IfGotoInstruction{label='Number.frac_to_i16$IF_TRUE1}}
@3 // 26789
D=M // 26790
@SP // 26791
AM=M+1 // 26792
A=A-1 // 26793
M=D // 26794
// call Number.is_negative
@6 // 26795
D=A // 26796
@14 // 26797
M=D // 26798
@Number.is_negative // 26799
D=A // 26800
@13 // 26801
M=D // 26802
@Number.frac_to_i16.ret.1 // 26803
D=A // 26804
@CALL // 26805
0;JMP // 26806
(Number.frac_to_i16.ret.1)
@SP // 26807
AM=M-1 // 26808
D=M // 26809
@Number.frac_to_i16$IF_TRUE1 // 26810
D;JNE // 26811

////GotoInstruction{label='Number.frac_to_i16$IF_FALSE1}
// goto Number.frac_to_i16$IF_FALSE1
@Number.frac_to_i16$IF_FALSE1 // 26812
0;JMP // 26813

////LabelInstruction{label='Number.frac_to_i16$IF_TRUE1}
// label Number.frac_to_i16$IF_TRUE1
(Number.frac_to_i16$IF_TRUE1)

////UnaryPushGroup(CallGroup{pushes=[BinaryPushGroup(
//    left:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 255"),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "SUB"
//), PushInstruction("constant 128")], call=CallInstruction{Math.multiply}},
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 256"),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "SUB"
//        ),
//    binaryOp: "ADD"
//), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//NEG)
@LCL // 26814
A=M // 26815
D=M // 26816
A=D+1 // 26817
D=M // 26818
@255 // 26819
D=A-D // 26820
@SP // 26821
AM=M+1 // 26822
A=A-1 // 26823
M=D // 26824
@128 // 26825
D=A // 26826
@SP // 26827
AM=M+1 // 26828
A=A-1 // 26829
M=D // 26830
// call Math.multiply
@7 // 26831
D=A // 26832
@14 // 26833
M=D // 26834
@Math.multiply // 26835
D=A // 26836
@13 // 26837
M=D // 26838
@Number.frac_to_i16.ret.2 // 26839
D=A // 26840
@CALL // 26841
0;JMP // 26842
(Number.frac_to_i16.ret.2)
@LCL // 26843
A=M // 26844
D=M // 26845
@0 // 26846
A=D+A // 26847
D=M // 26848
@256 // 26849
D=A-D // 26850
@SP // 26851
AM=M-1 // 26852
D=D+M // 26853
@SP // 26854
AM=M+1 // 26855
A=A-1 // 26856
M=D // 26857
@2 // 26858
D=A // 26859
@SP // 26860
AM=M+1 // 26861
A=A-1 // 26862
M=D // 26863
// call Math.divide
@7 // 26864
D=A // 26865
@14 // 26866
M=D // 26867
@Math.divide // 26868
D=A // 26869
@13 // 26870
M=D // 26871
@Number.frac_to_i16.ret.3 // 26872
D=A // 26873
@CALL // 26874
0;JMP // 26875
(Number.frac_to_i16.ret.3)
@SP // 26876
A=M-1 // 26877
M=-D // 26878
@RETURN // 26879
0;JMP // 26880

////GotoInstruction{label='Number.frac_to_i16$IF_END1}
// goto Number.frac_to_i16$IF_END1
@Number.frac_to_i16$IF_END1 // 26881
0;JMP // 26882

////LabelInstruction{label='Number.frac_to_i16$IF_FALSE1}
// label Number.frac_to_i16$IF_FALSE1
(Number.frac_to_i16$IF_FALSE1)

////BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 128")], call=CallInstruction{Math.multiply}},
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//    binaryOp: "ADD"
//)
@LCL // 26883
A=M // 26884
D=M // 26885
A=D+1 // 26886
D=M // 26887
@SP // 26888
AM=M+1 // 26889
A=A-1 // 26890
M=D // 26891
@128 // 26892
D=A // 26893
@SP // 26894
AM=M+1 // 26895
A=A-1 // 26896
M=D // 26897
// call Math.multiply
@7 // 26898
D=A // 26899
@14 // 26900
M=D // 26901
@Math.multiply // 26902
D=A // 26903
@13 // 26904
M=D // 26905
@Number.frac_to_i16.ret.4 // 26906
D=A // 26907
@CALL // 26908
0;JMP // 26909
(Number.frac_to_i16.ret.4)
@LCL // 26910
A=M // 26911
D=M // 26912
@0 // 26913
A=D+A // 26914
D=M // 26915
@SP // 26916
AM=M+1 // 26917
A=A-1 // 26918
M=D // 26919
@2 // 26920
D=A // 26921
@SP // 26922
AM=M+1 // 26923
A=A-1 // 26924
M=D // 26925
// call Math.divide
@7 // 26926
D=A // 26927
@14 // 26928
M=D // 26929
@Math.divide // 26930
D=A // 26931
@13 // 26932
M=D // 26933
@Number.frac_to_i16.ret.5 // 26934
D=A // 26935
@CALL // 26936
0;JMP // 26937
(Number.frac_to_i16.ret.5)
@SP // 26938
AM=M-1 // 26939
D=M // 26940
@SP // 26941
AM=M-1 // 26942
D=D+M // 26943
@SP // 26944
AM=M+1 // 26945
A=A-1 // 26946
M=D // 26947
@RETURN // 26948
0;JMP // 26949

////LabelInstruction{label='Number.frac_to_i16$IF_END1}
// label Number.frac_to_i16$IF_END1
(Number.frac_to_i16$IF_END1)

////FunctionInstruction{functionName='Vec3.do_scale', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.new=1}}
// function Vec3.do_scale with 0
(Vec3.do_scale)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26950
A=M // 26951
D=M // 26952
@3 // 26953
M=D // 26954

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26955
A=M // 26956
D=M // 26957
@SP // 26958
AM=M+1 // 26959
A=A-1 // 26960
M=D // 26961
@ARG // 26962
A=M+1 // 26963
D=M // 26964
@SP // 26965
AM=M+1 // 26966
A=A-1 // 26967
M=D // 26968
// call Number.do_mul
@7 // 26969
D=A // 26970
@14 // 26971
M=D // 26972
@Number.do_mul // 26973
D=A // 26974
@13 // 26975
M=D // 26976
@Vec3.do_scale.ret.0 // 26977
D=A // 26978
@CALL // 26979
0;JMP // 26980
(Vec3.do_scale.ret.0)
@SP // 26981
M=M-1 // 26982

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26983
A=M+1 // 26984
D=M // 26985
@SP // 26986
AM=M+1 // 26987
A=A-1 // 26988
M=D // 26989
@ARG // 26990
A=M+1 // 26991
D=M // 26992
@SP // 26993
AM=M+1 // 26994
A=A-1 // 26995
M=D // 26996
// call Number.do_mul
@7 // 26997
D=A // 26998
@14 // 26999
M=D // 27000
@Number.do_mul // 27001
D=A // 27002
@13 // 27003
M=D // 27004
@Vec3.do_scale.ret.1 // 27005
D=A // 27006
@CALL // 27007
0;JMP // 27008
(Vec3.do_scale.ret.1)
@SP // 27009
M=M-1 // 27010

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27011
A=M+1 // 27012
A=A+1 // 27013
D=M // 27014
@SP // 27015
AM=M+1 // 27016
A=A-1 // 27017
M=D // 27018
@ARG // 27019
A=M+1 // 27020
D=M // 27021
@SP // 27022
AM=M+1 // 27023
A=A-1 // 27024
M=D // 27025
// call Number.do_mul
@7 // 27026
D=A // 27027
@14 // 27028
M=D // 27029
@Number.do_mul // 27030
D=A // 27031
@13 // 27032
M=D // 27033
@Vec3.do_scale.ret.2 // 27034
D=A // 27035
@CALL // 27036
0;JMP // 27037
(Vec3.do_scale.ret.2)
@SP // 27038
M=M-1 // 27039

////PushInstruction("constant 0")
@SP // 27040
AM=M+1 // 27041
A=A-1 // 27042
M=0 // 27043
@RETURN // 27044
0;JMP // 27045

////FunctionInstruction{functionName='Scene.getNumLights', numLocals=0, funcMapping={Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.getNumLights with 0
(Scene.getNumLights)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27046
A=M // 27047
D=M // 27048
@3 // 27049
M=D // 27050

////PushInstruction("this 8")
@THIS // 27051
D=M // 27052
@8 // 27053
A=D+A // 27054
D=M // 27055
@SP // 27056
AM=M+1 // 27057
A=A-1 // 27058
M=D // 27059
@RETURN // 27060
0;JMP // 27061

////FunctionInstruction{functionName='Intersection.new', numLocals=0, funcMapping={Intersection.dispose=2}}
// function Intersection.new with 0
(Intersection.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 27062
D=A // 27063
@SP // 27064
AM=M+1 // 27065
A=A-1 // 27066
M=D // 27067
// call Memory.alloc
@6 // 27068
D=A // 27069
@14 // 27070
M=D // 27071
@Memory.alloc // 27072
D=A // 27073
@13 // 27074
M=D // 27075
@Intersection.new.ret.0 // 27076
D=A // 27077
@CALL // 27078
0;JMP // 27079
(Intersection.new.ret.0)
@SP // 27080
AM=M-1 // 27081
D=M // 27082
@3 // 27083
M=D // 27084

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Intersection.0 // 27085
M=M+1 // 27086

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 27087
A=M // 27088
D=M // 27089
@THIS // 27090
A=M // 27091
M=D // 27092

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 27093
A=M+1 // 27094
D=M // 27095
@THIS // 27096
A=M+1 // 27097
M=D // 27098

////PushInstruction("pointer 0")
@3 // 27099
D=M // 27100
@SP // 27101
AM=M+1 // 27102
A=A-1 // 27103
M=D // 27104
@RETURN // 27105
0;JMP // 27106

////FunctionInstruction{functionName='Number.getV', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.is_less_than=2, Number.do_neg=1}}
// function Number.getV with 0
(Number.getV)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27107
A=M // 27108
D=M // 27109
@3 // 27110
M=D // 27111

////PushInstruction("this 0")
@THIS // 27112
A=M // 27113
D=M // 27114
@SP // 27115
AM=M+1 // 27116
A=A-1 // 27117
M=D // 27118
@RETURN // 27119
0;JMP // 27120

////FunctionInstruction{functionName='Int32.do_mul', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_mul with 0
(Int32.do_mul)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27121
A=M // 27122
D=M // 27123
@3 // 27124
M=D // 27125

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("argument 1"), PushInstruction("constant 0")], call=CallInstruction{Int32.do_mul_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 27126
D=M // 27127
@SP // 27128
AM=M+1 // 27129
A=A-1 // 27130
M=D // 27131
@2 // 27132
D=A // 27133
@SP // 27134
M=D+M // 27135
@ARG // 27136
A=M+1 // 27137
D=M // 27138
@SP // 27139
A=M-1 // 27140
M=D // 27141
A=A-1 // 27142
M=0 // 27143
// call Int32.do_mul_right_shift_bytes
@8 // 27144
D=A // 27145
@14 // 27146
M=D // 27147
@Int32.do_mul_right_shift_bytes // 27148
D=A // 27149
@13 // 27150
M=D // 27151
@Int32.do_mul.ret.0 // 27152
D=A // 27153
@CALL // 27154
0;JMP // 27155
(Int32.do_mul.ret.0)
@SP // 27156
M=M-1 // 27157

////PushInstruction("constant 0")
@SP // 27158
AM=M+1 // 27159
A=A-1 // 27160
M=0 // 27161
@RETURN // 27162
0;JMP // 27163

////FunctionInstruction{functionName='Vec3.getX', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.new=1}}
// function Vec3.getX with 0
(Vec3.getX)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27164
A=M // 27165
D=M // 27166
@3 // 27167
M=D // 27168

////PushInstruction("this 0")
@THIS // 27169
A=M // 27170
D=M // 27171
@SP // 27172
AM=M+1 // 27173
A=A-1 // 27174
M=D // 27175
@RETURN // 27176
0;JMP // 27177

////FunctionInstruction{functionName='Int32.nlz_u4', numLocals=2, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.do_mul=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.nlz_u4 with 2
(Int32.nlz_u4)
@SP // 27178
M=M+1 // 27179
AM=M+1 // 27180
A=A-1 // 27181
M=0 // 27182
A=A-1 // 27183
M=0 // 27184

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27185
A=M // 27186
M=0 // 27187

////PushPopPair {
//  push: PushInstruction("constant 3")
//  pop:  PopInstruction{address=local 1}
//}

@3 // 27188
D=A // 27189
@LCL // 27190
A=M+1 // 27191
M=D // 27192

////LabelInstruction{label='Int32.nlz_u4_WHILE_EXP1}
// label Int32.nlz_u4_WHILE_EXP1
(Int32.nlz_u4_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 1"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.nlz_u4_WHILE_END1}}
@Int32.nlz_u4.GT.106 // 27193
D=A // 27194
@SP // 27195
AM=M+1 // 27196
A=A-1 // 27197
M=D // 27198
@LCL // 27199
A=M+1 // 27200
D=M // 27201
@DO_GT // 27202
0;JMP // 27203
(Int32.nlz_u4.GT.106)
@SP // 27204
AM=M+1 // 27205
A=A-1 // 27206
M=D // 27207
@Int32.nlz_u4.EQ.107 // 27208
D=A // 27209
@SP // 27210
AM=M+1 // 27211
A=A-1 // 27212
M=D // 27213
@LCL // 27214
A=M+1 // 27215
D=M // 27216
@DO_EQ // 27217
0;JMP // 27218
(Int32.nlz_u4.EQ.107)
@SP // 27219
AM=M-1 // 27220
D=D|M // 27221
D=!D // 27222
@Int32.nlz_u4_WHILE_END1 // 27223
D;JNE // 27224

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 1")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.nlz_u4$IF_TRUE1}}
@Int32.nlz_u4.EQ.108 // 27225
D=A // 27226
@SP // 27227
AM=M+1 // 27228
A=A-1 // 27229
M=D // 27230
@ARG // 27231
A=M // 27232
D=M // 27233
@SP // 27234
AM=M+1 // 27235
A=A-1 // 27236
M=D // 27237
@LCL // 27238
A=M+1 // 27239
D=M // 27240
@SP // 27241
AM=M+1 // 27242
A=A-1 // 27243
M=D // 27244
// call Int32.arith_rightshift
@7 // 27245
D=A // 27246
@14 // 27247
M=D // 27248
@Int32.arith_rightshift // 27249
D=A // 27250
@13 // 27251
M=D // 27252
@Int32.nlz_u4.ret.0 // 27253
D=A // 27254
@CALL // 27255
0;JMP // 27256
(Int32.nlz_u4.ret.0)
@SP // 27257
AM=M-1 // 27258
D=M // 27259
@DO_EQ // 27260
0;JMP // 27261
(Int32.nlz_u4.EQ.108)
@Int32.nlz_u4$IF_TRUE1 // 27262
D;JNE // 27263

////GotoInstruction{label='Int32.nlz_u4$IF_FALSE1}
// goto Int32.nlz_u4$IF_FALSE1
@Int32.nlz_u4$IF_FALSE1 // 27264
0;JMP // 27265

////LabelInstruction{label='Int32.nlz_u4$IF_TRUE1}
// label Int32.nlz_u4$IF_TRUE1
(Int32.nlz_u4$IF_TRUE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27266
A=M // 27267
M=M+1 // 27268

////GotoInstruction{label='Int32.nlz_u4$IF_END1}
// goto Int32.nlz_u4$IF_END1
@Int32.nlz_u4$IF_END1 // 27269
0;JMP // 27270

////LabelInstruction{label='Int32.nlz_u4$IF_FALSE1}
// label Int32.nlz_u4$IF_FALSE1
(Int32.nlz_u4$IF_FALSE1)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 27271
A=M+1 // 27272
M=-1 // 27273

////LabelInstruction{label='Int32.nlz_u4$IF_END1}
// label Int32.nlz_u4$IF_END1
(Int32.nlz_u4$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 27274
A=M+1 // 27275
M=M-1 // 27276

////GotoInstruction{label='Int32.nlz_u4_WHILE_EXP1}
// goto Int32.nlz_u4_WHILE_EXP1
@Int32.nlz_u4_WHILE_EXP1 // 27277
0;JMP // 27278

////LabelInstruction{label='Int32.nlz_u4_WHILE_END1}
// label Int32.nlz_u4_WHILE_END1
(Int32.nlz_u4_WHILE_END1)

////PushInstruction("local 0")
@LCL // 27279
A=M // 27280
D=M // 27281
@SP // 27282
AM=M+1 // 27283
A=A-1 // 27284
M=D // 27285
@RETURN // 27286
0;JMP // 27287

////FunctionInstruction{functionName='Vec3.getY', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1}}
// function Vec3.getY with 0
(Vec3.getY)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27288
A=M // 27289
D=M // 27290
@3 // 27291
M=D // 27292

////PushInstruction("this 1")
@THIS // 27293
A=M+1 // 27294
D=M // 27295
@SP // 27296
AM=M+1 // 27297
A=A-1 // 27298
M=D // 27299
@RETURN // 27300
0;JMP // 27301

////FunctionInstruction{functionName='Scene.dispose', numLocals=3, funcMapping={Scene.getNumLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.dispose with 3
(Scene.dispose)
@3 // 27302
D=A // 27303
@SP // 27304
AM=D+M // 27305
A=A-1 // 27306
M=0 // 27307
A=A-1 // 27308
M=0 // 27309
A=A-1 // 27310
M=0 // 27311

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27312
A=M // 27313
D=M // 27314
@3 // 27315
M=D // 27316

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27317
A=M // 27318
M=0 // 27319

////LabelInstruction{label='Scene.dispose_WHILE_EXP1}
// label Scene.dispose_WHILE_EXP1
(Scene.dispose_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("this 6"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.dispose_WHILE_END1}}
@Scene.dispose.LT.109 // 27320
D=A // 27321
@SP // 27322
AM=M+1 // 27323
A=A-1 // 27324
M=D // 27325
@LCL // 27326
A=M // 27327
D=M // 27328
@SP // 27329
AM=M+1 // 27330
A=A-1 // 27331
M=D // 27332
@THIS // 27333
D=M // 27334
@6 // 27335
A=D+A // 27336
D=M // 27337
@SP // 27338
AM=M-1 // 27339
D=M-D // 27340
@DO_LT // 27341
0;JMP // 27342
(Scene.dispose.LT.109)
D=!D // 27343
@Scene.dispose_WHILE_END1 // 27344
D;JNE // 27345

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 5"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 27346
D=M // 27347
@5 // 27348
A=D+A // 27349
D=M // 27350
@SP // 27351
AM=M+1 // 27352
A=A-1 // 27353
M=D // 27354
@LCL // 27355
A=M // 27356
D=M // 27357
@SP // 27358
AM=M-1 // 27359
A=D+M // 27360
D=M // 27361
@LCL // 27362
A=M+1 // 27363
M=D // 27364

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Element.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27365
A=M+1 // 27366
D=M // 27367
@SP // 27368
AM=M+1 // 27369
A=A-1 // 27370
M=D // 27371
// call Element.dispose
@6 // 27372
D=A // 27373
@14 // 27374
M=D // 27375
@Element.dispose // 27376
D=A // 27377
@13 // 27378
M=D // 27379
@Scene.dispose.ret.0 // 27380
D=A // 27381
@CALL // 27382
0;JMP // 27383
(Scene.dispose.ret.0)
@SP // 27384
M=M-1 // 27385

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27386
A=M // 27387
M=M+1 // 27388

////GotoInstruction{label='Scene.dispose_WHILE_EXP1}
// goto Scene.dispose_WHILE_EXP1
@Scene.dispose_WHILE_EXP1 // 27389
0;JMP // 27390

////LabelInstruction{label='Scene.dispose_WHILE_END1}
// label Scene.dispose_WHILE_END1
(Scene.dispose_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 5")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27391
D=M // 27392
@5 // 27393
A=D+A // 27394
D=M // 27395
@SP // 27396
AM=M+1 // 27397
A=A-1 // 27398
M=D // 27399
// call Array.dispose
@6 // 27400
D=A // 27401
@14 // 27402
M=D // 27403
@Array.dispose // 27404
D=A // 27405
@13 // 27406
M=D // 27407
@Scene.dispose.ret.1 // 27408
D=A // 27409
@CALL // 27410
0;JMP // 27411
(Scene.dispose.ret.1)
@SP // 27412
M=M-1 // 27413

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27414
A=M // 27415
M=0 // 27416

////LabelInstruction{label='Scene.dispose_WHILE_EXP2}
// label Scene.dispose_WHILE_EXP2
(Scene.dispose_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("this 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.dispose_WHILE_END2}}
@Scene.dispose.LT.110 // 27417
D=A // 27418
@SP // 27419
AM=M+1 // 27420
A=A-1 // 27421
M=D // 27422
@LCL // 27423
A=M // 27424
D=M // 27425
@SP // 27426
AM=M+1 // 27427
A=A-1 // 27428
M=D // 27429
@THIS // 27430
D=M // 27431
@8 // 27432
A=D+A // 27433
D=M // 27434
@SP // 27435
AM=M-1 // 27436
D=M-D // 27437
@DO_LT // 27438
0;JMP // 27439
(Scene.dispose.LT.110)
D=!D // 27440
@Scene.dispose_WHILE_END2 // 27441
D;JNE // 27442

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 7"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 27443
D=M // 27444
@7 // 27445
A=D+A // 27446
D=M // 27447
@SP // 27448
AM=M+1 // 27449
A=A-1 // 27450
M=D // 27451
@LCL // 27452
A=M // 27453
D=M // 27454
@SP // 27455
AM=M-1 // 27456
A=D+M // 27457
D=M // 27458
@LCL // 27459
A=M+1 // 27460
A=A+1 // 27461
M=D // 27462

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{DirectionalLight.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27463
A=M+1 // 27464
A=A+1 // 27465
D=M // 27466
@SP // 27467
AM=M+1 // 27468
A=A-1 // 27469
M=D // 27470
// call DirectionalLight.dispose
@6 // 27471
D=A // 27472
@14 // 27473
M=D // 27474
@DirectionalLight.dispose // 27475
D=A // 27476
@13 // 27477
M=D // 27478
@Scene.dispose.ret.2 // 27479
D=A // 27480
@CALL // 27481
0;JMP // 27482
(Scene.dispose.ret.2)
@SP // 27483
M=M-1 // 27484

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27485
A=M // 27486
M=M+1 // 27487

////GotoInstruction{label='Scene.dispose_WHILE_EXP2}
// goto Scene.dispose_WHILE_EXP2
@Scene.dispose_WHILE_EXP2 // 27488
0;JMP // 27489

////LabelInstruction{label='Scene.dispose_WHILE_END2}
// label Scene.dispose_WHILE_END2
(Scene.dispose_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 7")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27490
D=M // 27491
@7 // 27492
A=D+A // 27493
D=M // 27494
@SP // 27495
AM=M+1 // 27496
A=A-1 // 27497
M=D // 27498
// call Array.dispose
@6 // 27499
D=A // 27500
@14 // 27501
M=D // 27502
@Array.dispose // 27503
D=A // 27504
@13 // 27505
M=D // 27506
@Scene.dispose.ret.3 // 27507
D=A // 27508
@CALL // 27509
0;JMP // 27510
(Scene.dispose.ret.3)
@SP // 27511
M=M-1 // 27512

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27513
A=M+1 // 27514
A=A+1 // 27515
D=M // 27516
@SP // 27517
AM=M+1 // 27518
A=A-1 // 27519
M=D // 27520
// call Number.dispose
@6 // 27521
D=A // 27522
@14 // 27523
M=D // 27524
@Number.dispose // 27525
D=A // 27526
@13 // 27527
M=D // 27528
@Scene.dispose.ret.4 // 27529
D=A // 27530
@CALL // 27531
0;JMP // 27532
(Scene.dispose.ret.4)
@SP // 27533
M=M-1 // 27534

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27535
A=M+1 // 27536
A=A+1 // 27537
A=A+1 // 27538
D=M // 27539
@SP // 27540
AM=M+1 // 27541
A=A-1 // 27542
M=D // 27543
// call Number.dispose
@6 // 27544
D=A // 27545
@14 // 27546
M=D // 27547
@Number.dispose // 27548
D=A // 27549
@13 // 27550
M=D // 27551
@Scene.dispose.ret.5 // 27552
D=A // 27553
@CALL // 27554
0;JMP // 27555
(Scene.dispose.ret.5)
@SP // 27556
M=M-1 // 27557

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27558
D=M // 27559
@4 // 27560
A=D+A // 27561
D=M // 27562
@SP // 27563
AM=M+1 // 27564
A=A-1 // 27565
M=D // 27566
// call Number.dispose
@6 // 27567
D=A // 27568
@14 // 27569
M=D // 27570
@Number.dispose // 27571
D=A // 27572
@13 // 27573
M=D // 27574
@Scene.dispose.ret.6 // 27575
D=A // 27576
@CALL // 27577
0;JMP // 27578
(Scene.dispose.ret.6)
@SP // 27579
M=M-1 // 27580

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 27581
D=M // 27582
@SP // 27583
AM=M+1 // 27584
A=A-1 // 27585
M=D // 27586
// call Memory.deAlloc
@6 // 27587
D=A // 27588
@14 // 27589
M=D // 27590
@Memory.deAlloc // 27591
D=A // 27592
@13 // 27593
M=D // 27594
@Scene.dispose.ret.7 // 27595
D=A // 27596
@CALL // 27597
0;JMP // 27598
(Scene.dispose.ret.7)
@SP // 27599
M=M-1 // 27600

////PushInstruction("constant 0")
@SP // 27601
AM=M+1 // 27602
A=A-1 // 27603
M=0 // 27604
@RETURN // 27605
0;JMP // 27606

////FunctionInstruction{functionName='Vec3.getZ', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0}}
// function Vec3.getZ with 0
(Vec3.getZ)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27607
A=M // 27608
D=M // 27609
@3 // 27610
M=D // 27611

////PushInstruction("this 2")
@THIS // 27612
A=M+1 // 27613
A=A+1 // 27614
D=M // 27615
@SP // 27616
AM=M+1 // 27617
A=A-1 // 27618
M=D // 27619
@RETURN // 27620
0;JMP // 27621

////FunctionInstruction{functionName='Output.printInt', numLocals=1, funcMapping={Output.init=97, Output.println=0, Output.printString=3, Output.getMap=0, Output.create=1}}
// function Output.printInt with 1
(Output.printInt)
@SP // 27622
AM=M+1 // 27623
A=A-1 // 27624
M=0 // 27625

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{String.new}}
//  pop:  PopInstruction{address=local 0}
//}

@10 // 27626
D=A // 27627
@SP // 27628
AM=M+1 // 27629
A=A-1 // 27630
M=D // 27631
// call String.new
@6 // 27632
D=A // 27633
@14 // 27634
M=D // 27635
@String.new // 27636
D=A // 27637
@13 // 27638
M=D // 27639
@Output.printInt.ret.0 // 27640
D=A // 27641
@CALL // 27642
0;JMP // 27643
(Output.printInt.ret.0)
@SP // 27644
AM=M-1 // 27645
D=M // 27646
@LCL // 27647
A=M // 27648
M=D // 27649

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 0")], call=CallInstruction{String.setInt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27650
A=M // 27651
D=M // 27652
@SP // 27653
AM=M+1 // 27654
A=A-1 // 27655
M=D // 27656
@ARG // 27657
A=M // 27658
D=M // 27659
@SP // 27660
AM=M+1 // 27661
A=A-1 // 27662
M=D // 27663
// call String.setInt
@7 // 27664
D=A // 27665
@14 // 27666
M=D // 27667
@String.setInt // 27668
D=A // 27669
@13 // 27670
M=D // 27671
@Output.printInt.ret.1 // 27672
D=A // 27673
@CALL // 27674
0;JMP // 27675
(Output.printInt.ret.1)
@SP // 27676
M=M-1 // 27677

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Output.printString}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27678
A=M // 27679
D=M // 27680
@SP // 27681
AM=M+1 // 27682
A=A-1 // 27683
M=D // 27684
// call Output.printString
@6 // 27685
D=A // 27686
@14 // 27687
M=D // 27688
@Output.printString // 27689
D=A // 27690
@13 // 27691
M=D // 27692
@Output.printInt.ret.2 // 27693
D=A // 27694
@CALL // 27695
0;JMP // 27696
(Output.printInt.ret.2)
@SP // 27697
M=M-1 // 27698

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{String.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27699
A=M // 27700
D=M // 27701
@SP // 27702
AM=M+1 // 27703
A=A-1 // 27704
M=D // 27705
// call String.dispose
@6 // 27706
D=A // 27707
@14 // 27708
M=D // 27709
@String.dispose // 27710
D=A // 27711
@13 // 27712
M=D // 27713
@Output.printInt.ret.3 // 27714
D=A // 27715
@CALL // 27716
0;JMP // 27717
(Output.printInt.ret.3)
@SP // 27718
M=M-1 // 27719

////PushInstruction("constant 0")
@SP // 27720
AM=M+1 // 27721
A=A-1 // 27722
M=0 // 27723
@RETURN // 27724
0;JMP // 27725

////FunctionInstruction{functionName='Memory.alloc', numLocals=5, funcMapping={Memory.copy=0, Memory.add_node=0, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.alloc with 5
(Memory.alloc)
@5 // 27726
D=A // 27727
@SP // 27728
AM=D+M // 27729
A=A-1 // 27730
M=0 // 27731
A=A-1 // 27732
M=0 // 27733
A=A-1 // 27734
M=0 // 27735
A=A-1 // 27736
M=0 // 27737
A=A-1 // 27738
M=0 // 27739

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Memory.getBinIndex}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 27740
A=M // 27741
D=M // 27742
@SP // 27743
AM=M+1 // 27744
A=A-1 // 27745
M=D // 27746
// call Memory.getBinIndex
@6 // 27747
D=A // 27748
@14 // 27749
M=D // 27750
@Memory.getBinIndex // 27751
D=A // 27752
@13 // 27753
M=D // 27754
@Memory.alloc.ret.0 // 27755
D=A // 27756
@CALL // 27757
0;JMP // 27758
(Memory.alloc.ret.0)
@SP // 27759
AM=M-1 // 27760
D=M // 27761
@LCL // 27762
A=M // 27763
M=D // 27764

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 27765
A=M // 27766
D=M // 27767
@2048 // 27768
D=D+A // 27769
@LCL // 27770
A=M+1 // 27771
M=D // 27772

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 0")], call=CallInstruction{Memory.get_best_fit}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 27773
A=M+1 // 27774
D=M // 27775
@SP // 27776
AM=M+1 // 27777
A=A-1 // 27778
M=D // 27779
@ARG // 27780
A=M // 27781
D=M // 27782
@SP // 27783
AM=M+1 // 27784
A=A-1 // 27785
M=D // 27786
// call Memory.get_best_fit
@7 // 27787
D=A // 27788
@14 // 27789
M=D // 27790
@Memory.get_best_fit // 27791
D=A // 27792
@13 // 27793
M=D // 27794
@Memory.alloc.ret.1 // 27795
D=A // 27796
@CALL // 27797
0;JMP // 27798
(Memory.alloc.ret.1)
@SP // 27799
AM=M-1 // 27800
D=M // 27801
@LCL // 27802
A=M+1 // 27803
A=A+1 // 27804
M=D // 27805

////LabelInstruction{label='Memory.alloc_WHILE_EXP1}
// label Memory.alloc_WHILE_EXP1
(Memory.alloc_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.alloc_WHILE_END1}}
@Memory.alloc.EQ.111 // 27806
D=A // 27807
@SP // 27808
AM=M+1 // 27809
A=A-1 // 27810
M=D // 27811
@LCL // 27812
A=M+1 // 27813
A=A+1 // 27814
D=M // 27815
@DO_EQ // 27816
0;JMP // 27817
(Memory.alloc.EQ.111)
D=!D // 27818
@Memory.alloc_WHILE_END1 // 27819
D;JNE // 27820

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "ADD"
//            ),
//        right:
//            PushInstruction("constant 7"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.alloc$IF_TRUE1}}
@Memory.alloc.LT.112 // 27821
D=A // 27822
@SP // 27823
AM=M+1 // 27824
A=A-1 // 27825
M=D // 27826
@LCL // 27827
A=M // 27828
D=M // 27829
D=D+1 // 27830
@7 // 27831
D=D-A // 27832
@DO_LT // 27833
0;JMP // 27834
(Memory.alloc.LT.112)
D=!D // 27835
@Memory.alloc$IF_TRUE1 // 27836
D;JNE // 27837

////GotoInstruction{label='Memory.alloc$IF_FALSE1}
// goto Memory.alloc$IF_FALSE1
@Memory.alloc$IF_FALSE1 // 27838
0;JMP // 27839

////LabelInstruction{label='Memory.alloc$IF_TRUE1}
// label Memory.alloc$IF_TRUE1
(Memory.alloc$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Sys.error}}
//  pop:  PopInstruction{address=temp 0}
//}

@10 // 27840
D=A // 27841
@SP // 27842
AM=M+1 // 27843
A=A-1 // 27844
M=D // 27845
// call Sys.error
@6 // 27846
D=A // 27847
@14 // 27848
M=D // 27849
@Sys.error // 27850
D=A // 27851
@13 // 27852
M=D // 27853
@Memory.alloc.ret.2 // 27854
D=A // 27855
@CALL // 27856
0;JMP // 27857
(Memory.alloc.ret.2)
@SP // 27858
M=M-1 // 27859

////PushInstruction("constant 0")
@SP // 27860
AM=M+1 // 27861
A=A-1 // 27862
M=0 // 27863
@RETURN // 27864
0;JMP // 27865

////LabelInstruction{label='Memory.alloc$IF_FALSE1}
// label Memory.alloc$IF_FALSE1
(Memory.alloc$IF_FALSE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27866
A=M // 27867
M=M+1 // 27868

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 27869
A=M // 27870
D=M // 27871
@2048 // 27872
D=D+A // 27873
@LCL // 27874
A=M+1 // 27875
M=D // 27876

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 0")], call=CallInstruction{Memory.get_best_fit}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 27877
A=M+1 // 27878
D=M // 27879
@SP // 27880
AM=M+1 // 27881
A=A-1 // 27882
M=D // 27883
@ARG // 27884
A=M // 27885
D=M // 27886
@SP // 27887
AM=M+1 // 27888
A=A-1 // 27889
M=D // 27890
// call Memory.get_best_fit
@7 // 27891
D=A // 27892
@14 // 27893
M=D // 27894
@Memory.get_best_fit // 27895
D=A // 27896
@13 // 27897
M=D // 27898
@Memory.alloc.ret.3 // 27899
D=A // 27900
@CALL // 27901
0;JMP // 27902
(Memory.alloc.ret.3)
@SP // 27903
AM=M-1 // 27904
D=M // 27905
@LCL // 27906
A=M+1 // 27907
A=A+1 // 27908
M=D // 27909

////GotoInstruction{label='Memory.alloc_WHILE_EXP1}
// goto Memory.alloc_WHILE_EXP1
@Memory.alloc_WHILE_EXP1 // 27910
0;JMP // 27911

////LabelInstruction{label='Memory.alloc_WHILE_END1}
// label Memory.alloc_WHILE_END1
(Memory.alloc_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27912
A=M+1 // 27913
A=A+1 // 27914
D=M // 27915
@0 // 27916
A=D+A // 27917
D=M // 27918
@SP // 27919
AM=M+1 // 27920
A=A-1 // 27921
M=D // 27922
// call Memory.getBinIndex
@6 // 27923
D=A // 27924
@14 // 27925
M=D // 27926
@Memory.getBinIndex // 27927
D=A // 27928
@13 // 27929
M=D // 27930
@Memory.alloc.ret.4 // 27931
D=A // 27932
@CALL // 27933
0;JMP // 27934
(Memory.alloc.ret.4)
@SP // 27935
AM=M-1 // 27936
D=M // 27937
@2048 // 27938
D=D+A // 27939
@SP // 27940
AM=M+1 // 27941
A=A-1 // 27942
M=D // 27943
@LCL // 27944
A=M+1 // 27945
A=A+1 // 27946
D=M // 27947
@SP // 27948
AM=M+1 // 27949
A=A-1 // 27950
M=D // 27951
// call Memory.remove_node
@7 // 27952
D=A // 27953
@14 // 27954
M=D // 27955
@Memory.remove_node // 27956
D=A // 27957
@13 // 27958
M=D // 27959
@Memory.alloc.ret.5 // 27960
D=A // 27961
@CALL // 27962
0;JMP // 27963
(Memory.alloc.ret.5)
@SP // 27964
M=M-1 // 27965

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 27966
A=M+1 // 27967
A=A+1 // 27968
D=M // 27969
@0 // 27970
A=D+A // 27971
D=M // 27972
@SP // 27973
AM=M+1 // 27974
A=A-1 // 27975
M=D // 27976
@ARG // 27977
A=M // 27978
D=M // 27979
@SP // 27980
AM=M-1 // 27981
D=M-D // 27982
@LCL // 27983
A=M+1 // 27984
A=A+1 // 27985
A=A+1 // 27986
M=D // 27987

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Memory.alloc$IF_TRUE2}}
@Memory.alloc.GT.113 // 27988
D=A // 27989
@SP // 27990
AM=M+1 // 27991
A=A-1 // 27992
M=D // 27993
@LCL // 27994
A=M+1 // 27995
A=A+1 // 27996
A=A+1 // 27997
D=M // 27998
@5 // 27999
D=D-A // 28000
@DO_GT // 28001
0;JMP // 28002
(Memory.alloc.GT.113)
@Memory.alloc$IF_TRUE2 // 28003
D;JNE // 28004

////GotoInstruction{label='Memory.alloc$IF_FALSE2}
// goto Memory.alloc$IF_FALSE2
@Memory.alloc$IF_FALSE2 // 28005
0;JMP // 28006

////LabelInstruction{label='Memory.alloc$IF_TRUE2}
// label Memory.alloc$IF_TRUE2
(Memory.alloc$IF_TRUE2)

////PushWriter{source=PushInstruction("argument 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 28007
A=M+1 // 28008
A=A+1 // 28009
D=M // 28010
@SP // 28011
AM=M+1 // 28012
A=A-1 // 28013
M=D // 28014
@ARG // 28015
A=M // 28016
D=M // 28017
@SP // 28018
AM=M-1 // 28019
A=M // 28020
M=D // 28021

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 28022
A=M+1 // 28023
A=A+1 // 28024
D=M // 28025
@SP // 28026
AM=M+1 // 28027
A=A-1 // 28028
M=D+1 // 28029
D=0 // 28030
@SP // 28031
AM=M-1 // 28032
A=M // 28033
M=D // 28034

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28035
A=M+1 // 28036
A=A+1 // 28037
D=M // 28038
@SP // 28039
AM=M+1 // 28040
A=A-1 // 28041
M=D // 28042
// call Memory.create_foot
@6 // 28043
D=A // 28044
@14 // 28045
M=D // 28046
@Memory.create_foot // 28047
D=A // 28048
@13 // 28049
M=D // 28050
@Memory.alloc.ret.6 // 28051
D=A // 28052
@CALL // 28053
0;JMP // 28054
(Memory.alloc.ret.6)
@SP // 28055
M=M-1 // 28056

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 28057
A=M+1 // 28058
A=A+1 // 28059
D=M // 28060
@SP // 28061
AM=M+1 // 28062
A=A-1 // 28063
M=D // 28064
@ARG // 28065
A=M // 28066
D=M // 28067
@SP // 28068
AM=M-1 // 28069
D=D+M // 28070
@5 // 28071
D=D+A // 28072
@SP // 28073
AM=M+1 // 28074
A=A-1 // 28075
M=D // 28076
@LCL // 28077
D=M // 28078
@4 // 28079
A=D+A // 28080
D=A // 28081
@R13 // 28082
M=D // 28083
@SP // 28084
AM=M-1 // 28085
D=M // 28086
@R13 // 28087
A=M // 28088
M=D // 28089

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 28090
D=M // 28091
@4 // 28092
A=D+A // 28093
D=M // 28094
@SP // 28095
AM=M+1 // 28096
A=A-1 // 28097
M=D // 28098
@LCL // 28099
A=M+1 // 28100
A=A+1 // 28101
A=A+1 // 28102
D=M // 28103
@5 // 28104
D=D-A // 28105
@SP // 28106
AM=M-1 // 28107
A=M // 28108
M=D // 28109

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 28110
D=M // 28111
@4 // 28112
A=D+A // 28113
D=M // 28114
@SP // 28115
AM=M+1 // 28116
A=A-1 // 28117
M=D+1 // 28118
D=1 // 28119
@SP // 28120
AM=M-1 // 28121
A=M // 28122
M=D // 28123

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28124
D=M // 28125
@4 // 28126
A=D+A // 28127
D=M // 28128
@SP // 28129
AM=M+1 // 28130
A=A-1 // 28131
M=D // 28132
// call Memory.create_foot
@6 // 28133
D=A // 28134
@14 // 28135
M=D // 28136
@Memory.create_foot // 28137
D=A // 28138
@13 // 28139
M=D // 28140
@Memory.alloc.ret.7 // 28141
D=A // 28142
@CALL // 28143
0;JMP // 28144
(Memory.alloc.ret.7)
@SP // 28145
M=M-1 // 28146

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 4")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28147
A=M+1 // 28148
A=A+1 // 28149
A=A+1 // 28150
D=M // 28151
@SP // 28152
AM=M+1 // 28153
A=A-1 // 28154
M=D // 28155
// call Memory.getBinIndex
@6 // 28156
D=A // 28157
@14 // 28158
M=D // 28159
@Memory.getBinIndex // 28160
D=A // 28161
@13 // 28162
M=D // 28163
@Memory.alloc.ret.8 // 28164
D=A // 28165
@CALL // 28166
0;JMP // 28167
(Memory.alloc.ret.8)
@SP // 28168
AM=M-1 // 28169
D=M // 28170
@2048 // 28171
D=D+A // 28172
@SP // 28173
AM=M+1 // 28174
A=A-1 // 28175
M=D // 28176
@LCL // 28177
D=M // 28178
@4 // 28179
A=D+A // 28180
D=M // 28181
@SP // 28182
AM=M+1 // 28183
A=A-1 // 28184
M=D // 28185
// call Memory.add_node
@7 // 28186
D=A // 28187
@14 // 28188
M=D // 28189
@Memory.add_node // 28190
D=A // 28191
@13 // 28192
M=D // 28193
@Memory.alloc.ret.9 // 28194
D=A // 28195
@CALL // 28196
0;JMP // 28197
(Memory.alloc.ret.9)
@SP // 28198
M=M-1 // 28199

////GotoInstruction{label='Memory.alloc$IF_END2}
// goto Memory.alloc$IF_END2
@Memory.alloc$IF_END2 // 28200
0;JMP // 28201

////LabelInstruction{label='Memory.alloc$IF_FALSE2}
// label Memory.alloc$IF_FALSE2
(Memory.alloc$IF_FALSE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 28202
A=M+1 // 28203
A=A+1 // 28204
D=M // 28205
@SP // 28206
AM=M+1 // 28207
A=A-1 // 28208
M=D+1 // 28209
D=0 // 28210
@SP // 28211
AM=M-1 // 28212
A=M // 28213
M=D // 28214

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28215
A=M+1 // 28216
A=A+1 // 28217
D=M // 28218
@SP // 28219
AM=M+1 // 28220
A=A-1 // 28221
M=D // 28222
// call Memory.create_foot
@6 // 28223
D=A // 28224
@14 // 28225
M=D // 28226
@Memory.create_foot // 28227
D=A // 28228
@13 // 28229
M=D // 28230
@Memory.alloc.ret.10 // 28231
D=A // 28232
@CALL // 28233
0;JMP // 28234
(Memory.alloc.ret.10)
@SP // 28235
M=M-1 // 28236

////LabelInstruction{label='Memory.alloc$IF_END2}
// label Memory.alloc$IF_END2
(Memory.alloc$IF_END2)

////BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)
@LCL // 28237
A=M+1 // 28238
A=A+1 // 28239
D=M // 28240
@4 // 28241
D=D+A // 28242
@SP // 28243
AM=M+1 // 28244
A=A-1 // 28245
M=D // 28246
@RETURN // 28247
0;JMP // 28248

////FunctionInstruction{functionName='Number.new_from_int32', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.new_from_int32 with 0
(Number.new_from_int32)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 28249
AM=M+1 // 28250
A=A-1 // 28251
M=1 // 28252
// call Memory.alloc
@6 // 28253
D=A // 28254
@14 // 28255
M=D // 28256
@Memory.alloc // 28257
D=A // 28258
@13 // 28259
M=D // 28260
@Number.new_from_int32.ret.0 // 28261
D=A // 28262
@CALL // 28263
0;JMP // 28264
(Number.new_from_int32.ret.0)
@SP // 28265
AM=M-1 // 28266
D=M // 28267
@3 // 28268
M=D // 28269

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 6}
//}

@Number.6 // 28270
M=M+1 // 28271

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 28272
A=M // 28273
D=M // 28274
@THIS // 28275
A=M // 28276
M=D // 28277

////PushInstruction("pointer 0")
@3 // 28278
D=M // 28279
@SP // 28280
AM=M+1 // 28281
A=A-1 // 28282
M=D // 28283
@RETURN // 28284
0;JMP // 28285

////FunctionInstruction{functionName='DirectionalLight.dispose', numLocals=0, funcMapping={DirectionalLight.getColor=0}}
// function DirectionalLight.dispose with 0
(DirectionalLight.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28286
A=M // 28287
D=M // 28288
@3 // 28289
M=D // 28290

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28291
A=M // 28292
D=M // 28293
@SP // 28294
AM=M+1 // 28295
A=A-1 // 28296
M=D // 28297
// call Vec3.dispose
@6 // 28298
D=A // 28299
@14 // 28300
M=D // 28301
@Vec3.dispose // 28302
D=A // 28303
@13 // 28304
M=D // 28305
@DirectionalLight.dispose.ret.0 // 28306
D=A // 28307
@CALL // 28308
0;JMP // 28309
(DirectionalLight.dispose.ret.0)
@SP // 28310
M=M-1 // 28311

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28312
A=M+1 // 28313
D=M // 28314
@SP // 28315
AM=M+1 // 28316
A=A-1 // 28317
M=D // 28318
// call Number.dispose
@6 // 28319
D=A // 28320
@14 // 28321
M=D // 28322
@Number.dispose // 28323
D=A // 28324
@13 // 28325
M=D // 28326
@DirectionalLight.dispose.ret.1 // 28327
D=A // 28328
@CALL // 28329
0;JMP // 28330
(DirectionalLight.dispose.ret.1)
@SP // 28331
M=M-1 // 28332

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 28333
D=M // 28334
@SP // 28335
AM=M+1 // 28336
A=A-1 // 28337
M=D // 28338
// call Memory.deAlloc
@6 // 28339
D=A // 28340
@14 // 28341
M=D // 28342
@Memory.deAlloc // 28343
D=A // 28344
@13 // 28345
M=D // 28346
@DirectionalLight.dispose.ret.2 // 28347
D=A // 28348
@CALL // 28349
0;JMP // 28350
(DirectionalLight.dispose.ret.2)
@SP // 28351
M=M-1 // 28352

////PushInstruction("constant 0")
@SP // 28353
AM=M+1 // 28354
A=A-1 // 28355
M=0 // 28356
@RETURN // 28357
0;JMP // 28358

////FunctionInstruction{functionName='Number.do_sqrt', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.do_sqrt with 0
(Number.do_sqrt)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28359
A=M // 28360
D=M // 28361
@3 // 28362
M=D // 28363

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 2")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28364
A=M // 28365
D=M // 28366
@SP // 28367
AM=M+1 // 28368
A=A-1 // 28369
M=D // 28370
@Number.2 // 28371
D=M // 28372
@SP // 28373
AM=M+1 // 28374
A=A-1 // 28375
M=D // 28376
// call Int32.do_mul
@7 // 28377
D=A // 28378
@14 // 28379
M=D // 28380
@Int32.do_mul // 28381
D=A // 28382
@13 // 28383
M=D // 28384
@Number.do_sqrt.ret.0 // 28385
D=A // 28386
@CALL // 28387
0;JMP // 28388
(Number.do_sqrt.ret.0)
@SP // 28389
M=M-1 // 28390

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28391
A=M // 28392
D=M // 28393
@SP // 28394
AM=M+1 // 28395
A=A-1 // 28396
M=D // 28397
// call Int32.do_sqrt
@6 // 28398
D=A // 28399
@14 // 28400
M=D // 28401
@Int32.do_sqrt // 28402
D=A // 28403
@13 // 28404
M=D // 28405
@Number.do_sqrt.ret.1 // 28406
D=A // 28407
@CALL // 28408
0;JMP // 28409
(Number.do_sqrt.ret.1)
@SP // 28410
M=M-1 // 28411

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 3")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28412
A=M // 28413
D=M // 28414
@SP // 28415
AM=M+1 // 28416
A=A-1 // 28417
M=D // 28418
@Number.3 // 28419
D=M // 28420
@SP // 28421
AM=M+1 // 28422
A=A-1 // 28423
M=D // 28424
// call Int32.do_mul
@7 // 28425
D=A // 28426
@14 // 28427
M=D // 28428
@Int32.do_mul // 28429
D=A // 28430
@13 // 28431
M=D // 28432
@Number.do_sqrt.ret.2 // 28433
D=A // 28434
@CALL // 28435
0;JMP // 28436
(Number.do_sqrt.ret.2)
@SP // 28437
M=M-1 // 28438

////PushInstruction("constant 0")
@SP // 28439
AM=M+1 // 28440
A=A-1 // 28441
M=0 // 28442
@RETURN // 28443
0;JMP // 28444

////FunctionInstruction{functionName='Int32.getParts', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.getParts with 0
(Int32.getParts)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28445
A=M // 28446
D=M // 28447
@3 // 28448
M=D // 28449

////PushInstruction("this 0")
@THIS // 28450
A=M // 28451
D=M // 28452
@SP // 28453
AM=M+1 // 28454
A=A-1 // 28455
M=D // 28456
@RETURN // 28457
0;JMP // 28458

////FunctionInstruction{functionName='Main.getOneFiftieth', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getOneFiftieth with 2
(Main.getOneFiftieth)
@SP // 28459
M=M+1 // 28460
AM=M+1 // 28461
A=A-1 // 28462
M=0 // 28463
A=A-1 // 28464
M=0 // 28465

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 28466
AM=M+1 // 28467
A=A-1 // 28468
M=1 // 28469
// call Number.new
@6 // 28470
D=A // 28471
@14 // 28472
M=D // 28473
@Number.new // 28474
D=A // 28475
@13 // 28476
M=D // 28477
@Main.getOneFiftieth.ret.0 // 28478
D=A // 28479
@CALL // 28480
0;JMP // 28481
(Main.getOneFiftieth.ret.0)
@SP // 28482
AM=M-1 // 28483
D=M // 28484
@LCL // 28485
A=M // 28486
M=D // 28487

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 50")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@50 // 28488
D=A // 28489
@SP // 28490
AM=M+1 // 28491
A=A-1 // 28492
M=D // 28493
// call Number.new
@6 // 28494
D=A // 28495
@14 // 28496
M=D // 28497
@Number.new // 28498
D=A // 28499
@13 // 28500
M=D // 28501
@Main.getOneFiftieth.ret.1 // 28502
D=A // 28503
@CALL // 28504
0;JMP // 28505
(Main.getOneFiftieth.ret.1)
@SP // 28506
AM=M-1 // 28507
D=M // 28508
@LCL // 28509
A=M+1 // 28510
M=D // 28511

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28512
A=M // 28513
D=M // 28514
@SP // 28515
AM=M+1 // 28516
A=A-1 // 28517
M=D // 28518
@LCL // 28519
A=M+1 // 28520
D=M // 28521
@SP // 28522
AM=M+1 // 28523
A=A-1 // 28524
M=D // 28525
// call Number.do_div
@7 // 28526
D=A // 28527
@14 // 28528
M=D // 28529
@Number.do_div // 28530
D=A // 28531
@13 // 28532
M=D // 28533
@Main.getOneFiftieth.ret.2 // 28534
D=A // 28535
@CALL // 28536
0;JMP // 28537
(Main.getOneFiftieth.ret.2)
@SP // 28538
M=M-1 // 28539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28540
A=M+1 // 28541
D=M // 28542
@SP // 28543
AM=M+1 // 28544
A=A-1 // 28545
M=D // 28546
// call Number.dispose
@6 // 28547
D=A // 28548
@14 // 28549
M=D // 28550
@Number.dispose // 28551
D=A // 28552
@13 // 28553
M=D // 28554
@Main.getOneFiftieth.ret.3 // 28555
D=A // 28556
@CALL // 28557
0;JMP // 28558
(Main.getOneFiftieth.ret.3)
@SP // 28559
M=M-1 // 28560

////PushInstruction("local 0")
@LCL // 28561
A=M // 28562
D=M // 28563
@SP // 28564
AM=M+1 // 28565
A=A-1 // 28566
M=D // 28567
@RETURN // 28568
0;JMP // 28569

////FunctionInstruction{functionName='Sphere.color', numLocals=0, funcMapping={Sphere.new=1, Sphere.dispose=4}}
// function Sphere.color with 0
(Sphere.color)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28570
A=M // 28571
D=M // 28572
@3 // 28573
M=D // 28574

////CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
@THIS // 28575
A=M+1 // 28576
A=A+1 // 28577
D=M // 28578
@SP // 28579
AM=M+1 // 28580
A=A-1 // 28581
M=D // 28582
// call Number.clone
@6 // 28583
D=A // 28584
@14 // 28585
M=D // 28586
@Number.clone // 28587
D=A // 28588
@13 // 28589
M=D // 28590
@Sphere.color.ret.0 // 28591
D=A // 28592
@CALL // 28593
0;JMP // 28594
(Sphere.color.ret.0)
@RETURN // 28595
0;JMP // 28596

////FunctionInstruction{functionName='Number.do_sub', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.do_sub with 0
(Number.do_sub)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28597
A=M // 28598
D=M // 28599
@3 // 28600
M=D // 28601

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28602
A=M // 28603
D=M // 28604
@SP // 28605
AM=M+1 // 28606
A=A-1 // 28607
M=D // 28608
@ARG // 28609
A=M+1 // 28610
D=M // 28611
@SP // 28612
AM=M+1 // 28613
A=A-1 // 28614
M=D // 28615
// call Number.getV
@6 // 28616
D=A // 28617
@14 // 28618
M=D // 28619
@Number.getV // 28620
D=A // 28621
@13 // 28622
M=D // 28623
@Number.do_sub.ret.0 // 28624
D=A // 28625
@CALL // 28626
0;JMP // 28627
(Number.do_sub.ret.0)
// call Int32.do_sub
@7 // 28628
D=A // 28629
@14 // 28630
M=D // 28631
@Int32.do_sub // 28632
D=A // 28633
@13 // 28634
M=D // 28635
@Number.do_sub.ret.1 // 28636
D=A // 28637
@CALL // 28638
0;JMP // 28639
(Number.do_sub.ret.1)
@SP // 28640
M=M-1 // 28641

////PushInstruction("constant 0")
@SP // 28642
AM=M+1 // 28643
A=A-1 // 28644
M=0 // 28645
@RETURN // 28646
0;JMP // 28647

////FunctionInstruction{functionName='String.new', numLocals=0, funcMapping={String.dispose=1, String.appendChar=3, String.length=0}}
// function String.new with 0
(String.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 28648
D=A // 28649
@SP // 28650
AM=M+1 // 28651
A=A-1 // 28652
M=D // 28653
// call Memory.alloc
@6 // 28654
D=A // 28655
@14 // 28656
M=D // 28657
@Memory.alloc // 28658
D=A // 28659
@13 // 28660
M=D // 28661
@String.new.ret.0 // 28662
D=A // 28663
@CALL // 28664
0;JMP // 28665
(String.new.ret.0)
@SP // 28666
AM=M-1 // 28667
D=M // 28668
@3 // 28669
M=D // 28670

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.new$IF_TRUE1}}
@String.new.EQ.114 // 28671
D=A // 28672
@SP // 28673
AM=M+1 // 28674
A=A-1 // 28675
M=D // 28676
@ARG // 28677
A=M // 28678
D=M // 28679
@DO_EQ // 28680
0;JMP // 28681
(String.new.EQ.114)
@String.new$IF_TRUE1 // 28682
D;JNE // 28683

////GotoInstruction{label='String.new$IF_FALSE1}
// goto String.new$IF_FALSE1
@String.new$IF_FALSE1 // 28684
0;JMP // 28685

////LabelInstruction{label='String.new$IF_TRUE1}
// label String.new$IF_TRUE1
(String.new$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 0}
//}

@THIS // 28686
A=M // 28687
M=0 // 28688

////GotoInstruction{label='String.new$IF_END1}
// goto String.new$IF_END1
@String.new$IF_END1 // 28689
0;JMP // 28690

////LabelInstruction{label='String.new$IF_FALSE1}
// label String.new$IF_FALSE1
(String.new$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 28691
A=M // 28692
D=M // 28693
@SP // 28694
AM=M+1 // 28695
A=A-1 // 28696
M=D // 28697
// call Array.new
@6 // 28698
D=A // 28699
@14 // 28700
M=D // 28701
@Array.new // 28702
D=A // 28703
@13 // 28704
M=D // 28705
@String.new.ret.1 // 28706
D=A // 28707
@CALL // 28708
0;JMP // 28709
(String.new.ret.1)
@SP // 28710
AM=M-1 // 28711
D=M // 28712
@THIS // 28713
A=M // 28714
M=D // 28715

////LabelInstruction{label='String.new$IF_END1}
// label String.new$IF_END1
(String.new$IF_END1)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 28716
A=M // 28717
D=M // 28718
@THIS // 28719
A=M+1 // 28720
A=A+1 // 28721
M=D // 28722

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 28723
A=M+1 // 28724
M=0 // 28725

////PushInstruction("pointer 0")
@3 // 28726
D=M // 28727
@SP // 28728
AM=M+1 // 28729
A=A-1 // 28730
M=D // 28731
@RETURN // 28732
0;JMP // 28733

////FunctionInstruction{functionName='Number.to_int32', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1, Number.do_sub=2}}
// function Number.to_int32 with 0
(Number.to_int32)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28734
A=M // 28735
D=M // 28736
@3 // 28737
M=D // 28738

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 6}
//}

@Number.6 // 28739
M=M-1 // 28740

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 0")], call=CallInstruction{Int32.do_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28741
A=M // 28742
D=M // 28743
@SP // 28744
AM=M+1 // 28745
A=A-1 // 28746
M=D // 28747
@Number.0 // 28748
D=M // 28749
@SP // 28750
AM=M+1 // 28751
A=A-1 // 28752
M=D // 28753
// call Int32.do_right_shift_bytes
@7 // 28754
D=A // 28755
@14 // 28756
M=D // 28757
@Int32.do_right_shift_bytes // 28758
D=A // 28759
@13 // 28760
M=D // 28761
@Number.to_int32.ret.0 // 28762
D=A // 28763
@CALL // 28764
0;JMP // 28765
(Number.to_int32.ret.0)
@SP // 28766
M=M-1 // 28767

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 28768
D=M // 28769
@SP // 28770
AM=M+1 // 28771
A=A-1 // 28772
M=D // 28773
// call Memory.deAlloc
@6 // 28774
D=A // 28775
@14 // 28776
M=D // 28777
@Memory.deAlloc // 28778
D=A // 28779
@13 // 28780
M=D // 28781
@Number.to_int32.ret.1 // 28782
D=A // 28783
@CALL // 28784
0;JMP // 28785
(Number.to_int32.ret.1)
@SP // 28786
M=M-1 // 28787

////PushInstruction("this 0")
@THIS // 28788
A=M // 28789
D=M // 28790
@SP // 28791
AM=M+1 // 28792
A=A-1 // 28793
M=D // 28794
@RETURN // 28795
0;JMP // 28796

////FunctionInstruction{functionName='Intersection.getDistanceFromOrigin', numLocals=0, funcMapping={Intersection.new=1, Intersection.dispose=2}}
// function Intersection.getDistanceFromOrigin with 0
(Intersection.getDistanceFromOrigin)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28797
A=M // 28798
D=M // 28799
@3 // 28800
M=D // 28801

////PushInstruction("this 0")
@THIS // 28802
A=M // 28803
D=M // 28804
@SP // 28805
AM=M+1 // 28806
A=A-1 // 28807
M=D // 28808
@RETURN // 28809
0;JMP // 28810

////FunctionInstruction{functionName='Memory.deAlloc', numLocals=4, funcMapping={Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.deAlloc with 4
(Memory.deAlloc)
@4 // 28811
D=A // 28812
@SP // 28813
AM=D+M // 28814
A=A-1 // 28815
M=0 // 28816
A=A-1 // 28817
M=0 // 28818
A=A-1 // 28819
M=0 // 28820
A=A-1 // 28821
M=0 // 28822

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 28823
A=M // 28824
D=M // 28825
@4 // 28826
D=D-A // 28827
@LCL // 28828
A=M // 28829
M=D // 28830

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 28831
A=M // 28832
D=M // 28833
@SP // 28834
AM=M+1 // 28835
A=A-1 // 28836
M=D+1 // 28837
D=1 // 28838
@SP // 28839
AM=M-1 // 28840
A=M // 28841
M=D // 28842

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 28843
A=M // 28844
D=M // 28845
D=D-1 // 28846
@LCL // 28847
A=M+1 // 28848
A=A+1 // 28849
A=A+1 // 28850
M=D // 28851

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 3"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 28852
A=M+1 // 28853
A=A+1 // 28854
A=A+1 // 28855
D=M // 28856
@0 // 28857
A=D+A // 28858
D=M // 28859
@LCL // 28860
A=M+1 // 28861
M=D // 28862

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                UnaryPushGroup(                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 1"),
//                        right:
//                            PushInstruction("constant 2048"),
//                        binaryOp: "LT"
//                    ),
//NOT),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 1"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.deAlloc$IF_TRUE1}}
@Memory.deAlloc.EQ.115 // 28863
D=A // 28864
@SP // 28865
AM=M+1 // 28866
A=A-1 // 28867
M=D // 28868
@Memory.deAlloc.LT.116 // 28869
D=A // 28870
@SP // 28871
AM=M+1 // 28872
A=A-1 // 28873
M=D // 28874
@LCL // 28875
A=M+1 // 28876
D=M // 28877
@2048 // 28878
D=D-A // 28879
@DO_LT // 28880
0;JMP // 28881
(Memory.deAlloc.LT.116)
@SP // 28882
AM=M+1 // 28883
A=A-1 // 28884
M=D // 28885
@SP // 28886
A=M-1 // 28887
M=!D // 28888
@LCL // 28889
A=M+1 // 28890
D=M // 28891
A=D+1 // 28892
D=M // 28893
@SP // 28894
AM=M-1 // 28895
D=D&M // 28896
D=D-1 // 28897
@DO_EQ // 28898
0;JMP // 28899
(Memory.deAlloc.EQ.115)
@Memory.deAlloc$IF_TRUE1 // 28900
D;JNE // 28901

////GotoInstruction{label='Memory.deAlloc$IF_FALSE1}
// goto Memory.deAlloc$IF_FALSE1
@Memory.deAlloc$IF_FALSE1 // 28902
0;JMP // 28903

////LabelInstruction{label='Memory.deAlloc$IF_TRUE1}
// label Memory.deAlloc$IF_TRUE1
(Memory.deAlloc$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 1")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28904
A=M+1 // 28905
D=M // 28906
@0 // 28907
A=D+A // 28908
D=M // 28909
@SP // 28910
AM=M+1 // 28911
A=A-1 // 28912
M=D // 28913
// call Memory.getBinIndex
@6 // 28914
D=A // 28915
@14 // 28916
M=D // 28917
@Memory.getBinIndex // 28918
D=A // 28919
@13 // 28920
M=D // 28921
@Memory.deAlloc.ret.0 // 28922
D=A // 28923
@CALL // 28924
0;JMP // 28925
(Memory.deAlloc.ret.0)
@SP // 28926
AM=M-1 // 28927
D=M // 28928
@2048 // 28929
D=D+A // 28930
@SP // 28931
AM=M+1 // 28932
A=A-1 // 28933
M=D // 28934
@LCL // 28935
A=M+1 // 28936
D=M // 28937
@SP // 28938
AM=M+1 // 28939
A=A-1 // 28940
M=D // 28941
// call Memory.remove_node
@7 // 28942
D=A // 28943
@14 // 28944
M=D // 28945
@Memory.remove_node // 28946
D=A // 28947
@13 // 28948
M=D // 28949
@Memory.deAlloc.ret.1 // 28950
D=A // 28951
@CALL // 28952
0;JMP // 28953
(Memory.deAlloc.ret.1)
@SP // 28954
M=M-1 // 28955

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 1"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 28956
A=M+1 // 28957
D=M // 28958
@SP // 28959
AM=M+1 // 28960
A=A-1 // 28961
M=D // 28962
@LCL // 28963
A=M+1 // 28964
D=M // 28965
@0 // 28966
A=D+A // 28967
D=M // 28968
@SP // 28969
AM=M+1 // 28970
A=A-1 // 28971
M=D // 28972
@LCL // 28973
A=M // 28974
D=M // 28975
@0 // 28976
A=D+A // 28977
D=M // 28978
@SP // 28979
AM=M-1 // 28980
D=D+M // 28981
@5 // 28982
D=D+A // 28983
@SP // 28984
AM=M-1 // 28985
A=M // 28986
M=D // 28987

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28988
A=M+1 // 28989
D=M // 28990
@SP // 28991
AM=M+1 // 28992
A=A-1 // 28993
M=D // 28994
// call Memory.create_foot
@6 // 28995
D=A // 28996
@14 // 28997
M=D // 28998
@Memory.create_foot // 28999
D=A // 29000
@13 // 29001
M=D // 29002
@Memory.deAlloc.ret.2 // 29003
D=A // 29004
@CALL // 29005
0;JMP // 29006
(Memory.deAlloc.ret.2)
@SP // 29007
M=M-1 // 29008

////PushPopPair {
//  push: PushInstruction("local 1")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 29009
A=M+1 // 29010
D=M // 29011
@LCL // 29012
A=M // 29013
M=D // 29014

////LabelInstruction{label='Memory.deAlloc$IF_FALSE1}
// label Memory.deAlloc$IF_FALSE1
(Memory.deAlloc$IF_FALSE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 29015
A=M // 29016
D=M // 29017
@SP // 29018
AM=M+1 // 29019
A=A-1 // 29020
M=D // 29021
@LCL // 29022
A=M // 29023
D=M // 29024
@0 // 29025
A=D+A // 29026
D=M // 29027
@SP // 29028
AM=M-1 // 29029
D=D+M // 29030
@5 // 29031
D=D+A // 29032
@LCL // 29033
A=M+1 // 29034
A=A+1 // 29035
M=D // 29036

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("constant 16384"),
//                    binaryOp: "LT"
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.deAlloc$IF_TRUE2}}
@Memory.deAlloc.EQ.117 // 29037
D=A // 29038
@SP // 29039
AM=M+1 // 29040
A=A-1 // 29041
M=D // 29042
@Memory.deAlloc.LT.118 // 29043
D=A // 29044
@SP // 29045
AM=M+1 // 29046
A=A-1 // 29047
M=D // 29048
@LCL // 29049
A=M+1 // 29050
A=A+1 // 29051
D=M // 29052
@16384 // 29053
D=D-A // 29054
@DO_LT // 29055
0;JMP // 29056
(Memory.deAlloc.LT.118)
@SP // 29057
AM=M+1 // 29058
A=A-1 // 29059
M=D // 29060
@LCL // 29061
A=M+1 // 29062
A=A+1 // 29063
D=M // 29064
A=D+1 // 29065
D=M // 29066
@SP // 29067
AM=M-1 // 29068
D=D&M // 29069
D=D-1 // 29070
@DO_EQ // 29071
0;JMP // 29072
(Memory.deAlloc.EQ.117)
@Memory.deAlloc$IF_TRUE2 // 29073
D;JNE // 29074

////GotoInstruction{label='Memory.deAlloc$IF_FALSE2}
// goto Memory.deAlloc$IF_FALSE2
@Memory.deAlloc$IF_FALSE2 // 29075
0;JMP // 29076

////LabelInstruction{label='Memory.deAlloc$IF_TRUE2}
// label Memory.deAlloc$IF_TRUE2
(Memory.deAlloc$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29077
A=M+1 // 29078
A=A+1 // 29079
D=M // 29080
@0 // 29081
A=D+A // 29082
D=M // 29083
@SP // 29084
AM=M+1 // 29085
A=A-1 // 29086
M=D // 29087
// call Memory.getBinIndex
@6 // 29088
D=A // 29089
@14 // 29090
M=D // 29091
@Memory.getBinIndex // 29092
D=A // 29093
@13 // 29094
M=D // 29095
@Memory.deAlloc.ret.3 // 29096
D=A // 29097
@CALL // 29098
0;JMP // 29099
(Memory.deAlloc.ret.3)
@SP // 29100
AM=M-1 // 29101
D=M // 29102
@2048 // 29103
D=D+A // 29104
@SP // 29105
AM=M+1 // 29106
A=A-1 // 29107
M=D // 29108
@LCL // 29109
A=M+1 // 29110
A=A+1 // 29111
D=M // 29112
@SP // 29113
AM=M+1 // 29114
A=A-1 // 29115
M=D // 29116
// call Memory.remove_node
@7 // 29117
D=A // 29118
@14 // 29119
M=D // 29120
@Memory.remove_node // 29121
D=A // 29122
@13 // 29123
M=D // 29124
@Memory.deAlloc.ret.4 // 29125
D=A // 29126
@CALL // 29127
0;JMP // 29128
(Memory.deAlloc.ret.4)
@SP // 29129
M=M-1 // 29130

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 29131
A=M // 29132
D=M // 29133
@SP // 29134
AM=M+1 // 29135
A=A-1 // 29136
M=D // 29137
@LCL // 29138
A=M // 29139
D=M // 29140
@0 // 29141
A=D+A // 29142
D=M // 29143
@SP // 29144
AM=M+1 // 29145
A=A-1 // 29146
M=D // 29147
@LCL // 29148
A=M+1 // 29149
A=A+1 // 29150
D=M // 29151
@0 // 29152
A=D+A // 29153
D=M // 29154
@SP // 29155
AM=M-1 // 29156
D=D+M // 29157
@5 // 29158
D=D+A // 29159
@SP // 29160
AM=M-1 // 29161
A=M // 29162
M=D // 29163

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29164
A=M // 29165
D=M // 29166
@SP // 29167
AM=M+1 // 29168
A=A-1 // 29169
M=D // 29170
// call Memory.create_foot
@6 // 29171
D=A // 29172
@14 // 29173
M=D // 29174
@Memory.create_foot // 29175
D=A // 29176
@13 // 29177
M=D // 29178
@Memory.deAlloc.ret.5 // 29179
D=A // 29180
@CALL // 29181
0;JMP // 29182
(Memory.deAlloc.ret.5)
@SP // 29183
M=M-1 // 29184

////LabelInstruction{label='Memory.deAlloc$IF_FALSE2}
// label Memory.deAlloc$IF_FALSE2
(Memory.deAlloc$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 0")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29185
A=M // 29186
D=M // 29187
@0 // 29188
A=D+A // 29189
D=M // 29190
@SP // 29191
AM=M+1 // 29192
A=A-1 // 29193
M=D // 29194
// call Memory.getBinIndex
@6 // 29195
D=A // 29196
@14 // 29197
M=D // 29198
@Memory.getBinIndex // 29199
D=A // 29200
@13 // 29201
M=D // 29202
@Memory.deAlloc.ret.6 // 29203
D=A // 29204
@CALL // 29205
0;JMP // 29206
(Memory.deAlloc.ret.6)
@SP // 29207
AM=M-1 // 29208
D=M // 29209
@2048 // 29210
D=D+A // 29211
@SP // 29212
AM=M+1 // 29213
A=A-1 // 29214
M=D // 29215
@LCL // 29216
A=M // 29217
D=M // 29218
@SP // 29219
AM=M+1 // 29220
A=A-1 // 29221
M=D // 29222
// call Memory.add_node
@7 // 29223
D=A // 29224
@14 // 29225
M=D // 29226
@Memory.add_node // 29227
D=A // 29228
@13 // 29229
M=D // 29230
@Memory.deAlloc.ret.7 // 29231
D=A // 29232
@CALL // 29233
0;JMP // 29234
(Memory.deAlloc.ret.7)
@SP // 29235
M=M-1 // 29236

////PushInstruction("constant 0")
@SP // 29237
AM=M+1 // 29238
A=A-1 // 29239
M=0 // 29240
@RETURN // 29241
0;JMP // 29242

////FunctionInstruction{functionName='String.charAt', numLocals=0, funcMapping={String.dispose=1, String.appendChar=3, String.length=0, String.new=2}}
// function String.charAt with 0
(String.charAt)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29243
A=M // 29244
D=M // 29245
@3 // 29246
M=D // 29247

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "ADD"
//        )
//)
@THIS // 29248
A=M // 29249
D=M // 29250
@SP // 29251
AM=M+1 // 29252
A=A-1 // 29253
M=D // 29254
@ARG // 29255
A=M+1 // 29256
D=M // 29257
@SP // 29258
AM=M-1 // 29259
A=D+M // 29260
D=M // 29261
@SP // 29262
AM=M+1 // 29263
A=A-1 // 29264
M=D // 29265
@RETURN // 29266
0;JMP // 29267

////FunctionInstruction{functionName='Plane.surface_normal', numLocals=2, funcMapping={Plane.initialize=16, Plane.new=1, Plane.dispose=4, Plane.intersect=15, Plane.color=29}}
// function Plane.surface_normal with 2
(Plane.surface_normal)
@SP // 29268
M=M+1 // 29269
AM=M+1 // 29270
A=A-1 // 29271
M=0 // 29272
A=A-1 // 29273
M=0 // 29274

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29275
A=M // 29276
D=M // 29277
@3 // 29278
M=D // 29279

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 29280
AM=M+1 // 29281
A=A-1 // 29282
M=-1 // 29283
// call Number.new
@6 // 29284
D=A // 29285
@14 // 29286
M=D // 29287
@Number.new // 29288
D=A // 29289
@13 // 29290
M=D // 29291
@Plane.surface_normal.ret.0 // 29292
D=A // 29293
@CALL // 29294
0;JMP // 29295
(Plane.surface_normal.ret.0)
@SP // 29296
AM=M-1 // 29297
D=M // 29298
@LCL // 29299
A=M // 29300
M=D // 29301

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 29302
A=M+1 // 29303
D=M // 29304
@SP // 29305
AM=M+1 // 29306
A=A-1 // 29307
M=D // 29308
// call Vec3.clone
@6 // 29309
D=A // 29310
@14 // 29311
M=D // 29312
@Vec3.clone // 29313
D=A // 29314
@13 // 29315
M=D // 29316
@Plane.surface_normal.ret.1 // 29317
D=A // 29318
@CALL // 29319
0;JMP // 29320
(Plane.surface_normal.ret.1)
@SP // 29321
AM=M-1 // 29322
D=M // 29323
@LCL // 29324
A=M+1 // 29325
M=D // 29326

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29327
A=M+1 // 29328
D=M // 29329
@SP // 29330
AM=M+1 // 29331
A=A-1 // 29332
M=D // 29333
@LCL // 29334
A=M // 29335
D=M // 29336
@SP // 29337
AM=M+1 // 29338
A=A-1 // 29339
M=D // 29340
// call Vec3.do_scale
@7 // 29341
D=A // 29342
@14 // 29343
M=D // 29344
@Vec3.do_scale // 29345
D=A // 29346
@13 // 29347
M=D // 29348
@Plane.surface_normal.ret.2 // 29349
D=A // 29350
@CALL // 29351
0;JMP // 29352
(Plane.surface_normal.ret.2)
@SP // 29353
M=M-1 // 29354

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29355
A=M // 29356
D=M // 29357
@SP // 29358
AM=M+1 // 29359
A=A-1 // 29360
M=D // 29361
// call Number.dispose
@6 // 29362
D=A // 29363
@14 // 29364
M=D // 29365
@Number.dispose // 29366
D=A // 29367
@13 // 29368
M=D // 29369
@Plane.surface_normal.ret.3 // 29370
D=A // 29371
@CALL // 29372
0;JMP // 29373
(Plane.surface_normal.ret.3)
@SP // 29374
M=M-1 // 29375

////PushInstruction("local 1")
@LCL // 29376
A=M+1 // 29377
D=M // 29378
@SP // 29379
AM=M+1 // 29380
A=A-1 // 29381
M=D // 29382
@RETURN // 29383
0;JMP // 29384

////FunctionInstruction{functionName='Number.initialize', numLocals=3, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_div=5, Number.getV=0, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.initialize with 3
(Number.initialize)
@3 // 29385
D=A // 29386
@SP // 29387
AM=D+M // 29388
A=A-1 // 29389
M=0 // 29390
A=A-1 // 29391
M=0 // 29392
A=A-1 // 29393
M=0 // 29394

////PushPopPair {
//  push: PushInstruction("constant 2")
//  pop:  PopInstruction{address=static 0}
//}

@2 // 29395
D=A // 29396
@Number.0 // 29397
M=D // 29398

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 256")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=static 1}
//}

@256 // 29399
D=A // 29400
@SP // 29401
AM=M+1 // 29402
A=A-1 // 29403
M=D // 29404
// call Int32.new
@6 // 29405
D=A // 29406
@14 // 29407
M=D // 29408
@Int32.new // 29409
D=A // 29410
@13 // 29411
M=D // 29412
@Number.initialize.ret.0 // 29413
D=A // 29414
@CALL // 29415
0;JMP // 29416
(Number.initialize.ret.0)
@SP // 29417
AM=M-1 // 29418
D=M // 29419
@Number.1 // 29420
M=D // 29421

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 1"), PushInstruction("static 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 29422
D=A // 29423
@SP // 29424
M=D+M // 29425
@Number.1 // 29426
D=M // 29427
@SP // 29428
A=M-1 // 29429
M=D // 29430
A=A-1 // 29431
M=D // 29432
// call Int32.do_mul
@7 // 29433
D=A // 29434
@14 // 29435
M=D // 29436
@Int32.do_mul // 29437
D=A // 29438
@13 // 29439
M=D // 29440
@Number.initialize.ret.1 // 29441
D=A // 29442
@CALL // 29443
0;JMP // 29444
(Number.initialize.ret.1)
@SP // 29445
M=M-1 // 29446

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 561")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@561 // 29447
D=A // 29448
@SP // 29449
AM=M+1 // 29450
A=A-1 // 29451
M=D // 29452
// call Int32.new
@6 // 29453
D=A // 29454
@14 // 29455
M=D // 29456
@Int32.new // 29457
D=A // 29458
@13 // 29459
M=D // 29460
@Number.initialize.ret.2 // 29461
D=A // 29462
@CALL // 29463
0;JMP // 29464
(Number.initialize.ret.2)
@SP // 29465
AM=M-1 // 29466
D=M // 29467
@LCL // 29468
A=M+1 // 29469
M=D // 29470

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 367")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 2}
//}

@367 // 29471
D=A // 29472
@SP // 29473
AM=M+1 // 29474
A=A-1 // 29475
M=D // 29476
// call Int32.new
@6 // 29477
D=A // 29478
@14 // 29479
M=D // 29480
@Int32.new // 29481
D=A // 29482
@13 // 29483
M=D // 29484
@Number.initialize.ret.3 // 29485
D=A // 29486
@CALL // 29487
0;JMP // 29488
(Number.initialize.ret.3)
@SP // 29489
AM=M-1 // 29490
D=M // 29491
@LCL // 29492
A=M+1 // 29493
A=A+1 // 29494
M=D // 29495

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 2")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29496
A=M+1 // 29497
D=M // 29498
@SP // 29499
AM=M+1 // 29500
A=A-1 // 29501
M=D // 29502
@LCL // 29503
A=M+1 // 29504
A=A+1 // 29505
D=M // 29506
@SP // 29507
AM=M+1 // 29508
A=A-1 // 29509
M=D // 29510
// call Int32.do_mul
@7 // 29511
D=A // 29512
@14 // 29513
M=D // 29514
@Int32.do_mul // 29515
D=A // 29516
@13 // 29517
M=D // 29518
@Number.initialize.ret.4 // 29519
D=A // 29520
@CALL // 29521
0;JMP // 29522
(Number.initialize.ret.4)
@SP // 29523
M=M-1 // 29524

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.new_from_int32}}
//  pop:  PopInstruction{address=static 4}
//}

@LCL // 29525
A=M+1 // 29526
D=M // 29527
@SP // 29528
AM=M+1 // 29529
A=A-1 // 29530
M=D // 29531
// call Number.new_from_int32
@6 // 29532
D=A // 29533
@14 // 29534
M=D // 29535
@Number.new_from_int32 // 29536
D=A // 29537
@13 // 29538
M=D // 29539
@Number.initialize.ret.5 // 29540
D=A // 29541
@CALL // 29542
0;JMP // 29543
(Number.initialize.ret.5)
@SP // 29544
AM=M-1 // 29545
D=M // 29546
@Number.4 // 29547
M=D // 29548

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=static 2}
//}

@Number.1 // 29549
D=M // 29550
@SP // 29551
AM=M+1 // 29552
A=A-1 // 29553
M=D // 29554
// call Int32.clone
@6 // 29555
D=A // 29556
@14 // 29557
M=D // 29558
@Int32.clone // 29559
D=A // 29560
@13 // 29561
M=D // 29562
@Number.initialize.ret.6 // 29563
D=A // 29564
@CALL // 29565
0;JMP // 29566
(Number.initialize.ret.6)
@SP // 29567
AM=M-1 // 29568
D=M // 29569
@Number.2 // 29570
M=D // 29571

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.2 // 29572
D=M // 29573
@SP // 29574
AM=M+1 // 29575
A=A-1 // 29576
M=D // 29577
// call Int32.do_sqrt
@6 // 29578
D=A // 29579
@14 // 29580
M=D // 29581
@Int32.do_sqrt // 29582
D=A // 29583
@13 // 29584
M=D // 29585
@Number.initialize.ret.7 // 29586
D=A // 29587
@CALL // 29588
0;JMP // 29589
(Number.initialize.ret.7)
@SP // 29590
M=M-1 // 29591

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.2 // 29592
D=M // 29593
@SP // 29594
AM=M+1 // 29595
A=A-1 // 29596
M=D // 29597
// call Int32.do_sqrt
@6 // 29598
D=A // 29599
@14 // 29600
M=D // 29601
@Int32.do_sqrt // 29602
D=A // 29603
@13 // 29604
M=D // 29605
@Number.initialize.ret.8 // 29606
D=A // 29607
@CALL // 29608
0;JMP // 29609
(Number.initialize.ret.8)
@SP // 29610
M=M-1 // 29611

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=static 3}
//}

@Number.2 // 29612
D=M // 29613
@SP // 29614
AM=M+1 // 29615
A=A-1 // 29616
M=D // 29617
// call Int32.clone
@6 // 29618
D=A // 29619
@14 // 29620
M=D // 29621
@Int32.clone // 29622
D=A // 29623
@13 // 29624
M=D // 29625
@Number.initialize.ret.9 // 29626
D=A // 29627
@CALL // 29628
0;JMP // 29629
(Number.initialize.ret.9)
@SP // 29630
AM=M-1 // 29631
D=M // 29632
@Number.3 // 29633
M=D // 29634

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 3")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.3 // 29635
D=M // 29636
@SP // 29637
AM=M+1 // 29638
A=A-1 // 29639
M=D // 29640
// call Int32.do_sqrt
@6 // 29641
D=A // 29642
@14 // 29643
M=D // 29644
@Int32.do_sqrt // 29645
D=A // 29646
@13 // 29647
M=D // 29648
@Number.initialize.ret.10 // 29649
D=A // 29650
@CALL // 29651
0;JMP // 29652
(Number.initialize.ret.10)
@SP // 29653
M=M-1 // 29654

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 3")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@Number.3 // 29655
D=M // 29656
@SP // 29657
AM=M+1 // 29658
A=A-1 // 29659
M=D // 29660
// call Int32.clone
@6 // 29661
D=A // 29662
@14 // 29663
M=D // 29664
@Int32.clone // 29665
D=A // 29666
@13 // 29667
M=D // 29668
@Number.initialize.ret.11 // 29669
D=A // 29670
@CALL // 29671
0;JMP // 29672
(Number.initialize.ret.11)
@SP // 29673
AM=M-1 // 29674
D=M // 29675
@LCL // 29676
A=M // 29677
M=D // 29678

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 3"), PushInstruction("local 0")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.3 // 29679
D=M // 29680
@SP // 29681
AM=M+1 // 29682
A=A-1 // 29683
M=D // 29684
@LCL // 29685
A=M // 29686
D=M // 29687
@SP // 29688
AM=M+1 // 29689
A=A-1 // 29690
M=D // 29691
// call Int32.do_mul
@7 // 29692
D=A // 29693
@14 // 29694
M=D // 29695
@Int32.do_mul // 29696
D=A // 29697
@13 // 29698
M=D // 29699
@Number.initialize.ret.12 // 29700
D=A // 29701
@CALL // 29702
0;JMP // 29703
(Number.initialize.ret.12)
@SP // 29704
M=M-1 // 29705

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 3"), PushInstruction("local 0")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.3 // 29706
D=M // 29707
@SP // 29708
AM=M+1 // 29709
A=A-1 // 29710
M=D // 29711
@LCL // 29712
A=M // 29713
D=M // 29714
@SP // 29715
AM=M+1 // 29716
A=A-1 // 29717
M=D // 29718
// call Int32.do_mul
@7 // 29719
D=A // 29720
@14 // 29721
M=D // 29722
@Int32.do_mul // 29723
D=A // 29724
@13 // 29725
M=D // 29726
@Number.initialize.ret.13 // 29727
D=A // 29728
@CALL // 29729
0;JMP // 29730
(Number.initialize.ret.13)
@SP // 29731
M=M-1 // 29732

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29733
A=M+1 // 29734
A=A+1 // 29735
D=M // 29736
@SP // 29737
AM=M+1 // 29738
A=A-1 // 29739
M=D // 29740
// call Int32.dispose
@6 // 29741
D=A // 29742
@14 // 29743
M=D // 29744
@Int32.dispose // 29745
D=A // 29746
@13 // 29747
M=D // 29748
@Number.initialize.ret.14 // 29749
D=A // 29750
@CALL // 29751
0;JMP // 29752
(Number.initialize.ret.14)
@SP // 29753
M=M-1 // 29754

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29755
A=M // 29756
D=M // 29757
@SP // 29758
AM=M+1 // 29759
A=A-1 // 29760
M=D // 29761
// call Int32.dispose
@6 // 29762
D=A // 29763
@14 // 29764
M=D // 29765
@Int32.dispose // 29766
D=A // 29767
@13 // 29768
M=D // 29769
@Number.initialize.ret.15 // 29770
D=A // 29771
@CALL // 29772
0;JMP // 29773
(Number.initialize.ret.15)
@SP // 29774
M=M-1 // 29775

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=static 5}
//}

@2 // 29776
D=A // 29777
@SP // 29778
AM=M+1 // 29779
A=A-1 // 29780
M=D // 29781
// call Int32.new
@6 // 29782
D=A // 29783
@14 // 29784
M=D // 29785
@Int32.new // 29786
D=A // 29787
@13 // 29788
M=D // 29789
@Number.initialize.ret.16 // 29790
D=A // 29791
@CALL // 29792
0;JMP // 29793
(Number.initialize.ret.16)
@SP // 29794
AM=M-1 // 29795
D=M // 29796
@Number.5 // 29797
M=D // 29798

////PushInstruction("constant 0")
@SP // 29799
AM=M+1 // 29800
A=A-1 // 29801
M=0 // 29802
@RETURN // 29803
0;JMP // 29804

////FunctionInstruction{functionName='Scene.getLights', numLocals=0, funcMapping={Scene.getNumLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getLights with 0
(Scene.getLights)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29805
A=M // 29806
D=M // 29807
@3 // 29808
M=D // 29809

////PushInstruction("this 7")
@THIS // 29810
D=M // 29811
@7 // 29812
A=D+A // 29813
D=M // 29814
@SP // 29815
AM=M+1 // 29816
A=A-1 // 29817
M=D // 29818
@RETURN // 29819
0;JMP // 29820

////FunctionInstruction{functionName='Number.dispose', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.dispose with 0
(Number.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29821
A=M // 29822
D=M // 29823
@3 // 29824
M=D // 29825

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 6}
//}

@Number.6 // 29826
M=M-1 // 29827

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 29828
A=M // 29829
D=M // 29830
@SP // 29831
AM=M+1 // 29832
A=A-1 // 29833
M=D // 29834
// call Int32.dispose
@6 // 29835
D=A // 29836
@14 // 29837
M=D // 29838
@Int32.dispose // 29839
D=A // 29840
@13 // 29841
M=D // 29842
@Number.dispose.ret.0 // 29843
D=A // 29844
@CALL // 29845
0;JMP // 29846
(Number.dispose.ret.0)
@SP // 29847
M=M-1 // 29848

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 29849
D=M // 29850
@SP // 29851
AM=M+1 // 29852
A=A-1 // 29853
M=D // 29854
// call Memory.deAlloc
@6 // 29855
D=A // 29856
@14 // 29857
M=D // 29858
@Memory.deAlloc // 29859
D=A // 29860
@13 // 29861
M=D // 29862
@Number.dispose.ret.1 // 29863
D=A // 29864
@CALL // 29865
0;JMP // 29866
(Number.dispose.ret.1)
@SP // 29867
M=M-1 // 29868

////PushInstruction("constant 0")
@SP // 29869
AM=M+1 // 29870
A=A-1 // 29871
M=0 // 29872
@RETURN // 29873
0;JMP // 29874

////FunctionInstruction{functionName='Number.is_negative', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.is_negative with 0
(Number.is_negative)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29875
A=M // 29876
D=M // 29877
@3 // 29878
M=D // 29879

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_negative}}
@THIS // 29880
A=M // 29881
D=M // 29882
@SP // 29883
AM=M+1 // 29884
A=A-1 // 29885
M=D // 29886
// call Int32.is_negative
@6 // 29887
D=A // 29888
@14 // 29889
M=D // 29890
@Int32.is_negative // 29891
D=A // 29892
@13 // 29893
M=D // 29894
@Number.is_negative.ret.0 // 29895
D=A // 29896
@CALL // 29897
0;JMP // 29898
(Number.is_negative.ret.0)
@RETURN // 29899
0;JMP // 29900

////FunctionInstruction{functionName='Element.intersect', numLocals=0, funcMapping={Element.surface_normal=2, Element.plane=1, Element.color=2}}
// function Element.intersect with 0
(Element.intersect)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29901
A=M // 29902
D=M // 29903
@3 // 29904
M=D // 29905

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.intersect$IF_TRUE1}}
@Element.intersect.EQ.119 // 29906
D=A // 29907
@SP // 29908
AM=M+1 // 29909
A=A-1 // 29910
M=D // 29911
@THIS // 29912
A=M // 29913
D=M // 29914
@DO_EQ // 29915
0;JMP // 29916
(Element.intersect.EQ.119)
D=!D // 29917
@Element.intersect$IF_TRUE1 // 29918
D;JNE // 29919

////GotoInstruction{label='Element.intersect$IF_FALSE1}
// goto Element.intersect$IF_FALSE1
@Element.intersect$IF_FALSE1 // 29920
0;JMP // 29921

////LabelInstruction{label='Element.intersect$IF_TRUE1}
// label Element.intersect$IF_TRUE1
(Element.intersect$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Plane.intersect}}
@THIS // 29922
A=M // 29923
D=M // 29924
@SP // 29925
AM=M+1 // 29926
A=A-1 // 29927
M=D // 29928
@ARG // 29929
A=M+1 // 29930
D=M // 29931
@SP // 29932
AM=M+1 // 29933
A=A-1 // 29934
M=D // 29935
// call Plane.intersect
@7 // 29936
D=A // 29937
@14 // 29938
M=D // 29939
@Plane.intersect // 29940
D=A // 29941
@13 // 29942
M=D // 29943
@Element.intersect.ret.0 // 29944
D=A // 29945
@CALL // 29946
0;JMP // 29947
(Element.intersect.ret.0)
@RETURN // 29948
0;JMP // 29949

////LabelInstruction{label='Element.intersect$IF_FALSE1}
// label Element.intersect$IF_FALSE1
(Element.intersect$IF_FALSE1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.intersect$IF_TRUE2}}
@Element.intersect.EQ.120 // 29950
D=A // 29951
@SP // 29952
AM=M+1 // 29953
A=A-1 // 29954
M=D // 29955
@THIS // 29956
A=M+1 // 29957
D=M // 29958
@DO_EQ // 29959
0;JMP // 29960
(Element.intersect.EQ.120)
D=!D // 29961
@Element.intersect$IF_TRUE2 // 29962
D;JNE // 29963

////GotoInstruction{label='Element.intersect$IF_FALSE2}
// goto Element.intersect$IF_FALSE2
@Element.intersect$IF_FALSE2 // 29964
0;JMP // 29965

////LabelInstruction{label='Element.intersect$IF_TRUE2}
// label Element.intersect$IF_TRUE2
(Element.intersect$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Sphere.intersect}}
@THIS // 29966
A=M+1 // 29967
D=M // 29968
@SP // 29969
AM=M+1 // 29970
A=A-1 // 29971
M=D // 29972
@ARG // 29973
A=M+1 // 29974
D=M // 29975
@SP // 29976
AM=M+1 // 29977
A=A-1 // 29978
M=D // 29979
// call Sphere.intersect
@7 // 29980
D=A // 29981
@14 // 29982
M=D // 29983
@Sphere.intersect // 29984
D=A // 29985
@13 // 29986
M=D // 29987
@Element.intersect.ret.1 // 29988
D=A // 29989
@CALL // 29990
0;JMP // 29991
(Element.intersect.ret.1)
@RETURN // 29992
0;JMP // 29993

////LabelInstruction{label='Element.intersect$IF_FALSE2}
// label Element.intersect$IF_FALSE2
(Element.intersect$IF_FALSE2)

////PushInstruction("constant 0")
@SP // 29994
AM=M+1 // 29995
A=A-1 // 29996
M=0 // 29997
@RETURN // 29998
0;JMP // 29999

////FunctionInstruction{functionName='Int32.xor', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.getParts=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.xor with 0
(Int32.xor)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        UnaryPushGroup(            PushInstruction("argument 1"),
//NOT),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Int32.xor$IF_TRUE1}}
@ARG // 30000
A=M // 30001
D=M // 30002
@SP // 30003
AM=M+1 // 30004
A=A-1 // 30005
M=D // 30006
@ARG // 30007
A=M+1 // 30008
D=!M // 30009
@SP // 30010
AM=M-1 // 30011
D=D&M // 30012
@Int32.xor$IF_TRUE1 // 30013
D;JNE // 30014

////GotoInstruction{label='Int32.xor$IF_FALSE1}
// goto Int32.xor$IF_FALSE1
@Int32.xor$IF_FALSE1 // 30015
0;JMP // 30016

////LabelInstruction{label='Int32.xor$IF_TRUE1}
// label Int32.xor$IF_TRUE1
(Int32.xor$IF_TRUE1)

////UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
@SP // 30017
AM=M+1 // 30018
A=A-1 // 30019
M=-1 // 30020
@RETURN // 30021
0;JMP // 30022

////LabelInstruction{label='Int32.xor$IF_FALSE1}
// label Int32.xor$IF_FALSE1
(Int32.xor$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        UnaryPushGroup(            PushInstruction("argument 0"),
//NOT),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Int32.xor$IF_TRUE2}}
@ARG // 30023
A=M+1 // 30024
D=M // 30025
@SP // 30026
AM=M+1 // 30027
A=A-1 // 30028
M=D // 30029
@ARG // 30030
A=M // 30031
D=!M // 30032
@SP // 30033
AM=M-1 // 30034
D=D&M // 30035
@Int32.xor$IF_TRUE2 // 30036
D;JNE // 30037

////GotoInstruction{label='Int32.xor$IF_FALSE2}
// goto Int32.xor$IF_FALSE2
@Int32.xor$IF_FALSE2 // 30038
0;JMP // 30039

////LabelInstruction{label='Int32.xor$IF_TRUE2}
// label Int32.xor$IF_TRUE2
(Int32.xor$IF_TRUE2)

////UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
@SP // 30040
AM=M+1 // 30041
A=A-1 // 30042
M=-1 // 30043
@RETURN // 30044
0;JMP // 30045

////LabelInstruction{label='Int32.xor$IF_FALSE2}
// label Int32.xor$IF_FALSE2
(Int32.xor$IF_FALSE2)

////PushInstruction("constant 0")
@SP // 30046
AM=M+1 // 30047
A=A-1 // 30048
M=0 // 30049
@RETURN // 30050
0;JMP // 30051

////FunctionInstruction{functionName='Memory.remove_node', numLocals=0, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.remove_node with 0
(Memory.remove_node)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("argument 1"),
//                        right:
//                            PushInstruction("constant 2"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.remove_node$IF_TRUE1}}
@Memory.remove_node.EQ.121 // 30052
D=A // 30053
@SP // 30054
AM=M+1 // 30055
A=A-1 // 30056
M=D // 30057
@ARG // 30058
A=M+1 // 30059
D=M // 30060
@2 // 30061
A=D+A // 30062
D=M // 30063
@DO_EQ // 30064
0;JMP // 30065
(Memory.remove_node.EQ.121)
D=!D // 30066
@Memory.remove_node$IF_TRUE1 // 30067
D;JNE // 30068

////GotoInstruction{label='Memory.remove_node$IF_FALSE1}
// goto Memory.remove_node$IF_FALSE1
@Memory.remove_node$IF_FALSE1 // 30069
0;JMP // 30070

////LabelInstruction{label='Memory.remove_node$IF_TRUE1}
// label Memory.remove_node$IF_TRUE1
(Memory.remove_node$IF_TRUE1)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 30071
A=M+1 // 30072
D=M // 30073
@2 // 30074
D=D+A // 30075
@3 // 30076
D=D+A // 30077
@SP // 30078
AM=M+1 // 30079
A=A-1 // 30080
M=D // 30081
@ARG // 30082
A=M+1 // 30083
D=M // 30084
@3 // 30085
A=D+A // 30086
D=M // 30087
@SP // 30088
AM=M-1 // 30089
A=M // 30090
M=D // 30091

////GotoInstruction{label='Memory.remove_node$IF_END1}
// goto Memory.remove_node$IF_END1
@Memory.remove_node$IF_END1 // 30092
0;JMP // 30093

////LabelInstruction{label='Memory.remove_node$IF_FALSE1}
// label Memory.remove_node$IF_FALSE1
(Memory.remove_node$IF_FALSE1)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 30094
A=M // 30095
D=M // 30096
@SP // 30097
AM=M+1 // 30098
A=A-1 // 30099
M=D // 30100
@ARG // 30101
A=M+1 // 30102
D=M // 30103
@3 // 30104
A=D+A // 30105
D=M // 30106
@SP // 30107
AM=M-1 // 30108
A=M // 30109
M=D // 30110

////LabelInstruction{label='Memory.remove_node$IF_END1}
// label Memory.remove_node$IF_END1
(Memory.remove_node$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("argument 1"),
//                        right:
//                            PushInstruction("constant 3"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.remove_node$IF_TRUE2}}
@Memory.remove_node.EQ.122 // 30111
D=A // 30112
@SP // 30113
AM=M+1 // 30114
A=A-1 // 30115
M=D // 30116
@ARG // 30117
A=M+1 // 30118
D=M // 30119
@3 // 30120
A=D+A // 30121
D=M // 30122
@DO_EQ // 30123
0;JMP // 30124
(Memory.remove_node.EQ.122)
D=!D // 30125
@Memory.remove_node$IF_TRUE2 // 30126
D;JNE // 30127

////GotoInstruction{label='Memory.remove_node$IF_FALSE2}
// goto Memory.remove_node$IF_FALSE2
@Memory.remove_node$IF_FALSE2 // 30128
0;JMP // 30129

////LabelInstruction{label='Memory.remove_node$IF_TRUE2}
// label Memory.remove_node$IF_TRUE2
(Memory.remove_node$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 30130
A=M+1 // 30131
D=M // 30132
@3 // 30133
D=D+A // 30134
@2 // 30135
D=D+A // 30136
@SP // 30137
AM=M+1 // 30138
A=A-1 // 30139
M=D // 30140
@ARG // 30141
A=M+1 // 30142
D=M // 30143
@2 // 30144
A=D+A // 30145
D=M // 30146
@SP // 30147
AM=M-1 // 30148
A=M // 30149
M=D // 30150

////LabelInstruction{label='Memory.remove_node$IF_FALSE2}
// label Memory.remove_node$IF_FALSE2
(Memory.remove_node$IF_FALSE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 30151
A=M+1 // 30152
D=M // 30153
@2 // 30154
D=D+A // 30155
@SP // 30156
AM=M+1 // 30157
A=A-1 // 30158
M=D // 30159
D=0 // 30160
@SP // 30161
AM=M-1 // 30162
A=M // 30163
M=D // 30164

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 30165
A=M+1 // 30166
D=M // 30167
@3 // 30168
D=D+A // 30169
@SP // 30170
AM=M+1 // 30171
A=A-1 // 30172
M=D // 30173
D=0 // 30174
@SP // 30175
AM=M-1 // 30176
A=M // 30177
M=D // 30178

////PushInstruction("constant 0")
@SP // 30179
AM=M+1 // 30180
A=A-1 // 30181
M=0 // 30182
@RETURN // 30183
0;JMP // 30184

////FunctionInstruction{functionName='DirectionalLight.new', numLocals=2, funcMapping={DirectionalLight.dispose=3, DirectionalLight.getColor=0}}
// function DirectionalLight.new with 2
(DirectionalLight.new)
@SP // 30185
M=M+1 // 30186
AM=M+1 // 30187
A=A-1 // 30188
M=0 // 30189
A=A-1 // 30190
M=0 // 30191

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@4 // 30192
D=A // 30193
@SP // 30194
AM=M+1 // 30195
A=A-1 // 30196
M=D // 30197
// call Memory.alloc
@6 // 30198
D=A // 30199
@14 // 30200
M=D // 30201
@Memory.alloc // 30202
D=A // 30203
@13 // 30204
M=D // 30205
@DirectionalLight.new.ret.0 // 30206
D=A // 30207
@CALL // 30208
0;JMP // 30209
(DirectionalLight.new.ret.0)
@SP // 30210
AM=M-1 // 30211
D=M // 30212
@3 // 30213
M=D // 30214

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 30215
AM=M+1 // 30216
A=A-1 // 30217
M=-1 // 30218
// call Number.new
@6 // 30219
D=A // 30220
@14 // 30221
M=D // 30222
@Number.new // 30223
D=A // 30224
@13 // 30225
M=D // 30226
@DirectionalLight.new.ret.1 // 30227
D=A // 30228
@CALL // 30229
0;JMP // 30230
(DirectionalLight.new.ret.1)
@SP // 30231
AM=M-1 // 30232
D=M // 30233
@LCL // 30234
A=M // 30235
M=D // 30236

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.getOneTwentieth}}
//  pop:  PopInstruction{address=local 1}
//}

// call Main.getOneTwentieth
@5 // 30237
D=A // 30238
@14 // 30239
M=D // 30240
@Main.getOneTwentieth // 30241
D=A // 30242
@13 // 30243
M=D // 30244
@DirectionalLight.new.ret.2 // 30245
D=A // 30246
@CALL // 30247
0;JMP // 30248
(DirectionalLight.new.ret.2)
@SP // 30249
AM=M-1 // 30250
D=M // 30251
@LCL // 30252
A=M+1 // 30253
M=D // 30254

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 30255
A=M // 30256
D=M // 30257
@THIS // 30258
A=M // 30259
M=D // 30260

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 30261
A=M+1 // 30262
D=M // 30263
@THIS // 30264
A=M+1 // 30265
M=D // 30266

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 30267
A=M // 30268
D=M // 30269
@SP // 30270
AM=M+1 // 30271
A=A-1 // 30272
M=D // 30273
// call Vec3.clone
@6 // 30274
D=A // 30275
@14 // 30276
M=D // 30277
@Vec3.clone // 30278
D=A // 30279
@13 // 30280
M=D // 30281
@DirectionalLight.new.ret.3 // 30282
D=A // 30283
@CALL // 30284
0;JMP // 30285
(DirectionalLight.new.ret.3)
@SP // 30286
AM=M-1 // 30287
D=M // 30288
@THIS // 30289
A=M+1 // 30290
A=A+1 // 30291
M=D // 30292

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30293
A=M+1 // 30294
A=A+1 // 30295
D=M // 30296
@SP // 30297
AM=M+1 // 30298
A=A-1 // 30299
M=D // 30300
@LCL // 30301
A=M // 30302
D=M // 30303
@SP // 30304
AM=M+1 // 30305
A=A-1 // 30306
M=D // 30307
// call Vec3.do_scale
@7 // 30308
D=A // 30309
@14 // 30310
M=D // 30311
@Vec3.do_scale // 30312
D=A // 30313
@13 // 30314
M=D // 30315
@DirectionalLight.new.ret.4 // 30316
D=A // 30317
@CALL // 30318
0;JMP // 30319
(DirectionalLight.new.ret.4)
@SP // 30320
M=M-1 // 30321

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=this 3}
//}

@THIS // 30322
A=M+1 // 30323
A=A+1 // 30324
D=M // 30325
@SP // 30326
AM=M+1 // 30327
A=A-1 // 30328
M=D // 30329
// call Vec3.clone
@6 // 30330
D=A // 30331
@14 // 30332
M=D // 30333
@Vec3.clone // 30334
D=A // 30335
@13 // 30336
M=D // 30337
@DirectionalLight.new.ret.5 // 30338
D=A // 30339
@CALL // 30340
0;JMP // 30341
(DirectionalLight.new.ret.5)
@SP // 30342
AM=M-1 // 30343
D=M // 30344
@THIS // 30345
A=M+1 // 30346
A=A+1 // 30347
A=A+1 // 30348
M=D // 30349

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3"), PushInstruction("local 1")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30350
A=M+1 // 30351
A=A+1 // 30352
A=A+1 // 30353
D=M // 30354
@SP // 30355
AM=M+1 // 30356
A=A-1 // 30357
M=D // 30358
@LCL // 30359
A=M+1 // 30360
D=M // 30361
@SP // 30362
AM=M+1 // 30363
A=A-1 // 30364
M=D // 30365
// call Vec3.do_scale
@7 // 30366
D=A // 30367
@14 // 30368
M=D // 30369
@Vec3.do_scale // 30370
D=A // 30371
@13 // 30372
M=D // 30373
@DirectionalLight.new.ret.6 // 30374
D=A // 30375
@CALL // 30376
0;JMP // 30377
(DirectionalLight.new.ret.6)
@SP // 30378
M=M-1 // 30379

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30380
A=M // 30381
D=M // 30382
@SP // 30383
AM=M+1 // 30384
A=A-1 // 30385
M=D // 30386
// call Number.dispose
@6 // 30387
D=A // 30388
@14 // 30389
M=D // 30390
@Number.dispose // 30391
D=A // 30392
@13 // 30393
M=D // 30394
@DirectionalLight.new.ret.7 // 30395
D=A // 30396
@CALL // 30397
0;JMP // 30398
(DirectionalLight.new.ret.7)
@SP // 30399
M=M-1 // 30400

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30401
A=M+1 // 30402
D=M // 30403
@SP // 30404
AM=M+1 // 30405
A=A-1 // 30406
M=D // 30407
// call Number.dispose
@6 // 30408
D=A // 30409
@14 // 30410
M=D // 30411
@Number.dispose // 30412
D=A // 30413
@13 // 30414
M=D // 30415
@DirectionalLight.new.ret.8 // 30416
D=A // 30417
@CALL // 30418
0;JMP // 30419
(DirectionalLight.new.ret.8)
@SP // 30420
M=M-1 // 30421

////PushInstruction("pointer 0")
@3 // 30422
D=M // 30423
@SP // 30424
AM=M+1 // 30425
A=A-1 // 30426
M=D // 30427
@RETURN // 30428
0;JMP // 30429

////FunctionInstruction{functionName='Scene.getHeight', numLocals=0, funcMapping={Scene.getNumLights=0, Scene.getLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getHeight with 0
(Scene.getHeight)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30430
A=M // 30431
D=M // 30432
@3 // 30433
M=D // 30434

////PushInstruction("this 1")
@THIS // 30435
A=M+1 // 30436
D=M // 30437
@SP // 30438
AM=M+1 // 30439
A=A-1 // 30440
M=D // 30441
@RETURN // 30442
0;JMP // 30443

////FunctionInstruction{functionName='Vec3.do_normalize', numLocals=3, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0, Vec3.getZ=0}}
// function Vec3.do_normalize with 3
(Vec3.do_normalize)
@3 // 30444
D=A // 30445
@SP // 30446
AM=D+M // 30447
A=A-1 // 30448
M=0 // 30449
A=A-1 // 30450
M=0 // 30451
A=A-1 // 30452
M=0 // 30453

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30454
A=M // 30455
D=M // 30456
@3 // 30457
M=D // 30458

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 30459
A=M // 30460
D=M // 30461
@SP // 30462
AM=M+1 // 30463
A=A-1 // 30464
M=D // 30465
// call Number.clone
@6 // 30466
D=A // 30467
@14 // 30468
M=D // 30469
@Number.clone // 30470
D=A // 30471
@13 // 30472
M=D // 30473
@Vec3.do_normalize.ret.0 // 30474
D=A // 30475
@CALL // 30476
0;JMP // 30477
(Vec3.do_normalize.ret.0)
@SP // 30478
AM=M-1 // 30479
D=M // 30480
@LCL // 30481
A=M // 30482
M=D // 30483

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 0")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30484
A=M // 30485
D=M // 30486
@SP // 30487
AM=M+1 // 30488
A=A-1 // 30489
M=D // 30490
@THIS // 30491
A=M // 30492
D=M // 30493
@SP // 30494
AM=M+1 // 30495
A=A-1 // 30496
M=D // 30497
// call Number.do_mul
@7 // 30498
D=A // 30499
@14 // 30500
M=D // 30501
@Number.do_mul // 30502
D=A // 30503
@13 // 30504
M=D // 30505
@Vec3.do_normalize.ret.1 // 30506
D=A // 30507
@CALL // 30508
0;JMP // 30509
(Vec3.do_normalize.ret.1)
@SP // 30510
M=M-1 // 30511

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 30512
A=M+1 // 30513
D=M // 30514
@SP // 30515
AM=M+1 // 30516
A=A-1 // 30517
M=D // 30518
// call Number.clone
@6 // 30519
D=A // 30520
@14 // 30521
M=D // 30522
@Number.clone // 30523
D=A // 30524
@13 // 30525
M=D // 30526
@Vec3.do_normalize.ret.2 // 30527
D=A // 30528
@CALL // 30529
0;JMP // 30530
(Vec3.do_normalize.ret.2)
@SP // 30531
AM=M-1 // 30532
D=M // 30533
@LCL // 30534
A=M+1 // 30535
M=D // 30536

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30537
A=M+1 // 30538
D=M // 30539
@SP // 30540
AM=M+1 // 30541
A=A-1 // 30542
M=D // 30543
@THIS // 30544
A=M+1 // 30545
D=M // 30546
@SP // 30547
AM=M+1 // 30548
A=A-1 // 30549
M=D // 30550
// call Number.do_mul
@7 // 30551
D=A // 30552
@14 // 30553
M=D // 30554
@Number.do_mul // 30555
D=A // 30556
@13 // 30557
M=D // 30558
@Vec3.do_normalize.ret.3 // 30559
D=A // 30560
@CALL // 30561
0;JMP // 30562
(Vec3.do_normalize.ret.3)
@SP // 30563
M=M-1 // 30564

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 30565
A=M+1 // 30566
A=A+1 // 30567
D=M // 30568
@SP // 30569
AM=M+1 // 30570
A=A-1 // 30571
M=D // 30572
// call Number.clone
@6 // 30573
D=A // 30574
@14 // 30575
M=D // 30576
@Number.clone // 30577
D=A // 30578
@13 // 30579
M=D // 30580
@Vec3.do_normalize.ret.4 // 30581
D=A // 30582
@CALL // 30583
0;JMP // 30584
(Vec3.do_normalize.ret.4)
@SP // 30585
AM=M-1 // 30586
D=M // 30587
@LCL // 30588
A=M+1 // 30589
A=A+1 // 30590
M=D // 30591

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("this 2")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30592
A=M+1 // 30593
A=A+1 // 30594
D=M // 30595
@SP // 30596
AM=M+1 // 30597
A=A-1 // 30598
M=D // 30599
@THIS // 30600
A=M+1 // 30601
A=A+1 // 30602
D=M // 30603
@SP // 30604
AM=M+1 // 30605
A=A-1 // 30606
M=D // 30607
// call Number.do_mul
@7 // 30608
D=A // 30609
@14 // 30610
M=D // 30611
@Number.do_mul // 30612
D=A // 30613
@13 // 30614
M=D // 30615
@Vec3.do_normalize.ret.5 // 30616
D=A // 30617
@CALL // 30618
0;JMP // 30619
(Vec3.do_normalize.ret.5)
@SP // 30620
M=M-1 // 30621

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30622
A=M // 30623
D=M // 30624
@SP // 30625
AM=M+1 // 30626
A=A-1 // 30627
M=D // 30628
@LCL // 30629
A=M+1 // 30630
D=M // 30631
@SP // 30632
AM=M+1 // 30633
A=A-1 // 30634
M=D // 30635
// call Number.do_add
@7 // 30636
D=A // 30637
@14 // 30638
M=D // 30639
@Number.do_add // 30640
D=A // 30641
@13 // 30642
M=D // 30643
@Vec3.do_normalize.ret.6 // 30644
D=A // 30645
@CALL // 30646
0;JMP // 30647
(Vec3.do_normalize.ret.6)
@SP // 30648
M=M-1 // 30649

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30650
A=M // 30651
D=M // 30652
@SP // 30653
AM=M+1 // 30654
A=A-1 // 30655
M=D // 30656
@LCL // 30657
A=M+1 // 30658
A=A+1 // 30659
D=M // 30660
@SP // 30661
AM=M+1 // 30662
A=A-1 // 30663
M=D // 30664
// call Number.do_add
@7 // 30665
D=A // 30666
@14 // 30667
M=D // 30668
@Number.do_add // 30669
D=A // 30670
@13 // 30671
M=D // 30672
@Vec3.do_normalize.ret.7 // 30673
D=A // 30674
@CALL // 30675
0;JMP // 30676
(Vec3.do_normalize.ret.7)
@SP // 30677
M=M-1 // 30678

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30679
A=M // 30680
D=M // 30681
@SP // 30682
AM=M+1 // 30683
A=A-1 // 30684
M=D // 30685
// call Number.do_sqrt
@6 // 30686
D=A // 30687
@14 // 30688
M=D // 30689
@Number.do_sqrt // 30690
D=A // 30691
@13 // 30692
M=D // 30693
@Vec3.do_normalize.ret.8 // 30694
D=A // 30695
@CALL // 30696
0;JMP // 30697
(Vec3.do_normalize.ret.8)
@SP // 30698
M=M-1 // 30699

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30700
A=M // 30701
D=M // 30702
@SP // 30703
AM=M+1 // 30704
A=A-1 // 30705
M=D // 30706
@LCL // 30707
A=M // 30708
D=M // 30709
@SP // 30710
AM=M+1 // 30711
A=A-1 // 30712
M=D // 30713
// call Number.do_div
@7 // 30714
D=A // 30715
@14 // 30716
M=D // 30717
@Number.do_div // 30718
D=A // 30719
@13 // 30720
M=D // 30721
@Vec3.do_normalize.ret.9 // 30722
D=A // 30723
@CALL // 30724
0;JMP // 30725
(Vec3.do_normalize.ret.9)
@SP // 30726
M=M-1 // 30727

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30728
A=M+1 // 30729
D=M // 30730
@SP // 30731
AM=M+1 // 30732
A=A-1 // 30733
M=D // 30734
@LCL // 30735
A=M // 30736
D=M // 30737
@SP // 30738
AM=M+1 // 30739
A=A-1 // 30740
M=D // 30741
// call Number.do_div
@7 // 30742
D=A // 30743
@14 // 30744
M=D // 30745
@Number.do_div // 30746
D=A // 30747
@13 // 30748
M=D // 30749
@Vec3.do_normalize.ret.10 // 30750
D=A // 30751
@CALL // 30752
0;JMP // 30753
(Vec3.do_normalize.ret.10)
@SP // 30754
M=M-1 // 30755

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30756
A=M+1 // 30757
A=A+1 // 30758
D=M // 30759
@SP // 30760
AM=M+1 // 30761
A=A-1 // 30762
M=D // 30763
@LCL // 30764
A=M // 30765
D=M // 30766
@SP // 30767
AM=M+1 // 30768
A=A-1 // 30769
M=D // 30770
// call Number.do_div
@7 // 30771
D=A // 30772
@14 // 30773
M=D // 30774
@Number.do_div // 30775
D=A // 30776
@13 // 30777
M=D // 30778
@Vec3.do_normalize.ret.11 // 30779
D=A // 30780
@CALL // 30781
0;JMP // 30782
(Vec3.do_normalize.ret.11)
@SP // 30783
M=M-1 // 30784

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30785
A=M // 30786
D=M // 30787
@SP // 30788
AM=M+1 // 30789
A=A-1 // 30790
M=D // 30791
// call Number.dispose
@6 // 30792
D=A // 30793
@14 // 30794
M=D // 30795
@Number.dispose // 30796
D=A // 30797
@13 // 30798
M=D // 30799
@Vec3.do_normalize.ret.12 // 30800
D=A // 30801
@CALL // 30802
0;JMP // 30803
(Vec3.do_normalize.ret.12)
@SP // 30804
M=M-1 // 30805

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30806
A=M+1 // 30807
D=M // 30808
@SP // 30809
AM=M+1 // 30810
A=A-1 // 30811
M=D // 30812
// call Number.dispose
@6 // 30813
D=A // 30814
@14 // 30815
M=D // 30816
@Number.dispose // 30817
D=A // 30818
@13 // 30819
M=D // 30820
@Vec3.do_normalize.ret.13 // 30821
D=A // 30822
@CALL // 30823
0;JMP // 30824
(Vec3.do_normalize.ret.13)
@SP // 30825
M=M-1 // 30826

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30827
A=M+1 // 30828
A=A+1 // 30829
D=M // 30830
@SP // 30831
AM=M+1 // 30832
A=A-1 // 30833
M=D // 30834
// call Number.dispose
@6 // 30835
D=A // 30836
@14 // 30837
M=D // 30838
@Number.dispose // 30839
D=A // 30840
@13 // 30841
M=D // 30842
@Vec3.do_normalize.ret.14 // 30843
D=A // 30844
@CALL // 30845
0;JMP // 30846
(Vec3.do_normalize.ret.14)
@SP // 30847
M=M-1 // 30848

////PushInstruction("constant 0")
@SP // 30849
AM=M+1 // 30850
A=A-1 // 30851
M=0 // 30852
@RETURN // 30853
0;JMP // 30854

////FunctionInstruction{functionName='Int32.do_left_shift_bytes_div', numLocals=11, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=34, Int32.do_mul=1, Int32.nlz_u4=1, Int32.xor=0, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.getParts=0, Int32.clone=2, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_left_shift_bytes_div with 11
(Int32.do_left_shift_bytes_div)
@11 // 30855
D=A // 30856
@SP // 30857
AM=D+M // 30858
A=A-1 // 30859
M=0 // 30860
A=A-1 // 30861
M=0 // 30862
A=A-1 // 30863
M=0 // 30864
A=A-1 // 30865
M=0 // 30866
A=A-1 // 30867
M=0 // 30868
A=A-1 // 30869
M=0 // 30870
A=A-1 // 30871
M=0 // 30872
A=A-1 // 30873
M=0 // 30874
A=A-1 // 30875
M=0 // 30876
A=A-1 // 30877
M=0 // 30878
A=A-1 // 30879
M=0 // 30880

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30881
A=M // 30882
D=M // 30883
@3 // 30884
M=D // 30885

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 30886
A=M+1 // 30887
A=A+1 // 30888
M=0 // 30889

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 30890
A=M+1 // 30891
A=A+1 // 30892
A=A+1 // 30893
M=0 // 30894

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.is_negative}}], call=CallInstruction{Int32.xor}}
//  pop:  PopInstruction{address=local 4}
//}

@3 // 30895
D=M // 30896
@SP // 30897
AM=M+1 // 30898
A=A-1 // 30899
M=D // 30900
// call Int32.is_negative
@6 // 30901
D=A // 30902
@14 // 30903
M=D // 30904
@Int32.is_negative // 30905
D=A // 30906
@13 // 30907
M=D // 30908
@Int32.do_left_shift_bytes_div.ret.0 // 30909
D=A // 30910
@CALL // 30911
0;JMP // 30912
(Int32.do_left_shift_bytes_div.ret.0)
@ARG // 30913
A=M+1 // 30914
A=A+1 // 30915
D=M // 30916
@SP // 30917
AM=M+1 // 30918
A=A-1 // 30919
M=D // 30920
// call Int32.is_negative
@6 // 30921
D=A // 30922
@14 // 30923
M=D // 30924
@Int32.is_negative // 30925
D=A // 30926
@13 // 30927
M=D // 30928
@Int32.do_left_shift_bytes_div.ret.1 // 30929
D=A // 30930
@CALL // 30931
0;JMP // 30932
(Int32.do_left_shift_bytes_div.ret.1)
// call Int32.xor
@7 // 30933
D=A // 30934
@14 // 30935
M=D // 30936
@Int32.xor // 30937
D=A // 30938
@13 // 30939
M=D // 30940
@Int32.do_left_shift_bytes_div.ret.2 // 30941
D=A // 30942
@CALL // 30943
0;JMP // 30944
(Int32.do_left_shift_bytes_div.ret.2)
@LCL // 30945
D=M // 30946
@4 // 30947
A=D+A // 30948
D=A // 30949
@R13 // 30950
M=D // 30951
@SP // 30952
AM=M-1 // 30953
D=M // 30954
@R13 // 30955
A=M // 30956
M=D // 30957

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE1}}
@3 // 30958
D=M // 30959
@SP // 30960
AM=M+1 // 30961
A=A-1 // 30962
M=D // 30963
// call Int32.is_negative
@6 // 30964
D=A // 30965
@14 // 30966
M=D // 30967
@Int32.is_negative // 30968
D=A // 30969
@13 // 30970
M=D // 30971
@Int32.do_left_shift_bytes_div.ret.3 // 30972
D=A // 30973
@CALL // 30974
0;JMP // 30975
(Int32.do_left_shift_bytes_div.ret.3)
@SP // 30976
AM=M-1 // 30977
D=M // 30978
@Int32.do_left_shift_bytes_div$IF_TRUE1 // 30979
D;JNE // 30980

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE1}
// goto Int32.do_left_shift_bytes_div$IF_FALSE1
@Int32.do_left_shift_bytes_div$IF_FALSE1 // 30981
0;JMP // 30982

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE1}
// label Int32.do_left_shift_bytes_div$IF_TRUE1
(Int32.do_left_shift_bytes_div$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@3 // 30983
D=M // 30984
@SP // 30985
AM=M+1 // 30986
A=A-1 // 30987
M=D // 30988
// call Int32.clone
@6 // 30989
D=A // 30990
@14 // 30991
M=D // 30992
@Int32.clone // 30993
D=A // 30994
@13 // 30995
M=D // 30996
@Int32.do_left_shift_bytes_div.ret.4 // 30997
D=A // 30998
@CALL // 30999
0;JMP // 31000
(Int32.do_left_shift_bytes_div.ret.4)
@SP // 31001
AM=M-1 // 31002
D=M // 31003
@LCL // 31004
A=M+1 // 31005
A=A+1 // 31006
M=D // 31007

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31008
A=M+1 // 31009
A=A+1 // 31010
D=M // 31011
@SP // 31012
AM=M+1 // 31013
A=A-1 // 31014
M=D // 31015
// call Int32.do_abs
@6 // 31016
D=A // 31017
@14 // 31018
M=D // 31019
@Int32.do_abs // 31020
D=A // 31021
@13 // 31022
M=D // 31023
@Int32.do_left_shift_bytes_div.ret.5 // 31024
D=A // 31025
@CALL // 31026
0;JMP // 31027
(Int32.do_left_shift_bytes_div.ret.5)
@SP // 31028
M=M-1 // 31029

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 31030
A=M+1 // 31031
A=A+1 // 31032
D=M // 31033
@SP // 31034
AM=M+1 // 31035
A=A-1 // 31036
M=D // 31037
// call Int32.getParts
@6 // 31038
D=A // 31039
@14 // 31040
M=D // 31041
@Int32.getParts // 31042
D=A // 31043
@13 // 31044
M=D // 31045
@Int32.do_left_shift_bytes_div.ret.6 // 31046
D=A // 31047
@CALL // 31048
0;JMP // 31049
(Int32.do_left_shift_bytes_div.ret.6)
@SP // 31050
AM=M-1 // 31051
D=M // 31052
@LCL // 31053
A=M // 31054
M=D // 31055

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END1}
// goto Int32.do_left_shift_bytes_div$IF_END1
@Int32.do_left_shift_bytes_div$IF_END1 // 31056
0;JMP // 31057

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE1}
// label Int32.do_left_shift_bytes_div$IF_FALSE1
(Int32.do_left_shift_bytes_div$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("this 0")
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 31058
A=M // 31059
D=M // 31060
@LCL // 31061
A=M // 31062
M=D // 31063

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END1}
// label Int32.do_left_shift_bytes_div$IF_END1
(Int32.do_left_shift_bytes_div$IF_END1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE2}}
@ARG // 31064
A=M+1 // 31065
A=A+1 // 31066
D=M // 31067
@SP // 31068
AM=M+1 // 31069
A=A-1 // 31070
M=D // 31071
// call Int32.is_negative
@6 // 31072
D=A // 31073
@14 // 31074
M=D // 31075
@Int32.is_negative // 31076
D=A // 31077
@13 // 31078
M=D // 31079
@Int32.do_left_shift_bytes_div.ret.7 // 31080
D=A // 31081
@CALL // 31082
0;JMP // 31083
(Int32.do_left_shift_bytes_div.ret.7)
@SP // 31084
AM=M-1 // 31085
D=M // 31086
@Int32.do_left_shift_bytes_div$IF_TRUE2 // 31087
D;JNE // 31088

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE2}
// goto Int32.do_left_shift_bytes_div$IF_FALSE2
@Int32.do_left_shift_bytes_div$IF_FALSE2 // 31089
0;JMP // 31090

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE2}
// label Int32.do_left_shift_bytes_div$IF_TRUE2
(Int32.do_left_shift_bytes_div$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 31091
A=M+1 // 31092
A=A+1 // 31093
D=M // 31094
@SP // 31095
AM=M+1 // 31096
A=A-1 // 31097
M=D // 31098
// call Int32.clone
@6 // 31099
D=A // 31100
@14 // 31101
M=D // 31102
@Int32.clone // 31103
D=A // 31104
@13 // 31105
M=D // 31106
@Int32.do_left_shift_bytes_div.ret.8 // 31107
D=A // 31108
@CALL // 31109
0;JMP // 31110
(Int32.do_left_shift_bytes_div.ret.8)
@SP // 31111
AM=M-1 // 31112
D=M // 31113
@LCL // 31114
A=M+1 // 31115
A=A+1 // 31116
A=A+1 // 31117
M=D // 31118

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31119
A=M+1 // 31120
A=A+1 // 31121
A=A+1 // 31122
D=M // 31123
@SP // 31124
AM=M+1 // 31125
A=A-1 // 31126
M=D // 31127
// call Int32.do_abs
@6 // 31128
D=A // 31129
@14 // 31130
M=D // 31131
@Int32.do_abs // 31132
D=A // 31133
@13 // 31134
M=D // 31135
@Int32.do_left_shift_bytes_div.ret.9 // 31136
D=A // 31137
@CALL // 31138
0;JMP // 31139
(Int32.do_left_shift_bytes_div.ret.9)
@SP // 31140
M=M-1 // 31141

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 31142
A=M+1 // 31143
A=A+1 // 31144
A=A+1 // 31145
D=M // 31146
@SP // 31147
AM=M+1 // 31148
A=A-1 // 31149
M=D // 31150
// call Int32.getParts
@6 // 31151
D=A // 31152
@14 // 31153
M=D // 31154
@Int32.getParts // 31155
D=A // 31156
@13 // 31157
M=D // 31158
@Int32.do_left_shift_bytes_div.ret.10 // 31159
D=A // 31160
@CALL // 31161
0;JMP // 31162
(Int32.do_left_shift_bytes_div.ret.10)
@SP // 31163
AM=M-1 // 31164
D=M // 31165
@LCL // 31166
A=M+1 // 31167
M=D // 31168

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END2}
// goto Int32.do_left_shift_bytes_div$IF_END2
@Int32.do_left_shift_bytes_div$IF_END2 // 31169
0;JMP // 31170

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE2}
// label Int32.do_left_shift_bytes_div$IF_FALSE2
(Int32.do_left_shift_bytes_div$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 31171
A=M+1 // 31172
A=A+1 // 31173
D=M // 31174
@SP // 31175
AM=M+1 // 31176
A=A-1 // 31177
M=D // 31178
// call Int32.getParts
@6 // 31179
D=A // 31180
@14 // 31181
M=D // 31182
@Int32.getParts // 31183
D=A // 31184
@13 // 31185
M=D // 31186
@Int32.do_left_shift_bytes_div.ret.11 // 31187
D=A // 31188
@CALL // 31189
0;JMP // 31190
(Int32.do_left_shift_bytes_div.ret.11)
@SP // 31191
AM=M-1 // 31192
D=M // 31193
@LCL // 31194
A=M+1 // 31195
M=D // 31196

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END2}
// label Int32.do_left_shift_bytes_div$IF_END2
(Int32.do_left_shift_bytes_div$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 5}
//}

@8 // 31197
D=A // 31198
@SP // 31199
AM=M+1 // 31200
A=A-1 // 31201
M=D // 31202
// call Array.new
@6 // 31203
D=A // 31204
@14 // 31205
M=D // 31206
@Array.new // 31207
D=A // 31208
@13 // 31209
M=D // 31210
@Int32.do_left_shift_bytes_div.ret.12 // 31211
D=A // 31212
@CALL // 31213
0;JMP // 31214
(Int32.do_left_shift_bytes_div.ret.12)
@LCL // 31215
D=M // 31216
@5 // 31217
A=D+A // 31218
D=A // 31219
@R13 // 31220
M=D // 31221
@SP // 31222
AM=M-1 // 31223
D=M // 31224
@R13 // 31225
A=M // 31226
M=D // 31227

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE3}}
@Int32.do_left_shift_bytes_div.EQ.123 // 31228
D=A // 31229
@SP // 31230
AM=M+1 // 31231
A=A-1 // 31232
M=D // 31233
@ARG // 31234
A=M+1 // 31235
D=M // 31236
@DO_EQ // 31237
0;JMP // 31238
(Int32.do_left_shift_bytes_div.EQ.123)
@Int32.do_left_shift_bytes_div$IF_TRUE3 // 31239
D;JNE // 31240

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE3}
// goto Int32.do_left_shift_bytes_div$IF_FALSE3
@Int32.do_left_shift_bytes_div$IF_FALSE3 // 31241
0;JMP // 31242

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE3}
// label Int32.do_left_shift_bytes_div$IF_TRUE3
(Int32.do_left_shift_bytes_div$IF_TRUE3)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 0"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 31243
D=M // 31244
@5 // 31245
A=D+A // 31246
D=M // 31247
@SP // 31248
AM=M+1 // 31249
A=A-1 // 31250
M=D // 31251
@LCL // 31252
A=M // 31253
D=M // 31254
@SP // 31255
AM=M+1 // 31256
A=A-1 // 31257
M=D // 31258
@ARG // 31259
A=M+1 // 31260
D=M // 31261
@SP // 31262
AM=M-1 // 31263
A=D+M // 31264
D=M // 31265
@SP // 31266
AM=M-1 // 31267
A=M // 31268
M=D // 31269

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END3}
// goto Int32.do_left_shift_bytes_div$IF_END3
@Int32.do_left_shift_bytes_div$IF_END3 // 31270
0;JMP // 31271

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE3}
// label Int32.do_left_shift_bytes_div$IF_FALSE3
(Int32.do_left_shift_bytes_div$IF_FALSE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 31272
D=M // 31273
@5 // 31274
A=D+A // 31275
D=M // 31276
@SP // 31277
AM=M+1 // 31278
A=A-1 // 31279
M=D // 31280
D=0 // 31281
@SP // 31282
AM=M-1 // 31283
A=M // 31284
M=D // 31285

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END3}
// label Int32.do_left_shift_bytes_div$IF_END3
(Int32.do_left_shift_bytes_div$IF_END3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE4}}
@Int32.do_left_shift_bytes_div.LT.124 // 31286
D=A // 31287
@SP // 31288
AM=M+1 // 31289
A=A-1 // 31290
M=D // 31291
@ARG // 31292
A=M+1 // 31293
D=M // 31294
@2 // 31295
D=D-A // 31296
@DO_LT // 31297
0;JMP // 31298
(Int32.do_left_shift_bytes_div.LT.124)
@Int32.do_left_shift_bytes_div$IF_TRUE4 // 31299
D;JNE // 31300

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE4}
// goto Int32.do_left_shift_bytes_div$IF_FALSE4
@Int32.do_left_shift_bytes_div$IF_FALSE4 // 31301
0;JMP // 31302

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE4}
// label Int32.do_left_shift_bytes_div$IF_TRUE4
(Int32.do_left_shift_bytes_div$IF_TRUE4)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 1"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 31303
D=M // 31304
@5 // 31305
A=D+A // 31306
D=M // 31307
@SP // 31308
AM=M+1 // 31309
A=A-1 // 31310
M=D+1 // 31311
@LCL // 31312
A=M // 31313
D=M // 31314
@SP // 31315
AM=M+1 // 31316
A=A-1 // 31317
M=D // 31318
@ARG // 31319
A=M+1 // 31320
D=M // 31321
D=D-1 // 31322
D=-D // 31323
@SP // 31324
AM=M-1 // 31325
A=D+M // 31326
D=M // 31327
@SP // 31328
AM=M-1 // 31329
A=M // 31330
M=D // 31331

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END4}
// goto Int32.do_left_shift_bytes_div$IF_END4
@Int32.do_left_shift_bytes_div$IF_END4 // 31332
0;JMP // 31333

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE4}
// label Int32.do_left_shift_bytes_div$IF_FALSE4
(Int32.do_left_shift_bytes_div$IF_FALSE4)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 31334
D=M // 31335
@5 // 31336
A=D+A // 31337
D=M // 31338
@SP // 31339
AM=M+1 // 31340
A=A-1 // 31341
M=D+1 // 31342
D=0 // 31343
@SP // 31344
AM=M-1 // 31345
A=M // 31346
M=D // 31347

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END4}
// label Int32.do_left_shift_bytes_div$IF_END4
(Int32.do_left_shift_bytes_div$IF_END4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE5}}
@Int32.do_left_shift_bytes_div.LT.125 // 31348
D=A // 31349
@SP // 31350
AM=M+1 // 31351
A=A-1 // 31352
M=D // 31353
@ARG // 31354
A=M+1 // 31355
D=M // 31356
@3 // 31357
D=D-A // 31358
@DO_LT // 31359
0;JMP // 31360
(Int32.do_left_shift_bytes_div.LT.125)
@Int32.do_left_shift_bytes_div$IF_TRUE5 // 31361
D;JNE // 31362

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE5}
// goto Int32.do_left_shift_bytes_div$IF_FALSE5
@Int32.do_left_shift_bytes_div$IF_FALSE5 // 31363
0;JMP // 31364

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE5}
// label Int32.do_left_shift_bytes_div$IF_TRUE5
(Int32.do_left_shift_bytes_div$IF_TRUE5)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 2"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 31365
D=M // 31366
@5 // 31367
A=D+A // 31368
D=M // 31369
@2 // 31370
D=D+A // 31371
@SP // 31372
AM=M+1 // 31373
A=A-1 // 31374
M=D // 31375
@LCL // 31376
A=M // 31377
D=M // 31378
@SP // 31379
AM=M+1 // 31380
A=A-1 // 31381
M=D // 31382
@ARG // 31383
A=M+1 // 31384
D=M // 31385
@2 // 31386
D=A-D // 31387
@SP // 31388
AM=M-1 // 31389
A=D+M // 31390
D=M // 31391
@SP // 31392
AM=M-1 // 31393
A=M // 31394
M=D // 31395

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END5}
// goto Int32.do_left_shift_bytes_div$IF_END5
@Int32.do_left_shift_bytes_div$IF_END5 // 31396
0;JMP // 31397

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE5}
// label Int32.do_left_shift_bytes_div$IF_FALSE5
(Int32.do_left_shift_bytes_div$IF_FALSE5)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 31398
D=M // 31399
@5 // 31400
A=D+A // 31401
D=M // 31402
@2 // 31403
D=D+A // 31404
@SP // 31405
AM=M+1 // 31406
A=A-1 // 31407
M=D // 31408
D=0 // 31409
@SP // 31410
AM=M-1 // 31411
A=M // 31412
M=D // 31413

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END5}
// label Int32.do_left_shift_bytes_div$IF_END5
(Int32.do_left_shift_bytes_div$IF_END5)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE6}}
@Int32.do_left_shift_bytes_div.LT.126 // 31414
D=A // 31415
@SP // 31416
AM=M+1 // 31417
A=A-1 // 31418
M=D // 31419
@ARG // 31420
A=M+1 // 31421
D=M // 31422
@4 // 31423
D=D-A // 31424
@DO_LT // 31425
0;JMP // 31426
(Int32.do_left_shift_bytes_div.LT.126)
@Int32.do_left_shift_bytes_div$IF_TRUE6 // 31427
D;JNE // 31428

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE6}
// goto Int32.do_left_shift_bytes_div$IF_FALSE6
@Int32.do_left_shift_bytes_div$IF_FALSE6 // 31429
0;JMP // 31430

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE6}
// label Int32.do_left_shift_bytes_div$IF_TRUE6
(Int32.do_left_shift_bytes_div$IF_TRUE6)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 3"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 31431
D=M // 31432
@5 // 31433
A=D+A // 31434
D=M // 31435
@3 // 31436
D=D+A // 31437
@SP // 31438
AM=M+1 // 31439
A=A-1 // 31440
M=D // 31441
@LCL // 31442
A=M // 31443
D=M // 31444
@SP // 31445
AM=M+1 // 31446
A=A-1 // 31447
M=D // 31448
@ARG // 31449
A=M+1 // 31450
D=M // 31451
@3 // 31452
D=A-D // 31453
@SP // 31454
AM=M-1 // 31455
A=D+M // 31456
D=M // 31457
@SP // 31458
AM=M-1 // 31459
A=M // 31460
M=D // 31461

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END6}
// goto Int32.do_left_shift_bytes_div$IF_END6
@Int32.do_left_shift_bytes_div$IF_END6 // 31462
0;JMP // 31463

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE6}
// label Int32.do_left_shift_bytes_div$IF_FALSE6
(Int32.do_left_shift_bytes_div$IF_FALSE6)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 31464
D=M // 31465
@5 // 31466
A=D+A // 31467
D=M // 31468
@3 // 31469
D=D+A // 31470
@SP // 31471
AM=M+1 // 31472
A=A-1 // 31473
M=D // 31474
D=0 // 31475
@SP // 31476
AM=M-1 // 31477
A=M // 31478
M=D // 31479

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END6}
// label Int32.do_left_shift_bytes_div$IF_END6
(Int32.do_left_shift_bytes_div$IF_END6)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE7}}
@Int32.do_left_shift_bytes_div.GT.127 // 31480
D=A // 31481
@SP // 31482
AM=M+1 // 31483
A=A-1 // 31484
M=D // 31485
@ARG // 31486
A=M+1 // 31487
D=M // 31488
@DO_GT // 31489
0;JMP // 31490
(Int32.do_left_shift_bytes_div.GT.127)
@Int32.do_left_shift_bytes_div$IF_TRUE7 // 31491
D;JNE // 31492

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE7}
// goto Int32.do_left_shift_bytes_div$IF_FALSE7
@Int32.do_left_shift_bytes_div$IF_FALSE7 // 31493
0;JMP // 31494

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE7}
// label Int32.do_left_shift_bytes_div$IF_TRUE7
(Int32.do_left_shift_bytes_div$IF_TRUE7)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 4"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 31495
D=M // 31496
@5 // 31497
A=D+A // 31498
D=M // 31499
@4 // 31500
D=D+A // 31501
@SP // 31502
AM=M+1 // 31503
A=A-1 // 31504
M=D // 31505
@LCL // 31506
A=M // 31507
D=M // 31508
@SP // 31509
AM=M+1 // 31510
A=A-1 // 31511
M=D // 31512
@ARG // 31513
A=M+1 // 31514
D=M // 31515
@4 // 31516
D=A-D // 31517
@SP // 31518
AM=M-1 // 31519
A=D+M // 31520
D=M // 31521
@SP // 31522
AM=M-1 // 31523
A=M // 31524
M=D // 31525

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END7}
// goto Int32.do_left_shift_bytes_div$IF_END7
@Int32.do_left_shift_bytes_div$IF_END7 // 31526
0;JMP // 31527

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE7}
// label Int32.do_left_shift_bytes_div$IF_FALSE7
(Int32.do_left_shift_bytes_div$IF_FALSE7)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 31528
D=M // 31529
@5 // 31530
A=D+A // 31531
D=M // 31532
@4 // 31533
D=D+A // 31534
@SP // 31535
AM=M+1 // 31536
A=A-1 // 31537
M=D // 31538
D=0 // 31539
@SP // 31540
AM=M-1 // 31541
A=M // 31542
M=D // 31543

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END7}
// label Int32.do_left_shift_bytes_div$IF_END7
(Int32.do_left_shift_bytes_div$IF_END7)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE8}}
@Int32.do_left_shift_bytes_div.GT.128 // 31544
D=A // 31545
@SP // 31546
AM=M+1 // 31547
A=A-1 // 31548
M=D // 31549
@ARG // 31550
A=M+1 // 31551
D=M // 31552
D=D-1 // 31553
@DO_GT // 31554
0;JMP // 31555
(Int32.do_left_shift_bytes_div.GT.128)
@Int32.do_left_shift_bytes_div$IF_TRUE8 // 31556
D;JNE // 31557

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE8}
// goto Int32.do_left_shift_bytes_div$IF_FALSE8
@Int32.do_left_shift_bytes_div$IF_FALSE8 // 31558
0;JMP // 31559

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE8}
// label Int32.do_left_shift_bytes_div$IF_TRUE8
(Int32.do_left_shift_bytes_div$IF_TRUE8)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 5"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 31560
D=M // 31561
@5 // 31562
A=D+A // 31563
D=M // 31564
@5 // 31565
D=D+A // 31566
@SP // 31567
AM=M+1 // 31568
A=A-1 // 31569
M=D // 31570
@LCL // 31571
A=M // 31572
D=M // 31573
@SP // 31574
AM=M+1 // 31575
A=A-1 // 31576
M=D // 31577
@ARG // 31578
A=M+1 // 31579
D=M // 31580
@5 // 31581
D=A-D // 31582
@SP // 31583
AM=M-1 // 31584
A=D+M // 31585
D=M // 31586
@SP // 31587
AM=M-1 // 31588
A=M // 31589
M=D // 31590

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END8}
// goto Int32.do_left_shift_bytes_div$IF_END8
@Int32.do_left_shift_bytes_div$IF_END8 // 31591
0;JMP // 31592

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE8}
// label Int32.do_left_shift_bytes_div$IF_FALSE8
(Int32.do_left_shift_bytes_div$IF_FALSE8)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 31593
D=M // 31594
@5 // 31595
A=D+A // 31596
D=M // 31597
@5 // 31598
D=D+A // 31599
@SP // 31600
AM=M+1 // 31601
A=A-1 // 31602
M=D // 31603
D=0 // 31604
@SP // 31605
AM=M-1 // 31606
A=M // 31607
M=D // 31608

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END8}
// label Int32.do_left_shift_bytes_div$IF_END8
(Int32.do_left_shift_bytes_div$IF_END8)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE9}}
@Int32.do_left_shift_bytes_div.GT.129 // 31609
D=A // 31610
@SP // 31611
AM=M+1 // 31612
A=A-1 // 31613
M=D // 31614
@ARG // 31615
A=M+1 // 31616
D=M // 31617
@2 // 31618
D=D-A // 31619
@DO_GT // 31620
0;JMP // 31621
(Int32.do_left_shift_bytes_div.GT.129)
@Int32.do_left_shift_bytes_div$IF_TRUE9 // 31622
D;JNE // 31623

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE9}
// goto Int32.do_left_shift_bytes_div$IF_FALSE9
@Int32.do_left_shift_bytes_div$IF_FALSE9 // 31624
0;JMP // 31625

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE9}
// label Int32.do_left_shift_bytes_div$IF_TRUE9
(Int32.do_left_shift_bytes_div$IF_TRUE9)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("constant 6"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 31626
D=M // 31627
@5 // 31628
A=D+A // 31629
D=M // 31630
@6 // 31631
D=D+A // 31632
@SP // 31633
AM=M+1 // 31634
A=A-1 // 31635
M=D // 31636
@LCL // 31637
A=M // 31638
D=M // 31639
@SP // 31640
AM=M+1 // 31641
A=A-1 // 31642
M=D // 31643
@ARG // 31644
A=M+1 // 31645
D=M // 31646
@6 // 31647
D=A-D // 31648
@SP // 31649
AM=M-1 // 31650
A=D+M // 31651
D=M // 31652
@SP // 31653
AM=M-1 // 31654
A=M // 31655
M=D // 31656

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END9}
// goto Int32.do_left_shift_bytes_div$IF_END9
@Int32.do_left_shift_bytes_div$IF_END9 // 31657
0;JMP // 31658

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE9}
// label Int32.do_left_shift_bytes_div$IF_FALSE9
(Int32.do_left_shift_bytes_div$IF_FALSE9)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 31659
D=M // 31660
@5 // 31661
A=D+A // 31662
D=M // 31663
@6 // 31664
D=D+A // 31665
@SP // 31666
AM=M+1 // 31667
A=A-1 // 31668
M=D // 31669
D=0 // 31670
@SP // 31671
AM=M-1 // 31672
A=M // 31673
M=D // 31674

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END9}
// label Int32.do_left_shift_bytes_div$IF_END9
(Int32.do_left_shift_bytes_div$IF_END9)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 31675
D=M // 31676
@5 // 31677
A=D+A // 31678
D=M // 31679
@7 // 31680
D=D+A // 31681
@SP // 31682
AM=M+1 // 31683
A=A-1 // 31684
M=D // 31685
D=0 // 31686
@SP // 31687
AM=M-1 // 31688
A=M // 31689
M=D // 31690

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 6}
//}

@16 // 31691
D=A // 31692
@SP // 31693
AM=M+1 // 31694
A=A-1 // 31695
M=D // 31696
// call Array.new
@6 // 31697
D=A // 31698
@14 // 31699
M=D // 31700
@Array.new // 31701
D=A // 31702
@13 // 31703
M=D // 31704
@Int32.do_left_shift_bytes_div.ret.13 // 31705
D=A // 31706
@CALL // 31707
0;JMP // 31708
(Int32.do_left_shift_bytes_div.ret.13)
@LCL // 31709
D=M // 31710
@6 // 31711
A=D+A // 31712
D=A // 31713
@R13 // 31714
M=D // 31715
@SP // 31716
AM=M-1 // 31717
D=M // 31718
@R13 // 31719
A=M // 31720
M=D // 31721

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 31722
D=M // 31723
@6 // 31724
A=D+A // 31725
D=M // 31726
@SP // 31727
AM=M+1 // 31728
A=A-1 // 31729
M=D // 31730
@LCL // 31731
D=M // 31732
@5 // 31733
A=D+A // 31734
D=M // 31735
@0 // 31736
A=D+A // 31737
D=M // 31738
@15 // 31739
D=D&A // 31740
@SP // 31741
AM=M-1 // 31742
A=M // 31743
M=D // 31744

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 31745
D=M // 31746
@6 // 31747
A=D+A // 31748
D=M // 31749
@SP // 31750
AM=M+1 // 31751
A=A-1 // 31752
M=D+1 // 31753
@LCL // 31754
D=M // 31755
@5 // 31756
A=D+A // 31757
D=M // 31758
@0 // 31759
A=D+A // 31760
D=M // 31761
@SP // 31762
AM=M+1 // 31763
A=A-1 // 31764
M=D // 31765
@4 // 31766
D=A // 31767
@SP // 31768
AM=M+1 // 31769
A=A-1 // 31770
M=D // 31771
// call Int32.arith_rightshift
@7 // 31772
D=A // 31773
@14 // 31774
M=D // 31775
@Int32.arith_rightshift // 31776
D=A // 31777
@13 // 31778
M=D // 31779
@Int32.do_left_shift_bytes_div.ret.14 // 31780
D=A // 31781
@CALL // 31782
0;JMP // 31783
(Int32.do_left_shift_bytes_div.ret.14)
@SP // 31784
AM=M-1 // 31785
D=M // 31786
@SP // 31787
AM=M-1 // 31788
A=M // 31789
M=D // 31790

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 31791
D=M // 31792
@6 // 31793
A=D+A // 31794
D=M // 31795
@2 // 31796
D=D+A // 31797
@SP // 31798
AM=M+1 // 31799
A=A-1 // 31800
M=D // 31801
@LCL // 31802
D=M // 31803
@5 // 31804
A=D+A // 31805
D=M // 31806
A=D+1 // 31807
D=M // 31808
@15 // 31809
D=D&A // 31810
@SP // 31811
AM=M-1 // 31812
A=M // 31813
M=D // 31814

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 31815
D=M // 31816
@6 // 31817
A=D+A // 31818
D=M // 31819
@3 // 31820
D=D+A // 31821
@SP // 31822
AM=M+1 // 31823
A=A-1 // 31824
M=D // 31825
@LCL // 31826
D=M // 31827
@5 // 31828
A=D+A // 31829
D=M // 31830
A=D+1 // 31831
D=M // 31832
@SP // 31833
AM=M+1 // 31834
A=A-1 // 31835
M=D // 31836
@4 // 31837
D=A // 31838
@SP // 31839
AM=M+1 // 31840
A=A-1 // 31841
M=D // 31842
// call Int32.arith_rightshift
@7 // 31843
D=A // 31844
@14 // 31845
M=D // 31846
@Int32.arith_rightshift // 31847
D=A // 31848
@13 // 31849
M=D // 31850
@Int32.do_left_shift_bytes_div.ret.15 // 31851
D=A // 31852
@CALL // 31853
0;JMP // 31854
(Int32.do_left_shift_bytes_div.ret.15)
@SP // 31855
AM=M-1 // 31856
D=M // 31857
@SP // 31858
AM=M-1 // 31859
A=M // 31860
M=D // 31861

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 31862
D=M // 31863
@6 // 31864
A=D+A // 31865
D=M // 31866
@4 // 31867
D=D+A // 31868
@SP // 31869
AM=M+1 // 31870
A=A-1 // 31871
M=D // 31872
@LCL // 31873
D=M // 31874
@5 // 31875
A=D+A // 31876
D=M // 31877
@2 // 31878
A=D+A // 31879
D=M // 31880
@15 // 31881
D=D&A // 31882
@SP // 31883
AM=M-1 // 31884
A=M // 31885
M=D // 31886

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 31887
D=M // 31888
@6 // 31889
A=D+A // 31890
D=M // 31891
@5 // 31892
D=D+A // 31893
@SP // 31894
AM=M+1 // 31895
A=A-1 // 31896
M=D // 31897
@LCL // 31898
D=M // 31899
@5 // 31900
A=D+A // 31901
D=M // 31902
@2 // 31903
A=D+A // 31904
D=M // 31905
@SP // 31906
AM=M+1 // 31907
A=A-1 // 31908
M=D // 31909
@4 // 31910
D=A // 31911
@SP // 31912
AM=M+1 // 31913
A=A-1 // 31914
M=D // 31915
// call Int32.arith_rightshift
@7 // 31916
D=A // 31917
@14 // 31918
M=D // 31919
@Int32.arith_rightshift // 31920
D=A // 31921
@13 // 31922
M=D // 31923
@Int32.do_left_shift_bytes_div.ret.16 // 31924
D=A // 31925
@CALL // 31926
0;JMP // 31927
(Int32.do_left_shift_bytes_div.ret.16)
@SP // 31928
AM=M-1 // 31929
D=M // 31930
@SP // 31931
AM=M-1 // 31932
A=M // 31933
M=D // 31934

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 31935
D=M // 31936
@6 // 31937
A=D+A // 31938
D=M // 31939
@6 // 31940
D=D+A // 31941
@SP // 31942
AM=M+1 // 31943
A=A-1 // 31944
M=D // 31945
@LCL // 31946
D=M // 31947
@5 // 31948
A=D+A // 31949
D=M // 31950
@3 // 31951
A=D+A // 31952
D=M // 31953
@15 // 31954
D=D&A // 31955
@SP // 31956
AM=M-1 // 31957
A=M // 31958
M=D // 31959

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 31960
D=M // 31961
@6 // 31962
A=D+A // 31963
D=M // 31964
@7 // 31965
D=D+A // 31966
@SP // 31967
AM=M+1 // 31968
A=A-1 // 31969
M=D // 31970
@LCL // 31971
D=M // 31972
@5 // 31973
A=D+A // 31974
D=M // 31975
@3 // 31976
A=D+A // 31977
D=M // 31978
@SP // 31979
AM=M+1 // 31980
A=A-1 // 31981
M=D // 31982
@4 // 31983
D=A // 31984
@SP // 31985
AM=M+1 // 31986
A=A-1 // 31987
M=D // 31988
// call Int32.arith_rightshift
@7 // 31989
D=A // 31990
@14 // 31991
M=D // 31992
@Int32.arith_rightshift // 31993
D=A // 31994
@13 // 31995
M=D // 31996
@Int32.do_left_shift_bytes_div.ret.17 // 31997
D=A // 31998
@CALL // 31999
0;JMP // 32000
(Int32.do_left_shift_bytes_div.ret.17)
@SP // 32001
AM=M-1 // 32002
D=M // 32003
@SP // 32004
AM=M-1 // 32005
A=M // 32006
M=D // 32007

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 4"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 8"),
//    binaryOp: "ADD"
//)}
@LCL // 32008
D=M // 32009
@6 // 32010
A=D+A // 32011
D=M // 32012
@8 // 32013
D=D+A // 32014
@SP // 32015
AM=M+1 // 32016
A=A-1 // 32017
M=D // 32018
@LCL // 32019
D=M // 32020
@5 // 32021
A=D+A // 32022
D=M // 32023
@4 // 32024
A=D+A // 32025
D=M // 32026
@15 // 32027
D=D&A // 32028
@SP // 32029
AM=M-1 // 32030
A=M // 32031
M=D // 32032

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 4"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 9"),
//    binaryOp: "ADD"
//)}
@LCL // 32033
D=M // 32034
@6 // 32035
A=D+A // 32036
D=M // 32037
@9 // 32038
D=D+A // 32039
@SP // 32040
AM=M+1 // 32041
A=A-1 // 32042
M=D // 32043
@LCL // 32044
D=M // 32045
@5 // 32046
A=D+A // 32047
D=M // 32048
@4 // 32049
A=D+A // 32050
D=M // 32051
@SP // 32052
AM=M+1 // 32053
A=A-1 // 32054
M=D // 32055
@4 // 32056
D=A // 32057
@SP // 32058
AM=M+1 // 32059
A=A-1 // 32060
M=D // 32061
// call Int32.arith_rightshift
@7 // 32062
D=A // 32063
@14 // 32064
M=D // 32065
@Int32.arith_rightshift // 32066
D=A // 32067
@13 // 32068
M=D // 32069
@Int32.do_left_shift_bytes_div.ret.18 // 32070
D=A // 32071
@CALL // 32072
0;JMP // 32073
(Int32.do_left_shift_bytes_div.ret.18)
@SP // 32074
AM=M-1 // 32075
D=M // 32076
@SP // 32077
AM=M-1 // 32078
A=M // 32079
M=D // 32080

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 5"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 10"),
//    binaryOp: "ADD"
//)}
@LCL // 32081
D=M // 32082
@6 // 32083
A=D+A // 32084
D=M // 32085
@10 // 32086
D=D+A // 32087
@SP // 32088
AM=M+1 // 32089
A=A-1 // 32090
M=D // 32091
@LCL // 32092
D=M // 32093
@5 // 32094
A=D+A // 32095
D=M // 32096
@5 // 32097
A=D+A // 32098
D=M // 32099
@15 // 32100
D=D&A // 32101
@SP // 32102
AM=M-1 // 32103
A=M // 32104
M=D // 32105

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 5"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 11"),
//    binaryOp: "ADD"
//)}
@LCL // 32106
D=M // 32107
@6 // 32108
A=D+A // 32109
D=M // 32110
@11 // 32111
D=D+A // 32112
@SP // 32113
AM=M+1 // 32114
A=A-1 // 32115
M=D // 32116
@LCL // 32117
D=M // 32118
@5 // 32119
A=D+A // 32120
D=M // 32121
@5 // 32122
A=D+A // 32123
D=M // 32124
@SP // 32125
AM=M+1 // 32126
A=A-1 // 32127
M=D // 32128
@4 // 32129
D=A // 32130
@SP // 32131
AM=M+1 // 32132
A=A-1 // 32133
M=D // 32134
// call Int32.arith_rightshift
@7 // 32135
D=A // 32136
@14 // 32137
M=D // 32138
@Int32.arith_rightshift // 32139
D=A // 32140
@13 // 32141
M=D // 32142
@Int32.do_left_shift_bytes_div.ret.19 // 32143
D=A // 32144
@CALL // 32145
0;JMP // 32146
(Int32.do_left_shift_bytes_div.ret.19)
@SP // 32147
AM=M-1 // 32148
D=M // 32149
@SP // 32150
AM=M-1 // 32151
A=M // 32152
M=D // 32153

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 6"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 12"),
//    binaryOp: "ADD"
//)}
@LCL // 32154
D=M // 32155
@6 // 32156
A=D+A // 32157
D=M // 32158
@12 // 32159
D=D+A // 32160
@SP // 32161
AM=M+1 // 32162
A=A-1 // 32163
M=D // 32164
@LCL // 32165
D=M // 32166
@5 // 32167
A=D+A // 32168
D=M // 32169
@6 // 32170
A=D+A // 32171
D=M // 32172
@15 // 32173
D=D&A // 32174
@SP // 32175
AM=M-1 // 32176
A=M // 32177
M=D // 32178

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 6"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 13"),
//    binaryOp: "ADD"
//)}
@LCL // 32179
D=M // 32180
@6 // 32181
A=D+A // 32182
D=M // 32183
@13 // 32184
D=D+A // 32185
@SP // 32186
AM=M+1 // 32187
A=A-1 // 32188
M=D // 32189
@LCL // 32190
D=M // 32191
@5 // 32192
A=D+A // 32193
D=M // 32194
@6 // 32195
A=D+A // 32196
D=M // 32197
@SP // 32198
AM=M+1 // 32199
A=A-1 // 32200
M=D // 32201
@4 // 32202
D=A // 32203
@SP // 32204
AM=M+1 // 32205
A=A-1 // 32206
M=D // 32207
// call Int32.arith_rightshift
@7 // 32208
D=A // 32209
@14 // 32210
M=D // 32211
@Int32.arith_rightshift // 32212
D=A // 32213
@13 // 32214
M=D // 32215
@Int32.do_left_shift_bytes_div.ret.20 // 32216
D=A // 32217
@CALL // 32218
0;JMP // 32219
(Int32.do_left_shift_bytes_div.ret.20)
@SP // 32220
AM=M-1 // 32221
D=M // 32222
@SP // 32223
AM=M-1 // 32224
A=M // 32225
M=D // 32226

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("constant 7"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 14"),
//    binaryOp: "ADD"
//)}
@LCL // 32227
D=M // 32228
@6 // 32229
A=D+A // 32230
D=M // 32231
@14 // 32232
D=D+A // 32233
@SP // 32234
AM=M+1 // 32235
A=A-1 // 32236
M=D // 32237
@LCL // 32238
D=M // 32239
@5 // 32240
A=D+A // 32241
D=M // 32242
@7 // 32243
A=D+A // 32244
D=M // 32245
@15 // 32246
D=D&A // 32247
@SP // 32248
AM=M-1 // 32249
A=M // 32250
M=D // 32251

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("constant 7"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "ADD"
//)}
@LCL // 32252
D=M // 32253
@6 // 32254
A=D+A // 32255
D=M // 32256
@15 // 32257
D=D+A // 32258
@SP // 32259
AM=M+1 // 32260
A=A-1 // 32261
M=D // 32262
@LCL // 32263
D=M // 32264
@5 // 32265
A=D+A // 32266
D=M // 32267
@7 // 32268
A=D+A // 32269
D=M // 32270
@SP // 32271
AM=M+1 // 32272
A=A-1 // 32273
M=D // 32274
@4 // 32275
D=A // 32276
@SP // 32277
AM=M+1 // 32278
A=A-1 // 32279
M=D // 32280
// call Int32.arith_rightshift
@7 // 32281
D=A // 32282
@14 // 32283
M=D // 32284
@Int32.arith_rightshift // 32285
D=A // 32286
@13 // 32287
M=D // 32288
@Int32.do_left_shift_bytes_div.ret.21 // 32289
D=A // 32290
@CALL // 32291
0;JMP // 32292
(Int32.do_left_shift_bytes_div.ret.21)
@SP // 32293
AM=M-1 // 32294
D=M // 32295
@SP // 32296
AM=M-1 // 32297
A=M // 32298
M=D // 32299

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 7}
//}

@8 // 32300
D=A // 32301
@SP // 32302
AM=M+1 // 32303
A=A-1 // 32304
M=D // 32305
// call Array.new
@6 // 32306
D=A // 32307
@14 // 32308
M=D // 32309
@Array.new // 32310
D=A // 32311
@13 // 32312
M=D // 32313
@Int32.do_left_shift_bytes_div.ret.22 // 32314
D=A // 32315
@CALL // 32316
0;JMP // 32317
(Int32.do_left_shift_bytes_div.ret.22)
@LCL // 32318
D=M // 32319
@7 // 32320
A=D+A // 32321
D=A // 32322
@R13 // 32323
M=D // 32324
@SP // 32325
AM=M-1 // 32326
D=M // 32327
@R13 // 32328
A=M // 32329
M=D // 32330

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 32331
D=M // 32332
@7 // 32333
A=D+A // 32334
D=M // 32335
@SP // 32336
AM=M+1 // 32337
A=A-1 // 32338
M=D // 32339
@LCL // 32340
A=M+1 // 32341
D=M // 32342
@0 // 32343
A=D+A // 32344
D=M // 32345
@15 // 32346
D=D&A // 32347
@SP // 32348
AM=M-1 // 32349
A=M // 32350
M=D // 32351

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 32352
D=M // 32353
@7 // 32354
A=D+A // 32355
D=M // 32356
@SP // 32357
AM=M+1 // 32358
A=A-1 // 32359
M=D+1 // 32360
@LCL // 32361
A=M+1 // 32362
D=M // 32363
@0 // 32364
A=D+A // 32365
D=M // 32366
@SP // 32367
AM=M+1 // 32368
A=A-1 // 32369
M=D // 32370
@4 // 32371
D=A // 32372
@SP // 32373
AM=M+1 // 32374
A=A-1 // 32375
M=D // 32376
// call Int32.arith_rightshift
@7 // 32377
D=A // 32378
@14 // 32379
M=D // 32380
@Int32.arith_rightshift // 32381
D=A // 32382
@13 // 32383
M=D // 32384
@Int32.do_left_shift_bytes_div.ret.23 // 32385
D=A // 32386
@CALL // 32387
0;JMP // 32388
(Int32.do_left_shift_bytes_div.ret.23)
@SP // 32389
AM=M-1 // 32390
D=M // 32391
@SP // 32392
AM=M-1 // 32393
A=M // 32394
M=D // 32395

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 32396
D=M // 32397
@7 // 32398
A=D+A // 32399
D=M // 32400
@2 // 32401
D=D+A // 32402
@SP // 32403
AM=M+1 // 32404
A=A-1 // 32405
M=D // 32406
@LCL // 32407
A=M+1 // 32408
D=M // 32409
A=D+1 // 32410
D=M // 32411
@15 // 32412
D=D&A // 32413
@SP // 32414
AM=M-1 // 32415
A=M // 32416
M=D // 32417

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 32418
D=M // 32419
@7 // 32420
A=D+A // 32421
D=M // 32422
@3 // 32423
D=D+A // 32424
@SP // 32425
AM=M+1 // 32426
A=A-1 // 32427
M=D // 32428
@LCL // 32429
A=M+1 // 32430
D=M // 32431
A=D+1 // 32432
D=M // 32433
@SP // 32434
AM=M+1 // 32435
A=A-1 // 32436
M=D // 32437
@4 // 32438
D=A // 32439
@SP // 32440
AM=M+1 // 32441
A=A-1 // 32442
M=D // 32443
// call Int32.arith_rightshift
@7 // 32444
D=A // 32445
@14 // 32446
M=D // 32447
@Int32.arith_rightshift // 32448
D=A // 32449
@13 // 32450
M=D // 32451
@Int32.do_left_shift_bytes_div.ret.24 // 32452
D=A // 32453
@CALL // 32454
0;JMP // 32455
(Int32.do_left_shift_bytes_div.ret.24)
@SP // 32456
AM=M-1 // 32457
D=M // 32458
@SP // 32459
AM=M-1 // 32460
A=M // 32461
M=D // 32462

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 32463
D=M // 32464
@7 // 32465
A=D+A // 32466
D=M // 32467
@4 // 32468
D=D+A // 32469
@SP // 32470
AM=M+1 // 32471
A=A-1 // 32472
M=D // 32473
@LCL // 32474
A=M+1 // 32475
D=M // 32476
@2 // 32477
A=D+A // 32478
D=M // 32479
@15 // 32480
D=D&A // 32481
@SP // 32482
AM=M-1 // 32483
A=M // 32484
M=D // 32485

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 32486
D=M // 32487
@7 // 32488
A=D+A // 32489
D=M // 32490
@5 // 32491
D=D+A // 32492
@SP // 32493
AM=M+1 // 32494
A=A-1 // 32495
M=D // 32496
@LCL // 32497
A=M+1 // 32498
D=M // 32499
@2 // 32500
A=D+A // 32501
D=M // 32502
@SP // 32503
AM=M+1 // 32504
A=A-1 // 32505
M=D // 32506
@4 // 32507
D=A // 32508
@SP // 32509
AM=M+1 // 32510
A=A-1 // 32511
M=D // 32512
// call Int32.arith_rightshift
@7 // 32513
D=A // 32514
@14 // 32515
M=D // 32516
@Int32.arith_rightshift // 32517
D=A // 32518
@13 // 32519
M=D // 32520
@Int32.do_left_shift_bytes_div.ret.25 // 32521
D=A // 32522
@CALL // 32523
0;JMP // 32524
(Int32.do_left_shift_bytes_div.ret.25)
@SP // 32525
AM=M-1 // 32526
D=M // 32527
@SP // 32528
AM=M-1 // 32529
A=M // 32530
M=D // 32531

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 32532
D=M // 32533
@7 // 32534
A=D+A // 32535
D=M // 32536
@6 // 32537
D=D+A // 32538
@SP // 32539
AM=M+1 // 32540
A=A-1 // 32541
M=D // 32542
@LCL // 32543
A=M+1 // 32544
D=M // 32545
@3 // 32546
A=D+A // 32547
D=M // 32548
@15 // 32549
D=D&A // 32550
@SP // 32551
AM=M-1 // 32552
A=M // 32553
M=D // 32554

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 32555
D=M // 32556
@7 // 32557
A=D+A // 32558
D=M // 32559
@7 // 32560
D=D+A // 32561
@SP // 32562
AM=M+1 // 32563
A=A-1 // 32564
M=D // 32565
@LCL // 32566
A=M+1 // 32567
D=M // 32568
@3 // 32569
A=D+A // 32570
D=M // 32571
@SP // 32572
AM=M+1 // 32573
A=A-1 // 32574
M=D // 32575
@4 // 32576
D=A // 32577
@SP // 32578
AM=M+1 // 32579
A=A-1 // 32580
M=D // 32581
// call Int32.arith_rightshift
@7 // 32582
D=A // 32583
@14 // 32584
M=D // 32585
@Int32.arith_rightshift // 32586
D=A // 32587
@13 // 32588
M=D // 32589
@Int32.do_left_shift_bytes_div.ret.26 // 32590
D=A // 32591
@CALL // 32592
0;JMP // 32593
(Int32.do_left_shift_bytes_div.ret.26)
@SP // 32594
AM=M-1 // 32595
D=M // 32596
@SP // 32597
AM=M-1 // 32598
A=M // 32599
M=D // 32600

////PushPopPair {
//  push: PushInstruction("constant 255")
//  pop:  PopInstruction{address=local 8}
//}

@255 // 32601
D=A // 32602
@SP // 32603
AM=M+1 // 32604
A=A-1 // 32605
M=D // 32606
@LCL // 32607
D=M // 32608
@8 // 32609
A=D+A // 32610
D=A // 32611
@R13 // 32612
M=D // 32613
@SP // 32614
AM=M-1 // 32615
D=M // 32616
@R13 // 32617
A=M // 32618
M=D // 32619

////PushPopPair {
//  push: PushInstruction("constant 7")
//  pop:  PopInstruction{address=local 9}
//}

@7 // 32620
D=A // 32621
@SP // 32622
AM=M+1 // 32623
A=A-1 // 32624
M=D // 32625
@LCL // 32626
D=M // 32627
@9 // 32628
A=D+A // 32629
D=A // 32630
@R13 // 32631
M=D // 32632
@SP // 32633
AM=M-1 // 32634
D=M // 32635
@R13 // 32636
A=M // 32637
M=D // 32638

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP1}
// label Int32.do_left_shift_bytes_div_WHILE_EXP1
(Int32.do_left_shift_bytes_div_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 9"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "GT"
//            ),
//        right:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 9"),
//                right:
//                    PushInstruction("constant 0"),
//                binaryOp: "EQ"
//            ),
//        binaryOp: "OR"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END1}}
@Int32.do_left_shift_bytes_div.GT.130 // 32639
D=A // 32640
@SP // 32641
AM=M+1 // 32642
A=A-1 // 32643
M=D // 32644
@LCL // 32645
D=M // 32646
@9 // 32647
A=D+A // 32648
D=M // 32649
@DO_GT // 32650
0;JMP // 32651
(Int32.do_left_shift_bytes_div.GT.130)
@SP // 32652
AM=M+1 // 32653
A=A-1 // 32654
M=D // 32655
@Int32.do_left_shift_bytes_div.EQ.131 // 32656
D=A // 32657
@SP // 32658
AM=M+1 // 32659
A=A-1 // 32660
M=D // 32661
@LCL // 32662
D=M // 32663
@9 // 32664
A=D+A // 32665
D=M // 32666
@DO_EQ // 32667
0;JMP // 32668
(Int32.do_left_shift_bytes_div.EQ.131)
@SP // 32669
AM=M-1 // 32670
D=D|M // 32671
D=!D // 32672
@Int32.do_left_shift_bytes_div_WHILE_END1 // 32673
D;JNE // 32674

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        PushInstruction("local 9"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE10}}
@Int32.do_left_shift_bytes_div.GT.132 // 32675
D=A // 32676
@SP // 32677
AM=M+1 // 32678
A=A-1 // 32679
M=D // 32680
@LCL // 32681
D=M // 32682
@9 // 32683
A=D+A // 32684
D=M // 32685
A=A-1 // 32686
A=A-1 // 32687
A=D+M // 32688
D=M // 32689
@DO_GT // 32690
0;JMP // 32691
(Int32.do_left_shift_bytes_div.GT.132)
@Int32.do_left_shift_bytes_div$IF_TRUE10 // 32692
D;JNE // 32693

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE10}
// goto Int32.do_left_shift_bytes_div$IF_FALSE10
@Int32.do_left_shift_bytes_div$IF_FALSE10 // 32694
0;JMP // 32695

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE10}
// label Int32.do_left_shift_bytes_div$IF_TRUE10
(Int32.do_left_shift_bytes_div$IF_TRUE10)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 32696
D=M // 32697
@9 // 32698
A=D+A // 32699
D=M // 32700
@SP // 32701
AM=M+1 // 32702
A=A-1 // 32703
M=D+1 // 32704
@LCL // 32705
D=M // 32706
@8 // 32707
A=D+A // 32708
D=A // 32709
@R13 // 32710
M=D // 32711
@SP // 32712
AM=M-1 // 32713
D=M // 32714
@R13 // 32715
A=M // 32716
M=D // 32717

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 32718
D=M // 32719
@9 // 32720
A=D+A // 32721
M=-1 // 32722

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE10}
// label Int32.do_left_shift_bytes_div$IF_FALSE10
(Int32.do_left_shift_bytes_div$IF_FALSE10)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 32723
D=M // 32724
@9 // 32725
A=D+A // 32726
M=M-1 // 32727

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP1}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP1
@Int32.do_left_shift_bytes_div_WHILE_EXP1 // 32728
0;JMP // 32729

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END1}
// label Int32.do_left_shift_bytes_div_WHILE_END1
(Int32.do_left_shift_bytes_div_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 7"), PushInstruction("local 8")], call=CallInstruction{Int32.u4_array_div_u4_array}}
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 32730
D=M // 32731
@6 // 32732
A=D+A // 32733
D=M // 32734
@SP // 32735
AM=M+1 // 32736
A=A-1 // 32737
M=D // 32738
@LCL // 32739
D=M // 32740
@7 // 32741
A=D+A // 32742
D=M // 32743
@SP // 32744
AM=M+1 // 32745
A=A-1 // 32746
M=D // 32747
@LCL // 32748
D=M // 32749
@8 // 32750
A=D+A // 32751
D=M // 32752
@SP // 32753
AM=M+1 // 32754
A=A-1 // 32755
M=D // 32756
// call Int32.u4_array_div_u4_array
@8 // 32757
D=A // 32758
@14 // 32759
M=D // 32760
@Int32.u4_array_div_u4_array // 32761
D=A // 32762
@13 // 32763
M=D // 32764
@Int32.do_left_shift_bytes_div.ret.27 // 32765
D=A // 32766
@CALL // 32767
0;JMP // 32768
(Int32.do_left_shift_bytes_div.ret.27)
@LCL // 32769
D=M // 32770
@10 // 32771
A=D+A // 32772
D=A // 32773
@R13 // 32774
M=D // 32775
@SP // 32776
AM=M-1 // 32777
D=M // 32778
@R13 // 32779
A=M // 32780
M=D // 32781

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 32782
A=M // 32783
D=M // 32784
@SP // 32785
AM=M+1 // 32786
A=A-1 // 32787
M=D // 32788
@LCL // 32789
D=M // 32790
@10 // 32791
A=D+A // 32792
D=M // 32793
@0 // 32794
A=D+A // 32795
D=M // 32796
@SP // 32797
AM=M+1 // 32798
A=A-1 // 32799
M=D // 32800
@LCL // 32801
D=M // 32802
@10 // 32803
A=D+A // 32804
D=M // 32805
A=D+1 // 32806
D=M // 32807
@SP // 32808
AM=M+1 // 32809
A=A-1 // 32810
M=D // 32811
@16 // 32812
D=A // 32813
@SP // 32814
AM=M+1 // 32815
A=A-1 // 32816
M=D // 32817
// call Math.multiply
@7 // 32818
D=A // 32819
@14 // 32820
M=D // 32821
@Math.multiply // 32822
D=A // 32823
@13 // 32824
M=D // 32825
@Int32.do_left_shift_bytes_div.ret.28 // 32826
D=A // 32827
@CALL // 32828
0;JMP // 32829
(Int32.do_left_shift_bytes_div.ret.28)
@SP // 32830
AM=M-1 // 32831
D=M // 32832
@SP // 32833
AM=M-1 // 32834
D=D+M // 32835
@SP // 32836
AM=M-1 // 32837
A=M // 32838
M=D // 32839

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 32840
A=M // 32841
D=M // 32842
@SP // 32843
AM=M+1 // 32844
A=A-1 // 32845
M=D+1 // 32846
@LCL // 32847
D=M // 32848
@10 // 32849
A=D+A // 32850
D=M // 32851
@2 // 32852
A=D+A // 32853
D=M // 32854
@SP // 32855
AM=M+1 // 32856
A=A-1 // 32857
M=D // 32858
@LCL // 32859
D=M // 32860
@10 // 32861
A=D+A // 32862
D=M // 32863
@3 // 32864
A=D+A // 32865
D=M // 32866
@SP // 32867
AM=M+1 // 32868
A=A-1 // 32869
M=D // 32870
@16 // 32871
D=A // 32872
@SP // 32873
AM=M+1 // 32874
A=A-1 // 32875
M=D // 32876
// call Math.multiply
@7 // 32877
D=A // 32878
@14 // 32879
M=D // 32880
@Math.multiply // 32881
D=A // 32882
@13 // 32883
M=D // 32884
@Int32.do_left_shift_bytes_div.ret.29 // 32885
D=A // 32886
@CALL // 32887
0;JMP // 32888
(Int32.do_left_shift_bytes_div.ret.29)
@SP // 32889
AM=M-1 // 32890
D=M // 32891
@SP // 32892
AM=M-1 // 32893
D=D+M // 32894
@SP // 32895
AM=M-1 // 32896
A=M // 32897
M=D // 32898

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("constant 4"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 5"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 32899
A=M // 32900
D=M // 32901
@2 // 32902
D=D+A // 32903
@SP // 32904
AM=M+1 // 32905
A=A-1 // 32906
M=D // 32907
@LCL // 32908
D=M // 32909
@10 // 32910
A=D+A // 32911
D=M // 32912
@4 // 32913
A=D+A // 32914
D=M // 32915
@SP // 32916
AM=M+1 // 32917
A=A-1 // 32918
M=D // 32919
@LCL // 32920
D=M // 32921
@10 // 32922
A=D+A // 32923
D=M // 32924
@5 // 32925
A=D+A // 32926
D=M // 32927
@SP // 32928
AM=M+1 // 32929
A=A-1 // 32930
M=D // 32931
@16 // 32932
D=A // 32933
@SP // 32934
AM=M+1 // 32935
A=A-1 // 32936
M=D // 32937
// call Math.multiply
@7 // 32938
D=A // 32939
@14 // 32940
M=D // 32941
@Math.multiply // 32942
D=A // 32943
@13 // 32944
M=D // 32945
@Int32.do_left_shift_bytes_div.ret.30 // 32946
D=A // 32947
@CALL // 32948
0;JMP // 32949
(Int32.do_left_shift_bytes_div.ret.30)
@SP // 32950
AM=M-1 // 32951
D=M // 32952
@SP // 32953
AM=M-1 // 32954
D=D+M // 32955
@SP // 32956
AM=M-1 // 32957
A=M // 32958
M=D // 32959

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("constant 6"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 7"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 32960
A=M // 32961
D=M // 32962
@3 // 32963
D=D+A // 32964
@SP // 32965
AM=M+1 // 32966
A=A-1 // 32967
M=D // 32968
@LCL // 32969
D=M // 32970
@10 // 32971
A=D+A // 32972
D=M // 32973
@6 // 32974
A=D+A // 32975
D=M // 32976
@SP // 32977
AM=M+1 // 32978
A=A-1 // 32979
M=D // 32980
@LCL // 32981
D=M // 32982
@10 // 32983
A=D+A // 32984
D=M // 32985
@7 // 32986
A=D+A // 32987
D=M // 32988
@SP // 32989
AM=M+1 // 32990
A=A-1 // 32991
M=D // 32992
@16 // 32993
D=A // 32994
@SP // 32995
AM=M+1 // 32996
A=A-1 // 32997
M=D // 32998
// call Math.multiply
@7 // 32999
D=A // 33000
@14 // 33001
M=D // 33002
@Math.multiply // 33003
D=A // 33004
@13 // 33005
M=D // 33006
@Int32.do_left_shift_bytes_div.ret.31 // 33007
D=A // 33008
@CALL // 33009
0;JMP // 33010
(Int32.do_left_shift_bytes_div.ret.31)
@SP // 33011
AM=M-1 // 33012
D=M // 33013
@SP // 33014
AM=M-1 // 33015
D=D+M // 33016
@SP // 33017
AM=M-1 // 33018
A=M // 33019
M=D // 33020

////ConditionalGroup{push=PushInstruction("local 4"), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE11}}
@LCL // 33021
D=M // 33022
@4 // 33023
A=D+A // 33024
D=M // 33025
@Int32.do_left_shift_bytes_div$IF_TRUE11 // 33026
D;JNE // 33027

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE11}
// goto Int32.do_left_shift_bytes_div$IF_FALSE11
@Int32.do_left_shift_bytes_div$IF_FALSE11 // 33028
0;JMP // 33029

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE11}
// label Int32.do_left_shift_bytes_div$IF_TRUE11
(Int32.do_left_shift_bytes_div$IF_TRUE11)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33030
D=M // 33031
@SP // 33032
AM=M+1 // 33033
A=A-1 // 33034
M=D // 33035
// call Int32.do_neg
@6 // 33036
D=A // 33037
@14 // 33038
M=D // 33039
@Int32.do_neg // 33040
D=A // 33041
@13 // 33042
M=D // 33043
@Int32.do_left_shift_bytes_div.ret.32 // 33044
D=A // 33045
@CALL // 33046
0;JMP // 33047
(Int32.do_left_shift_bytes_div.ret.32)
@SP // 33048
M=M-1 // 33049

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE11}
// label Int32.do_left_shift_bytes_div$IF_FALSE11
(Int32.do_left_shift_bytes_div$IF_FALSE11)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE12}}
@Int32.do_left_shift_bytes_div.EQ.133 // 33050
D=A // 33051
@SP // 33052
AM=M+1 // 33053
A=A-1 // 33054
M=D // 33055
@LCL // 33056
A=M+1 // 33057
A=A+1 // 33058
D=M // 33059
@DO_EQ // 33060
0;JMP // 33061
(Int32.do_left_shift_bytes_div.EQ.133)
D=!D // 33062
@Int32.do_left_shift_bytes_div$IF_TRUE12 // 33063
D;JNE // 33064

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE12}
// goto Int32.do_left_shift_bytes_div$IF_FALSE12
@Int32.do_left_shift_bytes_div$IF_FALSE12 // 33065
0;JMP // 33066

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE12}
// label Int32.do_left_shift_bytes_div$IF_TRUE12
(Int32.do_left_shift_bytes_div$IF_TRUE12)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33067
A=M+1 // 33068
A=A+1 // 33069
D=M // 33070
@SP // 33071
AM=M+1 // 33072
A=A-1 // 33073
M=D // 33074
// call Int32.dispose
@6 // 33075
D=A // 33076
@14 // 33077
M=D // 33078
@Int32.dispose // 33079
D=A // 33080
@13 // 33081
M=D // 33082
@Int32.do_left_shift_bytes_div.ret.33 // 33083
D=A // 33084
@CALL // 33085
0;JMP // 33086
(Int32.do_left_shift_bytes_div.ret.33)
@SP // 33087
M=M-1 // 33088

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE12}
// label Int32.do_left_shift_bytes_div$IF_FALSE12
(Int32.do_left_shift_bytes_div$IF_FALSE12)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE13}}
@Int32.do_left_shift_bytes_div.EQ.134 // 33089
D=A // 33090
@SP // 33091
AM=M+1 // 33092
A=A-1 // 33093
M=D // 33094
@LCL // 33095
A=M+1 // 33096
A=A+1 // 33097
A=A+1 // 33098
D=M // 33099
@DO_EQ // 33100
0;JMP // 33101
(Int32.do_left_shift_bytes_div.EQ.134)
D=!D // 33102
@Int32.do_left_shift_bytes_div$IF_TRUE13 // 33103
D;JNE // 33104

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE13}
// goto Int32.do_left_shift_bytes_div$IF_FALSE13
@Int32.do_left_shift_bytes_div$IF_FALSE13 // 33105
0;JMP // 33106

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE13}
// label Int32.do_left_shift_bytes_div$IF_TRUE13
(Int32.do_left_shift_bytes_div$IF_TRUE13)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33107
A=M+1 // 33108
A=A+1 // 33109
A=A+1 // 33110
D=M // 33111
@SP // 33112
AM=M+1 // 33113
A=A-1 // 33114
M=D // 33115
// call Int32.dispose
@6 // 33116
D=A // 33117
@14 // 33118
M=D // 33119
@Int32.dispose // 33120
D=A // 33121
@13 // 33122
M=D // 33123
@Int32.do_left_shift_bytes_div.ret.34 // 33124
D=A // 33125
@CALL // 33126
0;JMP // 33127
(Int32.do_left_shift_bytes_div.ret.34)
@SP // 33128
M=M-1 // 33129

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE13}
// label Int32.do_left_shift_bytes_div$IF_FALSE13
(Int32.do_left_shift_bytes_div$IF_FALSE13)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33130
D=M // 33131
@5 // 33132
A=D+A // 33133
D=M // 33134
@SP // 33135
AM=M+1 // 33136
A=A-1 // 33137
M=D // 33138
// call Array.dispose
@6 // 33139
D=A // 33140
@14 // 33141
M=D // 33142
@Array.dispose // 33143
D=A // 33144
@13 // 33145
M=D // 33146
@Int32.do_left_shift_bytes_div.ret.35 // 33147
D=A // 33148
@CALL // 33149
0;JMP // 33150
(Int32.do_left_shift_bytes_div.ret.35)
@SP // 33151
M=M-1 // 33152

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33153
D=M // 33154
@6 // 33155
A=D+A // 33156
D=M // 33157
@SP // 33158
AM=M+1 // 33159
A=A-1 // 33160
M=D // 33161
// call Array.dispose
@6 // 33162
D=A // 33163
@14 // 33164
M=D // 33165
@Array.dispose // 33166
D=A // 33167
@13 // 33168
M=D // 33169
@Int32.do_left_shift_bytes_div.ret.36 // 33170
D=A // 33171
@CALL // 33172
0;JMP // 33173
(Int32.do_left_shift_bytes_div.ret.36)
@SP // 33174
M=M-1 // 33175

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33176
D=M // 33177
@7 // 33178
A=D+A // 33179
D=M // 33180
@SP // 33181
AM=M+1 // 33182
A=A-1 // 33183
M=D // 33184
// call Array.dispose
@6 // 33185
D=A // 33186
@14 // 33187
M=D // 33188
@Array.dispose // 33189
D=A // 33190
@13 // 33191
M=D // 33192
@Int32.do_left_shift_bytes_div.ret.37 // 33193
D=A // 33194
@CALL // 33195
0;JMP // 33196
(Int32.do_left_shift_bytes_div.ret.37)
@SP // 33197
M=M-1 // 33198

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 10")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33199
D=M // 33200
@10 // 33201
A=D+A // 33202
D=M // 33203
@SP // 33204
AM=M+1 // 33205
A=A-1 // 33206
M=D // 33207
// call Array.dispose
@6 // 33208
D=A // 33209
@14 // 33210
M=D // 33211
@Array.dispose // 33212
D=A // 33213
@13 // 33214
M=D // 33215
@Int32.do_left_shift_bytes_div.ret.38 // 33216
D=A // 33217
@CALL // 33218
0;JMP // 33219
(Int32.do_left_shift_bytes_div.ret.38)
@SP // 33220
M=M-1 // 33221

////PushInstruction("constant 0")
@SP // 33222
AM=M+1 // 33223
A=A-1 // 33224
M=0 // 33225
@RETURN // 33226
0;JMP // 33227

////FunctionInstruction{functionName='Int32.cmp', numLocals=2, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=34, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=39, Int32.is_negative=0, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.cmp with 2
(Int32.cmp)
@SP // 33228
M=M+1 // 33229
AM=M+1 // 33230
A=A-1 // 33231
M=0 // 33232
A=A-1 // 33233
M=0 // 33234

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33235
A=M // 33236
D=M // 33237
@3 // 33238
M=D // 33239

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 33240
D=M // 33241
@SP // 33242
AM=M+1 // 33243
A=A-1 // 33244
M=D // 33245
// call Int32.clone
@6 // 33246
D=A // 33247
@14 // 33248
M=D // 33249
@Int32.clone // 33250
D=A // 33251
@13 // 33252
M=D // 33253
@Int32.cmp.ret.0 // 33254
D=A // 33255
@CALL // 33256
0;JMP // 33257
(Int32.cmp.ret.0)
@SP // 33258
AM=M-1 // 33259
D=M // 33260
@LCL // 33261
A=M // 33262
M=D // 33263

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 1")], call=CallInstruction{Int32.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33264
A=M // 33265
D=M // 33266
@SP // 33267
AM=M+1 // 33268
A=A-1 // 33269
M=D // 33270
@ARG // 33271
A=M+1 // 33272
D=M // 33273
@SP // 33274
AM=M+1 // 33275
A=A-1 // 33276
M=D // 33277
// call Int32.do_sub
@7 // 33278
D=A // 33279
@14 // 33280
M=D // 33281
@Int32.do_sub // 33282
D=A // 33283
@13 // 33284
M=D // 33285
@Int32.cmp.ret.1 // 33286
D=A // 33287
@CALL // 33288
0;JMP // 33289
(Int32.cmp.ret.1)
@SP // 33290
M=M-1 // 33291

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.is_zero}}, ifGoto=IfGotoInstruction{label='Int32.cmp$IF_TRUE1}}
@LCL // 33292
A=M // 33293
D=M // 33294
@SP // 33295
AM=M+1 // 33296
A=A-1 // 33297
M=D // 33298
// call Int32.is_zero
@6 // 33299
D=A // 33300
@14 // 33301
M=D // 33302
@Int32.is_zero // 33303
D=A // 33304
@13 // 33305
M=D // 33306
@Int32.cmp.ret.2 // 33307
D=A // 33308
@CALL // 33309
0;JMP // 33310
(Int32.cmp.ret.2)
@SP // 33311
AM=M-1 // 33312
D=M // 33313
@Int32.cmp$IF_TRUE1 // 33314
D;JNE // 33315

////GotoInstruction{label='Int32.cmp$IF_FALSE1}
// goto Int32.cmp$IF_FALSE1
@Int32.cmp$IF_FALSE1 // 33316
0;JMP // 33317

////LabelInstruction{label='Int32.cmp$IF_TRUE1}
// label Int32.cmp$IF_TRUE1
(Int32.cmp$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33318
A=M+1 // 33319
M=0 // 33320

////GotoInstruction{label='Int32.cmp$IF_END1}
// goto Int32.cmp$IF_END1
@Int32.cmp$IF_END1 // 33321
0;JMP // 33322

////LabelInstruction{label='Int32.cmp$IF_FALSE1}
// label Int32.cmp$IF_FALSE1
(Int32.cmp$IF_FALSE1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.cmp$IF_TRUE2}}
@LCL // 33323
A=M // 33324
D=M // 33325
@SP // 33326
AM=M+1 // 33327
A=A-1 // 33328
M=D // 33329
// call Int32.is_negative
@6 // 33330
D=A // 33331
@14 // 33332
M=D // 33333
@Int32.is_negative // 33334
D=A // 33335
@13 // 33336
M=D // 33337
@Int32.cmp.ret.3 // 33338
D=A // 33339
@CALL // 33340
0;JMP // 33341
(Int32.cmp.ret.3)
@SP // 33342
AM=M-1 // 33343
D=M // 33344
@Int32.cmp$IF_TRUE2 // 33345
D;JNE // 33346

////GotoInstruction{label='Int32.cmp$IF_FALSE2}
// goto Int32.cmp$IF_FALSE2
@Int32.cmp$IF_FALSE2 // 33347
0;JMP // 33348

////LabelInstruction{label='Int32.cmp$IF_TRUE2}
// label Int32.cmp$IF_TRUE2
(Int32.cmp$IF_TRUE2)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33349
A=M+1 // 33350
M=-1 // 33351

////GotoInstruction{label='Int32.cmp$IF_END2}
// goto Int32.cmp$IF_END2
@Int32.cmp$IF_END2 // 33352
0;JMP // 33353

////LabelInstruction{label='Int32.cmp$IF_FALSE2}
// label Int32.cmp$IF_FALSE2
(Int32.cmp$IF_FALSE2)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33354
A=M+1 // 33355
M=1 // 33356

////LabelInstruction{label='Int32.cmp$IF_END2}
// label Int32.cmp$IF_END2
(Int32.cmp$IF_END2)

////LabelInstruction{label='Int32.cmp$IF_END1}
// label Int32.cmp$IF_END1
(Int32.cmp$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33357
A=M // 33358
D=M // 33359
@SP // 33360
AM=M+1 // 33361
A=A-1 // 33362
M=D // 33363
// call Int32.dispose
@6 // 33364
D=A // 33365
@14 // 33366
M=D // 33367
@Int32.dispose // 33368
D=A // 33369
@13 // 33370
M=D // 33371
@Int32.cmp.ret.4 // 33372
D=A // 33373
@CALL // 33374
0;JMP // 33375
(Int32.cmp.ret.4)
@SP // 33376
M=M-1 // 33377

////PushInstruction("local 1")
@LCL // 33378
A=M+1 // 33379
D=M // 33380
@SP // 33381
AM=M+1 // 33382
A=A-1 // 33383
M=D // 33384
@RETURN // 33385
0;JMP // 33386

////FunctionInstruction{functionName='Ray.getOrigin', numLocals=0, funcMapping={Ray.getDirection=0}}
// function Ray.getOrigin with 0
(Ray.getOrigin)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33387
A=M // 33388
D=M // 33389
@3 // 33390
M=D // 33391

////PushInstruction("this 0")
@THIS // 33392
A=M // 33393
D=M // 33394
@SP // 33395
AM=M+1 // 33396
A=A-1 // 33397
M=D // 33398
@RETURN // 33399
0;JMP // 33400

////FunctionInstruction{functionName='Ray.dispose', numLocals=0, funcMapping={Ray.getOrigin=0, Ray.getDirection=0}}
// function Ray.dispose with 0
(Ray.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33401
A=M // 33402
D=M // 33403
@3 // 33404
M=D // 33405

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Ray.0 // 33406
M=M-1 // 33407

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 33408
A=M // 33409
D=M // 33410
@SP // 33411
AM=M+1 // 33412
A=A-1 // 33413
M=D // 33414
// call Vec3.dispose
@6 // 33415
D=A // 33416
@14 // 33417
M=D // 33418
@Vec3.dispose // 33419
D=A // 33420
@13 // 33421
M=D // 33422
@Ray.dispose.ret.0 // 33423
D=A // 33424
@CALL // 33425
0;JMP // 33426
(Ray.dispose.ret.0)
@SP // 33427
M=M-1 // 33428

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 33429
A=M+1 // 33430
D=M // 33431
@SP // 33432
AM=M+1 // 33433
A=A-1 // 33434
M=D // 33435
// call Vec3.dispose
@6 // 33436
D=A // 33437
@14 // 33438
M=D // 33439
@Vec3.dispose // 33440
D=A // 33441
@13 // 33442
M=D // 33443
@Ray.dispose.ret.1 // 33444
D=A // 33445
@CALL // 33446
0;JMP // 33447
(Ray.dispose.ret.1)
@SP // 33448
M=M-1 // 33449

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33450
D=M // 33451
@SP // 33452
AM=M+1 // 33453
A=A-1 // 33454
M=D // 33455
// call Memory.deAlloc
@6 // 33456
D=A // 33457
@14 // 33458
M=D // 33459
@Memory.deAlloc // 33460
D=A // 33461
@13 // 33462
M=D // 33463
@Ray.dispose.ret.2 // 33464
D=A // 33465
@CALL // 33466
0;JMP // 33467
(Ray.dispose.ret.2)
@SP // 33468
M=M-1 // 33469

////PushInstruction("constant 0")
@SP // 33470
AM=M+1 // 33471
A=A-1 // 33472
M=0 // 33473
@RETURN // 33474
0;JMP // 33475

////FunctionInstruction{functionName='Number.is_zero', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.is_zero with 0
(Number.is_zero)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33476
A=M // 33477
D=M // 33478
@3 // 33479
M=D // 33480

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}}
@THIS // 33481
A=M // 33482
D=M // 33483
@SP // 33484
AM=M+1 // 33485
A=A-1 // 33486
M=D // 33487
// call Int32.is_zero
@6 // 33488
D=A // 33489
@14 // 33490
M=D // 33491
@Int32.is_zero // 33492
D=A // 33493
@13 // 33494
M=D // 33495
@Number.is_zero.ret.0 // 33496
D=A // 33497
@CALL // 33498
0;JMP // 33499
(Number.is_zero.ret.0)
@RETURN // 33500
0;JMP // 33501

////FunctionInstruction{functionName='Ray.new', numLocals=0, funcMapping={Ray.getOrigin=0, Ray.dispose=3, Ray.getDirection=0}}
// function Ray.new with 0
(Ray.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 33502
D=A // 33503
@SP // 33504
AM=M+1 // 33505
A=A-1 // 33506
M=D // 33507
// call Memory.alloc
@6 // 33508
D=A // 33509
@14 // 33510
M=D // 33511
@Memory.alloc // 33512
D=A // 33513
@13 // 33514
M=D // 33515
@Ray.new.ret.0 // 33516
D=A // 33517
@CALL // 33518
0;JMP // 33519
(Ray.new.ret.0)
@SP // 33520
AM=M-1 // 33521
D=M // 33522
@3 // 33523
M=D // 33524

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Ray.0 // 33525
M=M+1 // 33526

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 33527
A=M // 33528
D=M // 33529
@THIS // 33530
A=M // 33531
M=D // 33532

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 33533
A=M+1 // 33534
D=M // 33535
@THIS // 33536
A=M+1 // 33537
M=D // 33538

////PushInstruction("pointer 0")
@3 // 33539
D=M // 33540
@SP // 33541
AM=M+1 // 33542
A=A-1 // 33543
M=D // 33544
@RETURN // 33545
0;JMP // 33546

////FunctionInstruction{functionName='Number.new_from_int_frac', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.new_from_int_frac with 0
(Number.new_from_int_frac)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 33547
AM=M+1 // 33548
A=A-1 // 33549
M=1 // 33550
// call Memory.alloc
@6 // 33551
D=A // 33552
@14 // 33553
M=D // 33554
@Memory.alloc // 33555
D=A // 33556
@13 // 33557
M=D // 33558
@Number.new_from_int_frac.ret.0 // 33559
D=A // 33560
@CALL // 33561
0;JMP // 33562
(Number.new_from_int_frac.ret.0)
@SP // 33563
AM=M-1 // 33564
D=M // 33565
@3 // 33566
M=D // 33567

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 6}
//}

@Number.6 // 33568
M=M+1 // 33569

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 33570
A=M // 33571
D=M // 33572
@SP // 33573
AM=M+1 // 33574
A=A-1 // 33575
M=D // 33576
// call Int32.new
@6 // 33577
D=A // 33578
@14 // 33579
M=D // 33580
@Int32.new // 33581
D=A // 33582
@13 // 33583
M=D // 33584
@Number.new_from_int_frac.ret.1 // 33585
D=A // 33586
@CALL // 33587
0;JMP // 33588
(Number.new_from_int_frac.ret.1)
@SP // 33589
AM=M-1 // 33590
D=M // 33591
@THIS // 33592
A=M // 33593
M=D // 33594

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 5")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 33595
A=M // 33596
D=M // 33597
@SP // 33598
AM=M+1 // 33599
A=A-1 // 33600
M=D // 33601
@Number.5 // 33602
D=M // 33603
@SP // 33604
AM=M+1 // 33605
A=A-1 // 33606
M=D // 33607
// call Int32.do_mul
@7 // 33608
D=A // 33609
@14 // 33610
M=D // 33611
@Int32.do_mul // 33612
D=A // 33613
@13 // 33614
M=D // 33615
@Number.new_from_int_frac.ret.2 // 33616
D=A // 33617
@CALL // 33618
0;JMP // 33619
(Number.new_from_int_frac.ret.2)
@SP // 33620
M=M-1 // 33621

////PushInstruction("pointer 0")
@3 // 33622
D=M // 33623
@SP // 33624
AM=M+1 // 33625
A=A-1 // 33626
M=D // 33627
@RETURN // 33628
0;JMP // 33629

////FunctionInstruction{functionName='Scene.getWidth', numLocals=0, funcMapping={Scene.getHeight=0, Scene.getNumLights=0, Scene.getLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getWidth with 0
(Scene.getWidth)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33630
A=M // 33631
D=M // 33632
@3 // 33633
M=D // 33634

////PushInstruction("this 0")
@THIS // 33635
A=M // 33636
D=M // 33637
@SP // 33638
AM=M+1 // 33639
A=A-1 // 33640
M=D // 33641
@RETURN // 33642
0;JMP // 33643

////FunctionInstruction{functionName='Sphere.intersect', numLocals=8, funcMapping={Sphere.new=1, Sphere.color=1, Sphere.dispose=4}}
// function Sphere.intersect with 8
(Sphere.intersect)
@8 // 33644
D=A // 33645
@SP // 33646
AM=D+M // 33647
A=A-1 // 33648
M=0 // 33649
A=A-1 // 33650
M=0 // 33651
A=A-1 // 33652
M=0 // 33653
A=A-1 // 33654
M=0 // 33655
A=A-1 // 33656
M=0 // 33657
A=A-1 // 33658
M=0 // 33659
A=A-1 // 33660
M=0 // 33661
A=A-1 // 33662
M=0 // 33663

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 33664
A=M // 33665
D=M // 33666
@3 // 33667
M=D // 33668

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 33669
A=M // 33670
D=M // 33671
@SP // 33672
AM=M+1 // 33673
A=A-1 // 33674
M=D // 33675
// call Vec3.clone
@6 // 33676
D=A // 33677
@14 // 33678
M=D // 33679
@Vec3.clone // 33680
D=A // 33681
@13 // 33682
M=D // 33683
@Sphere.intersect.ret.0 // 33684
D=A // 33685
@CALL // 33686
0;JMP // 33687
(Sphere.intersect.ret.0)
@SP // 33688
AM=M-1 // 33689
D=M // 33690
@LCL // 33691
A=M // 33692
M=D // 33693

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getOrigin}}], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33694
A=M // 33695
D=M // 33696
@SP // 33697
AM=M+1 // 33698
A=A-1 // 33699
M=D // 33700
@ARG // 33701
A=M+1 // 33702
D=M // 33703
@SP // 33704
AM=M+1 // 33705
A=A-1 // 33706
M=D // 33707
// call Ray.getOrigin
@6 // 33708
D=A // 33709
@14 // 33710
M=D // 33711
@Ray.getOrigin // 33712
D=A // 33713
@13 // 33714
M=D // 33715
@Sphere.intersect.ret.1 // 33716
D=A // 33717
@CALL // 33718
0;JMP // 33719
(Sphere.intersect.ret.1)
// call Vec3.do_sub
@7 // 33720
D=A // 33721
@14 // 33722
M=D // 33723
@Vec3.do_sub // 33724
D=A // 33725
@13 // 33726
M=D // 33727
@Sphere.intersect.ret.2 // 33728
D=A // 33729
@CALL // 33730
0;JMP // 33731
(Sphere.intersect.ret.2)
@SP // 33732
M=M-1 // 33733

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33734
A=M // 33735
D=M // 33736
@SP // 33737
AM=M+1 // 33738
A=A-1 // 33739
M=D // 33740
@ARG // 33741
A=M+1 // 33742
D=M // 33743
@SP // 33744
AM=M+1 // 33745
A=A-1 // 33746
M=D // 33747
// call Ray.getDirection
@6 // 33748
D=A // 33749
@14 // 33750
M=D // 33751
@Ray.getDirection // 33752
D=A // 33753
@13 // 33754
M=D // 33755
@Sphere.intersect.ret.3 // 33756
D=A // 33757
@CALL // 33758
0;JMP // 33759
(Sphere.intersect.ret.3)
// call Vec3.dot
@7 // 33760
D=A // 33761
@14 // 33762
M=D // 33763
@Vec3.dot // 33764
D=A // 33765
@13 // 33766
M=D // 33767
@Sphere.intersect.ret.4 // 33768
D=A // 33769
@CALL // 33770
0;JMP // 33771
(Sphere.intersect.ret.4)
@SP // 33772
AM=M-1 // 33773
D=M // 33774
@LCL // 33775
A=M+1 // 33776
M=D // 33777

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 33778
A=M+1 // 33779
D=M // 33780
@SP // 33781
AM=M+1 // 33782
A=A-1 // 33783
M=D // 33784
// call Number.clone
@6 // 33785
D=A // 33786
@14 // 33787
M=D // 33788
@Number.clone // 33789
D=A // 33790
@13 // 33791
M=D // 33792
@Sphere.intersect.ret.5 // 33793
D=A // 33794
@CALL // 33795
0;JMP // 33796
(Sphere.intersect.ret.5)
@SP // 33797
AM=M-1 // 33798
D=M // 33799
@LCL // 33800
A=M+1 // 33801
A=A+1 // 33802
M=D // 33803

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33804
A=M+1 // 33805
A=A+1 // 33806
D=M // 33807
@SP // 33808
AM=M+1 // 33809
A=A-1 // 33810
M=D // 33811
@LCL // 33812
A=M+1 // 33813
D=M // 33814
@SP // 33815
AM=M+1 // 33816
A=A-1 // 33817
M=D // 33818
// call Number.do_mul
@7 // 33819
D=A // 33820
@14 // 33821
M=D // 33822
@Number.do_mul // 33823
D=A // 33824
@13 // 33825
M=D // 33826
@Sphere.intersect.ret.6 // 33827
D=A // 33828
@CALL // 33829
0;JMP // 33830
(Sphere.intersect.ret.6)
@SP // 33831
M=M-1 // 33832

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@THIS // 33833
A=M+1 // 33834
D=M // 33835
@SP // 33836
AM=M+1 // 33837
A=A-1 // 33838
M=D // 33839
// call Number.clone
@6 // 33840
D=A // 33841
@14 // 33842
M=D // 33843
@Number.clone // 33844
D=A // 33845
@13 // 33846
M=D // 33847
@Sphere.intersect.ret.7 // 33848
D=A // 33849
@CALL // 33850
0;JMP // 33851
(Sphere.intersect.ret.7)
@SP // 33852
AM=M-1 // 33853
D=M // 33854
@LCL // 33855
A=M+1 // 33856
A=A+1 // 33857
A=A+1 // 33858
M=D // 33859

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("this 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33860
A=M+1 // 33861
A=A+1 // 33862
A=A+1 // 33863
D=M // 33864
@SP // 33865
AM=M+1 // 33866
A=A-1 // 33867
M=D // 33868
@THIS // 33869
A=M+1 // 33870
D=M // 33871
@SP // 33872
AM=M+1 // 33873
A=A-1 // 33874
M=D // 33875
// call Number.do_mul
@7 // 33876
D=A // 33877
@14 // 33878
M=D // 33879
@Number.do_mul // 33880
D=A // 33881
@13 // 33882
M=D // 33883
@Sphere.intersect.ret.8 // 33884
D=A // 33885
@CALL // 33886
0;JMP // 33887
(Sphere.intersect.ret.8)
@SP // 33888
M=M-1 // 33889

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dist_sq}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 33890
A=M // 33891
D=M // 33892
@SP // 33893
AM=M+1 // 33894
A=A-1 // 33895
M=D // 33896
// call Vec3.dist_sq
@6 // 33897
D=A // 33898
@14 // 33899
M=D // 33900
@Vec3.dist_sq // 33901
D=A // 33902
@13 // 33903
M=D // 33904
@Sphere.intersect.ret.9 // 33905
D=A // 33906
@CALL // 33907
0;JMP // 33908
(Sphere.intersect.ret.9)
@LCL // 33909
D=M // 33910
@4 // 33911
A=D+A // 33912
D=A // 33913
@R13 // 33914
M=D // 33915
@SP // 33916
AM=M-1 // 33917
D=M // 33918
@R13 // 33919
A=M // 33920
M=D // 33921

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 2")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33922
D=M // 33923
@4 // 33924
A=D+A // 33925
D=M // 33926
@SP // 33927
AM=M+1 // 33928
A=A-1 // 33929
M=D // 33930
@LCL // 33931
A=M+1 // 33932
A=A+1 // 33933
D=M // 33934
@SP // 33935
AM=M+1 // 33936
A=A-1 // 33937
M=D // 33938
// call Number.do_sub
@7 // 33939
D=A // 33940
@14 // 33941
M=D // 33942
@Number.do_sub // 33943
D=A // 33944
@13 // 33945
M=D // 33946
@Sphere.intersect.ret.10 // 33947
D=A // 33948
@CALL // 33949
0;JMP // 33950
(Sphere.intersect.ret.10)
@SP // 33951
M=M-1 // 33952

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 3")], call=CallInstruction{Number.cmp}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE1}}
@Sphere.intersect.GT.135 // 33953
D=A // 33954
@SP // 33955
AM=M+1 // 33956
A=A-1 // 33957
M=D // 33958
@LCL // 33959
D=M // 33960
@4 // 33961
A=D+A // 33962
D=M // 33963
@SP // 33964
AM=M+1 // 33965
A=A-1 // 33966
M=D // 33967
@LCL // 33968
A=M+1 // 33969
A=A+1 // 33970
A=A+1 // 33971
D=M // 33972
@SP // 33973
AM=M+1 // 33974
A=A-1 // 33975
M=D // 33976
// call Number.cmp
@7 // 33977
D=A // 33978
@14 // 33979
M=D // 33980
@Number.cmp // 33981
D=A // 33982
@13 // 33983
M=D // 33984
@Sphere.intersect.ret.11 // 33985
D=A // 33986
@CALL // 33987
0;JMP // 33988
(Sphere.intersect.ret.11)
@SP // 33989
AM=M-1 // 33990
D=M // 33991
@DO_GT // 33992
0;JMP // 33993
(Sphere.intersect.GT.135)
@Sphere.intersect$IF_TRUE1 // 33994
D;JNE // 33995

////GotoInstruction{label='Sphere.intersect$IF_FALSE1}
// goto Sphere.intersect$IF_FALSE1
@Sphere.intersect$IF_FALSE1 // 33996
0;JMP // 33997

////LabelInstruction{label='Sphere.intersect$IF_TRUE1}
// label Sphere.intersect$IF_TRUE1
(Sphere.intersect$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33998
A=M // 33999
D=M // 34000
@SP // 34001
AM=M+1 // 34002
A=A-1 // 34003
M=D // 34004
// call Vec3.dispose
@6 // 34005
D=A // 34006
@14 // 34007
M=D // 34008
@Vec3.dispose // 34009
D=A // 34010
@13 // 34011
M=D // 34012
@Sphere.intersect.ret.12 // 34013
D=A // 34014
@CALL // 34015
0;JMP // 34016
(Sphere.intersect.ret.12)
@SP // 34017
M=M-1 // 34018

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34019
A=M+1 // 34020
D=M // 34021
@SP // 34022
AM=M+1 // 34023
A=A-1 // 34024
M=D // 34025
// call Number.dispose
@6 // 34026
D=A // 34027
@14 // 34028
M=D // 34029
@Number.dispose // 34030
D=A // 34031
@13 // 34032
M=D // 34033
@Sphere.intersect.ret.13 // 34034
D=A // 34035
@CALL // 34036
0;JMP // 34037
(Sphere.intersect.ret.13)
@SP // 34038
M=M-1 // 34039

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34040
A=M+1 // 34041
A=A+1 // 34042
D=M // 34043
@SP // 34044
AM=M+1 // 34045
A=A-1 // 34046
M=D // 34047
// call Number.dispose
@6 // 34048
D=A // 34049
@14 // 34050
M=D // 34051
@Number.dispose // 34052
D=A // 34053
@13 // 34054
M=D // 34055
@Sphere.intersect.ret.14 // 34056
D=A // 34057
@CALL // 34058
0;JMP // 34059
(Sphere.intersect.ret.14)
@SP // 34060
M=M-1 // 34061

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34062
A=M+1 // 34063
A=A+1 // 34064
A=A+1 // 34065
D=M // 34066
@SP // 34067
AM=M+1 // 34068
A=A-1 // 34069
M=D // 34070
// call Number.dispose
@6 // 34071
D=A // 34072
@14 // 34073
M=D // 34074
@Number.dispose // 34075
D=A // 34076
@13 // 34077
M=D // 34078
@Sphere.intersect.ret.15 // 34079
D=A // 34080
@CALL // 34081
0;JMP // 34082
(Sphere.intersect.ret.15)
@SP // 34083
M=M-1 // 34084

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34085
D=M // 34086
@4 // 34087
A=D+A // 34088
D=M // 34089
@SP // 34090
AM=M+1 // 34091
A=A-1 // 34092
M=D // 34093
// call Number.dispose
@6 // 34094
D=A // 34095
@14 // 34096
M=D // 34097
@Number.dispose // 34098
D=A // 34099
@13 // 34100
M=D // 34101
@Sphere.intersect.ret.16 // 34102
D=A // 34103
@CALL // 34104
0;JMP // 34105
(Sphere.intersect.ret.16)
@SP // 34106
M=M-1 // 34107

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 34108
AM=M+1 // 34109
A=A-1 // 34110
M=-1 // 34111
// call Number.new
@6 // 34112
D=A // 34113
@14 // 34114
M=D // 34115
@Number.new // 34116
D=A // 34117
@13 // 34118
M=D // 34119
@Sphere.intersect.ret.17 // 34120
D=A // 34121
@CALL // 34122
0;JMP // 34123
(Sphere.intersect.ret.17)
@RETURN // 34124
0;JMP // 34125

////LabelInstruction{label='Sphere.intersect$IF_FALSE1}
// label Sphere.intersect$IF_FALSE1
(Sphere.intersect$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 34126
A=M+1 // 34127
A=A+1 // 34128
A=A+1 // 34129
D=M // 34130
@SP // 34131
AM=M+1 // 34132
A=A-1 // 34133
M=D // 34134
// call Number.clone
@6 // 34135
D=A // 34136
@14 // 34137
M=D // 34138
@Number.clone // 34139
D=A // 34140
@13 // 34141
M=D // 34142
@Sphere.intersect.ret.18 // 34143
D=A // 34144
@CALL // 34145
0;JMP // 34146
(Sphere.intersect.ret.18)
@LCL // 34147
D=M // 34148
@5 // 34149
A=D+A // 34150
D=A // 34151
@R13 // 34152
M=D // 34153
@SP // 34154
AM=M-1 // 34155
D=M // 34156
@R13 // 34157
A=M // 34158
M=D // 34159

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), PushInstruction("local 4")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34160
D=M // 34161
@5 // 34162
A=D+A // 34163
D=M // 34164
@SP // 34165
AM=M+1 // 34166
A=A-1 // 34167
M=D // 34168
@LCL // 34169
D=M // 34170
@4 // 34171
A=D+A // 34172
D=M // 34173
@SP // 34174
AM=M+1 // 34175
A=A-1 // 34176
M=D // 34177
// call Number.do_sub
@7 // 34178
D=A // 34179
@14 // 34180
M=D // 34181
@Number.do_sub // 34182
D=A // 34183
@13 // 34184
M=D // 34185
@Sphere.intersect.ret.19 // 34186
D=A // 34187
@CALL // 34188
0;JMP // 34189
(Sphere.intersect.ret.19)
@SP // 34190
M=M-1 // 34191

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34192
D=M // 34193
@5 // 34194
A=D+A // 34195
D=M // 34196
@SP // 34197
AM=M+1 // 34198
A=A-1 // 34199
M=D // 34200
// call Number.do_sqrt
@6 // 34201
D=A // 34202
@14 // 34203
M=D // 34204
@Number.do_sqrt // 34205
D=A // 34206
@13 // 34207
M=D // 34208
@Sphere.intersect.ret.20 // 34209
D=A // 34210
@CALL // 34211
0;JMP // 34212
(Sphere.intersect.ret.20)
@SP // 34213
M=M-1 // 34214

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 34215
A=M+1 // 34216
D=M // 34217
@SP // 34218
AM=M+1 // 34219
A=A-1 // 34220
M=D // 34221
// call Number.clone
@6 // 34222
D=A // 34223
@14 // 34224
M=D // 34225
@Number.clone // 34226
D=A // 34227
@13 // 34228
M=D // 34229
@Sphere.intersect.ret.21 // 34230
D=A // 34231
@CALL // 34232
0;JMP // 34233
(Sphere.intersect.ret.21)
@LCL // 34234
D=M // 34235
@6 // 34236
A=D+A // 34237
D=A // 34238
@R13 // 34239
M=D // 34240
@SP // 34241
AM=M-1 // 34242
D=M // 34243
@R13 // 34244
A=M // 34245
M=D // 34246

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 5")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34247
D=M // 34248
@6 // 34249
A=D+A // 34250
D=M // 34251
@SP // 34252
AM=M+1 // 34253
A=A-1 // 34254
M=D // 34255
@LCL // 34256
D=M // 34257
@5 // 34258
A=D+A // 34259
D=M // 34260
@SP // 34261
AM=M+1 // 34262
A=A-1 // 34263
M=D // 34264
// call Number.do_sub
@7 // 34265
D=A // 34266
@14 // 34267
M=D // 34268
@Number.do_sub // 34269
D=A // 34270
@13 // 34271
M=D // 34272
@Sphere.intersect.ret.22 // 34273
D=A // 34274
@CALL // 34275
0;JMP // 34276
(Sphere.intersect.ret.22)
@SP // 34277
M=M-1 // 34278

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@LCL // 34279
A=M+1 // 34280
D=M // 34281
@SP // 34282
AM=M+1 // 34283
A=A-1 // 34284
M=D // 34285
// call Number.clone
@6 // 34286
D=A // 34287
@14 // 34288
M=D // 34289
@Number.clone // 34290
D=A // 34291
@13 // 34292
M=D // 34293
@Sphere.intersect.ret.23 // 34294
D=A // 34295
@CALL // 34296
0;JMP // 34297
(Sphere.intersect.ret.23)
@LCL // 34298
D=M // 34299
@7 // 34300
A=D+A // 34301
D=A // 34302
@R13 // 34303
M=D // 34304
@SP // 34305
AM=M-1 // 34306
D=M // 34307
@R13 // 34308
A=M // 34309
M=D // 34310

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7"), PushInstruction("local 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34311
D=M // 34312
@7 // 34313
A=D+A // 34314
D=M // 34315
@SP // 34316
AM=M+1 // 34317
A=A-1 // 34318
M=D // 34319
@LCL // 34320
D=M // 34321
@5 // 34322
A=D+A // 34323
D=M // 34324
@SP // 34325
AM=M+1 // 34326
A=A-1 // 34327
M=D // 34328
// call Number.do_add
@7 // 34329
D=A // 34330
@14 // 34331
M=D // 34332
@Number.do_add // 34333
D=A // 34334
@13 // 34335
M=D // 34336
@Sphere.intersect.ret.24 // 34337
D=A // 34338
@CALL // 34339
0;JMP // 34340
(Sphere.intersect.ret.24)
@SP // 34341
M=M-1 // 34342

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34343
A=M // 34344
D=M // 34345
@SP // 34346
AM=M+1 // 34347
A=A-1 // 34348
M=D // 34349
// call Vec3.dispose
@6 // 34350
D=A // 34351
@14 // 34352
M=D // 34353
@Vec3.dispose // 34354
D=A // 34355
@13 // 34356
M=D // 34357
@Sphere.intersect.ret.25 // 34358
D=A // 34359
@CALL // 34360
0;JMP // 34361
(Sphere.intersect.ret.25)
@SP // 34362
M=M-1 // 34363

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34364
A=M+1 // 34365
D=M // 34366
@SP // 34367
AM=M+1 // 34368
A=A-1 // 34369
M=D // 34370
// call Number.dispose
@6 // 34371
D=A // 34372
@14 // 34373
M=D // 34374
@Number.dispose // 34375
D=A // 34376
@13 // 34377
M=D // 34378
@Sphere.intersect.ret.26 // 34379
D=A // 34380
@CALL // 34381
0;JMP // 34382
(Sphere.intersect.ret.26)
@SP // 34383
M=M-1 // 34384

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34385
A=M+1 // 34386
A=A+1 // 34387
D=M // 34388
@SP // 34389
AM=M+1 // 34390
A=A-1 // 34391
M=D // 34392
// call Number.dispose
@6 // 34393
D=A // 34394
@14 // 34395
M=D // 34396
@Number.dispose // 34397
D=A // 34398
@13 // 34399
M=D // 34400
@Sphere.intersect.ret.27 // 34401
D=A // 34402
@CALL // 34403
0;JMP // 34404
(Sphere.intersect.ret.27)
@SP // 34405
M=M-1 // 34406

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34407
A=M+1 // 34408
A=A+1 // 34409
A=A+1 // 34410
D=M // 34411
@SP // 34412
AM=M+1 // 34413
A=A-1 // 34414
M=D // 34415
// call Number.dispose
@6 // 34416
D=A // 34417
@14 // 34418
M=D // 34419
@Number.dispose // 34420
D=A // 34421
@13 // 34422
M=D // 34423
@Sphere.intersect.ret.28 // 34424
D=A // 34425
@CALL // 34426
0;JMP // 34427
(Sphere.intersect.ret.28)
@SP // 34428
M=M-1 // 34429

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34430
D=M // 34431
@4 // 34432
A=D+A // 34433
D=M // 34434
@SP // 34435
AM=M+1 // 34436
A=A-1 // 34437
M=D // 34438
// call Number.dispose
@6 // 34439
D=A // 34440
@14 // 34441
M=D // 34442
@Number.dispose // 34443
D=A // 34444
@13 // 34445
M=D // 34446
@Sphere.intersect.ret.29 // 34447
D=A // 34448
@CALL // 34449
0;JMP // 34450
(Sphere.intersect.ret.29)
@SP // 34451
M=M-1 // 34452

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34453
D=M // 34454
@5 // 34455
A=D+A // 34456
D=M // 34457
@SP // 34458
AM=M+1 // 34459
A=A-1 // 34460
M=D // 34461
// call Number.dispose
@6 // 34462
D=A // 34463
@14 // 34464
M=D // 34465
@Number.dispose // 34466
D=A // 34467
@13 // 34468
M=D // 34469
@Sphere.intersect.ret.30 // 34470
D=A // 34471
@CALL // 34472
0;JMP // 34473
(Sphere.intersect.ret.30)
@SP // 34474
M=M-1 // 34475

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.is_negative}},
//    right:
//CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.is_negative}},
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE2}}
@LCL // 34476
D=M // 34477
@6 // 34478
A=D+A // 34479
D=M // 34480
@SP // 34481
AM=M+1 // 34482
A=A-1 // 34483
M=D // 34484
// call Number.is_negative
@6 // 34485
D=A // 34486
@14 // 34487
M=D // 34488
@Number.is_negative // 34489
D=A // 34490
@13 // 34491
M=D // 34492
@Sphere.intersect.ret.31 // 34493
D=A // 34494
@CALL // 34495
0;JMP // 34496
(Sphere.intersect.ret.31)
@LCL // 34497
D=M // 34498
@7 // 34499
A=D+A // 34500
D=M // 34501
@SP // 34502
AM=M+1 // 34503
A=A-1 // 34504
M=D // 34505
// call Number.is_negative
@6 // 34506
D=A // 34507
@14 // 34508
M=D // 34509
@Number.is_negative // 34510
D=A // 34511
@13 // 34512
M=D // 34513
@Sphere.intersect.ret.32 // 34514
D=A // 34515
@CALL // 34516
0;JMP // 34517
(Sphere.intersect.ret.32)
@SP // 34518
AM=M-1 // 34519
D=M // 34520
@SP // 34521
AM=M-1 // 34522
D=D&M // 34523
@Sphere.intersect$IF_TRUE2 // 34524
D;JNE // 34525

////GotoInstruction{label='Sphere.intersect$IF_FALSE2}
// goto Sphere.intersect$IF_FALSE2
@Sphere.intersect$IF_FALSE2 // 34526
0;JMP // 34527

////LabelInstruction{label='Sphere.intersect$IF_TRUE2}
// label Sphere.intersect$IF_TRUE2
(Sphere.intersect$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34528
D=M // 34529
@6 // 34530
A=D+A // 34531
D=M // 34532
@SP // 34533
AM=M+1 // 34534
A=A-1 // 34535
M=D // 34536
// call Number.dispose
@6 // 34537
D=A // 34538
@14 // 34539
M=D // 34540
@Number.dispose // 34541
D=A // 34542
@13 // 34543
M=D // 34544
@Sphere.intersect.ret.33 // 34545
D=A // 34546
@CALL // 34547
0;JMP // 34548
(Sphere.intersect.ret.33)
@SP // 34549
M=M-1 // 34550

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34551
D=M // 34552
@7 // 34553
A=D+A // 34554
D=M // 34555
@SP // 34556
AM=M+1 // 34557
A=A-1 // 34558
M=D // 34559
// call Number.dispose
@6 // 34560
D=A // 34561
@14 // 34562
M=D // 34563
@Number.dispose // 34564
D=A // 34565
@13 // 34566
M=D // 34567
@Sphere.intersect.ret.34 // 34568
D=A // 34569
@CALL // 34570
0;JMP // 34571
(Sphere.intersect.ret.34)
@SP // 34572
M=M-1 // 34573

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 34574
AM=M+1 // 34575
A=A-1 // 34576
M=-1 // 34577
// call Number.new
@6 // 34578
D=A // 34579
@14 // 34580
M=D // 34581
@Number.new // 34582
D=A // 34583
@13 // 34584
M=D // 34585
@Sphere.intersect.ret.35 // 34586
D=A // 34587
@CALL // 34588
0;JMP // 34589
(Sphere.intersect.ret.35)
@RETURN // 34590
0;JMP // 34591

////LabelInstruction{label='Sphere.intersect$IF_FALSE2}
// label Sphere.intersect$IF_FALSE2
(Sphere.intersect$IF_FALSE2)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 7")], call=CallInstruction{Number.is_less_than}}, ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE3}}
@LCL // 34592
D=M // 34593
@6 // 34594
A=D+A // 34595
D=M // 34596
@SP // 34597
AM=M+1 // 34598
A=A-1 // 34599
M=D // 34600
@LCL // 34601
D=M // 34602
@7 // 34603
A=D+A // 34604
D=M // 34605
@SP // 34606
AM=M+1 // 34607
A=A-1 // 34608
M=D // 34609
// call Number.is_less_than
@7 // 34610
D=A // 34611
@14 // 34612
M=D // 34613
@Number.is_less_than // 34614
D=A // 34615
@13 // 34616
M=D // 34617
@Sphere.intersect.ret.36 // 34618
D=A // 34619
@CALL // 34620
0;JMP // 34621
(Sphere.intersect.ret.36)
@SP // 34622
AM=M-1 // 34623
D=M // 34624
@Sphere.intersect$IF_TRUE3 // 34625
D;JNE // 34626

////GotoInstruction{label='Sphere.intersect$IF_FALSE3}
// goto Sphere.intersect$IF_FALSE3
@Sphere.intersect$IF_FALSE3 // 34627
0;JMP // 34628

////LabelInstruction{label='Sphere.intersect$IF_TRUE3}
// label Sphere.intersect$IF_TRUE3
(Sphere.intersect$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34629
D=M // 34630
@7 // 34631
A=D+A // 34632
D=M // 34633
@SP // 34634
AM=M+1 // 34635
A=A-1 // 34636
M=D // 34637
// call Number.dispose
@6 // 34638
D=A // 34639
@14 // 34640
M=D // 34641
@Number.dispose // 34642
D=A // 34643
@13 // 34644
M=D // 34645
@Sphere.intersect.ret.37 // 34646
D=A // 34647
@CALL // 34648
0;JMP // 34649
(Sphere.intersect.ret.37)
@SP // 34650
M=M-1 // 34651

////PushInstruction("local 6")
@LCL // 34652
D=M // 34653
@6 // 34654
A=D+A // 34655
D=M // 34656
@SP // 34657
AM=M+1 // 34658
A=A-1 // 34659
M=D // 34660
@RETURN // 34661
0;JMP // 34662

////GotoInstruction{label='Sphere.intersect$IF_END3}
// goto Sphere.intersect$IF_END3
@Sphere.intersect$IF_END3 // 34663
0;JMP // 34664

////LabelInstruction{label='Sphere.intersect$IF_FALSE3}
// label Sphere.intersect$IF_FALSE3
(Sphere.intersect$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34665
D=M // 34666
@6 // 34667
A=D+A // 34668
D=M // 34669
@SP // 34670
AM=M+1 // 34671
A=A-1 // 34672
M=D // 34673
// call Number.dispose
@6 // 34674
D=A // 34675
@14 // 34676
M=D // 34677
@Number.dispose // 34678
D=A // 34679
@13 // 34680
M=D // 34681
@Sphere.intersect.ret.38 // 34682
D=A // 34683
@CALL // 34684
0;JMP // 34685
(Sphere.intersect.ret.38)
@SP // 34686
M=M-1 // 34687

////PushInstruction("local 7")
@LCL // 34688
D=M // 34689
@7 // 34690
A=D+A // 34691
D=M // 34692
@SP // 34693
AM=M+1 // 34694
A=A-1 // 34695
M=D // 34696
@RETURN // 34697
0;JMP // 34698

////LabelInstruction{label='Sphere.intersect$IF_END3}
// label Sphere.intersect$IF_END3
(Sphere.intersect$IF_END3)

////FunctionInstruction{functionName='Main.getThreeHalves', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getOneFiftieth=4, Main.getFourFifths=4}}
// function Main.getThreeHalves with 2
(Main.getThreeHalves)
@SP // 34699
M=M+1 // 34700
AM=M+1 // 34701
A=A-1 // 34702
M=0 // 34703
A=A-1 // 34704
M=0 // 34705

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 34706
D=A // 34707
@SP // 34708
AM=M+1 // 34709
A=A-1 // 34710
M=D // 34711
// call Number.new
@6 // 34712
D=A // 34713
@14 // 34714
M=D // 34715
@Number.new // 34716
D=A // 34717
@13 // 34718
M=D // 34719
@Main.getThreeHalves.ret.0 // 34720
D=A // 34721
@CALL // 34722
0;JMP // 34723
(Main.getThreeHalves.ret.0)
@SP // 34724
AM=M-1 // 34725
D=M // 34726
@LCL // 34727
A=M // 34728
M=D // 34729

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 34730
D=A // 34731
@SP // 34732
AM=M+1 // 34733
A=A-1 // 34734
M=D // 34735
// call Number.new
@6 // 34736
D=A // 34737
@14 // 34738
M=D // 34739
@Number.new // 34740
D=A // 34741
@13 // 34742
M=D // 34743
@Main.getThreeHalves.ret.1 // 34744
D=A // 34745
@CALL // 34746
0;JMP // 34747
(Main.getThreeHalves.ret.1)
@SP // 34748
AM=M-1 // 34749
D=M // 34750
@LCL // 34751
A=M+1 // 34752
M=D // 34753

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34754
A=M // 34755
D=M // 34756
@SP // 34757
AM=M+1 // 34758
A=A-1 // 34759
M=D // 34760
@LCL // 34761
A=M+1 // 34762
D=M // 34763
@SP // 34764
AM=M+1 // 34765
A=A-1 // 34766
M=D // 34767
// call Number.do_div
@7 // 34768
D=A // 34769
@14 // 34770
M=D // 34771
@Number.do_div // 34772
D=A // 34773
@13 // 34774
M=D // 34775
@Main.getThreeHalves.ret.2 // 34776
D=A // 34777
@CALL // 34778
0;JMP // 34779
(Main.getThreeHalves.ret.2)
@SP // 34780
M=M-1 // 34781

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34782
A=M+1 // 34783
D=M // 34784
@SP // 34785
AM=M+1 // 34786
A=A-1 // 34787
M=D // 34788
// call Number.dispose
@6 // 34789
D=A // 34790
@14 // 34791
M=D // 34792
@Number.dispose // 34793
D=A // 34794
@13 // 34795
M=D // 34796
@Main.getThreeHalves.ret.3 // 34797
D=A // 34798
@CALL // 34799
0;JMP // 34800
(Main.getThreeHalves.ret.3)
@SP // 34801
M=M-1 // 34802

////PushInstruction("local 0")
@LCL // 34803
A=M // 34804
D=M // 34805
@SP // 34806
AM=M+1 // 34807
A=A-1 // 34808
M=D // 34809
@RETURN // 34810
0;JMP // 34811

////FunctionInstruction{functionName='Int32.do_zero', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=34, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=39, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.do_zero with 0
(Int32.do_zero)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 34812
A=M // 34813
D=M // 34814
@3 // 34815
M=D // 34816

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 34817
A=M // 34818
D=M // 34819
@SP // 34820
AM=M+1 // 34821
A=A-1 // 34822
M=D // 34823
D=0 // 34824
@SP // 34825
AM=M-1 // 34826
A=M // 34827
M=D // 34828

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 34829
A=M // 34830
D=M // 34831
@SP // 34832
AM=M+1 // 34833
A=A-1 // 34834
M=D+1 // 34835
D=0 // 34836
@SP // 34837
AM=M-1 // 34838
A=M // 34839
M=D // 34840

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 34841
A=M // 34842
D=M // 34843
@2 // 34844
D=D+A // 34845
@SP // 34846
AM=M+1 // 34847
A=A-1 // 34848
M=D // 34849
D=0 // 34850
@SP // 34851
AM=M-1 // 34852
A=M // 34853
M=D // 34854

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 34855
A=M // 34856
D=M // 34857
@3 // 34858
D=D+A // 34859
@SP // 34860
AM=M+1 // 34861
A=A-1 // 34862
M=D // 34863
D=0 // 34864
@SP // 34865
AM=M-1 // 34866
A=M // 34867
M=D // 34868

////PushInstruction("constant 0")
@SP // 34869
AM=M+1 // 34870
A=A-1 // 34871
M=0 // 34872
@RETURN // 34873
0;JMP // 34874

////FunctionInstruction{functionName='Sys.error', numLocals=1, funcMapping={Sys.halt=0, Sys.init=7}}
// function Sys.error with 1
(Sys.error)
@SP // 34875
AM=M+1 // 34876
A=A-1 // 34877
M=0 // 34878

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 34879
A=M // 34880
M=0 // 34881

////LabelInstruction{label='Sys.error_WHILE_EXP1}
// label Sys.error_WHILE_EXP1
(Sys.error_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 8192"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Sys.error_WHILE_END1}}
@Sys.error.LT.136 // 34882
D=A // 34883
@SP // 34884
AM=M+1 // 34885
A=A-1 // 34886
M=D // 34887
@LCL // 34888
A=M // 34889
D=M // 34890
@8192 // 34891
D=D-A // 34892
@DO_LT // 34893
0;JMP // 34894
(Sys.error.LT.136)
D=!D // 34895
@Sys.error_WHILE_END1 // 34896
D;JNE // 34897

////PushWriter{source=UnaryPushGroup(    PushInstruction("constant 1"),
//NEG), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 16384"),
//    binaryOp: "ADD"
//)}
@LCL // 34898
A=M // 34899
D=M // 34900
@16384 // 34901
D=D+A // 34902
@SP // 34903
AM=M+1 // 34904
A=A-1 // 34905
M=D // 34906
D=-1 // 34907
@SP // 34908
AM=M-1 // 34909
A=M // 34910
M=D // 34911

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 34912
A=M // 34913
M=M+1 // 34914

////GotoInstruction{label='Sys.error_WHILE_EXP1}
// goto Sys.error_WHILE_EXP1
@Sys.error_WHILE_EXP1 // 34915
0;JMP // 34916

////LabelInstruction{label='Sys.error_WHILE_END1}
// label Sys.error_WHILE_END1
(Sys.error_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Output.printInt}}
//  pop:  PopInstruction{address=temp 0}
//}

@ARG // 34917
A=M // 34918
D=M // 34919
@SP // 34920
AM=M+1 // 34921
A=A-1 // 34922
M=D // 34923
// call Output.printInt
@6 // 34924
D=A // 34925
@14 // 34926
M=D // 34927
@Output.printInt // 34928
D=A // 34929
@13 // 34930
M=D // 34931
@Sys.error.ret.0 // 34932
D=A // 34933
@CALL // 34934
0;JMP // 34935
(Sys.error.ret.0)
@SP // 34936
M=M-1 // 34937

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.println}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.println
@5 // 34938
D=A // 34939
@14 // 34940
M=D // 34941
@Output.println // 34942
D=A // 34943
@13 // 34944
M=D // 34945
@Sys.error.ret.1 // 34946
D=A // 34947
@CALL // 34948
0;JMP // 34949
(Sys.error.ret.1)
@SP // 34950
M=M-1 // 34951

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Sys.halt}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Sys.halt
@5 // 34952
D=A // 34953
@14 // 34954
M=D // 34955
@Sys.halt // 34956
D=A // 34957
@13 // 34958
M=D // 34959
@Sys.error.ret.2 // 34960
D=A // 34961
@CALL // 34962
0;JMP // 34963
(Sys.error.ret.2)
@SP // 34964
M=M-1 // 34965

////PushInstruction("constant 0")
@SP // 34966
AM=M+1 // 34967
A=A-1 // 34968
M=0 // 34969
@RETURN // 34970
0;JMP // 34971

////FunctionInstruction{functionName='DirectionalLight.getShadowBias', numLocals=0, funcMapping={DirectionalLight.new=9, DirectionalLight.dispose=3, DirectionalLight.getColor=0}}
// function DirectionalLight.getShadowBias with 0
(DirectionalLight.getShadowBias)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 34972
A=M // 34973
D=M // 34974
@3 // 34975
M=D // 34976

////PushInstruction("this 3")
@THIS // 34977
A=M+1 // 34978
A=A+1 // 34979
A=A+1 // 34980
D=M // 34981
@SP // 34982
AM=M+1 // 34983
A=A-1 // 34984
M=D // 34985
@RETURN // 34986
0;JMP // 34987

////FunctionInstruction{functionName='Screen.drawPixel', numLocals=2, funcMapping={Screen.init=0, Screen.setColor=0}}
// function Screen.drawPixel with 2
(Screen.drawPixel)
@SP // 34988
M=M+1 // 34989
AM=M+1 // 34990
A=A-1 // 34991
M=0 // 34992
A=A-1 // 34993
M=0 // 34994

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 16384"),
//    right:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 32")], call=CallInstruction{Math.multiply}},
//            right:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("constant 16")], call=CallInstruction{Math.divide}},
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 34995
A=M+1 // 34996
D=M // 34997
@SP // 34998
AM=M+1 // 34999
A=A-1 // 35000
M=D // 35001
@32 // 35002
D=A // 35003
@SP // 35004
AM=M+1 // 35005
A=A-1 // 35006
M=D // 35007
// call Math.multiply
@7 // 35008
D=A // 35009
@14 // 35010
M=D // 35011
@Math.multiply // 35012
D=A // 35013
@13 // 35014
M=D // 35015
@Screen.drawPixel.ret.0 // 35016
D=A // 35017
@CALL // 35018
0;JMP // 35019
(Screen.drawPixel.ret.0)
@ARG // 35020
A=M // 35021
D=M // 35022
@SP // 35023
AM=M+1 // 35024
A=A-1 // 35025
M=D // 35026
@16 // 35027
D=A // 35028
@SP // 35029
AM=M+1 // 35030
A=A-1 // 35031
M=D // 35032
// call Math.divide
@7 // 35033
D=A // 35034
@14 // 35035
M=D // 35036
@Math.divide // 35037
D=A // 35038
@13 // 35039
M=D // 35040
@Screen.drawPixel.ret.1 // 35041
D=A // 35042
@CALL // 35043
0;JMP // 35044
(Screen.drawPixel.ret.1)
@SP // 35045
AM=M-1 // 35046
D=M // 35047
@SP // 35048
AM=M-1 // 35049
D=D+M // 35050
@16384 // 35051
D=D+A // 35052
@LCL // 35053
A=M // 35054
M=D // 35055

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 35056
A=M // 35057
D=M // 35058
@15 // 35059
D=D&A // 35060
@LCL // 35061
A=M+1 // 35062
M=D // 35063

////ConditionalGroup{push=PushInstruction("static 0"), ifGoto=IfGotoInstruction{label='Screen.drawPixel$IF_TRUE1}}
@Screen.0 // 35064
D=M // 35065
@Screen.drawPixel$IF_TRUE1 // 35066
D;JNE // 35067

////GotoInstruction{label='Screen.drawPixel$IF_FALSE1}
// goto Screen.drawPixel$IF_FALSE1
@Screen.drawPixel$IF_FALSE1 // 35068
0;JMP // 35069

////LabelInstruction{label='Screen.drawPixel$IF_TRUE1}
// label Screen.drawPixel$IF_TRUE1
(Screen.drawPixel$IF_TRUE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Math.twoToThe}},
//    binaryOp: "OR"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 35070
A=M // 35071
D=M // 35072
@SP // 35073
AM=M+1 // 35074
A=A-1 // 35075
M=D // 35076
@LCL // 35077
A=M // 35078
D=M // 35079
@0 // 35080
A=D+A // 35081
D=M // 35082
@SP // 35083
AM=M+1 // 35084
A=A-1 // 35085
M=D // 35086
@LCL // 35087
A=M+1 // 35088
D=M // 35089
@SP // 35090
AM=M+1 // 35091
A=A-1 // 35092
M=D // 35093
// call Math.twoToThe
@6 // 35094
D=A // 35095
@14 // 35096
M=D // 35097
@Math.twoToThe // 35098
D=A // 35099
@13 // 35100
M=D // 35101
@Screen.drawPixel.ret.2 // 35102
D=A // 35103
@CALL // 35104
0;JMP // 35105
(Screen.drawPixel.ret.2)
@SP // 35106
AM=M-1 // 35107
D=M // 35108
@SP // 35109
AM=M-1 // 35110
D=D|M // 35111
@SP // 35112
AM=M-1 // 35113
A=M // 35114
M=D // 35115

////GotoInstruction{label='Screen.drawPixel$IF_END1}
// goto Screen.drawPixel$IF_END1
@Screen.drawPixel$IF_END1 // 35116
0;JMP // 35117

////LabelInstruction{label='Screen.drawPixel$IF_FALSE1}
// label Screen.drawPixel$IF_FALSE1
(Screen.drawPixel$IF_FALSE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Math.twoToThe}},
//NOT),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 35118
A=M // 35119
D=M // 35120
@SP // 35121
AM=M+1 // 35122
A=A-1 // 35123
M=D // 35124
@LCL // 35125
A=M // 35126
D=M // 35127
@0 // 35128
A=D+A // 35129
D=M // 35130
@SP // 35131
AM=M+1 // 35132
A=A-1 // 35133
M=D // 35134
@LCL // 35135
A=M+1 // 35136
D=M // 35137
@SP // 35138
AM=M+1 // 35139
A=A-1 // 35140
M=D // 35141
// call Math.twoToThe
@6 // 35142
D=A // 35143
@14 // 35144
M=D // 35145
@Math.twoToThe // 35146
D=A // 35147
@13 // 35148
M=D // 35149
@Screen.drawPixel.ret.3 // 35150
D=A // 35151
@CALL // 35152
0;JMP // 35153
(Screen.drawPixel.ret.3)
@SP // 35154
AM=M-1 // 35155
D=M // 35156
D=!D // 35157
@SP // 35158
AM=M-1 // 35159
D=D&M // 35160
@SP // 35161
AM=M-1 // 35162
A=M // 35163
M=D // 35164

////LabelInstruction{label='Screen.drawPixel$IF_END1}
// label Screen.drawPixel$IF_END1
(Screen.drawPixel$IF_END1)

////PushInstruction("constant 0")
@SP // 35165
AM=M+1 // 35166
A=A-1 // 35167
M=0 // 35168
@RETURN // 35169
0;JMP // 35170

////FunctionInstruction{functionName='Memory.create_foot', numLocals=0, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1, Memory.remove_node=0}}
// function Memory.create_foot with 0
(Memory.create_foot)

////PushWriter{source=PushInstruction("argument 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("argument 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 4"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@ARG // 35171
A=M // 35172
D=M // 35173
@SP // 35174
AM=M+1 // 35175
A=A-1 // 35176
M=D // 35177
@ARG // 35178
A=M // 35179
D=M // 35180
@0 // 35181
A=D+A // 35182
D=M // 35183
@4 // 35184
D=D+A // 35185
@SP // 35186
AM=M-1 // 35187
D=D+M // 35188
@SP // 35189
AM=M+1 // 35190
A=A-1 // 35191
M=D // 35192
@ARG // 35193
A=M // 35194
D=M // 35195
@SP // 35196
AM=M-1 // 35197
A=M // 35198
M=D // 35199

////PushInstruction("constant 0")
@SP // 35200
AM=M+1 // 35201
A=A-1 // 35202
M=0 // 35203
@RETURN // 35204
0;JMP // 35205

////FunctionInstruction{functionName='Math.twoToThe', numLocals=0, funcMapping={Math.abs=1, Math.max=0, Math.init=1, Math.multiply=0}}
// function Math.twoToThe with 0
(Math.twoToThe)

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 0"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        )
//)
@Math.0 // 35206
D=M // 35207
@SP // 35208
AM=M+1 // 35209
A=A-1 // 35210
M=D // 35211
@ARG // 35212
A=M // 35213
D=M // 35214
@SP // 35215
AM=M-1 // 35216
A=D+M // 35217
D=M // 35218
@SP // 35219
AM=M+1 // 35220
A=A-1 // 35221
M=D // 35222
@RETURN // 35223
0;JMP // 35224

////FunctionInstruction{functionName='Intersection.getObject', numLocals=0, funcMapping={Intersection.getDistanceFromOrigin=0, Intersection.new=1, Intersection.dispose=2}}
// function Intersection.getObject with 0
(Intersection.getObject)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 35225
A=M // 35226
D=M // 35227
@3 // 35228
M=D // 35229

////PushInstruction("this 1")
@THIS // 35230
A=M+1 // 35231
D=M // 35232
@SP // 35233
AM=M+1 // 35234
A=A-1 // 35235
M=D // 35236
@RETURN // 35237
0;JMP // 35238

////FunctionInstruction{functionName='String.setInt', numLocals=6, funcMapping={String.dispose=1, String.charAt=0, String.appendChar=3, String.length=0, String.new=2}}
// function String.setInt with 6
(String.setInt)
@6 // 35239
D=A // 35240
@SP // 35241
AM=D+M // 35242
A=A-1 // 35243
M=0 // 35244
A=A-1 // 35245
M=0 // 35246
A=A-1 // 35247
M=0 // 35248
A=A-1 // 35249
M=0 // 35250
A=A-1 // 35251
M=0 // 35252
A=A-1 // 35253
M=0 // 35254

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 35255
A=M // 35256
D=M // 35257
@3 // 35258
M=D // 35259

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 35260
A=M+1 // 35261
M=0 // 35262

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 35263
D=M // 35264
@4 // 35265
A=D+A // 35266
M=0 // 35267

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE1}}
@String.setInt.EQ.137 // 35268
D=A // 35269
@SP // 35270
AM=M+1 // 35271
A=A-1 // 35272
M=D // 35273
@ARG // 35274
A=M+1 // 35275
D=M // 35276
@DO_EQ // 35277
0;JMP // 35278
(String.setInt.EQ.137)
@String.setInt$IF_TRUE1 // 35279
D;JNE // 35280

////GotoInstruction{label='String.setInt$IF_FALSE1}
// goto String.setInt$IF_FALSE1
@String.setInt$IF_FALSE1 // 35281
0;JMP // 35282

////LabelInstruction{label='String.setInt$IF_TRUE1}
// label String.setInt$IF_TRUE1
(String.setInt$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 48")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35283
D=M // 35284
@SP // 35285
AM=M+1 // 35286
A=A-1 // 35287
M=D // 35288
@48 // 35289
D=A // 35290
@SP // 35291
AM=M+1 // 35292
A=A-1 // 35293
M=D // 35294
// call String.appendChar
@7 // 35295
D=A // 35296
@14 // 35297
M=D // 35298
@String.appendChar // 35299
D=A // 35300
@13 // 35301
M=D // 35302
@String.setInt.ret.0 // 35303
D=A // 35304
@CALL // 35305
0;JMP // 35306
(String.setInt.ret.0)
@SP // 35307
M=M-1 // 35308

////PushInstruction("constant 0")
@SP // 35309
AM=M+1 // 35310
A=A-1 // 35311
M=0 // 35312
@RETURN // 35313
0;JMP // 35314

////LabelInstruction{label='String.setInt$IF_FALSE1}
// label String.setInt$IF_FALSE1
(String.setInt$IF_FALSE1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE2}}
@String.setInt.LT.138 // 35315
D=A // 35316
@SP // 35317
AM=M+1 // 35318
A=A-1 // 35319
M=D // 35320
@ARG // 35321
A=M+1 // 35322
D=M // 35323
@DO_LT // 35324
0;JMP // 35325
(String.setInt.LT.138)
@String.setInt$IF_TRUE2 // 35326
D;JNE // 35327

////GotoInstruction{label='String.setInt$IF_FALSE2}
// goto String.setInt$IF_FALSE2
@String.setInt$IF_FALSE2 // 35328
0;JMP // 35329

////LabelInstruction{label='String.setInt$IF_TRUE2}
// label String.setInt$IF_TRUE2
(String.setInt$IF_TRUE2)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 35330
D=M // 35331
@4 // 35332
A=D+A // 35333
M=1 // 35334

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 32767"),
//                    binaryOp: "AND"
//                ),
//            right:
//                PushInstruction("constant 32767"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE3}}
@String.setInt.LT.139 // 35335
D=A // 35336
@SP // 35337
AM=M+1 // 35338
A=A-1 // 35339
M=D // 35340
@ARG // 35341
A=M+1 // 35342
D=M // 35343
@DO_LT // 35344
0;JMP // 35345
(String.setInt.LT.139)
@SP // 35346
AM=M+1 // 35347
A=A-1 // 35348
M=D // 35349
@String.setInt.EQ.140 // 35350
D=A // 35351
@SP // 35352
AM=M+1 // 35353
A=A-1 // 35354
M=D // 35355
@ARG // 35356
A=M+1 // 35357
D=M // 35358
@32767 // 35359
D=D&A // 35360
@32767 // 35361
D=D-A // 35362
@DO_EQ // 35363
0;JMP // 35364
(String.setInt.EQ.140)
@SP // 35365
AM=M-1 // 35366
D=D&M // 35367
@String.setInt$IF_TRUE3 // 35368
D;JNE // 35369

////GotoInstruction{label='String.setInt$IF_FALSE3}
// goto String.setInt$IF_FALSE3
@String.setInt$IF_FALSE3 // 35370
0;JMP // 35371

////LabelInstruction{label='String.setInt$IF_TRUE3}
// label String.setInt$IF_TRUE3
(String.setInt$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 45")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35372
D=M // 35373
@SP // 35374
AM=M+1 // 35375
A=A-1 // 35376
M=D // 35377
@45 // 35378
D=A // 35379
@SP // 35380
AM=M+1 // 35381
A=A-1 // 35382
M=D // 35383
// call String.appendChar
@7 // 35384
D=A // 35385
@14 // 35386
M=D // 35387
@String.appendChar // 35388
D=A // 35389
@13 // 35390
M=D // 35391
@String.setInt.ret.1 // 35392
D=A // 35393
@CALL // 35394
0;JMP // 35395
(String.setInt.ret.1)
@SP // 35396
M=M-1 // 35397

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 51")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35398
D=M // 35399
@SP // 35400
AM=M+1 // 35401
A=A-1 // 35402
M=D // 35403
@51 // 35404
D=A // 35405
@SP // 35406
AM=M+1 // 35407
A=A-1 // 35408
M=D // 35409
// call String.appendChar
@7 // 35410
D=A // 35411
@14 // 35412
M=D // 35413
@String.appendChar // 35414
D=A // 35415
@13 // 35416
M=D // 35417
@String.setInt.ret.2 // 35418
D=A // 35419
@CALL // 35420
0;JMP // 35421
(String.setInt.ret.2)
@SP // 35422
M=M-1 // 35423

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 50")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35424
D=M // 35425
@SP // 35426
AM=M+1 // 35427
A=A-1 // 35428
M=D // 35429
@50 // 35430
D=A // 35431
@SP // 35432
AM=M+1 // 35433
A=A-1 // 35434
M=D // 35435
// call String.appendChar
@7 // 35436
D=A // 35437
@14 // 35438
M=D // 35439
@String.appendChar // 35440
D=A // 35441
@13 // 35442
M=D // 35443
@String.setInt.ret.3 // 35444
D=A // 35445
@CALL // 35446
0;JMP // 35447
(String.setInt.ret.3)
@SP // 35448
M=M-1 // 35449

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 55")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35450
D=M // 35451
@SP // 35452
AM=M+1 // 35453
A=A-1 // 35454
M=D // 35455
@55 // 35456
D=A // 35457
@SP // 35458
AM=M+1 // 35459
A=A-1 // 35460
M=D // 35461
// call String.appendChar
@7 // 35462
D=A // 35463
@14 // 35464
M=D // 35465
@String.appendChar // 35466
D=A // 35467
@13 // 35468
M=D // 35469
@String.setInt.ret.4 // 35470
D=A // 35471
@CALL // 35472
0;JMP // 35473
(String.setInt.ret.4)
@SP // 35474
M=M-1 // 35475

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 54")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35476
D=M // 35477
@SP // 35478
AM=M+1 // 35479
A=A-1 // 35480
M=D // 35481
@54 // 35482
D=A // 35483
@SP // 35484
AM=M+1 // 35485
A=A-1 // 35486
M=D // 35487
// call String.appendChar
@7 // 35488
D=A // 35489
@14 // 35490
M=D // 35491
@String.appendChar // 35492
D=A // 35493
@13 // 35494
M=D // 35495
@String.setInt.ret.5 // 35496
D=A // 35497
@CALL // 35498
0;JMP // 35499
(String.setInt.ret.5)
@SP // 35500
M=M-1 // 35501

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 56")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35502
D=M // 35503
@SP // 35504
AM=M+1 // 35505
A=A-1 // 35506
M=D // 35507
@56 // 35508
D=A // 35509
@SP // 35510
AM=M+1 // 35511
A=A-1 // 35512
M=D // 35513
// call String.appendChar
@7 // 35514
D=A // 35515
@14 // 35516
M=D // 35517
@String.appendChar // 35518
D=A // 35519
@13 // 35520
M=D // 35521
@String.setInt.ret.6 // 35522
D=A // 35523
@CALL // 35524
0;JMP // 35525
(String.setInt.ret.6)
@SP // 35526
M=M-1 // 35527

////PushInstruction("constant 0")
@SP // 35528
AM=M+1 // 35529
A=A-1 // 35530
M=0 // 35531
@RETURN // 35532
0;JMP // 35533

////LabelInstruction{label='String.setInt$IF_FALSE3}
// label String.setInt$IF_FALSE3
(String.setInt$IF_FALSE3)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("argument 1"),
//NEG)
//  pop:  PopInstruction{address=argument 1}
//}

@ARG // 35534
A=M+1 // 35535
D=-M // 35536
@ARG // 35537
A=M+1 // 35538
M=D // 35539

////LabelInstruction{label='String.setInt$IF_FALSE2}
// label String.setInt$IF_FALSE2
(String.setInt$IF_FALSE2)

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 35540
A=M+1 // 35541
D=M // 35542
@LCL // 35543
A=M+1 // 35544
A=A+1 // 35545
M=D // 35546

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 35547
A=M+1 // 35548
A=A+1 // 35549
A=A+1 // 35550
M=0 // 35551

////LabelInstruction{label='String.setInt_WHILE_EXP1}
// label String.setInt_WHILE_EXP1
(String.setInt_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END1}}
@String.setInt.GT.141 // 35552
D=A // 35553
@SP // 35554
AM=M+1 // 35555
A=A-1 // 35556
M=D // 35557
@LCL // 35558
A=M+1 // 35559
A=A+1 // 35560
D=M // 35561
@DO_GT // 35562
0;JMP // 35563
(String.setInt.GT.141)
D=!D // 35564
@String.setInt_WHILE_END1 // 35565
D;JNE // 35566

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 35567
A=M+1 // 35568
A=A+1 // 35569
D=M // 35570
@SP // 35571
AM=M+1 // 35572
A=A-1 // 35573
M=D // 35574
@10 // 35575
D=A // 35576
@SP // 35577
AM=M+1 // 35578
A=A-1 // 35579
M=D // 35580
// call Math.divide
@7 // 35581
D=A // 35582
@14 // 35583
M=D // 35584
@Math.divide // 35585
D=A // 35586
@13 // 35587
M=D // 35588
@String.setInt.ret.7 // 35589
D=A // 35590
@CALL // 35591
0;JMP // 35592
(String.setInt.ret.7)
@SP // 35593
AM=M-1 // 35594
D=M // 35595
@LCL // 35596
A=M+1 // 35597
A=A+1 // 35598
M=D // 35599

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 35600
A=M+1 // 35601
A=A+1 // 35602
A=A+1 // 35603
M=M+1 // 35604

////GotoInstruction{label='String.setInt_WHILE_EXP1}
// goto String.setInt_WHILE_EXP1
@String.setInt_WHILE_EXP1 // 35605
0;JMP // 35606

////LabelInstruction{label='String.setInt_WHILE_END1}
// label String.setInt_WHILE_END1
(String.setInt_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 35607
A=M+1 // 35608
A=A+1 // 35609
A=A+1 // 35610
D=M // 35611
@SP // 35612
AM=M+1 // 35613
A=A-1 // 35614
M=D // 35615
// call Array.new
@6 // 35616
D=A // 35617
@14 // 35618
M=D // 35619
@Array.new // 35620
D=A // 35621
@13 // 35622
M=D // 35623
@String.setInt.ret.8 // 35624
D=A // 35625
@CALL // 35626
0;JMP // 35627
(String.setInt.ret.8)
@LCL // 35628
D=M // 35629
@5 // 35630
A=D+A // 35631
D=A // 35632
@R13 // 35633
M=D // 35634
@SP // 35635
AM=M-1 // 35636
D=M // 35637
@R13 // 35638
A=M // 35639
M=D // 35640

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 35641
A=M+1 // 35642
M=0 // 35643

////LabelInstruction{label='String.setInt_WHILE_EXP2}
// label String.setInt_WHILE_EXP2
(String.setInt_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END2}}
@String.setInt.GT.142 // 35644
D=A // 35645
@SP // 35646
AM=M+1 // 35647
A=A-1 // 35648
M=D // 35649
@ARG // 35650
A=M+1 // 35651
D=M // 35652
@DO_GT // 35653
0;JMP // 35654
(String.setInt.GT.142)
D=!D // 35655
@String.setInt_WHILE_END2 // 35656
D;JNE // 35657

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}, PushInstruction("constant 10")], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 35658
A=M+1 // 35659
D=M // 35660
@SP // 35661
AM=M+1 // 35662
A=A-1 // 35663
M=D // 35664
@ARG // 35665
A=M+1 // 35666
D=M // 35667
@SP // 35668
AM=M+1 // 35669
A=A-1 // 35670
M=D // 35671
@10 // 35672
D=A // 35673
@SP // 35674
AM=M+1 // 35675
A=A-1 // 35676
M=D // 35677
// call Math.divide
@7 // 35678
D=A // 35679
@14 // 35680
M=D // 35681
@Math.divide // 35682
D=A // 35683
@13 // 35684
M=D // 35685
@String.setInt.ret.9 // 35686
D=A // 35687
@CALL // 35688
0;JMP // 35689
(String.setInt.ret.9)
@10 // 35690
D=A // 35691
@SP // 35692
AM=M+1 // 35693
A=A-1 // 35694
M=D // 35695
// call Math.multiply
@7 // 35696
D=A // 35697
@14 // 35698
M=D // 35699
@Math.multiply // 35700
D=A // 35701
@13 // 35702
M=D // 35703
@String.setInt.ret.10 // 35704
D=A // 35705
@CALL // 35706
0;JMP // 35707
(String.setInt.ret.10)
@SP // 35708
AM=M-1 // 35709
D=M // 35710
@SP // 35711
AM=M-1 // 35712
D=M-D // 35713
@LCL // 35714
A=M // 35715
M=D // 35716

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 48"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 35717
D=M // 35718
@5 // 35719
A=D+A // 35720
D=M // 35721
@SP // 35722
AM=M+1 // 35723
A=A-1 // 35724
M=D // 35725
@LCL // 35726
A=M+1 // 35727
D=M // 35728
@SP // 35729
AM=M-1 // 35730
D=D+M // 35731
@SP // 35732
AM=M+1 // 35733
A=A-1 // 35734
M=D // 35735
@LCL // 35736
A=M // 35737
D=M // 35738
@48 // 35739
D=D+A // 35740
@SP // 35741
AM=M-1 // 35742
A=M // 35743
M=D // 35744

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=argument 1}
//}

@ARG // 35745
A=M+1 // 35746
D=M // 35747
@SP // 35748
AM=M+1 // 35749
A=A-1 // 35750
M=D // 35751
@10 // 35752
D=A // 35753
@SP // 35754
AM=M+1 // 35755
A=A-1 // 35756
M=D // 35757
// call Math.divide
@7 // 35758
D=A // 35759
@14 // 35760
M=D // 35761
@Math.divide // 35762
D=A // 35763
@13 // 35764
M=D // 35765
@String.setInt.ret.11 // 35766
D=A // 35767
@CALL // 35768
0;JMP // 35769
(String.setInt.ret.11)
@SP // 35770
AM=M-1 // 35771
D=M // 35772
@ARG // 35773
A=M+1 // 35774
M=D // 35775

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 35776
A=M+1 // 35777
M=M+1 // 35778

////GotoInstruction{label='String.setInt_WHILE_EXP2}
// goto String.setInt_WHILE_EXP2
@String.setInt_WHILE_EXP2 // 35779
0;JMP // 35780

////LabelInstruction{label='String.setInt_WHILE_END2}
// label String.setInt_WHILE_END2
(String.setInt_WHILE_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE4}}
@String.setInt.EQ.143 // 35781
D=A // 35782
@SP // 35783
AM=M+1 // 35784
A=A-1 // 35785
M=D // 35786
@LCL // 35787
D=M // 35788
@4 // 35789
A=D+A // 35790
D=M // 35791
D=D-1 // 35792
@DO_EQ // 35793
0;JMP // 35794
(String.setInt.EQ.143)
@String.setInt$IF_TRUE4 // 35795
D;JNE // 35796

////GotoInstruction{label='String.setInt$IF_FALSE4}
// goto String.setInt$IF_FALSE4
@String.setInt$IF_FALSE4 // 35797
0;JMP // 35798

////LabelInstruction{label='String.setInt$IF_TRUE4}
// label String.setInt$IF_TRUE4
(String.setInt$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 45")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35799
D=M // 35800
@SP // 35801
AM=M+1 // 35802
A=A-1 // 35803
M=D // 35804
@45 // 35805
D=A // 35806
@SP // 35807
AM=M+1 // 35808
A=A-1 // 35809
M=D // 35810
// call String.appendChar
@7 // 35811
D=A // 35812
@14 // 35813
M=D // 35814
@String.appendChar // 35815
D=A // 35816
@13 // 35817
M=D // 35818
@String.setInt.ret.12 // 35819
D=A // 35820
@CALL // 35821
0;JMP // 35822
(String.setInt.ret.12)
@SP // 35823
M=M-1 // 35824

////LabelInstruction{label='String.setInt$IF_FALSE4}
// label String.setInt$IF_FALSE4
(String.setInt$IF_FALSE4)

////LabelInstruction{label='String.setInt_WHILE_EXP3}
// label String.setInt_WHILE_EXP3
(String.setInt_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END3}}
@String.setInt.GT.144 // 35825
D=A // 35826
@SP // 35827
AM=M+1 // 35828
A=A-1 // 35829
M=D // 35830
@LCL // 35831
A=M+1 // 35832
D=M // 35833
@DO_GT // 35834
0;JMP // 35835
(String.setInt.GT.144)
D=!D // 35836
@String.setInt_WHILE_END3 // 35837
D;JNE // 35838

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 35839
A=M+1 // 35840
M=M-1 // 35841

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 35842
D=M // 35843
@SP // 35844
AM=M+1 // 35845
A=A-1 // 35846
M=D // 35847
@LCL // 35848
D=M // 35849
@5 // 35850
A=D+A // 35851
D=M // 35852
@SP // 35853
AM=M+1 // 35854
A=A-1 // 35855
M=D // 35856
@LCL // 35857
A=M+1 // 35858
D=M // 35859
@SP // 35860
AM=M-1 // 35861
A=D+M // 35862
D=M // 35863
@SP // 35864
AM=M+1 // 35865
A=A-1 // 35866
M=D // 35867
// call String.appendChar
@7 // 35868
D=A // 35869
@14 // 35870
M=D // 35871
@String.appendChar // 35872
D=A // 35873
@13 // 35874
M=D // 35875
@String.setInt.ret.13 // 35876
D=A // 35877
@CALL // 35878
0;JMP // 35879
(String.setInt.ret.13)
@SP // 35880
M=M-1 // 35881

////GotoInstruction{label='String.setInt_WHILE_EXP3}
// goto String.setInt_WHILE_EXP3
@String.setInt_WHILE_EXP3 // 35882
0;JMP // 35883

////LabelInstruction{label='String.setInt_WHILE_END3}
// label String.setInt_WHILE_END3
(String.setInt_WHILE_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35884
D=M // 35885
@5 // 35886
A=D+A // 35887
D=M // 35888
@SP // 35889
AM=M+1 // 35890
A=A-1 // 35891
M=D // 35892
// call Array.dispose
@6 // 35893
D=A // 35894
@14 // 35895
M=D // 35896
@Array.dispose // 35897
D=A // 35898
@13 // 35899
M=D // 35900
@String.setInt.ret.14 // 35901
D=A // 35902
@CALL // 35903
0;JMP // 35904
(String.setInt.ret.14)
@SP // 35905
M=M-1 // 35906

////PushInstruction("constant 0")
@SP // 35907
AM=M+1 // 35908
A=A-1 // 35909
M=0 // 35910
@RETURN // 35911
0;JMP // 35912

////FunctionInstruction{functionName='Int32.u4_array_mul_u4_array', numLocals=6, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=34, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=39, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.u4_array_mul_u4_array with 6
(Int32.u4_array_mul_u4_array)
@6 // 35913
D=A // 35914
@SP // 35915
AM=D+M // 35916
A=A-1 // 35917
M=0 // 35918
A=A-1 // 35919
M=0 // 35920
A=A-1 // 35921
M=0 // 35922
A=A-1 // 35923
M=0 // 35924
A=A-1 // 35925
M=0 // 35926
A=A-1 // 35927
M=0 // 35928

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Array.new}}
//  pop:  PopInstruction{address=local 0}
//}

@16 // 35929
D=A // 35930
@SP // 35931
AM=M+1 // 35932
A=A-1 // 35933
M=D // 35934
// call Array.new
@6 // 35935
D=A // 35936
@14 // 35937
M=D // 35938
@Array.new // 35939
D=A // 35940
@13 // 35941
M=D // 35942
@Int32.u4_array_mul_u4_array.ret.0 // 35943
D=A // 35944
@CALL // 35945
0;JMP // 35946
(Int32.u4_array_mul_u4_array.ret.0)
@SP // 35947
AM=M-1 // 35948
D=M // 35949
@LCL // 35950
A=M // 35951
M=D // 35952

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 35953
A=M+1 // 35954
A=A+1 // 35955
A=A+1 // 35956
M=0 // 35957

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP1}
// label Int32.u4_array_mul_u4_array_WHILE_EXP1
(Int32.u4_array_mul_u4_array_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END1}}
@Int32.u4_array_mul_u4_array.LT.145 // 35958
D=A // 35959
@SP // 35960
AM=M+1 // 35961
A=A-1 // 35962
M=D // 35963
@LCL // 35964
A=M+1 // 35965
A=A+1 // 35966
A=A+1 // 35967
D=M // 35968
@16 // 35969
D=D-A // 35970
@DO_LT // 35971
0;JMP // 35972
(Int32.u4_array_mul_u4_array.LT.145)
D=!D // 35973
@Int32.u4_array_mul_u4_array_WHILE_END1 // 35974
D;JNE // 35975

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 3"),
//    binaryOp: "ADD"
//)}
@LCL // 35976
A=M+1 // 35977
A=A+1 // 35978
A=A+1 // 35979
D=M // 35980
A=A-1 // 35981
A=A-1 // 35982
A=A-1 // 35983
D=D+M // 35984
@SP // 35985
AM=M+1 // 35986
A=A-1 // 35987
M=D // 35988
D=0 // 35989
@SP // 35990
AM=M-1 // 35991
A=M // 35992
M=D // 35993

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 35994
A=M+1 // 35995
A=A+1 // 35996
A=A+1 // 35997
M=M+1 // 35998

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP1}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP1
@Int32.u4_array_mul_u4_array_WHILE_EXP1 // 35999
0;JMP // 36000

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END1}
// label Int32.u4_array_mul_u4_array_WHILE_END1
(Int32.u4_array_mul_u4_array_WHILE_END1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 36001
A=M+1 // 36002
M=0 // 36003

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP2}
// label Int32.u4_array_mul_u4_array_WHILE_EXP2
(Int32.u4_array_mul_u4_array_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END2}}
@Int32.u4_array_mul_u4_array.LT.146 // 36004
D=A // 36005
@SP // 36006
AM=M+1 // 36007
A=A-1 // 36008
M=D // 36009
@LCL // 36010
A=M+1 // 36011
D=M // 36012
@8 // 36013
D=D-A // 36014
@DO_LT // 36015
0;JMP // 36016
(Int32.u4_array_mul_u4_array.LT.146)
D=!D // 36017
@Int32.u4_array_mul_u4_array_WHILE_END2 // 36018
D;JNE // 36019

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 36020
A=M+1 // 36021
A=A+1 // 36022
M=0 // 36023

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 5}
//}

@ARG // 36024
A=M+1 // 36025
D=M // 36026
@SP // 36027
AM=M+1 // 36028
A=A-1 // 36029
M=D // 36030
@LCL // 36031
A=M+1 // 36032
D=M // 36033
@SP // 36034
AM=M-1 // 36035
A=D+M // 36036
D=M // 36037
@SP // 36038
AM=M+1 // 36039
A=A-1 // 36040
M=D // 36041
@LCL // 36042
D=M // 36043
@5 // 36044
A=D+A // 36045
D=A // 36046
@R13 // 36047
M=D // 36048
@SP // 36049
AM=M-1 // 36050
D=M // 36051
@R13 // 36052
A=M // 36053
M=D // 36054

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 36055
A=M+1 // 36056
A=A+1 // 36057
A=A+1 // 36058
M=0 // 36059

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP3}
// label Int32.u4_array_mul_u4_array_WHILE_EXP3
(Int32.u4_array_mul_u4_array_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END3}}
@Int32.u4_array_mul_u4_array.LT.147 // 36060
D=A // 36061
@SP // 36062
AM=M+1 // 36063
A=A-1 // 36064
M=D // 36065
@LCL // 36066
A=M+1 // 36067
A=A+1 // 36068
A=A+1 // 36069
D=M // 36070
@8 // 36071
D=D-A // 36072
@DO_LT // 36073
0;JMP // 36074
(Int32.u4_array_mul_u4_array.LT.147)
D=!D // 36075
@Int32.u4_array_mul_u4_array_WHILE_END3 // 36076
D;JNE // 36077

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Math.multiply}},
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 3"),
//                                    right:
//                                        PushInstruction("local 1"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@ARG // 36078
A=M // 36079
D=M // 36080
@SP // 36081
AM=M+1 // 36082
A=A-1 // 36083
M=D // 36084
@LCL // 36085
A=M+1 // 36086
A=A+1 // 36087
A=A+1 // 36088
D=M // 36089
@SP // 36090
AM=M-1 // 36091
A=D+M // 36092
D=M // 36093
@SP // 36094
AM=M+1 // 36095
A=A-1 // 36096
M=D // 36097
@LCL // 36098
D=M // 36099
@5 // 36100
A=D+A // 36101
D=M // 36102
@SP // 36103
AM=M+1 // 36104
A=A-1 // 36105
M=D // 36106
// call Math.multiply
@7 // 36107
D=A // 36108
@14 // 36109
M=D // 36110
@Math.multiply // 36111
D=A // 36112
@13 // 36113
M=D // 36114
@Int32.u4_array_mul_u4_array.ret.1 // 36115
D=A // 36116
@CALL // 36117
0;JMP // 36118
(Int32.u4_array_mul_u4_array.ret.1)
@LCL // 36119
A=M // 36120
D=M // 36121
@SP // 36122
AM=M+1 // 36123
A=A-1 // 36124
M=D // 36125
@LCL // 36126
A=M+1 // 36127
A=A+1 // 36128
A=A+1 // 36129
D=M // 36130
A=A-1 // 36131
A=A-1 // 36132
D=D+M // 36133
@SP // 36134
AM=M-1 // 36135
A=D+M // 36136
D=M // 36137
@SP // 36138
AM=M-1 // 36139
D=D+M // 36140
@SP // 36141
AM=M+1 // 36142
A=A-1 // 36143
M=D // 36144
@LCL // 36145
A=M+1 // 36146
A=A+1 // 36147
D=M // 36148
@SP // 36149
AM=M-1 // 36150
D=D+M // 36151
@SP // 36152
AM=M+1 // 36153
A=A-1 // 36154
M=D // 36155
@LCL // 36156
D=M // 36157
@4 // 36158
A=D+A // 36159
D=A // 36160
@R13 // 36161
M=D // 36162
@SP // 36163
AM=M-1 // 36164
D=M // 36165
@R13 // 36166
A=M // 36167
M=D // 36168

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 3"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 36169
A=M // 36170
D=M // 36171
@SP // 36172
AM=M+1 // 36173
A=A-1 // 36174
M=D // 36175
@LCL // 36176
A=M+1 // 36177
A=A+1 // 36178
A=A+1 // 36179
D=M // 36180
A=A-1 // 36181
A=A-1 // 36182
D=D+M // 36183
@SP // 36184
AM=M-1 // 36185
D=D+M // 36186
@SP // 36187
AM=M+1 // 36188
A=A-1 // 36189
M=D // 36190
@LCL // 36191
D=M // 36192
@4 // 36193
A=D+A // 36194
D=M // 36195
@15 // 36196
D=D&A // 36197
@SP // 36198
AM=M-1 // 36199
A=M // 36200
M=D // 36201

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 36202
D=M // 36203
@4 // 36204
A=D+A // 36205
D=M // 36206
@SP // 36207
AM=M+1 // 36208
A=A-1 // 36209
M=D // 36210
@4 // 36211
D=A // 36212
@SP // 36213
AM=M+1 // 36214
A=A-1 // 36215
M=D // 36216
// call Int32.arith_rightshift
@7 // 36217
D=A // 36218
@14 // 36219
M=D // 36220
@Int32.arith_rightshift // 36221
D=A // 36222
@13 // 36223
M=D // 36224
@Int32.u4_array_mul_u4_array.ret.2 // 36225
D=A // 36226
@CALL // 36227
0;JMP // 36228
(Int32.u4_array_mul_u4_array.ret.2)
@SP // 36229
AM=M-1 // 36230
D=M // 36231
@LCL // 36232
A=M+1 // 36233
A=A+1 // 36234
M=D // 36235

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 36236
A=M+1 // 36237
A=A+1 // 36238
A=A+1 // 36239
M=M+1 // 36240

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP3}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP3
@Int32.u4_array_mul_u4_array_WHILE_EXP3 // 36241
0;JMP // 36242

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END3}
// label Int32.u4_array_mul_u4_array_WHILE_END3
(Int32.u4_array_mul_u4_array_WHILE_END3)

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 8"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 36243
A=M // 36244
D=M // 36245
@SP // 36246
AM=M+1 // 36247
A=A-1 // 36248
M=D // 36249
@LCL // 36250
A=M+1 // 36251
D=M // 36252
@8 // 36253
D=D+A // 36254
@SP // 36255
AM=M-1 // 36256
D=D+M // 36257
@SP // 36258
AM=M+1 // 36259
A=A-1 // 36260
M=D // 36261
@LCL // 36262
A=M+1 // 36263
A=A+1 // 36264
D=M // 36265
@SP // 36266
AM=M-1 // 36267
A=M // 36268
M=D // 36269

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 36270
A=M+1 // 36271
M=M+1 // 36272

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP2}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP2
@Int32.u4_array_mul_u4_array_WHILE_EXP2 // 36273
0;JMP // 36274

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END2}
// label Int32.u4_array_mul_u4_array_WHILE_END2
(Int32.u4_array_mul_u4_array_WHILE_END2)

////PushInstruction("local 0")
@LCL // 36275
A=M // 36276
D=M // 36277
@SP // 36278
AM=M+1 // 36279
A=A-1 // 36280
M=D // 36281
@RETURN // 36282
0;JMP // 36283

////FunctionInstruction{functionName='Main.getRawPixelColor', numLocals=18, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getThreeHalves=4, Main.getOneFiftieth=4, Main.getFourFifths=4}}
// function Main.getRawPixelColor with 18
(Main.getRawPixelColor)
@18 // 36284
D=A // 36285
@SP // 36286
AM=D+M // 36287
A=A-1 // 36288
M=0 // 36289
A=A-1 // 36290
M=0 // 36291
A=A-1 // 36292
M=0 // 36293
A=A-1 // 36294
M=0 // 36295
A=A-1 // 36296
M=0 // 36297
A=A-1 // 36298
M=0 // 36299
A=A-1 // 36300
M=0 // 36301
A=A-1 // 36302
M=0 // 36303
A=A-1 // 36304
M=0 // 36305
A=A-1 // 36306
M=0 // 36307
A=A-1 // 36308
M=0 // 36309
A=A-1 // 36310
M=0 // 36311
A=A-1 // 36312
M=0 // 36313
A=A-1 // 36314
M=0 // 36315
A=A-1 // 36316
M=0 // 36317
A=A-1 // 36318
M=0 // 36319
A=A-1 // 36320
M=0 // 36321
A=A-1 // 36322
M=0 // 36323

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 36324
AM=M+1 // 36325
A=A-1 // 36326
M=0 // 36327
// call Number.new
@6 // 36328
D=A // 36329
@14 // 36330
M=D // 36331
@Number.new // 36332
D=A // 36333
@13 // 36334
M=D // 36335
@Main.getRawPixelColor.ret.0 // 36336
D=A // 36337
@CALL // 36338
0;JMP // 36339
(Main.getRawPixelColor.ret.0)
@SP // 36340
AM=M-1 // 36341
D=M // 36342
@LCL // 36343
A=M // 36344
M=D // 36345

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("argument 1"), PushInstruction("argument 2"), PushInstruction("argument 4"), PushInstruction("argument 5"), PushInstruction("argument 6")], call=CallInstruction{Scene.create_prime_ray}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 36346
A=M // 36347
D=M // 36348
@SP // 36349
AM=M+1 // 36350
A=A-1 // 36351
M=D // 36352
@ARG // 36353
A=M+1 // 36354
D=M // 36355
@SP // 36356
AM=M+1 // 36357
A=A-1 // 36358
M=D // 36359
@ARG // 36360
A=M+1 // 36361
A=A+1 // 36362
D=M // 36363
@SP // 36364
AM=M+1 // 36365
A=A-1 // 36366
M=D // 36367
@ARG // 36368
D=M // 36369
@4 // 36370
A=D+A // 36371
D=M // 36372
@SP // 36373
AM=M+1 // 36374
A=A-1 // 36375
M=D // 36376
@ARG // 36377
D=M // 36378
@5 // 36379
A=D+A // 36380
D=M // 36381
@SP // 36382
AM=M+1 // 36383
A=A-1 // 36384
M=D // 36385
@ARG // 36386
D=M // 36387
@6 // 36388
A=D+A // 36389
D=M // 36390
@SP // 36391
AM=M+1 // 36392
A=A-1 // 36393
M=D // 36394
// call Scene.create_prime_ray
@11 // 36395
D=A // 36396
@14 // 36397
M=D // 36398
@Scene.create_prime_ray // 36399
D=A // 36400
@13 // 36401
M=D // 36402
@Main.getRawPixelColor.ret.1 // 36403
D=A // 36404
@CALL // 36405
0;JMP // 36406
(Main.getRawPixelColor.ret.1)
@SP // 36407
AM=M-1 // 36408
D=M // 36409
@LCL // 36410
A=M+1 // 36411
M=D // 36412

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 1")], call=CallInstruction{Scene.trace}}
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 36413
A=M // 36414
D=M // 36415
@SP // 36416
AM=M+1 // 36417
A=A-1 // 36418
M=D // 36419
@LCL // 36420
A=M+1 // 36421
D=M // 36422
@SP // 36423
AM=M+1 // 36424
A=A-1 // 36425
M=D // 36426
// call Scene.trace
@7 // 36427
D=A // 36428
@14 // 36429
M=D // 36430
@Scene.trace // 36431
D=A // 36432
@13 // 36433
M=D // 36434
@Main.getRawPixelColor.ret.2 // 36435
D=A // 36436
@CALL // 36437
0;JMP // 36438
(Main.getRawPixelColor.ret.2)
@SP // 36439
AM=M-1 // 36440
D=M // 36441
@LCL // 36442
A=M+1 // 36443
A=A+1 // 36444
M=D // 36445

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE1}}
@Main.getRawPixelColor.EQ.148 // 36446
D=A // 36447
@SP // 36448
AM=M+1 // 36449
A=A-1 // 36450
M=D // 36451
@LCL // 36452
A=M+1 // 36453
A=A+1 // 36454
D=M // 36455
@DO_EQ // 36456
0;JMP // 36457
(Main.getRawPixelColor.EQ.148)
D=!D // 36458
@Main.getRawPixelColor$IF_TRUE1 // 36459
D;JNE // 36460

////GotoInstruction{label='Main.getRawPixelColor$IF_FALSE1}
// goto Main.getRawPixelColor$IF_FALSE1
@Main.getRawPixelColor$IF_FALSE1 // 36461
0;JMP // 36462

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE1}
// label Main.getRawPixelColor$IF_TRUE1
(Main.getRawPixelColor$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.getOrigin}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 36463
A=M+1 // 36464
D=M // 36465
@SP // 36466
AM=M+1 // 36467
A=A-1 // 36468
M=D // 36469
// call Ray.getOrigin
@6 // 36470
D=A // 36471
@14 // 36472
M=D // 36473
@Ray.getOrigin // 36474
D=A // 36475
@13 // 36476
M=D // 36477
@Main.getRawPixelColor.ret.3 // 36478
D=A // 36479
@CALL // 36480
0;JMP // 36481
(Main.getRawPixelColor.ret.3)
@LCL // 36482
D=M // 36483
@12 // 36484
A=D+A // 36485
D=A // 36486
@R13 // 36487
M=D // 36488
@SP // 36489
AM=M-1 // 36490
D=M // 36491
@R13 // 36492
A=M // 36493
M=D // 36494

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 36495
D=M // 36496
@12 // 36497
A=D+A // 36498
D=M // 36499
@SP // 36500
AM=M+1 // 36501
A=A-1 // 36502
M=D // 36503
// call Vec3.clone
@6 // 36504
D=A // 36505
@14 // 36506
M=D // 36507
@Vec3.clone // 36508
D=A // 36509
@13 // 36510
M=D // 36511
@Main.getRawPixelColor.ret.4 // 36512
D=A // 36513
@CALL // 36514
0;JMP // 36515
(Main.getRawPixelColor.ret.4)
@SP // 36516
AM=M-1 // 36517
D=M // 36518
@LCL // 36519
A=M+1 // 36520
A=A+1 // 36521
A=A+1 // 36522
M=D // 36523

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.getDirection}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 36524
A=M+1 // 36525
D=M // 36526
@SP // 36527
AM=M+1 // 36528
A=A-1 // 36529
M=D // 36530
// call Ray.getDirection
@6 // 36531
D=A // 36532
@14 // 36533
M=D // 36534
@Ray.getDirection // 36535
D=A // 36536
@13 // 36537
M=D // 36538
@Main.getRawPixelColor.ret.5 // 36539
D=A // 36540
@CALL // 36541
0;JMP // 36542
(Main.getRawPixelColor.ret.5)
@LCL // 36543
D=M // 36544
@12 // 36545
A=D+A // 36546
D=A // 36547
@R13 // 36548
M=D // 36549
@SP // 36550
AM=M-1 // 36551
D=M // 36552
@R13 // 36553
A=M // 36554
M=D // 36555

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 36556
D=M // 36557
@12 // 36558
A=D+A // 36559
D=M // 36560
@SP // 36561
AM=M+1 // 36562
A=A-1 // 36563
M=D // 36564
// call Vec3.clone
@6 // 36565
D=A // 36566
@14 // 36567
M=D // 36568
@Vec3.clone // 36569
D=A // 36570
@13 // 36571
M=D // 36572
@Main.getRawPixelColor.ret.6 // 36573
D=A // 36574
@CALL // 36575
0;JMP // 36576
(Main.getRawPixelColor.ret.6)
@LCL // 36577
D=M // 36578
@4 // 36579
A=D+A // 36580
D=A // 36581
@R13 // 36582
M=D // 36583
@SP // 36584
AM=M-1 // 36585
D=M // 36586
@R13 // 36587
A=M // 36588
M=D // 36589

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getDistanceFromOrigin}}], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36590
D=M // 36591
@4 // 36592
A=D+A // 36593
D=M // 36594
@SP // 36595
AM=M+1 // 36596
A=A-1 // 36597
M=D // 36598
@LCL // 36599
A=M+1 // 36600
A=A+1 // 36601
D=M // 36602
@SP // 36603
AM=M+1 // 36604
A=A-1 // 36605
M=D // 36606
// call Intersection.getDistanceFromOrigin
@6 // 36607
D=A // 36608
@14 // 36609
M=D // 36610
@Intersection.getDistanceFromOrigin // 36611
D=A // 36612
@13 // 36613
M=D // 36614
@Main.getRawPixelColor.ret.7 // 36615
D=A // 36616
@CALL // 36617
0;JMP // 36618
(Main.getRawPixelColor.ret.7)
// call Vec3.do_scale
@7 // 36619
D=A // 36620
@14 // 36621
M=D // 36622
@Vec3.do_scale // 36623
D=A // 36624
@13 // 36625
M=D // 36626
@Main.getRawPixelColor.ret.8 // 36627
D=A // 36628
@CALL // 36629
0;JMP // 36630
(Main.getRawPixelColor.ret.8)
@SP // 36631
M=M-1 // 36632

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 4")], call=CallInstruction{Vec3.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36633
A=M+1 // 36634
A=A+1 // 36635
A=A+1 // 36636
D=M // 36637
@SP // 36638
AM=M+1 // 36639
A=A-1 // 36640
M=D // 36641
@LCL // 36642
D=M // 36643
@4 // 36644
A=D+A // 36645
D=M // 36646
@SP // 36647
AM=M+1 // 36648
A=A-1 // 36649
M=D // 36650
// call Vec3.do_add
@7 // 36651
D=A // 36652
@14 // 36653
M=D // 36654
@Vec3.do_add // 36655
D=A // 36656
@13 // 36657
M=D // 36658
@Main.getRawPixelColor.ret.9 // 36659
D=A // 36660
@CALL // 36661
0;JMP // 36662
(Main.getRawPixelColor.ret.9)
@SP // 36663
M=M-1 // 36664

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getObject}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 36665
A=M+1 // 36666
A=A+1 // 36667
D=M // 36668
@SP // 36669
AM=M+1 // 36670
A=A-1 // 36671
M=D // 36672
// call Intersection.getObject
@6 // 36673
D=A // 36674
@14 // 36675
M=D // 36676
@Intersection.getObject // 36677
D=A // 36678
@13 // 36679
M=D // 36680
@Main.getRawPixelColor.ret.10 // 36681
D=A // 36682
@CALL // 36683
0;JMP // 36684
(Main.getRawPixelColor.ret.10)
@LCL // 36685
D=M // 36686
@13 // 36687
A=D+A // 36688
D=A // 36689
@R13 // 36690
M=D // 36691
@SP // 36692
AM=M-1 // 36693
D=M // 36694
@R13 // 36695
A=M // 36696
M=D // 36697

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("local 3")], call=CallInstruction{Element.surface_normal}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 36698
D=M // 36699
@13 // 36700
A=D+A // 36701
D=M // 36702
@SP // 36703
AM=M+1 // 36704
A=A-1 // 36705
M=D // 36706
@LCL // 36707
A=M+1 // 36708
A=A+1 // 36709
A=A+1 // 36710
D=M // 36711
@SP // 36712
AM=M+1 // 36713
A=A-1 // 36714
M=D // 36715
// call Element.surface_normal
@7 // 36716
D=A // 36717
@14 // 36718
M=D // 36719
@Element.surface_normal // 36720
D=A // 36721
@13 // 36722
M=D // 36723
@Main.getRawPixelColor.ret.11 // 36724
D=A // 36725
@CALL // 36726
0;JMP // 36727
(Main.getRawPixelColor.ret.11)
@LCL // 36728
D=M // 36729
@5 // 36730
A=D+A // 36731
D=A // 36732
@R13 // 36733
M=D // 36734
@SP // 36735
AM=M-1 // 36736
D=M // 36737
@R13 // 36738
A=M // 36739
M=D // 36740

////LabelInstruction{label='Main.getRawPixelColor_WHILE_EXP1}
// label Main.getRawPixelColor_WHILE_EXP1
(Main.getRawPixelColor_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 14"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getNumLights}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor_WHILE_END1}}
@Main.getRawPixelColor.LT.149 // 36741
D=A // 36742
@SP // 36743
AM=M+1 // 36744
A=A-1 // 36745
M=D // 36746
@LCL // 36747
D=M // 36748
@14 // 36749
A=D+A // 36750
D=M // 36751
@SP // 36752
AM=M+1 // 36753
A=A-1 // 36754
M=D // 36755
@ARG // 36756
A=M // 36757
D=M // 36758
@SP // 36759
AM=M+1 // 36760
A=A-1 // 36761
M=D // 36762
// call Scene.getNumLights
@6 // 36763
D=A // 36764
@14 // 36765
M=D // 36766
@Scene.getNumLights // 36767
D=A // 36768
@13 // 36769
M=D // 36770
@Main.getRawPixelColor.ret.12 // 36771
D=A // 36772
@CALL // 36773
0;JMP // 36774
(Main.getRawPixelColor.ret.12)
@SP // 36775
AM=M-1 // 36776
D=M // 36777
@SP // 36778
AM=M-1 // 36779
D=M-D // 36780
@DO_LT // 36781
0;JMP // 36782
(Main.getRawPixelColor.LT.149)
D=!D // 36783
@Main.getRawPixelColor_WHILE_END1 // 36784
D;JNE // 36785

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getLights}}
//  pop:  PopInstruction{address=local 16}
//}

@ARG // 36786
A=M // 36787
D=M // 36788
@SP // 36789
AM=M+1 // 36790
A=A-1 // 36791
M=D // 36792
// call Scene.getLights
@6 // 36793
D=A // 36794
@14 // 36795
M=D // 36796
@Scene.getLights // 36797
D=A // 36798
@13 // 36799
M=D // 36800
@Main.getRawPixelColor.ret.13 // 36801
D=A // 36802
@CALL // 36803
0;JMP // 36804
(Main.getRawPixelColor.ret.13)
@LCL // 36805
D=M // 36806
@16 // 36807
A=D+A // 36808
D=A // 36809
@R13 // 36810
M=D // 36811
@SP // 36812
AM=M-1 // 36813
D=M // 36814
@R13 // 36815
A=M // 36816
M=D // 36817

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 16"),
//            right:
//                PushInstruction("local 14"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 17}
//}

@LCL // 36818
D=M // 36819
@16 // 36820
A=D+A // 36821
D=M // 36822
A=A-1 // 36823
A=A-1 // 36824
A=D+M // 36825
D=M // 36826
@SP // 36827
AM=M+1 // 36828
A=A-1 // 36829
M=D // 36830
@LCL // 36831
D=M // 36832
@17 // 36833
A=D+A // 36834
D=A // 36835
@R13 // 36836
M=D // 36837
@SP // 36838
AM=M-1 // 36839
D=M // 36840
@R13 // 36841
A=M // 36842
M=D // 36843

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 36844
A=M+1 // 36845
A=A+1 // 36846
A=A+1 // 36847
D=M // 36848
@SP // 36849
AM=M+1 // 36850
A=A-1 // 36851
M=D // 36852
// call Vec3.clone
@6 // 36853
D=A // 36854
@14 // 36855
M=D // 36856
@Vec3.clone // 36857
D=A // 36858
@13 // 36859
M=D // 36860
@Main.getRawPixelColor.ret.14 // 36861
D=A // 36862
@CALL // 36863
0;JMP // 36864
(Main.getRawPixelColor.ret.14)
@LCL // 36865
D=M // 36866
@6 // 36867
A=D+A // 36868
D=A // 36869
@R13 // 36870
M=D // 36871
@SP // 36872
AM=M-1 // 36873
D=M // 36874
@R13 // 36875
A=M // 36876
M=D // 36877

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getShadowBias}}], call=CallInstruction{Vec3.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36878
D=M // 36879
@6 // 36880
A=D+A // 36881
D=M // 36882
@SP // 36883
AM=M+1 // 36884
A=A-1 // 36885
M=D // 36886
@LCL // 36887
D=M // 36888
@17 // 36889
A=D+A // 36890
D=M // 36891
@SP // 36892
AM=M+1 // 36893
A=A-1 // 36894
M=D // 36895
// call DirectionalLight.getShadowBias
@6 // 36896
D=A // 36897
@14 // 36898
M=D // 36899
@DirectionalLight.getShadowBias // 36900
D=A // 36901
@13 // 36902
M=D // 36903
@Main.getRawPixelColor.ret.15 // 36904
D=A // 36905
@CALL // 36906
0;JMP // 36907
(Main.getRawPixelColor.ret.15)
// call Vec3.do_add
@7 // 36908
D=A // 36909
@14 // 36910
M=D // 36911
@Vec3.do_add // 36912
D=A // 36913
@13 // 36914
M=D // 36915
@Main.getRawPixelColor.ret.16 // 36916
D=A // 36917
@CALL // 36918
0;JMP // 36919
(Main.getRawPixelColor.ret.16)
@SP // 36920
M=M-1 // 36921

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getNegDirection}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 36922
D=M // 36923
@17 // 36924
A=D+A // 36925
D=M // 36926
@SP // 36927
AM=M+1 // 36928
A=A-1 // 36929
M=D // 36930
// call DirectionalLight.getNegDirection
@6 // 36931
D=A // 36932
@14 // 36933
M=D // 36934
@DirectionalLight.getNegDirection // 36935
D=A // 36936
@13 // 36937
M=D // 36938
@Main.getRawPixelColor.ret.17 // 36939
D=A // 36940
@CALL // 36941
0;JMP // 36942
(Main.getRawPixelColor.ret.17)
@LCL // 36943
D=M // 36944
@12 // 36945
A=D+A // 36946
D=A // 36947
@R13 // 36948
M=D // 36949
@SP // 36950
AM=M-1 // 36951
D=M // 36952
@R13 // 36953
A=M // 36954
M=D // 36955

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}], call=CallInstruction{Ray.new}}
//  pop:  PopInstruction{address=local 7}
//}

@LCL // 36956
D=M // 36957
@6 // 36958
A=D+A // 36959
D=M // 36960
@SP // 36961
AM=M+1 // 36962
A=A-1 // 36963
M=D // 36964
@LCL // 36965
D=M // 36966
@12 // 36967
A=D+A // 36968
D=M // 36969
@SP // 36970
AM=M+1 // 36971
A=A-1 // 36972
M=D // 36973
// call Vec3.clone
@6 // 36974
D=A // 36975
@14 // 36976
M=D // 36977
@Vec3.clone // 36978
D=A // 36979
@13 // 36980
M=D // 36981
@Main.getRawPixelColor.ret.18 // 36982
D=A // 36983
@CALL // 36984
0;JMP // 36985
(Main.getRawPixelColor.ret.18)
// call Ray.new
@7 // 36986
D=A // 36987
@14 // 36988
M=D // 36989
@Ray.new // 36990
D=A // 36991
@13 // 36992
M=D // 36993
@Main.getRawPixelColor.ret.19 // 36994
D=A // 36995
@CALL // 36996
0;JMP // 36997
(Main.getRawPixelColor.ret.19)
@LCL // 36998
D=M // 36999
@7 // 37000
A=D+A // 37001
D=A // 37002
@R13 // 37003
M=D // 37004
@SP // 37005
AM=M-1 // 37006
D=M // 37007
@R13 // 37008
A=M // 37009
M=D // 37010

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 7")], call=CallInstruction{Scene.trace}}
//  pop:  PopInstruction{address=local 8}
//}

@ARG // 37011
A=M // 37012
D=M // 37013
@SP // 37014
AM=M+1 // 37015
A=A-1 // 37016
M=D // 37017
@LCL // 37018
D=M // 37019
@7 // 37020
A=D+A // 37021
D=M // 37022
@SP // 37023
AM=M+1 // 37024
A=A-1 // 37025
M=D // 37026
// call Scene.trace
@7 // 37027
D=A // 37028
@14 // 37029
M=D // 37030
@Scene.trace // 37031
D=A // 37032
@13 // 37033
M=D // 37034
@Main.getRawPixelColor.ret.20 // 37035
D=A // 37036
@CALL // 37037
0;JMP // 37038
(Main.getRawPixelColor.ret.20)
@LCL // 37039
D=M // 37040
@8 // 37041
A=D+A // 37042
D=A // 37043
@R13 // 37044
M=D // 37045
@SP // 37046
AM=M-1 // 37047
D=M // 37048
@R13 // 37049
A=M // 37050
M=D // 37051

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//)
//  pop:  PopInstruction{address=local 9}
//}

@Main.getRawPixelColor.EQ.150 // 37052
D=A // 37053
@SP // 37054
AM=M+1 // 37055
A=A-1 // 37056
M=D // 37057
@LCL // 37058
D=M // 37059
@8 // 37060
A=D+A // 37061
D=M // 37062
@DO_EQ // 37063
0;JMP // 37064
(Main.getRawPixelColor.EQ.150)
@SP // 37065
AM=M+1 // 37066
A=A-1 // 37067
M=D // 37068
@LCL // 37069
D=M // 37070
@9 // 37071
A=D+A // 37072
D=A // 37073
@R13 // 37074
M=D // 37075
@SP // 37076
AM=M-1 // 37077
D=M // 37078
@R13 // 37079
A=M // 37080
M=D // 37081

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 8"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE2}}
@Main.getRawPixelColor.EQ.151 // 37082
D=A // 37083
@SP // 37084
AM=M+1 // 37085
A=A-1 // 37086
M=D // 37087
@LCL // 37088
D=M // 37089
@8 // 37090
A=D+A // 37091
D=M // 37092
@DO_EQ // 37093
0;JMP // 37094
(Main.getRawPixelColor.EQ.151)
D=!D // 37095
@Main.getRawPixelColor$IF_TRUE2 // 37096
D;JNE // 37097

////GotoInstruction{label='Main.getRawPixelColor$IF_FALSE2}
// goto Main.getRawPixelColor$IF_FALSE2
@Main.getRawPixelColor$IF_FALSE2 // 37098
0;JMP // 37099

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE2}
// label Main.getRawPixelColor$IF_TRUE2
(Main.getRawPixelColor$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 8")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37100
D=M // 37101
@8 // 37102
A=D+A // 37103
D=M // 37104
@SP // 37105
AM=M+1 // 37106
A=A-1 // 37107
M=D // 37108
// call Intersection.dispose
@6 // 37109
D=A // 37110
@14 // 37111
M=D // 37112
@Intersection.dispose // 37113
D=A // 37114
@13 // 37115
M=D // 37116
@Main.getRawPixelColor.ret.21 // 37117
D=A // 37118
@CALL // 37119
0;JMP // 37120
(Main.getRawPixelColor.ret.21)
@SP // 37121
M=M-1 // 37122

////LabelInstruction{label='Main.getRawPixelColor$IF_FALSE2}
// label Main.getRawPixelColor$IF_FALSE2
(Main.getRawPixelColor$IF_FALSE2)

////ConditionalGroup{push=PushInstruction("local 9"), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE3}}
@LCL // 37123
D=M // 37124
@9 // 37125
A=D+A // 37126
D=M // 37127
@Main.getRawPixelColor$IF_TRUE3 // 37128
D;JNE // 37129

////GotoInstruction{label='Main.getRawPixelColor$IF_FALSE3}
// goto Main.getRawPixelColor$IF_FALSE3
@Main.getRawPixelColor$IF_FALSE3 // 37130
0;JMP // 37131

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE3}
// label Main.getRawPixelColor$IF_TRUE3
(Main.getRawPixelColor$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getNegDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 37132
D=M // 37133
@5 // 37134
A=D+A // 37135
D=M // 37136
@SP // 37137
AM=M+1 // 37138
A=A-1 // 37139
M=D // 37140
@LCL // 37141
D=M // 37142
@17 // 37143
A=D+A // 37144
D=M // 37145
@SP // 37146
AM=M+1 // 37147
A=A-1 // 37148
M=D // 37149
// call DirectionalLight.getNegDirection
@6 // 37150
D=A // 37151
@14 // 37152
M=D // 37153
@DirectionalLight.getNegDirection // 37154
D=A // 37155
@13 // 37156
M=D // 37157
@Main.getRawPixelColor.ret.22 // 37158
D=A // 37159
@CALL // 37160
0;JMP // 37161
(Main.getRawPixelColor.ret.22)
// call Vec3.dot
@7 // 37162
D=A // 37163
@14 // 37164
M=D // 37165
@Vec3.dot // 37166
D=A // 37167
@13 // 37168
M=D // 37169
@Main.getRawPixelColor.ret.23 // 37170
D=A // 37171
@CALL // 37172
0;JMP // 37173
(Main.getRawPixelColor.ret.23)
@LCL // 37174
D=M // 37175
@10 // 37176
A=D+A // 37177
D=A // 37178
@R13 // 37179
M=D // 37180
@SP // 37181
AM=M-1 // 37182
D=M // 37183
@R13 // 37184
A=M // 37185
M=D // 37186

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 10")], call=CallInstruction{Number.is_positive}}, ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE4}}
@LCL // 37187
D=M // 37188
@10 // 37189
A=D+A // 37190
D=M // 37191
@SP // 37192
AM=M+1 // 37193
A=A-1 // 37194
M=D // 37195
// call Number.is_positive
@6 // 37196
D=A // 37197
@14 // 37198
M=D // 37199
@Number.is_positive // 37200
D=A // 37201
@13 // 37202
M=D // 37203
@Main.getRawPixelColor.ret.24 // 37204
D=A // 37205
@CALL // 37206
0;JMP // 37207
(Main.getRawPixelColor.ret.24)
@SP // 37208
AM=M-1 // 37209
D=M // 37210
@Main.getRawPixelColor$IF_TRUE4 // 37211
D;JNE // 37212

////GotoInstruction{label='Main.getRawPixelColor$IF_FALSE4}
// goto Main.getRawPixelColor$IF_FALSE4
@Main.getRawPixelColor$IF_FALSE4 // 37213
0;JMP // 37214

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE4}
// label Main.getRawPixelColor$IF_TRUE4
(Main.getRawPixelColor$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getColor}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 37215
D=M // 37216
@17 // 37217
A=D+A // 37218
D=M // 37219
@SP // 37220
AM=M+1 // 37221
A=A-1 // 37222
M=D // 37223
// call DirectionalLight.getColor
@6 // 37224
D=A // 37225
@14 // 37226
M=D // 37227
@DirectionalLight.getColor // 37228
D=A // 37229
@13 // 37230
M=D // 37231
@Main.getRawPixelColor.ret.25 // 37232
D=A // 37233
@CALL // 37234
0;JMP // 37235
(Main.getRawPixelColor.ret.25)
@LCL // 37236
D=M // 37237
@15 // 37238
A=D+A // 37239
D=A // 37240
@R13 // 37241
M=D // 37242
@SP // 37243
AM=M-1 // 37244
D=M // 37245
@R13 // 37246
A=M // 37247
M=D // 37248

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 37249
D=M // 37250
@15 // 37251
A=D+A // 37252
D=M // 37253
@SP // 37254
AM=M+1 // 37255
A=A-1 // 37256
M=D // 37257
// call Number.clone
@6 // 37258
D=A // 37259
@14 // 37260
M=D // 37261
@Number.clone // 37262
D=A // 37263
@13 // 37264
M=D // 37265
@Main.getRawPixelColor.ret.26 // 37266
D=A // 37267
@CALL // 37268
0;JMP // 37269
(Main.getRawPixelColor.ret.26)
@LCL // 37270
D=M // 37271
@11 // 37272
A=D+A // 37273
D=A // 37274
@R13 // 37275
M=D // 37276
@SP // 37277
AM=M-1 // 37278
D=M // 37279
@R13 // 37280
A=M // 37281
M=D // 37282

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), PushInstruction("local 10")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37283
D=M // 37284
@11 // 37285
A=D+A // 37286
D=M // 37287
@SP // 37288
AM=M+1 // 37289
A=A-1 // 37290
M=D // 37291
@LCL // 37292
D=M // 37293
@10 // 37294
A=D+A // 37295
D=M // 37296
@SP // 37297
AM=M+1 // 37298
A=A-1 // 37299
M=D // 37300
// call Number.do_mul
@7 // 37301
D=A // 37302
@14 // 37303
M=D // 37304
@Number.do_mul // 37305
D=A // 37306
@13 // 37307
M=D // 37308
@Main.getRawPixelColor.ret.27 // 37309
D=A // 37310
@CALL // 37311
0;JMP // 37312
(Main.getRawPixelColor.ret.27)
@SP // 37313
M=M-1 // 37314

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), CallGroup{pushes=[], call=CallInstruction{Number.getPi}}], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37315
D=M // 37316
@11 // 37317
A=D+A // 37318
D=M // 37319
@SP // 37320
AM=M+1 // 37321
A=A-1 // 37322
M=D // 37323
// call Number.getPi
@5 // 37324
D=A // 37325
@14 // 37326
M=D // 37327
@Number.getPi // 37328
D=A // 37329
@13 // 37330
M=D // 37331
@Main.getRawPixelColor.ret.28 // 37332
D=A // 37333
@CALL // 37334
0;JMP // 37335
(Main.getRawPixelColor.ret.28)
// call Number.do_div
@7 // 37336
D=A // 37337
@14 // 37338
M=D // 37339
@Number.do_div // 37340
D=A // 37341
@13 // 37342
M=D // 37343
@Main.getRawPixelColor.ret.29 // 37344
D=A // 37345
@CALL // 37346
0;JMP // 37347
(Main.getRawPixelColor.ret.29)
@SP // 37348
M=M-1 // 37349

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getObject}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 37350
A=M+1 // 37351
A=A+1 // 37352
D=M // 37353
@SP // 37354
AM=M+1 // 37355
A=A-1 // 37356
M=D // 37357
// call Intersection.getObject
@6 // 37358
D=A // 37359
@14 // 37360
M=D // 37361
@Intersection.getObject // 37362
D=A // 37363
@13 // 37364
M=D // 37365
@Main.getRawPixelColor.ret.30 // 37366
D=A // 37367
@CALL // 37368
0;JMP // 37369
(Main.getRawPixelColor.ret.30)
@LCL // 37370
D=M // 37371
@13 // 37372
A=D+A // 37373
D=A // 37374
@R13 // 37375
M=D // 37376
@SP // 37377
AM=M-1 // 37378
D=M // 37379
@R13 // 37380
A=M // 37381
M=D // 37382

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("local 3")], call=CallInstruction{Element.color}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 37383
D=M // 37384
@13 // 37385
A=D+A // 37386
D=M // 37387
@SP // 37388
AM=M+1 // 37389
A=A-1 // 37390
M=D // 37391
@LCL // 37392
A=M+1 // 37393
A=A+1 // 37394
A=A+1 // 37395
D=M // 37396
@SP // 37397
AM=M+1 // 37398
A=A-1 // 37399
M=D // 37400
// call Element.color
@7 // 37401
D=A // 37402
@14 // 37403
M=D // 37404
@Element.color // 37405
D=A // 37406
@13 // 37407
M=D // 37408
@Main.getRawPixelColor.ret.31 // 37409
D=A // 37410
@CALL // 37411
0;JMP // 37412
(Main.getRawPixelColor.ret.31)
@LCL // 37413
D=M // 37414
@15 // 37415
A=D+A // 37416
D=A // 37417
@R13 // 37418
M=D // 37419
@SP // 37420
AM=M-1 // 37421
D=M // 37422
@R13 // 37423
A=M // 37424
M=D // 37425

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), PushInstruction("local 15")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37426
D=M // 37427
@11 // 37428
A=D+A // 37429
D=M // 37430
@SP // 37431
AM=M+1 // 37432
A=A-1 // 37433
M=D // 37434
@LCL // 37435
D=M // 37436
@15 // 37437
A=D+A // 37438
D=M // 37439
@SP // 37440
AM=M+1 // 37441
A=A-1 // 37442
M=D // 37443
// call Number.do_mul
@7 // 37444
D=A // 37445
@14 // 37446
M=D // 37447
@Number.do_mul // 37448
D=A // 37449
@13 // 37450
M=D // 37451
@Main.getRawPixelColor.ret.32 // 37452
D=A // 37453
@CALL // 37454
0;JMP // 37455
(Main.getRawPixelColor.ret.32)
@SP // 37456
M=M-1 // 37457

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37458
D=M // 37459
@15 // 37460
A=D+A // 37461
D=M // 37462
@SP // 37463
AM=M+1 // 37464
A=A-1 // 37465
M=D // 37466
// call Number.dispose
@6 // 37467
D=A // 37468
@14 // 37469
M=D // 37470
@Number.dispose // 37471
D=A // 37472
@13 // 37473
M=D // 37474
@Main.getRawPixelColor.ret.33 // 37475
D=A // 37476
@CALL // 37477
0;JMP // 37478
(Main.getRawPixelColor.ret.33)
@SP // 37479
M=M-1 // 37480

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 11")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37481
A=M // 37482
D=M // 37483
@SP // 37484
AM=M+1 // 37485
A=A-1 // 37486
M=D // 37487
@LCL // 37488
D=M // 37489
@11 // 37490
A=D+A // 37491
D=M // 37492
@SP // 37493
AM=M+1 // 37494
A=A-1 // 37495
M=D // 37496
// call Number.do_add
@7 // 37497
D=A // 37498
@14 // 37499
M=D // 37500
@Number.do_add // 37501
D=A // 37502
@13 // 37503
M=D // 37504
@Main.getRawPixelColor.ret.34 // 37505
D=A // 37506
@CALL // 37507
0;JMP // 37508
(Main.getRawPixelColor.ret.34)
@SP // 37509
M=M-1 // 37510

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37511
D=M // 37512
@11 // 37513
A=D+A // 37514
D=M // 37515
@SP // 37516
AM=M+1 // 37517
A=A-1 // 37518
M=D // 37519
// call Number.dispose
@6 // 37520
D=A // 37521
@14 // 37522
M=D // 37523
@Number.dispose // 37524
D=A // 37525
@13 // 37526
M=D // 37527
@Main.getRawPixelColor.ret.35 // 37528
D=A // 37529
@CALL // 37530
0;JMP // 37531
(Main.getRawPixelColor.ret.35)
@SP // 37532
M=M-1 // 37533

////LabelInstruction{label='Main.getRawPixelColor$IF_FALSE4}
// label Main.getRawPixelColor$IF_FALSE4
(Main.getRawPixelColor$IF_FALSE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 10")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37534
D=M // 37535
@10 // 37536
A=D+A // 37537
D=M // 37538
@SP // 37539
AM=M+1 // 37540
A=A-1 // 37541
M=D // 37542
// call Number.dispose
@6 // 37543
D=A // 37544
@14 // 37545
M=D // 37546
@Number.dispose // 37547
D=A // 37548
@13 // 37549
M=D // 37550
@Main.getRawPixelColor.ret.36 // 37551
D=A // 37552
@CALL // 37553
0;JMP // 37554
(Main.getRawPixelColor.ret.36)
@SP // 37555
M=M-1 // 37556

////LabelInstruction{label='Main.getRawPixelColor$IF_FALSE3}
// label Main.getRawPixelColor$IF_FALSE3
(Main.getRawPixelColor$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Ray.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37557
D=M // 37558
@7 // 37559
A=D+A // 37560
D=M // 37561
@SP // 37562
AM=M+1 // 37563
A=A-1 // 37564
M=D // 37565
// call Ray.dispose
@6 // 37566
D=A // 37567
@14 // 37568
M=D // 37569
@Ray.dispose // 37570
D=A // 37571
@13 // 37572
M=D // 37573
@Main.getRawPixelColor.ret.37 // 37574
D=A // 37575
@CALL // 37576
0;JMP // 37577
(Main.getRawPixelColor.ret.37)
@SP // 37578
M=M-1 // 37579

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 37580
D=M // 37581
@14 // 37582
A=D+A // 37583
M=M+1 // 37584

////GotoInstruction{label='Main.getRawPixelColor_WHILE_EXP1}
// goto Main.getRawPixelColor_WHILE_EXP1
@Main.getRawPixelColor_WHILE_EXP1 // 37585
0;JMP // 37586

////LabelInstruction{label='Main.getRawPixelColor_WHILE_END1}
// label Main.getRawPixelColor_WHILE_END1
(Main.getRawPixelColor_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37587
A=M+1 // 37588
A=A+1 // 37589
D=M // 37590
@SP // 37591
AM=M+1 // 37592
A=A-1 // 37593
M=D // 37594
// call Intersection.dispose
@6 // 37595
D=A // 37596
@14 // 37597
M=D // 37598
@Intersection.dispose // 37599
D=A // 37600
@13 // 37601
M=D // 37602
@Main.getRawPixelColor.ret.38 // 37603
D=A // 37604
@CALL // 37605
0;JMP // 37606
(Main.getRawPixelColor.ret.38)
@SP // 37607
M=M-1 // 37608

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37609
A=M+1 // 37610
A=A+1 // 37611
A=A+1 // 37612
D=M // 37613
@SP // 37614
AM=M+1 // 37615
A=A-1 // 37616
M=D // 37617
// call Vec3.dispose
@6 // 37618
D=A // 37619
@14 // 37620
M=D // 37621
@Vec3.dispose // 37622
D=A // 37623
@13 // 37624
M=D // 37625
@Main.getRawPixelColor.ret.39 // 37626
D=A // 37627
@CALL // 37628
0;JMP // 37629
(Main.getRawPixelColor.ret.39)
@SP // 37630
M=M-1 // 37631

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37632
D=M // 37633
@4 // 37634
A=D+A // 37635
D=M // 37636
@SP // 37637
AM=M+1 // 37638
A=A-1 // 37639
M=D // 37640
// call Vec3.dispose
@6 // 37641
D=A // 37642
@14 // 37643
M=D // 37644
@Vec3.dispose // 37645
D=A // 37646
@13 // 37647
M=D // 37648
@Main.getRawPixelColor.ret.40 // 37649
D=A // 37650
@CALL // 37651
0;JMP // 37652
(Main.getRawPixelColor.ret.40)
@SP // 37653
M=M-1 // 37654

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37655
D=M // 37656
@5 // 37657
A=D+A // 37658
D=M // 37659
@SP // 37660
AM=M+1 // 37661
A=A-1 // 37662
M=D // 37663
// call Vec3.dispose
@6 // 37664
D=A // 37665
@14 // 37666
M=D // 37667
@Vec3.dispose // 37668
D=A // 37669
@13 // 37670
M=D // 37671
@Main.getRawPixelColor.ret.41 // 37672
D=A // 37673
@CALL // 37674
0;JMP // 37675
(Main.getRawPixelColor.ret.41)
@SP // 37676
M=M-1 // 37677

////LabelInstruction{label='Main.getRawPixelColor$IF_FALSE1}
// label Main.getRawPixelColor$IF_FALSE1
(Main.getRawPixelColor$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 37678
A=M+1 // 37679
D=M // 37680
@SP // 37681
AM=M+1 // 37682
A=A-1 // 37683
M=D // 37684
// call Ray.dispose
@6 // 37685
D=A // 37686
@14 // 37687
M=D // 37688
@Ray.dispose // 37689
D=A // 37690
@13 // 37691
M=D // 37692
@Main.getRawPixelColor.ret.42 // 37693
D=A // 37694
@CALL // 37695
0;JMP // 37696
(Main.getRawPixelColor.ret.42)
@SP // 37697
M=M-1 // 37698

////PushInstruction("local 0")
@LCL // 37699
A=M // 37700
D=M // 37701
@SP // 37702
AM=M+1 // 37703
A=A-1 // 37704
M=D // 37705
@RETURN // 37706
0;JMP // 37707

////FunctionInstruction{functionName='Number.is_positive', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2}}
// function Number.is_positive with 0
(Number.is_positive)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 37708
A=M // 37709
D=M // 37710
@3 // 37711
M=D // 37712

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_positive}}
@THIS // 37713
A=M // 37714
D=M // 37715
@SP // 37716
AM=M+1 // 37717
A=A-1 // 37718
M=D // 37719
// call Int32.is_positive
@6 // 37720
D=A // 37721
@14 // 37722
M=D // 37723
@Int32.is_positive // 37724
D=A // 37725
@13 // 37726
M=D // 37727
@Number.is_positive.ret.0 // 37728
D=A // 37729
@CALL // 37730
0;JMP // 37731
(Number.is_positive.ret.0)
@RETURN // 37732
0;JMP // 37733

////FunctionInstruction{functionName='Math.divide', numLocals=3, funcMapping={Math.abs=1, Math.twoToThe=0, Math.max=0, Math.init=1, Math.multiply=0}}
// function Math.divide with 3
(Math.divide)
@3 // 37734
D=A // 37735
@SP // 37736
AM=D+M // 37737
A=A-1 // 37738
M=0 // 37739
A=A-1 // 37740
M=0 // 37741
A=A-1 // 37742
M=0 // 37743

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Math.abs}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 37744
A=M // 37745
D=M // 37746
@SP // 37747
AM=M+1 // 37748
A=A-1 // 37749
M=D // 37750
// call Math.abs
@6 // 37751
D=A // 37752
@14 // 37753
M=D // 37754
@Math.abs // 37755
D=A // 37756
@13 // 37757
M=D // 37758
@Math.divide.ret.0 // 37759
D=A // 37760
@CALL // 37761
0;JMP // 37762
(Math.divide.ret.0)
@SP // 37763
AM=M-1 // 37764
D=M // 37765
@LCL // 37766
A=M+1 // 37767
M=D // 37768

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Math.abs}}
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 37769
A=M+1 // 37770
D=M // 37771
@SP // 37772
AM=M+1 // 37773
A=A-1 // 37774
M=D // 37775
// call Math.abs
@6 // 37776
D=A // 37777
@14 // 37778
M=D // 37779
@Math.abs // 37780
D=A // 37781
@13 // 37782
M=D // 37783
@Math.divide.ret.1 // 37784
D=A // 37785
@CALL // 37786
0;JMP // 37787
(Math.divide.ret.1)
@SP // 37788
AM=M-1 // 37789
D=M // 37790
@LCL // 37791
A=M+1 // 37792
A=A+1 // 37793
M=D // 37794

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE1}}
@Math.divide.GT.152 // 37795
D=A // 37796
@SP // 37797
AM=M+1 // 37798
A=A-1 // 37799
M=D // 37800
@LCL // 37801
A=M+1 // 37802
A=A+1 // 37803
D=M // 37804
A=A-1 // 37805
D=D-M // 37806
@DO_GT // 37807
0;JMP // 37808
(Math.divide.GT.152)
@Math.divide$IF_TRUE1 // 37809
D;JNE // 37810

////GotoInstruction{label='Math.divide$IF_FALSE1}
// goto Math.divide$IF_FALSE1
@Math.divide$IF_FALSE1 // 37811
0;JMP // 37812

////LabelInstruction{label='Math.divide$IF_TRUE1}
// label Math.divide$IF_TRUE1
(Math.divide$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 37813
AM=M+1 // 37814
A=A-1 // 37815
M=0 // 37816
@RETURN // 37817
0;JMP // 37818

////LabelInstruction{label='Math.divide$IF_FALSE1}
// label Math.divide$IF_FALSE1
(Math.divide$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 37819
A=M+1 // 37820
D=M // 37821
@SP // 37822
AM=M+1 // 37823
A=A-1 // 37824
M=D // 37825
@LCL // 37826
A=M+1 // 37827
A=A+1 // 37828
D=M // 37829
D=D+M // 37830
@SP // 37831
AM=M+1 // 37832
A=A-1 // 37833
M=D // 37834
// call Math.divide
@7 // 37835
D=A // 37836
@14 // 37837
M=D // 37838
@Math.divide // 37839
D=A // 37840
@13 // 37841
M=D // 37842
@Math.divide.ret.2 // 37843
D=A // 37844
@CALL // 37845
0;JMP // 37846
(Math.divide.ret.2)
@SP // 37847
AM=M-1 // 37848
D=M // 37849
@LCL // 37850
A=M // 37851
M=D // 37852

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Math.multiply}},
//            binaryOp: "SUB"
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE2}}
@Math.divide.LT.153 // 37853
D=A // 37854
@SP // 37855
AM=M+1 // 37856
A=A-1 // 37857
M=D // 37858
@LCL // 37859
A=M+1 // 37860
D=M // 37861
@SP // 37862
AM=M+1 // 37863
A=A-1 // 37864
M=D // 37865
@LCL // 37866
A=M // 37867
D=M // 37868
D=D+M // 37869
@SP // 37870
AM=M+1 // 37871
A=A-1 // 37872
M=D // 37873
@LCL // 37874
A=M+1 // 37875
A=A+1 // 37876
D=M // 37877
@SP // 37878
AM=M+1 // 37879
A=A-1 // 37880
M=D // 37881
// call Math.multiply
@7 // 37882
D=A // 37883
@14 // 37884
M=D // 37885
@Math.multiply // 37886
D=A // 37887
@13 // 37888
M=D // 37889
@Math.divide.ret.3 // 37890
D=A // 37891
@CALL // 37892
0;JMP // 37893
(Math.divide.ret.3)
@SP // 37894
AM=M-1 // 37895
D=M // 37896
@SP // 37897
AM=M-1 // 37898
D=M-D // 37899
@SP // 37900
AM=M+1 // 37901
A=A-1 // 37902
M=D // 37903
@LCL // 37904
A=M+1 // 37905
A=A+1 // 37906
D=M // 37907
@SP // 37908
AM=M-1 // 37909
D=M-D // 37910
@DO_LT // 37911
0;JMP // 37912
(Math.divide.LT.153)
@Math.divide$IF_TRUE2 // 37913
D;JNE // 37914

////GotoInstruction{label='Math.divide$IF_FALSE2}
// goto Math.divide$IF_FALSE2
@Math.divide$IF_FALSE2 // 37915
0;JMP // 37916

////LabelInstruction{label='Math.divide$IF_TRUE2}
// label Math.divide$IF_TRUE2
(Math.divide$IF_TRUE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            binaryOp: "AND"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE3}}
@Math.divide.LT.154 // 37917
D=A // 37918
@SP // 37919
AM=M+1 // 37920
A=A-1 // 37921
M=D // 37922
@ARG // 37923
A=M // 37924
D=M // 37925
@DO_LT // 37926
0;JMP // 37927
(Math.divide.LT.154)
@SP // 37928
AM=M+1 // 37929
A=A-1 // 37930
M=D // 37931
@Math.divide.GT.155 // 37932
D=A // 37933
@SP // 37934
AM=M+1 // 37935
A=A-1 // 37936
M=D // 37937
@ARG // 37938
A=M+1 // 37939
D=M // 37940
@DO_GT // 37941
0;JMP // 37942
(Math.divide.GT.155)
@SP // 37943
AM=M-1 // 37944
D=D&M // 37945
@SP // 37946
AM=M+1 // 37947
A=A-1 // 37948
M=D // 37949
@Math.divide.GT.156 // 37950
D=A // 37951
@SP // 37952
AM=M+1 // 37953
A=A-1 // 37954
M=D // 37955
@ARG // 37956
A=M // 37957
D=M // 37958
@DO_GT // 37959
0;JMP // 37960
(Math.divide.GT.156)
@SP // 37961
AM=M+1 // 37962
A=A-1 // 37963
M=D // 37964
@Math.divide.LT.157 // 37965
D=A // 37966
@SP // 37967
AM=M+1 // 37968
A=A-1 // 37969
M=D // 37970
@ARG // 37971
A=M+1 // 37972
D=M // 37973
@DO_LT // 37974
0;JMP // 37975
(Math.divide.LT.157)
@SP // 37976
AM=M-1 // 37977
D=D&M // 37978
@SP // 37979
AM=M-1 // 37980
D=D|M // 37981
@Math.divide$IF_TRUE3 // 37982
D;JNE // 37983

////GotoInstruction{label='Math.divide$IF_FALSE3}
// goto Math.divide$IF_FALSE3
@Math.divide$IF_FALSE3 // 37984
0;JMP // 37985

////LabelInstruction{label='Math.divide$IF_TRUE3}
// label Math.divide$IF_TRUE3
(Math.divide$IF_TRUE3)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("local 0"),
//NEG)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 37986
A=M // 37987
D=-M // 37988
@LCL // 37989
A=M // 37990
M=D // 37991

////LabelInstruction{label='Math.divide$IF_FALSE3}
// label Math.divide$IF_FALSE3
(Math.divide$IF_FALSE3)

////BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
@LCL // 37992
A=M // 37993
D=M // 37994
D=D+M // 37995
@SP // 37996
AM=M+1 // 37997
A=A-1 // 37998
M=D // 37999
@RETURN // 38000
0;JMP // 38001

////GotoInstruction{label='Math.divide$IF_END2}
// goto Math.divide$IF_END2
@Math.divide$IF_END2 // 38002
0;JMP // 38003

////LabelInstruction{label='Math.divide$IF_FALSE2}
// label Math.divide$IF_FALSE2
(Math.divide$IF_FALSE2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            binaryOp: "AND"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE4}}
@Math.divide.LT.158 // 38004
D=A // 38005
@SP // 38006
AM=M+1 // 38007
A=A-1 // 38008
M=D // 38009
@ARG // 38010
A=M // 38011
D=M // 38012
@DO_LT // 38013
0;JMP // 38014
(Math.divide.LT.158)
@SP // 38015
AM=M+1 // 38016
A=A-1 // 38017
M=D // 38018
@Math.divide.GT.159 // 38019
D=A // 38020
@SP // 38021
AM=M+1 // 38022
A=A-1 // 38023
M=D // 38024
@ARG // 38025
A=M+1 // 38026
D=M // 38027
@DO_GT // 38028
0;JMP // 38029
(Math.divide.GT.159)
@SP // 38030
AM=M-1 // 38031
D=D&M // 38032
@SP // 38033
AM=M+1 // 38034
A=A-1 // 38035
M=D // 38036
@Math.divide.GT.160 // 38037
D=A // 38038
@SP // 38039
AM=M+1 // 38040
A=A-1 // 38041
M=D // 38042
@ARG // 38043
A=M // 38044
D=M // 38045
@DO_GT // 38046
0;JMP // 38047
(Math.divide.GT.160)
@SP // 38048
AM=M+1 // 38049
A=A-1 // 38050
M=D // 38051
@Math.divide.LT.161 // 38052
D=A // 38053
@SP // 38054
AM=M+1 // 38055
A=A-1 // 38056
M=D // 38057
@ARG // 38058
A=M+1 // 38059
D=M // 38060
@DO_LT // 38061
0;JMP // 38062
(Math.divide.LT.161)
@SP // 38063
AM=M-1 // 38064
D=D&M // 38065
@SP // 38066
AM=M-1 // 38067
D=D|M // 38068
@Math.divide$IF_TRUE4 // 38069
D;JNE // 38070

////GotoInstruction{label='Math.divide$IF_FALSE4}
// goto Math.divide$IF_FALSE4
@Math.divide$IF_FALSE4 // 38071
0;JMP // 38072

////LabelInstruction{label='Math.divide$IF_TRUE4}
// label Math.divide$IF_TRUE4
(Math.divide$IF_TRUE4)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("local 0"),
//NEG)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 38073
A=M // 38074
D=-M // 38075
@LCL // 38076
A=M // 38077
M=D // 38078

////LabelInstruction{label='Math.divide$IF_FALSE4}
// label Math.divide$IF_FALSE4
(Math.divide$IF_FALSE4)

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
@LCL // 38079
A=M // 38080
D=M // 38081
D=D+M // 38082
D=D+1 // 38083
@SP // 38084
AM=M+1 // 38085
A=A-1 // 38086
M=D // 38087
@RETURN // 38088
0;JMP // 38089

////LabelInstruction{label='Math.divide$IF_END2}
// label Math.divide$IF_END2
(Math.divide$IF_END2)

////FunctionInstruction{functionName='DirectionalLight.getNegDirection', numLocals=0, funcMapping={DirectionalLight.new=9, DirectionalLight.dispose=3, DirectionalLight.getShadowBias=0, DirectionalLight.getColor=0}}
// function DirectionalLight.getNegDirection with 0
(DirectionalLight.getNegDirection)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38090
A=M // 38091
D=M // 38092
@3 // 38093
M=D // 38094

////PushInstruction("this 2")
@THIS // 38095
A=M+1 // 38096
A=A+1 // 38097
D=M // 38098
@SP // 38099
AM=M+1 // 38100
A=A-1 // 38101
M=D // 38102
@RETURN // 38103
0;JMP // 38104

////FunctionInstruction{functionName='Vec3.dist_sq', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_normalize=15, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0, Vec3.getZ=0}}
// function Vec3.dist_sq with 0
(Vec3.dist_sq)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38105
A=M // 38106
D=M // 38107
@3 // 38108
M=D // 38109

////CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("pointer 0")], call=CallInstruction{Vec3.dot}}
@2 // 38110
D=A // 38111
@SP // 38112
M=D+M // 38113
@3 // 38114
D=M // 38115
@SP // 38116
A=M-1 // 38117
M=D // 38118
A=A-1 // 38119
M=D // 38120
// call Vec3.dot
@7 // 38121
D=A // 38122
@14 // 38123
M=D // 38124
@Vec3.dot // 38125
D=A // 38126
@13 // 38127
M=D // 38128
@Vec3.dist_sq.ret.0 // 38129
D=A // 38130
@CALL // 38131
0;JMP // 38132
(Vec3.dist_sq.ret.0)
@RETURN // 38133
0;JMP // 38134

////FunctionInstruction{functionName='Output.printChar', numLocals=4, funcMapping={Output.printInt=4, Output.init=97, Output.println=0, Output.printString=3, Output.getMap=0, Output.create=1}}
// function Output.printChar with 4
(Output.printChar)
@4 // 38135
D=A // 38136
@SP // 38137
AM=D+M // 38138
A=A-1 // 38139
M=0 // 38140
A=A-1 // 38141
M=0 // 38142
A=A-1 // 38143
M=0 // 38144
A=A-1 // 38145
M=0 // 38146

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Output.getMap}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 38147
A=M // 38148
D=M // 38149
@SP // 38150
AM=M+1 // 38151
A=A-1 // 38152
M=D // 38153
// call Output.getMap
@6 // 38154
D=A // 38155
@14 // 38156
M=D // 38157
@Output.getMap // 38158
D=A // 38159
@13 // 38160
M=D // 38161
@Output.printChar.ret.0 // 38162
D=A // 38163
@CALL // 38164
0;JMP // 38165
(Output.printChar.ret.0)
@SP // 38166
AM=M-1 // 38167
D=M // 38168
@LCL // 38169
A=M // 38170
M=D // 38171

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 38172
A=M+1 // 38173
A=A+1 // 38174
A=A+1 // 38175
M=0 // 38176

////LabelInstruction{label='Output.printChar_WHILE_EXP1}
// label Output.printChar_WHILE_EXP1
(Output.printChar_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 11"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Output.printChar_WHILE_END1}}
@Output.printChar.LT.162 // 38177
D=A // 38178
@SP // 38179
AM=M+1 // 38180
A=A-1 // 38181
M=D // 38182
@LCL // 38183
A=M+1 // 38184
A=A+1 // 38185
A=A+1 // 38186
D=M // 38187
@11 // 38188
D=D-A // 38189
@DO_LT // 38190
0;JMP // 38191
(Output.printChar.LT.162)
D=!D // 38192
@Output.printChar_WHILE_END1 // 38193
D;JNE // 38194

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 16384"),
//            right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("static 2"), PushInstruction("constant 11")], call=CallInstruction{Math.multiply}},
//    right:
//        PushInstruction("local 3"),
//    binaryOp: "ADD"
//), PushInstruction("constant 32")], call=CallInstruction{Math.multiply}},
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("static 1"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@Output.2 // 38195
D=M // 38196
@SP // 38197
AM=M+1 // 38198
A=A-1 // 38199
M=D // 38200
@11 // 38201
D=A // 38202
@SP // 38203
AM=M+1 // 38204
A=A-1 // 38205
M=D // 38206
// call Math.multiply
@7 // 38207
D=A // 38208
@14 // 38209
M=D // 38210
@Math.multiply // 38211
D=A // 38212
@13 // 38213
M=D // 38214
@Output.printChar.ret.1 // 38215
D=A // 38216
@CALL // 38217
0;JMP // 38218
(Output.printChar.ret.1)
@LCL // 38219
A=M+1 // 38220
A=A+1 // 38221
A=A+1 // 38222
D=M // 38223
@SP // 38224
AM=M-1 // 38225
D=D+M // 38226
@SP // 38227
AM=M+1 // 38228
A=A-1 // 38229
M=D // 38230
@32 // 38231
D=A // 38232
@SP // 38233
AM=M+1 // 38234
A=A-1 // 38235
M=D // 38236
// call Math.multiply
@7 // 38237
D=A // 38238
@14 // 38239
M=D // 38240
@Math.multiply // 38241
D=A // 38242
@13 // 38243
M=D // 38244
@Output.printChar.ret.2 // 38245
D=A // 38246
@CALL // 38247
0;JMP // 38248
(Output.printChar.ret.2)
@SP // 38249
AM=M-1 // 38250
D=M // 38251
@16384 // 38252
D=D+A // 38253
@SP // 38254
AM=M+1 // 38255
A=A-1 // 38256
M=D // 38257
@Output.1 // 38258
D=M // 38259
@SP // 38260
AM=M+1 // 38261
A=A-1 // 38262
M=D // 38263
@2 // 38264
D=A // 38265
@SP // 38266
AM=M+1 // 38267
A=A-1 // 38268
M=D // 38269
// call Math.divide
@7 // 38270
D=A // 38271
@14 // 38272
M=D // 38273
@Math.divide // 38274
D=A // 38275
@13 // 38276
M=D // 38277
@Output.printChar.ret.3 // 38278
D=A // 38279
@CALL // 38280
0;JMP // 38281
(Output.printChar.ret.3)
@SP // 38282
AM=M-1 // 38283
D=M // 38284
@SP // 38285
AM=M-1 // 38286
D=D+M // 38287
@LCL // 38288
A=M+1 // 38289
M=D // 38290

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 1"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.printChar$IF_TRUE1}}
@Output.printChar.EQ.163 // 38291
D=A // 38292
@SP // 38293
AM=M+1 // 38294
A=A-1 // 38295
M=D // 38296
@Output.1 // 38297
D=M // 38298
@1 // 38299
D=D&A // 38300
@DO_EQ // 38301
0;JMP // 38302
(Output.printChar.EQ.163)
@Output.printChar$IF_TRUE1 // 38303
D;JNE // 38304

////GotoInstruction{label='Output.printChar$IF_FALSE1}
// goto Output.printChar$IF_FALSE1
@Output.printChar$IF_FALSE1 // 38305
0;JMP // 38306

////LabelInstruction{label='Output.printChar$IF_TRUE1}
// label Output.printChar$IF_TRUE1
(Output.printChar$IF_TRUE1)

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 38307
A=M+1 // 38308
A=A+1 // 38309
A=A+1 // 38310
D=M // 38311
A=A-1 // 38312
A=A-1 // 38313
A=A-1 // 38314
A=D+M // 38315
D=M // 38316
@LCL // 38317
A=M+1 // 38318
A=A+1 // 38319
M=D // 38320

////GotoInstruction{label='Output.printChar$IF_END1}
// goto Output.printChar$IF_END1
@Output.printChar$IF_END1 // 38321
0;JMP // 38322

////LabelInstruction{label='Output.printChar$IF_FALSE1}
// label Output.printChar$IF_FALSE1
(Output.printChar$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 256")], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 38323
A=M+1 // 38324
A=A+1 // 38325
A=A+1 // 38326
D=M // 38327
A=A-1 // 38328
A=A-1 // 38329
A=A-1 // 38330
A=D+M // 38331
D=M // 38332
@SP // 38333
AM=M+1 // 38334
A=A-1 // 38335
M=D // 38336
@256 // 38337
D=A // 38338
@SP // 38339
AM=M+1 // 38340
A=A-1 // 38341
M=D // 38342
// call Math.multiply
@7 // 38343
D=A // 38344
@14 // 38345
M=D // 38346
@Math.multiply // 38347
D=A // 38348
@13 // 38349
M=D // 38350
@Output.printChar.ret.4 // 38351
D=A // 38352
@CALL // 38353
0;JMP // 38354
(Output.printChar.ret.4)
@SP // 38355
AM=M-1 // 38356
D=M // 38357
@LCL // 38358
A=M+1 // 38359
A=A+1 // 38360
M=D // 38361

////LabelInstruction{label='Output.printChar$IF_END1}
// label Output.printChar$IF_END1
(Output.printChar$IF_END1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "OR"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 38362
A=M+1 // 38363
D=M // 38364
@SP // 38365
AM=M+1 // 38366
A=A-1 // 38367
M=D // 38368
@LCL // 38369
A=M+1 // 38370
D=M // 38371
@0 // 38372
A=D+A // 38373
D=M // 38374
@SP // 38375
AM=M+1 // 38376
A=A-1 // 38377
M=D // 38378
@LCL // 38379
A=M+1 // 38380
A=A+1 // 38381
D=M // 38382
@SP // 38383
AM=M-1 // 38384
D=D|M // 38385
@SP // 38386
AM=M-1 // 38387
A=M // 38388
M=D // 38389

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 38390
A=M+1 // 38391
A=A+1 // 38392
A=A+1 // 38393
M=M+1 // 38394

////GotoInstruction{label='Output.printChar_WHILE_EXP1}
// goto Output.printChar_WHILE_EXP1
@Output.printChar_WHILE_EXP1 // 38395
0;JMP // 38396

////LabelInstruction{label='Output.printChar_WHILE_END1}
// label Output.printChar_WHILE_END1
(Output.printChar_WHILE_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 63"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.printChar$IF_TRUE2}}
@Output.printChar.EQ.164 // 38397
D=A // 38398
@SP // 38399
AM=M+1 // 38400
A=A-1 // 38401
M=D // 38402
@Output.1 // 38403
D=M // 38404
@63 // 38405
D=D-A // 38406
@DO_EQ // 38407
0;JMP // 38408
(Output.printChar.EQ.164)
@Output.printChar$IF_TRUE2 // 38409
D;JNE // 38410

////GotoInstruction{label='Output.printChar$IF_FALSE2}
// goto Output.printChar$IF_FALSE2
@Output.printChar$IF_FALSE2 // 38411
0;JMP // 38412

////LabelInstruction{label='Output.printChar$IF_TRUE2}
// label Output.printChar$IF_TRUE2
(Output.printChar$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.println}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.println
@5 // 38413
D=A // 38414
@14 // 38415
M=D // 38416
@Output.println // 38417
D=A // 38418
@13 // 38419
M=D // 38420
@Output.printChar.ret.5 // 38421
D=A // 38422
@CALL // 38423
0;JMP // 38424
(Output.printChar.ret.5)
@SP // 38425
M=M-1 // 38426

////GotoInstruction{label='Output.printChar$IF_END2}
// goto Output.printChar$IF_END2
@Output.printChar$IF_END2 // 38427
0;JMP // 38428

////LabelInstruction{label='Output.printChar$IF_FALSE2}
// label Output.printChar$IF_FALSE2
(Output.printChar$IF_FALSE2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 38429
M=M+1 // 38430

////LabelInstruction{label='Output.printChar$IF_END2}
// label Output.printChar$IF_END2
(Output.printChar$IF_END2)

////PushInstruction("constant 0")
@SP // 38431
AM=M+1 // 38432
A=A-1 // 38433
M=0 // 38434
@RETURN // 38435
0;JMP // 38436

////FunctionInstruction{functionName='Main.getNineTenths', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getThreeHalves=4, Main.getOneFiftieth=4, Main.getFourFifths=4, Main.getRawPixelColor=43}}
// function Main.getNineTenths with 2
(Main.getNineTenths)
@SP // 38437
M=M+1 // 38438
AM=M+1 // 38439
A=A-1 // 38440
M=0 // 38441
A=A-1 // 38442
M=0 // 38443

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 9")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@9 // 38444
D=A // 38445
@SP // 38446
AM=M+1 // 38447
A=A-1 // 38448
M=D // 38449
// call Number.new
@6 // 38450
D=A // 38451
@14 // 38452
M=D // 38453
@Number.new // 38454
D=A // 38455
@13 // 38456
M=D // 38457
@Main.getNineTenths.ret.0 // 38458
D=A // 38459
@CALL // 38460
0;JMP // 38461
(Main.getNineTenths.ret.0)
@SP // 38462
AM=M-1 // 38463
D=M // 38464
@LCL // 38465
A=M // 38466
M=D // 38467

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@10 // 38468
D=A // 38469
@SP // 38470
AM=M+1 // 38471
A=A-1 // 38472
M=D // 38473
// call Number.new
@6 // 38474
D=A // 38475
@14 // 38476
M=D // 38477
@Number.new // 38478
D=A // 38479
@13 // 38480
M=D // 38481
@Main.getNineTenths.ret.1 // 38482
D=A // 38483
@CALL // 38484
0;JMP // 38485
(Main.getNineTenths.ret.1)
@SP // 38486
AM=M-1 // 38487
D=M // 38488
@LCL // 38489
A=M+1 // 38490
M=D // 38491

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 38492
A=M // 38493
D=M // 38494
@SP // 38495
AM=M+1 // 38496
A=A-1 // 38497
M=D // 38498
@LCL // 38499
A=M+1 // 38500
D=M // 38501
@SP // 38502
AM=M+1 // 38503
A=A-1 // 38504
M=D // 38505
// call Number.do_div
@7 // 38506
D=A // 38507
@14 // 38508
M=D // 38509
@Number.do_div // 38510
D=A // 38511
@13 // 38512
M=D // 38513
@Main.getNineTenths.ret.2 // 38514
D=A // 38515
@CALL // 38516
0;JMP // 38517
(Main.getNineTenths.ret.2)
@SP // 38518
M=M-1 // 38519

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 38520
A=M+1 // 38521
D=M // 38522
@SP // 38523
AM=M+1 // 38524
A=A-1 // 38525
M=D // 38526
// call Number.dispose
@6 // 38527
D=A // 38528
@14 // 38529
M=D // 38530
@Number.dispose // 38531
D=A // 38532
@13 // 38533
M=D // 38534
@Main.getNineTenths.ret.3 // 38535
D=A // 38536
@CALL // 38537
0;JMP // 38538
(Main.getNineTenths.ret.3)
@SP // 38539
M=M-1 // 38540

////PushInstruction("local 0")
@LCL // 38541
A=M // 38542
D=M // 38543
@SP // 38544
AM=M+1 // 38545
A=A-1 // 38546
M=D // 38547
@RETURN // 38548
0;JMP // 38549

////FunctionInstruction{functionName='Int32.dispose', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.u4_array_mul_u4_array=3, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=34, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=39, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.dispose with 0
(Int32.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38550
A=M // 38551
D=M // 38552
@3 // 38553
M=D // 38554

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 38555
M=M-1 // 38556

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Array.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 38557
A=M // 38558
D=M // 38559
@SP // 38560
AM=M+1 // 38561
A=A-1 // 38562
M=D // 38563
// call Array.dispose
@6 // 38564
D=A // 38565
@14 // 38566
M=D // 38567
@Array.dispose // 38568
D=A // 38569
@13 // 38570
M=D // 38571
@Int32.dispose.ret.0 // 38572
D=A // 38573
@CALL // 38574
0;JMP // 38575
(Int32.dispose.ret.0)
@SP // 38576
M=M-1 // 38577

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 38578
D=M // 38579
@SP // 38580
AM=M+1 // 38581
A=A-1 // 38582
M=D // 38583
// call Memory.deAlloc
@6 // 38584
D=A // 38585
@14 // 38586
M=D // 38587
@Memory.deAlloc // 38588
D=A // 38589
@13 // 38590
M=D // 38591
@Int32.dispose.ret.1 // 38592
D=A // 38593
@CALL // 38594
0;JMP // 38595
(Int32.dispose.ret.1)
@SP // 38596
M=M-1 // 38597

////PushInstruction("constant 0")
@SP // 38598
AM=M+1 // 38599
A=A-1 // 38600
M=0 // 38601
@RETURN // 38602
0;JMP // 38603

////FunctionInstruction{functionName='Element.sphere', numLocals=0, funcMapping={Element.surface_normal=2, Element.intersect=2, Element.plane=1, Element.color=2}}
// function Element.sphere with 0
(Element.sphere)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 38604
D=A // 38605
@SP // 38606
AM=M+1 // 38607
A=A-1 // 38608
M=D // 38609
// call Memory.alloc
@6 // 38610
D=A // 38611
@14 // 38612
M=D // 38613
@Memory.alloc // 38614
D=A // 38615
@13 // 38616
M=D // 38617
@Element.sphere.ret.0 // 38618
D=A // 38619
@CALL // 38620
0;JMP // 38621
(Element.sphere.ret.0)
@SP // 38622
AM=M-1 // 38623
D=M // 38624
@3 // 38625
M=D // 38626

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 38627
A=M // 38628
D=M // 38629
@THIS // 38630
A=M+1 // 38631
M=D // 38632

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 0}
//}

@THIS // 38633
A=M // 38634
M=0 // 38635

////PushInstruction("pointer 0")
@3 // 38636
D=M // 38637
@SP // 38638
AM=M+1 // 38639
A=A-1 // 38640
M=D // 38641
@RETURN // 38642
0;JMP // 38643

////FunctionInstruction{functionName='Int32.is_zero', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.u4_array_mul_u4_array=3, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=34, Int32.xor=0, Int32.do_add=1, Int32.dispose=2, Int32.do_left_shift_bytes_div=39, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=1, Int32.initialize=1}}
// function Int32.is_zero with 0
(Int32.is_zero)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38644
A=M // 38645
D=M // 38646
@3 // 38647
M=D // 38648

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        BinaryPushGroup(
//                            left:
//                                Dereference(
//                                    base:
//                                        BinaryPushGroup(
//                                            left:
//                                                PushInstruction("this 0"),
//                                            right:
//                                                PushInstruction("constant 0"),
//                                            binaryOp: "ADD"
//                                        )
//                                ),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "EQ"
//                        ),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                Dereference(
//                                    base:
//                                        BinaryPushGroup(
//                                            left:
//                                                PushInstruction("this 0"),
//                                            right:
//                                                PushInstruction("constant 1"),
//                                            binaryOp: "ADD"
//                                        )
//                                ),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "EQ"
//                        ),
//                    binaryOp: "AND"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("this 0"),
//                                    right:
//                                        PushInstruction("constant 2"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "AND"
//)
@Int32.is_zero.EQ.165 // 38649
D=A // 38650
@SP // 38651
AM=M+1 // 38652
A=A-1 // 38653
M=D // 38654
@THIS // 38655
A=M // 38656
D=M // 38657
@0 // 38658
A=D+A // 38659
D=M // 38660
@DO_EQ // 38661
0;JMP // 38662
(Int32.is_zero.EQ.165)
@SP // 38663
AM=M+1 // 38664
A=A-1 // 38665
M=D // 38666
@Int32.is_zero.EQ.166 // 38667
D=A // 38668
@SP // 38669
AM=M+1 // 38670
A=A-1 // 38671
M=D // 38672
@THIS // 38673
A=M // 38674
D=M // 38675
A=D+1 // 38676
D=M // 38677
@DO_EQ // 38678
0;JMP // 38679
(Int32.is_zero.EQ.166)
@SP // 38680
AM=M-1 // 38681
D=D&M // 38682
@SP // 38683
AM=M+1 // 38684
A=A-1 // 38685
M=D // 38686
@Int32.is_zero.EQ.167 // 38687
D=A // 38688
@SP // 38689
AM=M+1 // 38690
A=A-1 // 38691
M=D // 38692
@THIS // 38693
A=M // 38694
D=M // 38695
@2 // 38696
A=D+A // 38697
D=M // 38698
@DO_EQ // 38699
0;JMP // 38700
(Int32.is_zero.EQ.167)
@SP // 38701
AM=M-1 // 38702
D=D&M // 38703
@SP // 38704
AM=M+1 // 38705
A=A-1 // 38706
M=D // 38707
@Int32.is_zero.EQ.168 // 38708
D=A // 38709
@SP // 38710
AM=M+1 // 38711
A=A-1 // 38712
M=D // 38713
@THIS // 38714
A=M // 38715
D=M // 38716
@3 // 38717
A=D+A // 38718
D=M // 38719
@DO_EQ // 38720
0;JMP // 38721
(Int32.is_zero.EQ.168)
@SP // 38722
AM=M-1 // 38723
D=D&M // 38724
@SP // 38725
AM=M+1 // 38726
A=A-1 // 38727
M=D // 38728
@RETURN // 38729
0;JMP // 38730

////FunctionInstruction{functionName='Sphere.surface_normal', numLocals=1, funcMapping={Sphere.new=1, Sphere.intersect=39, Sphere.color=1, Sphere.dispose=4}}
// function Sphere.surface_normal with 1
(Sphere.surface_normal)
@SP // 38731
AM=M+1 // 38732
A=A-1 // 38733
M=0 // 38734

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38735
A=M // 38736
D=M // 38737
@3 // 38738
M=D // 38739

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 38740
A=M+1 // 38741
D=M // 38742
@SP // 38743
AM=M+1 // 38744
A=A-1 // 38745
M=D // 38746
// call Vec3.clone
@6 // 38747
D=A // 38748
@14 // 38749
M=D // 38750
@Vec3.clone // 38751
D=A // 38752
@13 // 38753
M=D // 38754
@Sphere.surface_normal.ret.0 // 38755
D=A // 38756
@CALL // 38757
0;JMP // 38758
(Sphere.surface_normal.ret.0)
@SP // 38759
AM=M-1 // 38760
D=M // 38761
@LCL // 38762
A=M // 38763
M=D // 38764

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 0")], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 38765
A=M // 38766
D=M // 38767
@SP // 38768
AM=M+1 // 38769
A=A-1 // 38770
M=D // 38771
@THIS // 38772
A=M // 38773
D=M // 38774
@SP // 38775
AM=M+1 // 38776
A=A-1 // 38777
M=D // 38778
// call Vec3.do_sub
@7 // 38779
D=A // 38780
@14 // 38781
M=D // 38782
@Vec3.do_sub // 38783
D=A // 38784
@13 // 38785
M=D // 38786
@Sphere.surface_normal.ret.1 // 38787
D=A // 38788
@CALL // 38789
0;JMP // 38790
(Sphere.surface_normal.ret.1)
@SP // 38791
M=M-1 // 38792

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 38793
A=M // 38794
D=M // 38795
@SP // 38796
AM=M+1 // 38797
A=A-1 // 38798
M=D // 38799
// call Vec3.do_normalize
@6 // 38800
D=A // 38801
@14 // 38802
M=D // 38803
@Vec3.do_normalize // 38804
D=A // 38805
@13 // 38806
M=D // 38807
@Sphere.surface_normal.ret.2 // 38808
D=A // 38809
@CALL // 38810
0;JMP // 38811
(Sphere.surface_normal.ret.2)
@SP // 38812
M=M-1 // 38813

////PushInstruction("local 0")
@LCL // 38814
A=M // 38815
D=M // 38816
@SP // 38817
AM=M+1 // 38818
A=A-1 // 38819
M=D // 38820
@RETURN // 38821
0;JMP // 38822

////FunctionInstruction{functionName='Number.new', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2, Number.is_positive=1}}
// function Number.new with 0
(Number.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 38823
AM=M+1 // 38824
A=A-1 // 38825
M=1 // 38826
// call Memory.alloc
@6 // 38827
D=A // 38828
@14 // 38829
M=D // 38830
@Memory.alloc // 38831
D=A // 38832
@13 // 38833
M=D // 38834
@Number.new.ret.0 // 38835
D=A // 38836
@CALL // 38837
0;JMP // 38838
(Number.new.ret.0)
@SP // 38839
AM=M-1 // 38840
D=M // 38841
@3 // 38842
M=D // 38843

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 6"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 6}
//}

@Number.6 // 38844
M=M+1 // 38845

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 38846
A=M // 38847
D=M // 38848
@SP // 38849
AM=M+1 // 38850
A=A-1 // 38851
M=D // 38852
// call Int32.new
@6 // 38853
D=A // 38854
@14 // 38855
M=D // 38856
@Int32.new // 38857
D=A // 38858
@13 // 38859
M=D // 38860
@Number.new.ret.1 // 38861
D=A // 38862
@CALL // 38863
0;JMP // 38864
(Number.new.ret.1)
@SP // 38865
AM=M-1 // 38866
D=M // 38867
@THIS // 38868
A=M // 38869
M=D // 38870

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 0")], call=CallInstruction{Int32.do_left_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 38871
A=M // 38872
D=M // 38873
@SP // 38874
AM=M+1 // 38875
A=A-1 // 38876
M=D // 38877
@Number.0 // 38878
D=M // 38879
@SP // 38880
AM=M+1 // 38881
A=A-1 // 38882
M=D // 38883
// call Int32.do_left_shift_bytes
@7 // 38884
D=A // 38885
@14 // 38886
M=D // 38887
@Int32.do_left_shift_bytes // 38888
D=A // 38889
@13 // 38890
M=D // 38891
@Number.new.ret.2 // 38892
D=A // 38893
@CALL // 38894
0;JMP // 38895
(Number.new.ret.2)
@SP // 38896
M=M-1 // 38897

////PushInstruction("pointer 0")
@3 // 38898
D=M // 38899
@SP // 38900
AM=M+1 // 38901
A=A-1 // 38902
M=D // 38903
@RETURN // 38904
0;JMP // 38905

////FunctionInstruction{functionName='Element.dispose', numLocals=0, funcMapping={Element.surface_normal=2, Element.intersect=2, Element.sphere=1, Element.plane=1, Element.color=2}}
// function Element.dispose with 0
(Element.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 38906
A=M // 38907
D=M // 38908
@3 // 38909
M=D // 38910

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.dispose$IF_TRUE1}}
@Element.dispose.EQ.169 // 38911
D=A // 38912
@SP // 38913
AM=M+1 // 38914
A=A-1 // 38915
M=D // 38916
@THIS // 38917
A=M // 38918
D=M // 38919
@DO_EQ // 38920
0;JMP // 38921
(Element.dispose.EQ.169)
D=!D // 38922
@Element.dispose$IF_TRUE1 // 38923
D;JNE // 38924

////GotoInstruction{label='Element.dispose$IF_FALSE1}
// goto Element.dispose$IF_FALSE1
@Element.dispose$IF_FALSE1 // 38925
0;JMP // 38926

////LabelInstruction{label='Element.dispose$IF_TRUE1}
// label Element.dispose$IF_TRUE1
(Element.dispose$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Plane.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 38927
A=M // 38928
D=M // 38929
@SP // 38930
AM=M+1 // 38931
A=A-1 // 38932
M=D // 38933
// call Plane.dispose
@6 // 38934
D=A // 38935
@14 // 38936
M=D // 38937
@Plane.dispose // 38938
D=A // 38939
@13 // 38940
M=D // 38941
@Element.dispose.ret.0 // 38942
D=A // 38943
@CALL // 38944
0;JMP // 38945
(Element.dispose.ret.0)
@SP // 38946
M=M-1 // 38947

////LabelInstruction{label='Element.dispose$IF_FALSE1}
// label Element.dispose$IF_FALSE1
(Element.dispose$IF_FALSE1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.dispose$IF_TRUE2}}
@Element.dispose.EQ.170 // 38948
D=A // 38949
@SP // 38950
AM=M+1 // 38951
A=A-1 // 38952
M=D // 38953
@THIS // 38954
A=M+1 // 38955
D=M // 38956
@DO_EQ // 38957
0;JMP // 38958
(Element.dispose.EQ.170)
D=!D // 38959
@Element.dispose$IF_TRUE2 // 38960
D;JNE // 38961

////GotoInstruction{label='Element.dispose$IF_FALSE2}
// goto Element.dispose$IF_FALSE2
@Element.dispose$IF_FALSE2 // 38962
0;JMP // 38963

////LabelInstruction{label='Element.dispose$IF_TRUE2}
// label Element.dispose$IF_TRUE2
(Element.dispose$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Sphere.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 38964
A=M+1 // 38965
D=M // 38966
@SP // 38967
AM=M+1 // 38968
A=A-1 // 38969
M=D // 38970
// call Sphere.dispose
@6 // 38971
D=A // 38972
@14 // 38973
M=D // 38974
@Sphere.dispose // 38975
D=A // 38976
@13 // 38977
M=D // 38978
@Element.dispose.ret.1 // 38979
D=A // 38980
@CALL // 38981
0;JMP // 38982
(Element.dispose.ret.1)
@SP // 38983
M=M-1 // 38984

////LabelInstruction{label='Element.dispose$IF_FALSE2}
// label Element.dispose$IF_FALSE2
(Element.dispose$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 38985
D=M // 38986
@SP // 38987
AM=M+1 // 38988
A=A-1 // 38989
M=D // 38990
// call Memory.deAlloc
@6 // 38991
D=A // 38992
@14 // 38993
M=D // 38994
@Memory.deAlloc // 38995
D=A // 38996
@13 // 38997
M=D // 38998
@Element.dispose.ret.2 // 38999
D=A // 39000
@CALL // 39001
0;JMP // 39002
(Element.dispose.ret.2)
@SP // 39003
M=M-1 // 39004

////PushInstruction("constant 0")
@SP // 39005
AM=M+1 // 39006
A=A-1 // 39007
M=0 // 39008
@RETURN // 39009
0;JMP // 39010

////FunctionInstruction{functionName='Memory.init', numLocals=2, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.create_foot=0, Memory.get_best_fit=0, Memory.getBinIndex=1, Memory.remove_node=0}}
// function Memory.init with 2
(Memory.init)
@SP // 39011
M=M+1 // 39012
AM=M+1 // 39013
A=A-1 // 39014
M=0 // 39015
A=A-1 // 39016
M=0 // 39017

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@2055 // 39018
D=A // 39019
@LCL // 39020
A=M // 39021
M=D // 39022

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 16384"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "SUB"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 39023
A=M // 39024
D=M // 39025
@SP // 39026
AM=M+1 // 39027
A=A-1 // 39028
M=D // 39029
@LCL // 39030
A=M // 39031
D=M // 39032
@16384 // 39033
D=A-D // 39034
@5 // 39035
D=D-A // 39036
@SP // 39037
AM=M-1 // 39038
A=M // 39039
M=D // 39040

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 39041
A=M // 39042
D=M // 39043
@SP // 39044
AM=M+1 // 39045
A=A-1 // 39046
M=D+1 // 39047
D=1 // 39048
@SP // 39049
AM=M-1 // 39050
A=M // 39051
M=D // 39052

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 39053
A=M // 39054
D=M // 39055
@2 // 39056
D=D+A // 39057
@SP // 39058
AM=M+1 // 39059
A=A-1 // 39060
M=D // 39061
D=0 // 39062
@SP // 39063
AM=M-1 // 39064
A=M // 39065
M=D // 39066

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 39067
A=M // 39068
D=M // 39069
@3 // 39070
D=D+A // 39071
@SP // 39072
AM=M+1 // 39073
A=A-1 // 39074
M=D // 39075
D=0 // 39076
@SP // 39077
AM=M-1 // 39078
A=M // 39079
M=D // 39080

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 39081
A=M // 39082
D=M // 39083
@SP // 39084
AM=M+1 // 39085
A=A-1 // 39086
M=D // 39087
// call Memory.create_foot
@6 // 39088
D=A // 39089
@14 // 39090
M=D // 39091
@Memory.create_foot // 39092
D=A // 39093
@13 // 39094
M=D // 39095
@Memory.init.ret.0 // 39096
D=A // 39097
@CALL // 39098
0;JMP // 39099
(Memory.init.ret.0)
@SP // 39100
M=M-1 // 39101

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//), PushInstruction("local 0")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@2054 // 39102
D=A // 39103
@SP // 39104
AM=M+1 // 39105
A=A-1 // 39106
M=D // 39107
@2054 // 39108
D=A // 39109
@SP // 39110
AM=M+1 // 39111
A=A-1 // 39112
M=D // 39113
@LCL // 39114
A=M // 39115
D=M // 39116
@SP // 39117
AM=M+1 // 39118
A=A-1 // 39119
M=D // 39120
// call Memory.add_node
@7 // 39121
D=A // 39122
@14 // 39123
M=D // 39124
@Memory.add_node // 39125
D=A // 39126
@13 // 39127
M=D // 39128
@Memory.init.ret.1 // 39129
D=A // 39130
@CALL // 39131
0;JMP // 39132
(Memory.init.ret.1)
@SP // 39133
M=M-1 // 39134

////PushInstruction("constant 0")
@SP // 39135
AM=M+1 // 39136
A=A-1 // 39137
M=0 // 39138
@RETURN // 39139
0;JMP // 39140

////FunctionInstruction{functionName='Number.getPi', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.new=3, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2, Number.is_positive=1}}
// function Number.getPi with 0
(Number.getPi)

////PushInstruction("static 4")
@Number.4 // 39141
D=M // 39142
@SP // 39143
AM=M+1 // 39144
A=A-1 // 39145
M=D // 39146
@RETURN // 39147
0;JMP // 39148


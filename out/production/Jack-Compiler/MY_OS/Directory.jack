class Directory {
    /** Fields **/
    field String name;
    field Directory parent;
    field Array files;       // holds int-pointers to File objects
    field Array directories; // holds int-pointers to Directory objects

    /** Constructor: Create a new directory with a name and parent **/
    constructor Directory new(String dirName, Directory parentDir) {
        let name = dirName;
        let parent = parentDir;
        let files = Array.new(4);
        let directories = Array.new(4);
        return this;
    }

    /** Add a file to this directory **/
    method void addFile(File f) {
        do files.append(f);
        return;
    }

    /** Add a subdirectory to this directory **/
    method void addDirectory(Directory d) {
        do directories.append(d);
        return;
    }

    /** Return number of subdirectories **/
    method int amountOfDirectories() {
        return directories.length();
    }

    /** Return number of files **/
    method int amountOfFiles() {
        return files.length();
    }

    /** Get subdirectory by index **/
    method Directory getDirectoryFromIndex(int i) {
        return directories.get(i);
    }

    /** Get file by index **/
    method File getFileFromIndex(int i) {
        return files.get(i);
    }

    /** Get name of subdirectory at index i **/
    method String getDirectoryName(int i) {
        var Directory d;
        let d = directories.get(i);
        return d.getName();
    }

    /** Get name of file at index i **/
    method String getFileName(int i) {
        var File f;
        let f = files.get(i);
        return f.getName();
    }

    /** Get array of all subdirectories **/
    method Array getDirectories() {
        return directories;
    }

    /** Get array of all files **/
    method Array getFiles() {
        return files;
    }

    /** Get parent directory **/
    method Directory getParent() {
        return parent;
    }

    /** Get this directory's name **/
    method String getName() {
        return name;
    }

    /** Check if a file exists **/
    method boolean hasFile(String name) {
        return (getFile(name) ~= null);
    }

    /** Check if a subdirectory exists **/
    method boolean hasDirectory(String name) {
        return (getDirectory(name) ~= null);
    }

    /** Delete a file by name. Returns true if successful **/
    method boolean deleteFile(String deleteFile_name) {
        var int i, n, fInt;
        var File f;
        var String fName;
        var boolean found;

        let i = 0;
        let n = files.length();
        let found = false;

        while ((i < n) & (~found)) {
            let fInt = files.get(i);
            let f = fInt;
            let fName = f.getName();
            if (fName.equals(deleteFile_name)) {
                let found = true;
            } else {
                let i = i + 1;
            }
        }

        if (found = true) {
            while (i < n - 1) {
                let fInt = files.get(i + 1);
                do files.set(i, fInt);
                let i = i + 1;
            }

            do files.set(n - 1, 0);
            do files.reset();

            let i = 0;
            while (i < n - 1) {
                let fInt = files.get(i);
                do files.append(fInt);
                let i = i + 1;
            }
        }

        return found;
    }

    /** Delete a subdirectory by name **/
    method void deleteDirectory(String name) {
        var int i, n, dInt;
        var Directory d;
        var String dName;
        var boolean found;

        let i = 0;
        let n = directories.length();
        let found = false;

        while ((i < n) & (~found)) {
            let dInt = directories.get(i);
            let d = dInt;
            let dName = d.getName();
            if (dName.equals(name)) {
                let found = true;
            } else {
                let i = i + 1;
            }
        }

        if (found) {
            while (i < n - 1) {
                let dInt = directories.get(i + 1);
                do directories.set(i, dInt);
                let i = i + 1;
            }

            do directories.set(n - 1, 0);
            do directories.reset();

            let i = 0;
            while (i < n - 1) {
                let dInt = directories.get(i);
                do directories.append(dInt);
                let i = i + 1;
            }
        }

        return;
    }

    /** Return the subdirectory with the given name, or null **/
    method Directory getDirectory(String targetName) {
        var int i, n;
        var Directory d;

        let i = 0;
        let n = directories.length();
        while (i < n) {
            let d = directories.get(i);
            if (targetName.equals(d.getName())) {
                return d;
            }
            let i = i + 1;
        }
        return null;
    }

    /** Return the file with the given name, or null **/
    method File getFile(String Filename) {
        var int i, n, item;
        var File f;

        let i = 0;
        let n = files.length();
        while (i < n) {
            let item = files.get(i);
            let f = item;
            if (Filename.equals(f.getName())) {
                return f;
            }
            let i = i + 1;
        }

        return null;
    }
}

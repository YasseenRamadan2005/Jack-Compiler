// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen{
    constant SCREEN 16384;
	static boolean the_color; //true is black

	function void init(){
		let the_color = true;
		return;
	}

	function void setColor(boolean color){
		let the_color = color;
		return;
	}

	function void drawPixel(int x, int y){
		var int a,d;
		let a = SCREEN + ((y*32) + (x/16));
		let d = x & 15;
		if(the_color)
		{
		    let a[0] = a[0] | Math.twoToThe(d);
		}
		else
		{
		    let a[0] = a[0] & (~(Math.twoToThe(d)));
		}
		return;
	}

    function void drawLine(int x0, int y0, int x1, int y1) {
        var int dx, dy, sx, sy, err, e2;

        let dx = Math.abs(x1 - x0);
        let dy = Math.abs(y1 - y0);

        if (x0 < x1) {
            let sx = 1;
        } else {
            let sx = -1;
        }

        if (y0 < y1) {
            let sy = 1;
        } else {
            let sy = -1;
        }

        let err = dx - dy;

        while (true) {
            do Screen.drawPixel(x0, y0);
            if ((x0 = x1) & (y0 = y1)) {
                return;
            }

            let e2 = err + err; // 2 * err

            if ((e2 + dy) > 0) {
                let err = err - dy;
                let x0 = x0 + sx;
            }

            if (e2 < dx) {
                let err = err + dx;
                let y0 = y0 + sy;
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x;
        let x = x1;
        while (x <= x2) {
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }


    function void drawCircle(int x0, int y0, int r) {
        var int x, y, d;
        var int xLeft, xRight;

        let x = 0;
        let y = r;
        let d = 1 - r;

        while (x <= y) {
            // Draw horizontal scanlines between symmetric points
            // Each y-level pair: +y and -y, +x and -x

            do Screen.drawHorizontalLine(x0 - x, x0 + x, y0 + y);
            do Screen.drawHorizontalLine(x0 - x, x0 + x, y0 - y);
            do Screen.drawHorizontalLine(x0 - y, x0 + y, y0 + x);
            do Screen.drawHorizontalLine(x0 - y, x0 + y, y0 - x);

            if (d < 0) {
                let d = d + (x + x) + 3;
            } else {
                let d = d + ((x - y) + (x - y)) + 5;
                let y = y - 1;
            }

            let x = x + 1;
        }
        return;
    }

    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, wordStart, wordEnd, bitStart, bitEnd, y_32;
        var int mask, addr, w, colorWord;

        // Set color word based on the_color
        let colorWord = -1; // black (all bits 1)
        if (~the_color) {
            let colorWord = 0; // white (all bits 0)
        }

        let y = y1;
        while (y <= y2) {
            let wordStart = x1 / 16;
            let wordEnd = x2 / 16;
            let bitStart = x1 & 15;
            let bitEnd = x2 & 15;
            let y_32 = y * 32;
            // Single word case
            if (wordStart = wordEnd) {
                let mask = ((Math.twoToThe(bitEnd + 1)) - 1) - ((Math.twoToThe(bitStart)) - 1);
                let addr = y_32 + wordStart;
                if (the_color) {
                    let SCREEN[addr] = SCREEN[addr] | mask;
                } else {
                    let SCREEN[addr] = SCREEN[addr] & (~mask);
                }
            } else {
                // Left partial word
                let mask = ~((Math.twoToThe(bitStart)) - 1);
                let addr = y_32 + wordStart;
                if (the_color) {
                    let SCREEN[addr] = SCREEN[addr] | mask;
                } else {
                    let SCREEN[addr] = SCREEN[addr] & (~mask);
                }

                // Full words between
                let w = wordStart + 1;
                while (w < wordEnd) {
                    let addr = y_32 + w;
                    let SCREEN[addr] = colorWord;
                    let w = w + 1;
                }

                // Right partial word
                let mask = (Math.twoToThe(bitEnd + 1)) - 1;
                let addr = y_32 + wordEnd;
                if (the_color) {
                    let SCREEN[addr] = SCREEN[addr] | mask;
                } else {
                    let SCREEN[addr] = SCREEN[addr] & (~mask);
                }
            }

            let y = y + 1;
        }
        return;
    }



    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let SCREEN[i] = 0;
            let i = i + 1;
        }
        return;
    }

}

class Shell {
    constant KEYBOARD_START_ADDRESS 24576;

    static int cursor;
    static String command;

    static String cwd, ls, mkdir, cd, clear, err;

    static Directory theCwd;

    function void run() {
        var char character;

        let cwd = "cwd";
        let ls = "ls";
        let mkdir = "mkdir";
        let cd = "cd";
        let clear = "clear";
        let err = "Unsupported instruction: ";

        let command = String.new(100);
        let theCwd = Directory.new("/", null);  // Root directory

        let cursor = 0;
        do Output.printChar(36); // '$'
        do Output.printChar(0);  // black square

        while (true) {
            while (KEYBOARD_START_ADDRESS[0] = 0) {}
            let character = KEYBOARD_START_ADDRESS[0];

            if (character = 128) {
                do Output.println();
                do Shell.handleCommand(command);
                do command.dispose();
                let command = String.new(100);
                let cursor = 0;
                do Output.printChar(36);
                do Output.printChar(0);
            } else {
                if ((character = 129) & (cursor > 0)) {
                    do Output.backSpace();
                    do Output.backSpace();
                    do Output.printChar(0);
                    let cursor = cursor - 1;
                } else {
                    if (~((character = 129) & (cursor = 0))) {
                        do Output.backSpace();
                        do Output.printChar(character);
                        do Output.printChar(0);
                        let cursor = cursor + 1;
                        do command.appendChar(character);
                    }
                }
            }

            let KEYBOARD_START_ADDRESS[0] = 0;
        }

        return;
    }

    function void handleCommand(String s) {
        var Array tokens, dirs, files;
        var Directory d, newDir, subdir;
        var File file;
        var String cmd, arg, name;
        var int tokenCount, i, n, item;
        var boolean isEqual;

        let tokens = Shell.parseCommand(s);
        let tokenCount = tokens.length();
        if (tokenCount = 0) {
            return;
        }

        let cmd = tokens.get(0);

        if (cmd.equals(cwd)) {
            do Output.printString(theCwd.getName());
            do Output.println();
            return;
        }

        if (cmd.equals(ls)) {
            let i = 0;
            while (i < theCwd.amountOfDirectories()){
                do Output.printString(theCwd.getDirectoryName(i));
                do Output.println();
                let i = i + 1;
            }
            let i = 0;
            while (i < theCwd.amountOfFiles()){
                do Output.printString(theCwd.getFileName(i));
                do Output.println();
                let i = i + 1;
            }
            return;
        }

        if ((cmd.equals(mkdir)) & (tokenCount > 1)) {
            let arg = tokens.get(1);
            do theCwd.addDirectory(Directory.new(arg, theCwd));
            return;
        }

        if ((cmd.equals(cd)) & (tokenCount > 1)) {
            let arg = tokens.get(1);
            if (arg.equals("..") & (theCwd.getParent() ~= null)) {
                let newDir = theCwd.getParent();
                if (~(newDir = null)) {
                    let theCwd = newDir;
                }
            } else {
                let newDir = theCwd.getDirectory(arg);
                if (newDir ~= null) {
                    let theCwd = newDir;
                } else {
                    do Output.println();
                    do Output.printString("Not found: ");
                    do Output.printString(arg);
                    do Output.println();
                }
            }
            return;
        }

        if (cmd.equals(clear)) {
            do Screen.clearScreen();
            do Output.moveCursor(0,0);
            return;
        }

        do Output.printString(err);
        do Output.printString(cmd);
        do Output.println();
        return;
    }

    function Array parseCommand(String s) {
        var Array result;
        var String token;
        var int len, i, wordCount, inWord, start, end, tokenIndex;
        var int j;

        let len = s.length();
        let i = 0;
        let wordCount = 0;
        let inWord = 0;

        while (i < len) {
            if ((s.charAt(i)) = 32) {
                let inWord = 0;
            } else {
                if (inWord = 0) {
                    let wordCount = wordCount + 1;
                    let inWord = 1;
                }
            }
            let i = i + 1;
        }
        let result = Array.new(wordCount);

        let i = 0;
        let tokenIndex = 0;
        let inWord = 0;
        let start = 0;

        while (i < len) {
            if ((s.charAt(i)) = 32) {
                if (inWord = 1) {
                    let inWord = 0;
                    let end = i;
                    let token = String.new(end - start);

                    let j = start;
                    while (j < end) {
                        do token.appendChar(s.charAt(j));
                        let j = j + 1;
                    }
                    do result.set(tokenIndex, token);
                    let tokenIndex = tokenIndex + 1;
                }
            } else {
                if (inWord = 0) {
                    let start = i;
                    let inWord = 1;
                }
            }
            let i = i + 1;
        }

        if (inWord = 1) {
            let token = String.new(i - start);
            let j = start;
            while (j < i) {
                do token.appendChar(s.charAt(j));
                let j = j + 1;
            }
            do result.set(tokenIndex, token);
        }
        return result;
    }
}

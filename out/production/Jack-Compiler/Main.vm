function Math.init.0 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
pop pointer 1
push constant 0
pop that 0
push constant 1
push static 1
add
pop pointer 1
push constant 2
pop that 0
push constant 2
push static 1
add
pop pointer 1
push constant 4
pop that 0
push constant 3
push static 1
add
pop pointer 1
push constant 8
pop that 0
push constant 4
push static 1
add
pop pointer 1
push constant 16
pop that 0
push constant 5
push static 1
add
pop pointer 1
push constant 32
pop that 0
push constant 6
push static 1
add
pop pointer 1
push constant 64
pop that 0
push constant 7
push static 1
add
pop pointer 1
push constant 128
pop that 0
push constant 8
push static 1
add
pop pointer 1
push constant 256
pop that 0
push constant 9
push static 1
add
pop pointer 1
push constant 512
pop that 0
push constant 10
push static 1
add
pop pointer 1
push constant 1024
pop that 0
push constant 11
push static 1
add
pop pointer 1
push constant 2048
pop that 0
push constant 12
push static 1
add
pop pointer 1
push constant 4096
pop that 0
push constant 13
push static 1
add
pop pointer 1
push constant 8192
pop that 0
push constant 14
push static 1
add
pop pointer 1
push constant 16384
pop that 0
push constant 15
push static 1
add
pop pointer 1
push constant 32768
pop that 0
push constant 0
return
function Math.bit.2 0
push argument 0
push argument 1
push static 1
add
pop pointer 1
push that 0
and
not
if-goto IfElse
push constant 0
not
return
label IfEnd
push constant 0
return
function Math.multiply.2 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_START_Math.multiply.2
push local 2
push constant 16
lt
if-goto WHILE_END_Math.multiply.2
push argument 0
push local 2
call Math.bit 2
not
if-goto IfElse
push local 0
push local 1
add
pop local 0
label IfEnd
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_START_Math.multiply.2
label WHILE_END_Math.multiply.2
push local 0
return
function Math.divide.2 1
push argument 1
push argument 0
gt
not
if-goto IfElse
push constant 0
return
label IfEnd
push argument 1
push argument 0
eq
not
if-goto IfElse
push constant 1
return
label IfEnd
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 1
lt
not
if-goto IfElse
push local 0
push local 0
add
return
label IfEnd
push local 0
push local 0
add
push constant 1
add
return
function Math.sqrt.1 3
push constant 0
pop local 0
push constant 15
pop local 1
label WHILE_START_Math.sqrt.1
or
if-goto WHILE_END_Math.sqrt.1
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 2
not
not
if-goto IfElse
push local 2
pop local 0
label IfEnd
push local 1
push constant 1
sub
pop local 1
goto WHILE_START_Math.sqrt.1
label WHILE_END_Math.sqrt.1
push local 0
return
function Math.max.2 0
push argument 0
push argument 1
gt
not
if-goto IfElse
push argument 0
return
label IfEnd
push argument 1
return
function Math.min.2 0
// Error: variable not found: x
// Error: variable not found: y
lt
not
if-goto IfElse
// Error: variable not found: x
return
label IfEnd
// Error: variable not found: y
return
function Math.abs.1 0
push argument 0
push constant 0
lt
not
if-goto IfElse
push argument 0
neg
return
label IfEnd
push argument 0
return

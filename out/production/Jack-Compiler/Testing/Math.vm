function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
pop pointer 1
push constant 0
pop that 0
push static 0
push constant 1
add
pop pointer 1
push constant 2
pop that 0
push static 0
push constant 2
add
pop pointer 1
push constant 4
pop that 0
push static 0
push constant 3
add
pop pointer 1
push constant 8
pop that 0
push static 0
push constant 4
add
pop pointer 1
push constant 16
pop that 0
push static 0
push constant 5
add
pop pointer 1
push constant 32
pop that 0
push static 0
push constant 6
add
pop pointer 1
push constant 64
pop that 0
push static 0
push constant 7
add
pop pointer 1
push constant 128
pop that 0
push static 0
push constant 8
add
pop pointer 1
push constant 256
pop that 0
push static 0
push constant 9
add
pop pointer 1
push constant 512
pop that 0
push static 0
push constant 10
add
pop pointer 1
push constant 1024
pop that 0
push static 0
push constant 11
add
pop pointer 1
push constant 2048
pop that 0
push static 0
push constant 12
add
pop pointer 1
push constant 4096
pop that 0
push static 0
push constant 13
add
pop pointer 1
push constant 8192
pop that 0
push static 0
push constant 14
add
pop pointer 1
push constant 16384
pop that 0
push static 0
push constant 15
add
pop pointer 1
push constant 16384
push constant 16384
add
pop that 0
push constant 0
return
function Math.two_to_the_power_of 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
not
if-goto Math.bit.IfElse1
push constant 0
not
return
label Math.bit.IfElse1
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_START_Math.multiply1
push local 2
push constant 16
lt
not
if-goto WHILE_END_Math.multiply1
push argument 0
push local 2
call Math.bit 2
not
if-goto Math.multiply.IfElse1
push local 0
push local 1
add
pop local 0
label Math.multiply.IfElse1
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_START_Math.multiply1
label WHILE_END_Math.multiply1
push local 0
return
function Math.divide 1
push argument 1
push argument 0
gt
not
if-goto Math.divide.IfElse1
push constant 0
return
label Math.divide.IfElse1
push argument 1
push argument 0
eq
not
if-goto Math.divide.IfElse2
push constant 1
return
label Math.divide.IfElse2
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math.divide.IfElse3
push local 0
push local 0
add
return
label Math.divide.IfElse3
push local 0
push local 0
add
push constant 1
add
return
function Math.sqrt 3
push constant 0
pop local 0
push constant 15
pop local 1
label WHILE_START_Math.sqrt1
push local 1
push constant 0
gt
push local 1
push constant 0
eq
or
not
if-goto WHILE_END_Math.sqrt1
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
push argument 0
gt
not
not
if-goto Math.sqrt.IfElse1
push local 2
pop local 0
label Math.sqrt.IfElse1
push local 1
push constant 1
sub
pop local 1
goto WHILE_START_Math.sqrt1
label WHILE_END_Math.sqrt1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.IfElse1
push argument 0
return
label Math.max.IfElse1
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.IfElse1
push argument 0
return
label Math.min.IfElse1
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math.abs.IfElse1
push argument 0
neg
return
label Math.abs.IfElse1
push argument 0
return

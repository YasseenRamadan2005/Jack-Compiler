// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int size;
    field int capacity; //Capacity is the total amount we can store at the moment. Size is what is currently being filled
    //constructs a new empty string (of length zero) that can contain at most maxLength characters
    constructor String new(int maxLength){
        if (maxLength = 0){
            let s = null;
        }
        else{
            let s = Array.new(maxLength);
        }
        let capacity = maxLength;
        let size = 0;
        return this;
    }

    // disposes this string
    method void dispose(){
        if (s ~= null){
            do s.dispose();
        }
        return;
    }


    //returns the length of this string
    method int length(){
        return size;
    }


    //returns the character at location j of this string
    method char charAt(int j){
        return s[j];
    }

    //sets the j-th element of this string to c
    method void setCharAt(int j, char c){
        let s[j] = c;
        return;
    }

    //appends c to this string and returns this string
    method String appendChar(char c){
        var Array new_s;
        if (size = capacity){
            //We double the capacity for a new string
            let new_s = Array.new(capacity + capacity);

            //Now we copy the characters
            do Memory.copy(s, new_s, size);

            //Free the old memory
            do s.dispose();

            //Update the info
            let capacity = capacity + capacity; //Ideally this is a nice optimization if my VM to Hack assembly translator is working properly
            let s = new_s;
        }
        let s[size] = c;
        let size = size + 1;
        return this;
    }

    //erases the last character from this string
    method void eraseLastChar( ){
        let size = size - 1;
        return;
    }

    //returns the integer value of this string (or the string prefix until a non-digit character is detected)
    method int intValue(){
        var int v, i;
        let i = 1;
        let v = 0;
        while (i<size){
            let v = v * 10 + (s[i] - 48); 
            let i = i + 1;
        } 
        return v;
    }

    //sets this string to hold a representation of j
    method void setInt(int j) {
        var int digit, i, temp, length, isNegative;
        var Array digits;

        let size = 0; // Clear current string
        let isNegative = 0;

        // Special case: j == 0
        if (j = 0) {
            do appendChar(48); // ASCII '0'
            return;
        }

        // Handle negative numbers
        if (j < 0) {
            let isNegative = 1;

            // Special case: j == -32768
            if (j < 0 & ((j & 32767) = 32767)) {
                // Hardcoded because -(-32768) = -32768 (overflow)
                do appendChar(45); // '-'
                do appendChar(51); // '3'
                do appendChar(50); // '2'
                do appendChar(55); // '7'
                do appendChar(54); // '6'
                do appendChar(56); // '8'
                return;
            }
            let j = -j;
        }

        // Count digits
        let temp = j;
        let length = 0;
        while (temp > 0) {
            let temp = temp / 10;
            let length = length + 1;
        }

        // Store digits in reverse
        let digits = Array.new(length);
        let i = 0;
        while (j > 0) {
            let digit = j - ((j / 10) * 10);
            let digits[i] = digit + 48;
            let j = j / 10;
            let i = i + 1;
        }

        // Add minus sign if needed
        if (isNegative = 1) {
            do appendChar(45); // '-'
        }

        // Append digits in correct order
        while (i > 0) {
            let i = i - 1;
            do appendChar(digits[i]);
        }

        do digits.dispose();
        return;
    }


    //returns the backspace character
    function char backSpace(){
        return 129;
    }

    //returns the double quote (‘‘) character
    function char doubleQuote(){
        return 34;
    }

    //returns the newline character
    function char newLine(){
        return 128;
    }
}
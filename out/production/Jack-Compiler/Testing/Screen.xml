<CLASS>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <CLASS_VAR_DEC>
    <KEYWORD> static </KEYWORD>
    <IDENTIFIER> bool </IDENTIFIER>
    <IDENTIFIER> black </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <CLASS_VAR_DEC>
    <KEYWORD> static </KEYWORD>
    <IDENTIFIER> Array </IDENTIFIER>
    <IDENTIFIER> screen </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> init </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> black </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <KEYWORD> true </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> screen </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 16384 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> clearScreen </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 8192 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Memory </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> poke </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> screen </IDENTIFIER>
                    <SYMBOL> [ </SYMBOL>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> i </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                    <SYMBOL> ] </SYMBOL>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> setColor </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> boolean </KEYWORD>
      <IDENTIFIER> b </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> black </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> b </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> drawPixel </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> address </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> mask </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> address </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> screen </IDENTIFIER>
            </TERM>
            <SYMBOL> + </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y </IDENTIFIER>
                </TERM>
                <SYMBOL> * </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 32 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> + </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x </IDENTIFIER>
                </TERM>
                <SYMBOL> / </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 16 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> mask </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Math </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> two_to_the_power_of </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> x </IDENTIFIER>
                  </TERM>
                  <SYMBOL> &amp; </SYMBOL>
                  <TERM>
                    <INTEGER_CONSTANT> 15 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> black </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> address </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> address </IDENTIFIER>
                  <SYMBOL> [ </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ] </SYMBOL>
                </TERM>
                <SYMBOL> | </SYMBOL>
                <TERM>
                  <IDENTIFIER> mask </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
          <KEYWORD> else </KEYWORD>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> address </IDENTIFIER>
              <SYMBOL> [ </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ] </SYMBOL>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> address </IDENTIFIER>
                  <SYMBOL> [ </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ] </SYMBOL>
                </TERM>
                <SYMBOL> &amp; </SYMBOL>
                <TERM>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <SYMBOL> ~ </SYMBOL>
                      <TERM>
                        <IDENTIFIER> mask </IDENTIFIER>
                      </TERM>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> drawLine </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x1 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y1 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x2 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y2 </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> dx </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> dy </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> adyMinusbdx </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> a </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> b </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> yStep </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> temp </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> x1 </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <IDENTIFIER> x2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y1 </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt; </SYMBOL>
                <TERM>
                  <IDENTIFIER> y2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> temp </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> y1 </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> y1 </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> y2 </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> y2 </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> temp </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> b </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <WHILE_STATEMENT>
              <KEYWORD> while </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> b </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> y2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <DO_STATEMENT>
                  <KEYWORD> do </KEYWORD>
                  <IDENTIFIER> Screen </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> drawPixel </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> x1 </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                    <SYMBOL> , </SYMBOL>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> b </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                  <SYMBOL> ; </SYMBOL>
                </DO_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> b </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> b </IDENTIFIER>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </WHILE_STATEMENT>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> y1 </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <IDENTIFIER> y2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x1 </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt; </SYMBOL>
                <TERM>
                  <IDENTIFIER> x2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> temp </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> x1 </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> x1 </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> x2 </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> x2 </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> temp </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> a </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <WHILE_STATEMENT>
              <KEYWORD> while </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> a </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> x2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <DO_STATEMENT>
                  <KEYWORD> do </KEYWORD>
                  <IDENTIFIER> Screen </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> drawPixel </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> a </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                    <SYMBOL> , </SYMBOL>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> y1 </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                  <SYMBOL> ; </SYMBOL>
                </DO_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> a </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> a </IDENTIFIER>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </WHILE_STATEMENT>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> x1 </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <IDENTIFIER> x2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> temp </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> x1 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> x2 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> temp </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> y1 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> y2 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> dx </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> x2 </IDENTIFIER>
            </TERM>
            <SYMBOL> - </SYMBOL>
            <TERM>
              <IDENTIFIER> x1 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> dy </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> y2 </IDENTIFIER>
            </TERM>
            <SYMBOL> - </SYMBOL>
            <TERM>
              <IDENTIFIER> y1 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> yStep </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> dy </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> dy </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <IDENTIFIER> dy </IDENTIFIER>
                  </TERM>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> yStep </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                  </TERM>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> a </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> b </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> adyMinusbdx </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> a </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> dx </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> Screen </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> drawPixel </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> x1 </IDENTIFIER>
                  </TERM>
                  <SYMBOL> + </SYMBOL>
                  <TERM>
                    <IDENTIFIER> a </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> y1 </IDENTIFIER>
                  </TERM>
                  <SYMBOL> + </SYMBOL>
                  <TERM>
                    <IDENTIFIER> b </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> adyMinusbdx </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> adyMinusbdx </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <IDENTIFIER> dy </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> adyMinusbdx </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> dx </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> b </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> b </IDENTIFIER>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <IDENTIFIER> yStep </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> adyMinusbdx </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> adyMinusbdx </IDENTIFIER>
                    </TERM>
                    <SYMBOL> - </SYMBOL>
                    <TERM>
                      <IDENTIFIER> dx </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> a </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> a </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> drawRectangle </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x1 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y1 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x2 </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y2 </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> temp </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> y </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> x1 </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <IDENTIFIER> x2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> temp </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> x1 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> x2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> x2 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> y1 </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <IDENTIFIER> y2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> temp </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y1 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> y1 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y2 </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> y2 </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> y </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> y1 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> y </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> y2 </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> drawLine </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> x1 </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> y </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> x2 </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> y </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> y </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> y </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> drawCircle </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> x </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> y </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> r </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> cx </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> cy </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> rSquared </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> r </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 181 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> rSquared </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> r </IDENTIFIER>
            </TERM>
            <SYMBOL> * </SYMBOL>
            <TERM>
              <IDENTIFIER> r </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> cy </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> - </SYMBOL>
              <TERM>
                <IDENTIFIER> r </IDENTIFIER>
              </TERM>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> cy </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> r </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> cx </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <IDENTIFIER> r </IDENTIFIER>
                  </TERM>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <WHILE_STATEMENT>
              <KEYWORD> while </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> cx </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> r </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <IF_STATEMENT>
                  <KEYWORD> if </KEYWORD>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <SYMBOL> ( </SYMBOL>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> cx </IDENTIFIER>
                        </TERM>
                        <SYMBOL> * </SYMBOL>
                        <TERM>
                          <IDENTIFIER> cx </IDENTIFIER>
                        </TERM>
                      </EXPRESSION>
                      <SYMBOL> ) </SYMBOL>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <SYMBOL> ( </SYMBOL>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> cy </IDENTIFIER>
                        </TERM>
                        <SYMBOL> * </SYMBOL>
                        <TERM>
                          <IDENTIFIER> cy </IDENTIFIER>
                        </TERM>
                      </EXPRESSION>
                      <SYMBOL> ) </SYMBOL>
                    </TERM>
                    <SYMBOL> &lt;= </SYMBOL>
                    <TERM>
                      <IDENTIFIER> rSquared </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ) </SYMBOL>
                  <SYMBOL> { </SYMBOL>
                  <STATEMENTS>
                    <DO_STATEMENT>
                      <KEYWORD> do </KEYWORD>
                      <IDENTIFIER> drawPixel </IDENTIFIER>
                      <SYMBOL> ( </SYMBOL>
                      <EXPRESSION_LIST>
                        <EXPRESSION>
                          <TERM>
                            <IDENTIFIER> x </IDENTIFIER>
                          </TERM>
                          <SYMBOL> + </SYMBOL>
                          <TERM>
                            <IDENTIFIER> cx </IDENTIFIER>
                          </TERM>
                        </EXPRESSION>
                        <SYMBOL> , </SYMBOL>
                        <EXPRESSION>
                          <TERM>
                            <IDENTIFIER> y </IDENTIFIER>
                          </TERM>
                          <SYMBOL> + </SYMBOL>
                          <TERM>
                            <IDENTIFIER> cy </IDENTIFIER>
                          </TERM>
                        </EXPRESSION>
                      </EXPRESSION_LIST>
                      <SYMBOL> ) </SYMBOL>
                      <SYMBOL> ; </SYMBOL>
                    </DO_STATEMENT>
                  </STATEMENTS>
                  <SYMBOL> } </SYMBOL>
                </IF_STATEMENT>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> cx </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> cx </IDENTIFIER>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </WHILE_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> cy </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> cy </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SYMBOL> } </SYMBOL>
</CLASS>

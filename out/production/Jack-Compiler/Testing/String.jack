// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length;

    /** Constructs a new empty string with given maximum length. */
    constructor String new(int maxLength) {
        if (maxLength <= 0) {
            let maxLength = 1;
        }
        let chars = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the length of this string. */
    method int length() {
        return length;
    }

    /** Returns the maximum length this string can hold. */
    method int maxLength() {
        return chars.capacity();
    }

    /** Returns the character at location j of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j >= length)) {
            return 0; // Return null character for invalid index
        }
        return chars.get(j);
    }

    /** Sets the j-th element of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j >= 0) & (j < length)) {
            do chars.set(j, c);
        }
        return;
    }

    /** Appends c to this string and returns this string. */
    method String appendChar(char c) {
        // Check if we need to grow the underlying array
        if (length >= chars.capacity()) {
            do chars.grow();
        }

        do chars.set(length, c);
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string (or prefix until non-digit). */
    method int intValue() {
        var int v, i, sign, c;
        let v = 0;
        let i = 0;
        let sign = 1;

        // Handle negative sign
        if ((length > 0) & (chars.get(0) = 45)) { // 45 is ASCII for '-'
            let sign = -1;
            let i = 1;
        }

        while (i < length) {
            let c = chars.get(i);
            if ((c >= 48) & (c <= 57)) { // 48-57 are ASCII for '0'-'9'
                let v = v * 10 + (c - 48);
            } else {
                let i = length; // Break out of loop
            }
            let i = i + 1;
        }
        return v * sign;
    }

    /** Sets this string to hold a representation of j. */
    method void setInt(int j) {
        var int digit, temp, digitCount, i;
        var Array digits;

        let length = 0;

        // Handle negative numbers
        if (j < 0) {
            do appendChar(45); // '-' character
            let j = -j;
        }

        // Handle zero specially
        if (j = 0) {
            do appendChar(48); // '0' character
            return;
        }

        // Count digits and store them
        let digits = Array.new(10); // Max 10 digits for 16-bit integers
        let digitCount = 0;
        let temp = j;

        while (temp > 0) {
            let digit = temp - ((temp / 10) * 10);
            do digits.set(digitCount, digit + 48); // Convert to ASCII
            let digitCount = digitCount + 1;
            let temp = temp / 10;
        }

        // Append digits in reverse order
        let i = digitCount - 1;
        while (i >= 0) {
            do appendChar(digits.get(i));
            let i = i - 1;
        }

        do digits.dispose();
        return;
    }

    /** Appends the given string to this string. */
    method String append(String str) {
        var int i;
        let i = 0;
        while (i < str.length()) {
            do appendChar(str.charAt(i));
            let i = i + 1;
        }
        return this;
    }

    /** Returns a substring from index start to end (exclusive). */
    method String substring(int start, int end) {
        var String result;
        var int i;

        if ((start < 0) | (start >= length) | (end <= start)) {
            return String.new(1); // Return empty string
        }

        if (end > length) {
            let end = length;
        }

        let result = String.new(end - start);
        let i = start;
        while (i < end) {
            do result.appendChar(chars.get(i));
            let i = i + 1;
        }
        return result;
    }

    /** Returns true if this string equals the given string. */
    method boolean equals(String other) {
        var int i;

        if (length ~= other.length()) {
            return false;
        }

        let i = 0;
        while (i < length) {
            if (chars.get(i) ~= other.charAt(i)) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    /** Clears the string (makes it empty). */
    method void clear() {
        let length = 0;
        return;
    }

    /** Returns true if the string is empty. */
    method boolean isEmpty() {
        return length = 0;
    }

    /** Shrinks the underlying array to fit the current string length. */
    method void shrinkToFit() {
        do chars.resize(length);
        return;
    }

    /** Special character constants. */
    function char backSpace() { return 129; }
    function char doubleQuote() { return 34; }
    function char newLine() { return 128; }
}
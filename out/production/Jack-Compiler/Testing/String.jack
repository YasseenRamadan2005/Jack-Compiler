// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int size;

    // Constructs a new empty string (of length zero) that can contain at most maxLength characters
    constructor String new(int maxLength) {
        let s = Array.new(maxLength);
        let size = 0;
        return this;
    }

    // Disposes this string
    method void dispose() {
        do s.dispose();
        return;
    }

    // Returns the length of this string
    method int length() {
        return size;
    }

    // Returns the character at location j of this string
    method char charAt(int j) {
        return s[j];
    }

    // Sets the j-th element of this string to c
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    // Appends c to this string and returns this string
    method String appendChar(char c) {
        var Array newArray;

        if (size = s.maxLength()) {
            let newArray = Memory.realloc(s, s.maxLength() * 2);
            if (newArray = null) {
                return this;
            }
            let s = newArray;
        }

        let s[size] = c;
        let size = size + 1;
        return this;
    }

    // Erases the last character from this string
    method void eraseLastChar() {
        let size = size - 1;
        return;
    }

    // Returns the integer value of this string (or prefix until non-digit)
    method int intValue() {
        var int v, i;
        let v = 0;
        let i = 0;
        while (i < size) {
            let v = v * 10 + (s[i] - 48);
            let i = i + 1;
        }
        return v;
    }

    // Sets this string to hold a representation of j
    method void setInt(int j) {
        var int digit;
        let size = 0;
        while (true) {
            let digit = j - ((j / 10) * 10);
            do appendChar(digit + 48); // convert to char
            let j = j / 10;
            if (j = 0) {
                return;
            }
        }
    }
}

<CLASS>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> String </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <CLASS_VAR_DEC>
    <KEYWORD> field </KEYWORD>
    <IDENTIFIER> Array </IDENTIFIER>
    <IDENTIFIER> chars </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <CLASS_VAR_DEC>
    <KEYWORD> field </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> length </IDENTIFIER>
    <SYMBOL> ; </SYMBOL>
  </CLASS_VAR_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> constructor </KEYWORD>
    <IDENTIFIER> String </IDENTIFIER>
    <IDENTIFIER> new </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> maxLength </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> maxLength </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt;= </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> maxLength </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> chars </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Array </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> new </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> maxLength </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> length </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <KEYWORD> this </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> dispose </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> chars </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> dispose </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> length </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> maxLength </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> chars </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> capacity </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> char </KEYWORD>
    <IDENTIFIER> charAt </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> j </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> j </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt; </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> | </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> j </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> chars </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> get </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> j </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> setCharAt </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> j </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> char </KEYWORD>
      <IDENTIFIER> c </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> j </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> &amp; </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> j </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt; </SYMBOL>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> chars </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> set </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> j </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> c </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <IDENTIFIER> String </IDENTIFIER>
    <IDENTIFIER> appendChar </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> char </KEYWORD>
      <IDENTIFIER> c </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt;= </SYMBOL>
            <TERM>
              <IDENTIFIER> chars </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> capacity </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> chars </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> grow </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> chars </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> set </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> length </IDENTIFIER>
              </TERM>
            </EXPRESSION>
            <SYMBOL> , </SYMBOL>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> c </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> length </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
            <SYMBOL> + </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <KEYWORD> this </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> eraseLastChar </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> length </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
                <SYMBOL> - </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> int </KEYWORD>
    <IDENTIFIER> intValue </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> v </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> sign </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> c </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> v </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> sign </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt; </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> &amp; </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> chars </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> get </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
                <SYMBOL> = </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 45 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> sign </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                  </TERM>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> c </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> chars </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> get </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> i </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> c </IDENTIFIER>
                    </TERM>
                    <SYMBOL> &gt;= </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 48 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
                <SYMBOL> &amp; </SYMBOL>
                <TERM>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> c </IDENTIFIER>
                    </TERM>
                    <SYMBOL> &lt;= </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 57 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> v </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> v </IDENTIFIER>
                    </TERM>
                    <SYMBOL> * </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 10 </INTEGER_CONSTANT>
                    </TERM>
                    <SYMBOL> + </SYMBOL>
                    <TERM>
                      <SYMBOL> ( </SYMBOL>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> c </IDENTIFIER>
                        </TERM>
                        <SYMBOL> - </SYMBOL>
                        <TERM>
                          <INTEGER_CONSTANT> 48 </INTEGER_CONSTANT>
                        </TERM>
                      </EXPRESSION>
                      <SYMBOL> ) </SYMBOL>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
              <KEYWORD> else </KEYWORD>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <LET_STATEMENT>
                  <KEYWORD> let </KEYWORD>
                  <IDENTIFIER> i </IDENTIFIER>
                  <SYMBOL> = </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <IDENTIFIER> length </IDENTIFIER>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </LET_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> v </IDENTIFIER>
            </TERM>
            <SYMBOL> * </SYMBOL>
            <TERM>
              <IDENTIFIER> sign </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> setInt </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> j </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> digit </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> temp </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> digitCount </IDENTIFIER>
        <SYMBOL> , </SYMBOL>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <IDENTIFIER> Array </IDENTIFIER>
        <IDENTIFIER> digits </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> length </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> j </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> appendChar </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <INTEGER_CONSTANT> 45 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> j </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <IDENTIFIER> j </IDENTIFIER>
                  </TERM>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> j </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> appendChar </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <INTEGER_CONSTANT> 48 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> digits </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> Array </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> new </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <INTEGER_CONSTANT> 10 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> digitCount </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> temp </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> j </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> temp </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> digit </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
                <SYMBOL> - </SYMBOL>
                <TERM>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION>
                    <TERM>
                      <SYMBOL> ( </SYMBOL>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> temp </IDENTIFIER>
                        </TERM>
                        <SYMBOL> / </SYMBOL>
                        <TERM>
                          <INTEGER_CONSTANT> 10 </INTEGER_CONSTANT>
                        </TERM>
                      </EXPRESSION>
                      <SYMBOL> ) </SYMBOL>
                    </TERM>
                    <SYMBOL> * </SYMBOL>
                    <TERM>
                      <INTEGER_CONSTANT> 10 </INTEGER_CONSTANT>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> digits </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> set </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> digitCount </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
                <SYMBOL> , </SYMBOL>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> digit </IDENTIFIER>
                  </TERM>
                  <SYMBOL> + </SYMBOL>
                  <TERM>
                    <INTEGER_CONSTANT> 48 </INTEGER_CONSTANT>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> digitCount </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> digitCount </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> temp </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> temp </IDENTIFIER>
                </TERM>
                <SYMBOL> / </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 10 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> digitCount </IDENTIFIER>
            </TERM>
            <SYMBOL> - </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt;= </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> appendChar </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> digits </IDENTIFIER>
                    <SYMBOL> . </SYMBOL>
                    <IDENTIFIER> get </IDENTIFIER>
                    <SYMBOL> ( </SYMBOL>
                    <EXPRESSION_LIST>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> i </IDENTIFIER>
                        </TERM>
                      </EXPRESSION>
                    </EXPRESSION_LIST>
                    <SYMBOL> ) </SYMBOL>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> - </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> digits </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> dispose </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <IDENTIFIER> String </IDENTIFIER>
    <IDENTIFIER> append </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <IDENTIFIER> String </IDENTIFIER>
      <IDENTIFIER> str </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> str </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> length </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> appendChar </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> str </IDENTIFIER>
                    <SYMBOL> . </SYMBOL>
                    <IDENTIFIER> charAt </IDENTIFIER>
                    <SYMBOL> ( </SYMBOL>
                    <EXPRESSION_LIST>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> i </IDENTIFIER>
                        </TERM>
                      </EXPRESSION>
                    </EXPRESSION_LIST>
                    <SYMBOL> ) </SYMBOL>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <KEYWORD> this </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <IDENTIFIER> String </IDENTIFIER>
    <IDENTIFIER> substring </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> start </IDENTIFIER>
      <SYMBOL> , </SYMBOL>
      <KEYWORD> int </KEYWORD>
      <IDENTIFIER> end </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <IDENTIFIER> String </IDENTIFIER>
        <IDENTIFIER> result </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> start </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt; </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> | </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> start </IDENTIFIER>
                </TERM>
                <SYMBOL> &gt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
            <SYMBOL> | </SYMBOL>
            <TERM>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> end </IDENTIFIER>
                </TERM>
                <SYMBOL> &lt;= </SYMBOL>
                <TERM>
                  <IDENTIFIER> start </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> String </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> new </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> end </IDENTIFIER>
            </TERM>
            <SYMBOL> &gt; </SYMBOL>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> end </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> length </IDENTIFIER>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> result </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> String </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> new </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> end </IDENTIFIER>
                  </TERM>
                  <SYMBOL> - </SYMBOL>
                  <TERM>
                    <IDENTIFIER> start </IDENTIFIER>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> start </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> end </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <DO_STATEMENT>
              <KEYWORD> do </KEYWORD>
              <IDENTIFIER> result </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> appendChar </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
                <EXPRESSION>
                  <TERM>
                    <IDENTIFIER> chars </IDENTIFIER>
                    <SYMBOL> . </SYMBOL>
                    <IDENTIFIER> get </IDENTIFIER>
                    <SYMBOL> ( </SYMBOL>
                    <EXPRESSION_LIST>
                      <EXPRESSION>
                        <TERM>
                          <IDENTIFIER> i </IDENTIFIER>
                        </TERM>
                      </EXPRESSION>
                    </EXPRESSION_LIST>
                    <SYMBOL> ) </SYMBOL>
                  </TERM>
                </EXPRESSION>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> ; </SYMBOL>
            </DO_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> result </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> boolean </KEYWORD>
    <IDENTIFIER> equals </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
      <IDENTIFIER> String </IDENTIFIER>
      <IDENTIFIER> other </IDENTIFIER>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <VAR_DEC>
        <KEYWORD> var </KEYWORD>
        <KEYWORD> int </KEYWORD>
        <IDENTIFIER> i </IDENTIFIER>
        <SYMBOL> ; </SYMBOL>
      </VAR_DEC>
      <STATEMENTS>
        <IF_STATEMENT>
          <KEYWORD> if </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
            <SYMBOL> ~= </SYMBOL>
            <TERM>
              <IDENTIFIER> other </IDENTIFIER>
              <SYMBOL> . </SYMBOL>
              <IDENTIFIER> length </IDENTIFIER>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION_LIST>
              </EXPRESSION_LIST>
              <SYMBOL> ) </SYMBOL>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <RETURN_STATEMENT>
              <KEYWORD> return </KEYWORD>
              <EXPRESSION>
                <TERM>
                  <KEYWORD> false </KEYWORD>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </RETURN_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </IF_STATEMENT>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> i </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <WHILE_STATEMENT>
          <KEYWORD> while </KEYWORD>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> i </IDENTIFIER>
            </TERM>
            <SYMBOL> &lt; </SYMBOL>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> { </SYMBOL>
          <STATEMENTS>
            <IF_STATEMENT>
              <KEYWORD> if </KEYWORD>
              <SYMBOL> ( </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> chars </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> get </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> i </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
                <SYMBOL> ~= </SYMBOL>
                <TERM>
                  <IDENTIFIER> other </IDENTIFIER>
                  <SYMBOL> . </SYMBOL>
                  <IDENTIFIER> charAt </IDENTIFIER>
                  <SYMBOL> ( </SYMBOL>
                  <EXPRESSION_LIST>
                    <EXPRESSION>
                      <TERM>
                        <IDENTIFIER> i </IDENTIFIER>
                      </TERM>
                    </EXPRESSION>
                  </EXPRESSION_LIST>
                  <SYMBOL> ) </SYMBOL>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ) </SYMBOL>
              <SYMBOL> { </SYMBOL>
              <STATEMENTS>
                <RETURN_STATEMENT>
                  <KEYWORD> return </KEYWORD>
                  <EXPRESSION>
                    <TERM>
                      <KEYWORD> false </KEYWORD>
                    </TERM>
                  </EXPRESSION>
                  <SYMBOL> ; </SYMBOL>
                </RETURN_STATEMENT>
              </STATEMENTS>
              <SYMBOL> } </SYMBOL>
            </IF_STATEMENT>
            <LET_STATEMENT>
              <KEYWORD> let </KEYWORD>
              <IDENTIFIER> i </IDENTIFIER>
              <SYMBOL> = </SYMBOL>
              <EXPRESSION>
                <TERM>
                  <IDENTIFIER> i </IDENTIFIER>
                </TERM>
                <SYMBOL> + </SYMBOL>
                <TERM>
                  <INTEGER_CONSTANT> 1 </INTEGER_CONSTANT>
                </TERM>
              </EXPRESSION>
              <SYMBOL> ; </SYMBOL>
            </LET_STATEMENT>
          </STATEMENTS>
          <SYMBOL> } </SYMBOL>
        </WHILE_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <KEYWORD> true </KEYWORD>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> clear </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <LET_STATEMENT>
          <KEYWORD> let </KEYWORD>
          <IDENTIFIER> length </IDENTIFIER>
          <SYMBOL> = </SYMBOL>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </LET_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> boolean </KEYWORD>
    <IDENTIFIER> isEmpty </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <IDENTIFIER> length </IDENTIFIER>
            </TERM>
            <SYMBOL> = </SYMBOL>
            <TERM>
              <INTEGER_CONSTANT> 0 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> method </KEYWORD>
    <KEYWORD> void </KEYWORD>
    <IDENTIFIER> shrinkToFit </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <DO_STATEMENT>
          <KEYWORD> do </KEYWORD>
          <IDENTIFIER> chars </IDENTIFIER>
          <SYMBOL> . </SYMBOL>
          <IDENTIFIER> resize </IDENTIFIER>
          <SYMBOL> ( </SYMBOL>
          <EXPRESSION_LIST>
            <EXPRESSION>
              <TERM>
                <IDENTIFIER> length </IDENTIFIER>
              </TERM>
            </EXPRESSION>
          </EXPRESSION_LIST>
          <SYMBOL> ) </SYMBOL>
          <SYMBOL> ; </SYMBOL>
        </DO_STATEMENT>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> char </KEYWORD>
    <IDENTIFIER> backSpace </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 129 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> char </KEYWORD>
    <IDENTIFIER> doubleQuote </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 34 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SUBROUTINE_DEC>
    <KEYWORD> function </KEYWORD>
    <KEYWORD> char </KEYWORD>
    <IDENTIFIER> newLine </IDENTIFIER>
    <SYMBOL> ( </SYMBOL>
    <PARAMETER_LIST>
    </PARAMETER_LIST>
    <SYMBOL> ) </SYMBOL>
    <SUBROUTINE_BODY>
      <SYMBOL> { </SYMBOL>
      <STATEMENTS>
        <RETURN_STATEMENT>
          <KEYWORD> return </KEYWORD>
          <EXPRESSION>
            <TERM>
              <INTEGER_CONSTANT> 128 </INTEGER_CONSTANT>
            </TERM>
          </EXPRESSION>
          <SYMBOL> ; </SYMBOL>
        </RETURN_STATEMENT>
      </STATEMENTS>
      <SYMBOL> } </SYMBOL>
    </SUBROUTINE_BODY>
  </SUBROUTINE_DEC>
  <SYMBOL> } </SYMBOL>
</CLASS>

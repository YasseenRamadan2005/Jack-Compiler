function Math.init 2
push constant 1
pop local 0
push constant 0
pop local 1
push constant 16
call Array.new 1
pop static 0
label Math.init_WHILE_EXP1
push local 1
push constant 16
lt
not
if-goto Math.init_WHILE_END1
push local 0
push static 0
push local 1
add
pop pointer 1
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto Math.init_WHILE_EXP1
label Math.init_WHILE_END1
push constant 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
return
function Math.multiply 3
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto Math.multiply$IF_TRUE1
goto Math.multiply$IF_END1
label Math.multiply$IF_TRUE1
push constant 0
return
label Math.multiply$IF_END1
push argument 0
push constant 1
eq
if-goto Math.multiply$IF_TRUE2
goto Math.multiply$IF_END2
label Math.multiply$IF_TRUE2
push argument 1
return
label Math.multiply$IF_END2
push argument 1
push constant 1
eq
if-goto Math.multiply$IF_TRUE3
goto Math.multiply$IF_END3
label Math.multiply$IF_TRUE3
push argument 0
return
label Math.multiply$IF_END3
push argument 0
push constant 2
eq
if-goto Math.multiply$IF_TRUE4
goto Math.multiply$IF_END4
label Math.multiply$IF_TRUE4
push argument 1
push argument 1
add
return
label Math.multiply$IF_END4
push argument 1
push constant 2
eq
if-goto Math.multiply$IF_TRUE5
goto Math.multiply$IF_END5
label Math.multiply$IF_TRUE5
push argument 0
push argument 0
add
return
label Math.multiply$IF_END5
push constant 1
pop local 2
push constant 0
pop local 1
push constant 0
pop local 0
label Math.multiply_WHILE_EXP1
push local 1
push constant 16
lt
not
if-goto Math.multiply_WHILE_END1
push argument 1
push local 2
and
push constant 0
eq
not
if-goto Math.multiply$IF_TRUE6
goto Math.multiply$IF_END6
label Math.multiply$IF_TRUE6
push local 0
push argument 0
add
pop local 0
label Math.multiply$IF_END6
push argument 0
push argument 0
add
pop argument 0
push local 1
push constant 1
add
pop local 1
push local 2
push local 2
add
pop local 2
goto Math.multiply_WHILE_EXP1
label Math.multiply_WHILE_END1
push local 0
return
function Math.divide 3
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push argument 1
push constant 0
eq
if-goto Math.divide$IF_TRUE1
goto Math.divide$IF_END1
label Math.divide$IF_TRUE1
push constant 0
return
label Math.divide$IF_END1
push local 2
push local 1
gt
if-goto Math.divide$IF_TRUE2
goto Math.divide$IF_END2
label Math.divide$IF_TRUE2
push constant 0
return
label Math.divide$IF_END2
push local 2
push local 2
add
push constant 0
lt
if-goto Math.divide$IF_TRUE3
goto Math.divide$IF_END3
label Math.divide$IF_TRUE3
push constant 1
return
label Math.divide$IF_END3
push local 1
push local 2
push local 2
add
call Math.divide 2
pop local 0
push local 1
push local 0
push local 0
add
push local 2
call Math.multiply 2
sub
push local 2
lt
if-goto Math.divide$IF_TRUE4
goto Math.divide$IF_FALSE4
label Math.divide$IF_TRUE4
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto Math.divide$IF_TRUE5
goto Math.divide$IF_END5
label Math.divide$IF_TRUE5
push local 0
neg
pop local 0
label Math.divide$IF_END5
push local 0
push local 0
add
return
goto Math.divide$IF_END4
label Math.divide$IF_FALSE4
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto Math.divide$IF_TRUE6
goto Math.divide$IF_END6
label Math.divide$IF_TRUE6
push local 0
neg
pop local 0
label Math.divide$IF_END6
push local 0
push local 0
add
push constant 1
add
return
label Math.divide$IF_END4
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.twoToThe 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label Math.sqrt_WHILE_EXP1
push local 1
push constant 0
lt
not
not
if-goto Math.sqrt_WHILE_END1
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto Math.sqrt$IF_TRUE1
goto Math.sqrt$IF_END1
label Math.sqrt$IF_TRUE1
push local 2
pop local 0
label Math.sqrt$IF_END1
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt_WHILE_EXP1
label Math.sqrt_WHILE_END1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto Math.max$IF_TRUE1
goto Math.max$IF_END1
label Math.max$IF_TRUE1
push argument 0
return
label Math.max$IF_END1
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto Math.min$IF_TRUE1
goto Math.min$IF_END1
label Math.min$IF_TRUE1
push argument 0
return
label Math.min$IF_END1
push argument 1
return
function Math.abs 0
push argument 0
push argument 0
neg
call Math.max 2
return
function Math.multiply_floats 14
push argument 0
push constant 0
lt
pop local 0
push argument 1
push constant 0
lt
pop local 1
push local 0
push local 1
eq
if-goto Math.multiply_floats$IF_TRUE1
goto Math.multiply_floats$IF_FALSE1
label Math.multiply_floats$IF_TRUE1
push constant 0
pop local 2
goto Math.multiply_floats$IF_END1
label Math.multiply_floats$IF_FALSE1
push constant 1
neg
pop local 2
label Math.multiply_floats$IF_END1
push constant 7
call String.new 1
push constant 115
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 7
call String.new 1
push constant 115
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 66
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 1
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 7
call String.new 1
push constant 115
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 2
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push argument 0
push constant 31744
and
push constant 1024
call Math.divide 2
pop local 3
push argument 1
push constant 31744
and
push constant 1024
call Math.divide 2
pop local 4
push argument 0
push constant 1023
and
pop local 6
push argument 1
push constant 1023
and
pop local 7
push constant 6
call String.new 1
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 3
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 6
call String.new 1
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 66
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 4
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 7
call String.new 1
push constant 102
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 6
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 7
call String.new 1
push constant 102
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 66
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 7
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push local 3
push constant 0
eq
push local 6
and
push constant 0
eq
push local 4
push constant 0
eq
push local 7
and
push constant 0
eq
or
if-goto Math.multiply_floats$IF_TRUE2
goto Math.multiply_floats$IF_END2
label Math.multiply_floats$IF_TRUE2
push constant 15
call String.new 1
push constant 90
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 92
call String.appendChar 2
push constant 110
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
return
label Math.multiply_floats$IF_END2
push local 3
push constant 0
eq
not
if-goto Math.multiply_floats$IF_TRUE3
goto Math.multiply_floats$IF_FALSE3
label Math.multiply_floats$IF_TRUE3
push local 6
push constant 1024
or
pop local 9
goto Math.multiply_floats$IF_END3
label Math.multiply_floats$IF_FALSE3
push local 6
pop local 9
label Math.multiply_floats$IF_END3
push local 4
push constant 0
eq
not
if-goto Math.multiply_floats$IF_TRUE4
goto Math.multiply_floats$IF_FALSE4
label Math.multiply_floats$IF_TRUE4
push local 7
push constant 1024
or
pop local 10
goto Math.multiply_floats$IF_END4
label Math.multiply_floats$IF_FALSE4
push local 7
pop local 10
label Math.multiply_floats$IF_END4
push constant 7
call String.new 1
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 9
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 7
call String.new 1
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 66
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 10
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push constant 0
pop local 11
push constant 0
pop local 12
label Math.multiply_floats_WHILE_EXP1
push local 12
push local 10
lt
not
if-goto Math.multiply_floats_WHILE_END1
push local 11
push local 9
add
pop local 11
push local 12
push constant 1
add
pop local 12
goto Math.multiply_floats_WHILE_EXP1
label Math.multiply_floats_WHILE_END1
push constant 31
call String.new 1
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 11
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
label Math.multiply_floats_WHILE_EXP2
push local 11
push constant 2048
lt
not
not
if-goto Math.multiply_floats_WHILE_END2
push local 11
push constant 2
call Math.divide 2
pop local 11
push local 3
push constant 1
add
pop local 3
goto Math.multiply_floats_WHILE_EXP2
label Math.multiply_floats_WHILE_END2
push local 3
push local 4
add
push constant 15
sub
pop local 5
push constant 25
call String.new 1
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 5
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
label Math.multiply_floats_WHILE_EXP3
push local 11
push constant 2048
lt
not
not
if-goto Math.multiply_floats_WHILE_END3
push local 11
push constant 2
call Math.divide 2
pop local 11
push local 5
push constant 1
add
pop local 5
push constant 24
call String.new 1
push constant 78
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 122
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 11
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
goto Math.multiply_floats_WHILE_EXP3
label Math.multiply_floats_WHILE_END3
label Math.multiply_floats_WHILE_EXP4
push local 11
push constant 1024
lt
not
if-goto Math.multiply_floats_WHILE_END4
push local 11
push constant 2
call Math.multiply 2
pop local 11
push local 5
push constant 1
sub
pop local 5
push constant 22
call String.new 1
push constant 78
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 122
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 11
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
goto Math.multiply_floats_WHILE_EXP4
label Math.multiply_floats_WHILE_END4
push local 5
push constant 0
lt
if-goto Math.multiply_floats$IF_TRUE5
goto Math.multiply_floats$IF_END5
label Math.multiply_floats$IF_TRUE5
push constant 0
pop local 5
label Math.multiply_floats$IF_END5
push local 5
push constant 31
gt
if-goto Math.multiply_floats$IF_TRUE6
goto Math.multiply_floats$IF_END6
label Math.multiply_floats$IF_TRUE6
push constant 31
pop local 5
label Math.multiply_floats$IF_END6
push constant 18
call String.new 1
push constant 101
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 5
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push local 11
push constant 1023
and
pop local 8
push constant 7
call String.new 1
push constant 102
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 8
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push local 2
not
push constant 32767
or
not
push local 5
push constant 1024
call Math.multiply 2
or
push local 8
or
pop local 13
push constant 8
call String.new 1
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 13
call Output.printInt 1
pop temp 0
push constant 10
call Output.printChar 1
pop temp 0
push local 13
return
function Math.divide_floats 11
push argument 0
not
push constant 32767
or
not
push constant 0
eq
if-goto Math.divide_floats$IF_TRUE1
goto Math.divide_floats$IF_FALSE1
label Math.divide_floats$IF_TRUE1
push constant 0
pop local 0
goto Math.divide_floats$IF_END1
label Math.divide_floats$IF_FALSE1
push constant 1
pop local 0
label Math.divide_floats$IF_END1
push argument 1
not
push constant 32767
or
not
push constant 0
eq
if-goto Math.divide_floats$IF_TRUE2
goto Math.divide_floats$IF_FALSE2
label Math.divide_floats$IF_TRUE2
push constant 0
pop local 1
goto Math.divide_floats$IF_END2
label Math.divide_floats$IF_FALSE2
push constant 1
pop local 1
label Math.divide_floats$IF_END2
push constant 0
pop local 2
push constant 16
pop local 10
label Math.divide_floats_WHILE_EXP1
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END1
push argument 0
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE3
goto Math.divide_floats$IF_END3
label Math.divide_floats$IF_TRUE3
push local 2
push local 10
add
pop local 2
label Math.divide_floats$IF_END3
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP1
label Math.divide_floats_WHILE_END1
push constant 0
pop local 3
push constant 16
pop local 10
label Math.divide_floats_WHILE_EXP2
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END2
push argument 1
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE4
goto Math.divide_floats$IF_END4
label Math.divide_floats$IF_TRUE4
push local 3
push local 10
add
pop local 3
label Math.divide_floats$IF_END4
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP2
label Math.divide_floats_WHILE_END2
push constant 0
pop local 4
push constant 512
pop local 10
label Math.divide_floats_WHILE_EXP3
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END3
push argument 0
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE5
goto Math.divide_floats$IF_END5
label Math.divide_floats$IF_TRUE5
push local 4
push local 10
add
pop local 4
label Math.divide_floats$IF_END5
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP3
label Math.divide_floats_WHILE_END3
push constant 0
pop local 5
push constant 512
pop local 10
label Math.divide_floats_WHILE_EXP4
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END4
push argument 1
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE6
goto Math.divide_floats$IF_END6
label Math.divide_floats$IF_TRUE6
push local 5
push local 10
add
pop local 5
label Math.divide_floats$IF_END6
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP4
label Math.divide_floats_WHILE_END4
push local 4
push constant 1024
add
pop local 4
push local 5
push constant 1024
add
pop local 5
push local 4
push constant 1024
call Math.multiply 2
push local 5
call Math.divide 2
pop local 8
push local 2
push local 3
sub
push constant 15
add
pop local 7
push local 0
push local 1
add
push constant 1
eq
if-goto Math.divide_floats$IF_TRUE7
goto Math.divide_floats$IF_FALSE7
label Math.divide_floats$IF_TRUE7
push constant 1
pop local 6
goto Math.divide_floats$IF_END7
label Math.divide_floats$IF_FALSE7
push constant 0
pop local 6
label Math.divide_floats$IF_END7
push local 8
push constant 2048
lt
not
if-goto Math.divide_floats$IF_TRUE8
goto Math.divide_floats$IF_END8
label Math.divide_floats$IF_TRUE8
push local 8
push constant 2
call Math.divide 2
pop local 8
push local 7
push constant 1
add
pop local 7
label Math.divide_floats$IF_END8
push local 8
push constant 1024
sub
pop local 8
push constant 0
pop local 9
push local 6
push constant 1
eq
if-goto Math.divide_floats$IF_TRUE9
goto Math.divide_floats$IF_END9
label Math.divide_floats$IF_TRUE9
push local 9
not
push constant 32767
and
not
pop local 9
label Math.divide_floats$IF_END9
push constant 16
pop local 10
label Math.divide_floats_WHILE_EXP5
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END5
push local 7
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE10
goto Math.divide_floats$IF_END10
label Math.divide_floats$IF_TRUE10
push local 9
push local 10
push constant 64
call Math.multiply 2
or
pop local 9
label Math.divide_floats$IF_END10
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP5
label Math.divide_floats_WHILE_END5
push constant 512
pop local 10
label Math.divide_floats_WHILE_EXP6
push local 10
push constant 0
gt
not
if-goto Math.divide_floats_WHILE_END6
push local 8
push local 10
and
push local 10
eq
if-goto Math.divide_floats$IF_TRUE11
goto Math.divide_floats$IF_END11
label Math.divide_floats$IF_TRUE11
push local 9
push local 10
or
pop local 9
label Math.divide_floats$IF_END11
push local 10
push constant 2
call Math.divide 2
pop local 10
goto Math.divide_floats_WHILE_EXP6
label Math.divide_floats_WHILE_END6
push local 9
return

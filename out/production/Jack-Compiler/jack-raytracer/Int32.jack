class Int32 {
  field Array parts;

  static int allocs;
  static Array rightshifts;

    function void initialize() {
        var Array rightshifts;
        var int i, val;

        let rightshifts = Array.new(15);
        let i = 0;
        let val = 1;

        while (i < 15) {
            let rightshifts[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        return;
    }


  // Jack doesn't have these, so we need to reimplement them.
  function int arith_rightshift(int x, int n) {
    var int r;
    var int i;
    var int divided;

    if (x = 0) {
      return 0;
    }

    if (n = 0) {
      return x;
    }

    if (x > 0) {
      let r = x / rightshifts[n];
    } else {
      let r = x;

      let i = 0;
      while (i < n) {
        let divided = r / 2;
        if ((r & 1) = 0) {
          let r = divided;
        } else {
          let r = divided - 1;
        }
        if (r = -1) {
            return r;
        }

        let i = i + 1;
      }
    }

    return r;
  }

  function int leftshift(int x, int n) {
    var int r;
    var int i;

    let r = x;

    let i = 0;
    while (i < n) {
      let r = r + r;
      let i = i + 1;
    }

    return r;
  }

  // Top 12 bits of each int should be empty.
  function Array u4_array_mul_u4_array(Array u, Array v) {
    var Array w;
    var int j;
    var int k;
    var int i;
    var int t;
    var int vj;
    let w = Array.new(16);

    let i = 0;
    while (i < 16) {
      let w[i] = 0;
      let i = i + 1;
    }

    let j = 0;
    while (j < 8) {
      let k = 0;

      let vj = v[j];

      let i = 0;
      while (i < 8) {
        // Perform signed 16-bit math that will never overflow because we only put u4s into it!
        // u4 * u4 = u8, which fits in a int.
        // We can't do use u8s because u8 * u8 = u16 and u16s don't fit in int.
        let t = (u[i] * vj) + w[i + j] + k;
        let w[i + j] = t & 15;
        let k = Int32.arith_rightshift(t, 4);

        let i = i + 1;
      }
      let w[j + 8] = k;

      let j = j + 1;
    }

    return w;
  }

  // Number of leading zeros of x, pretending that it's a u4.
  function int nlz_u4(int x) {
    var int r;
    var int shift;
    let r = 0;

    let shift = 3;
    while ((shift >= 0)) {
      if (Int32.arith_rightshift(x, shift) = 0) {
        let r = r + 1;
      } else {
        let shift = -1;
      }

      let shift = shift - 1;
    }

    return r;
  }

  /* // Upper 12 bits of each int are empty. */
  function Array u4_array_div_u4_array(Array u, Array v, int v_size) {
    var int base;
    var int i;
    var int j;
    var int k;
    var int val;
    var int shift;
    var Array q;
    var Array vn;
    var Array dividend;
    var int qhat;
    var int rhat;
    var boolean should_break;
    var int carry;
    var int multiplied;
    var int t;

    let base = 16; // Each chunk is 4 bits.

    let q = Array.new(16);

    if (v_size = 1) {
      // Simple algorithm for one-chunk divisor.

      // Rolling remainder.
      let k = 0;
      let j = 15;
      while (j >=0 ) {
        let val = (k * base) + u[j];
        let q[j] = val / v[0];
        let k = val - (q[j] * v[0]);

        let j = j - 1;
      }
      return q;
    }

    // Shift divisor so that high bit is set.
    let shift = Int32.nlz_u4(v[v_size - 1]);

    let vn = Array.new(8);

    let i = v_size - 1;
    while ((i >= 1)) {
      let vn[i] = (Int32.leftshift(v[i], shift) | Int32.arith_rightshift(v[i - 1], 4 - shift)) & 15;

      let i = i - 1;
    }

    let vn[0] = Int32.leftshift(v[0], shift) & 15;

    let dividend = Array.new(17);
    let dividend[16] = Int32.arith_rightshift(u[15], 4 - shift);
    let i = 15;
    while ((i >= 1)) {
      let dividend[i] = (Int32.leftshift(u[i], shift) | Int32.arith_rightshift(u[i - 1], 4 - shift)) & 15;

      let i = i - 1;
    }
    let dividend[0] = Int32.leftshift(u[0], shift) & 15;

    // Crank out the quotient one digit at a time, from most significant to least.
    let j = 16 - v_size;
    while ((j >= 0)) {
      // Compute estimate qhat of q[j].
      let val = (dividend[j + v_size] * base) + dividend[j + v_size - 1];
      let qhat = val / vn[v_size - 1];
      let rhat = val - (qhat * vn[v_size - 1]);

      let should_break = false;
      while (~should_break) {
        let should_break = true;

        if ((qhat >= base)| ((qhat * vn[v_size - 2]) > ((base * rhat) + dividend[j + v_size - 2]))) {
          let qhat = qhat - 1;
          let rhat = rhat + vn[v_size - 1];
          if (rhat < base) {
            let should_break = false;
          }
        }
      }

      // Multiply and subtract.
      let carry = 0;

      let i = 0;
      while (i < v_size) {
        let multiplied = qhat * vn[i];
        let t = (dividend[i + j] - carry) - (multiplied & 15);

        // Simulate wrap-around math. We track the carry below independently.
        let dividend[i + j] = t & 15;

        let carry = Int32.arith_rightshift(multiplied, 4) - Int32.arith_rightshift(t, 4);

        let i = i + 1;
      }

      let t = dividend[j + v_size] - carry;
      let dividend[j + v_size] = t;

      let q[j] = qhat;

      if (t < 0) {
        let carry = 0;
        let q[j] = q[j] - 1;

        let i = 0;
        while (i < v_size) {
          let t = dividend[i + j] + vn[i] + carry;
          let dividend[i + j] = t & 15;
          let carry = Int32.arith_rightshift(t, 4);

          let i = i + 1;
        }
        let dividend[j + v_size] = dividend[j + v_size] + carry;
      }

      let j = j - 1;
    }

    do vn.dispose();
    do dividend.dispose();

    return q;
  }

  constructor Int32 new(int i) {
    var int i_low;
    var int i_high;
    var int smear;

    let allocs = allocs + 1;

    let i_low = i & 255;
    let i_high = Int32.arith_rightshift(i, 8) & 255;
    if (i < 0) {
      let smear = 255;
    } else {
      let smear = 0;
    }

    let parts = Array.new(4);

    let parts[0] = i_low;
    let parts[1] = i_high;
    let parts[2] = smear;
    let parts[3] = smear;

    return this;
  }

  constructor Int32 new_from_parts(Array p) {
    let allocs = allocs + 1;

    let parts = p;
    return this;
  }

  method Array getParts() {
    return parts;
  }

    method void do_add(Int32 other) {
        var Array other_parts;
        var int i, carry;

        let other_parts = other.getParts();
        let carry = 0;
        let i = 0;

        while (i < 4) {
            let parts[i] = parts[i] + other_parts[i] + carry;
            if (parts[i] >= 256) {
                let parts[i] = parts[i] - 256;
                let carry = 1;
            } else {
                let carry = 0;
            }
            let i = i + 1;
        }

        return;
    }


    method Int32 clone() {
        var Array new_parts;
        var int i;

        let new_parts = Array.new(4);
        let i = 0;

        while (i < 4) {
            let new_parts[i] = parts[i];
            let i = i + 1;
        }

        return Int32.new_from_parts(new_parts);
    }


  method void dispose() {
    let allocs = allocs - 1;

    do parts.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void do_sub(Int32 other) {
    var Int32 neg;
    let neg = other.clone();
    do neg.do_neg();
    do do_add(neg);
    do neg.dispose();
    return;
  }

  method void do_mul(Int32 other) {
    do do_mul_right_shift_bytes(other, 0);
    return;
  }

  method void do_right_shift_bytes(int bytes) {
      var int i;
      var boolean is_neg;

      if (bytes <= 0) {
          return;
      }

      let is_neg = is_negative();
      if (is_neg) {
          do do_neg();
      }

      let i = 0;
      while (i < 4) {
          if ((i + bytes) <= 3) {
              let parts[i] = parts[i + bytes];
          } else {
              let parts[i] = 0;
          }
          let i = i + 1;
      }

      if (is_neg) {
          do do_neg();
      }

      return;
  }


  method void do_left_shift_bytes(int bytes) {
      var int i;

      if (bytes <= 0) {
          return;
      }

      let i = 3;
      while (i >= 0) {
          if ((i - bytes) >= 0) {
              let parts[i] = parts[i - bytes];
          } else {
              let parts[i] = 0;
          }
          let i = i - 1;
      }

      return;
  }


    function boolean xor(boolean x, boolean y) {
        return (x | y) & ~(x & y);
    }


    method void do_mul_right_shift_bytes(Int32 other, int right_shift_bytes) {
        var Array self_parts, other_parts, self_parts_expanded, other_parts_expanded, result;
        var Int32 abs1, abs2;
        var boolean is_result_neg;
        var int i, shift;

        let is_result_neg = Int32.xor(is_negative(), other.is_negative());

        if (is_negative()) {
            let abs1 = clone();
            do abs1.do_abs();
            let self_parts = abs1.getParts();
        } else {
            let self_parts = parts;
        }

        if (other.is_negative()) {
            let abs2 = other.clone();
            do abs2.do_abs();
            let other_parts = abs2.getParts();
        } else {
            let other_parts = other.getParts();
        }

        let self_parts_expanded = Array.new(8);
        let other_parts_expanded = Array.new(8);

        let i = 0;
        while (i < 4) {
            let self_parts_expanded[i + i] = self_parts[i] & 15;
            let self_parts_expanded[i + i + 1] = Int32.arith_rightshift(self_parts[i], 4);

            let other_parts_expanded[i + i] = other_parts[i] & 15;
            let other_parts_expanded[i + i + 1] = Int32.arith_rightshift(other_parts[i], 4);

            let i = i + 1;
        }

        let result = Int32.u4_array_mul_u4_array(self_parts_expanded, other_parts_expanded);
        let shift = right_shift_bytes + right_shift_bytes;

        let i = 0;
        while (i < 4) {
            let parts[i] =
                result[shift + i + i] + result[shift + i + i + 1] * 16;
            let i = i + 1;
        }

        if (is_result_neg) {
            do do_neg();
        }

        if (abs1 ~= null) {
            do abs1.dispose();
        }
        if (abs2 ~= null) {
            do abs2.dispose();
        }

        do self_parts_expanded.dispose();
        do other_parts_expanded.dispose();
        do result.dispose();
        return;
    }


  method void do_div(Int32 other) {
    do do_left_shift_bytes_div(0, other);
    return;
  }

    method void do_left_shift_bytes_div(int left_shift_bytes, Int32 other) {
        var Array self_parts, other_parts;
        var Int32 abs1, abs2;
        var boolean is_result_neg;
        var Array self_parts_shifted, self_parts_expanded, other_parts_expanded, result;
        var int divisor_size, i;

        let abs1 = null;
        let abs2 = null;
        let is_result_neg = Int32.xor(is_negative(), other.is_negative());

        if (is_negative()) {
            let abs1 = clone();
            do abs1.do_abs();
            let self_parts = abs1.getParts();
        } else {
            let self_parts = parts;
        }

        if (other.is_negative()) {
            let abs2 = other.clone();
            do abs2.do_abs();
            let other_parts = abs2.getParts();
        } else {
            let other_parts = other.getParts();
        }

        let self_parts_shifted = Array.new(8);
        let i = 0;
        while (i < 8) {
            if ((i - left_shift_bytes) >= 0 & (i - left_shift_bytes) < 4) {
                let self_parts_shifted[i] = self_parts[i - left_shift_bytes];
            } else {
                let self_parts_shifted[i] = 0;
            }
            let i = i + 1;
        }

        let self_parts_expanded = Array.new(16);
        let i = 0;
        while (i < 8) {
            let self_parts_expanded[i + 1] = self_parts_shifted[i] & 15;
            let self_parts_expanded[i + 1 + 1] = Int32.arith_rightshift(self_parts_shifted[i], 4);
            let i = i + 1;
        }

        let other_parts_expanded = Array.new(8);
        let i = 0;
        while (i < 4) {
            let other_parts_expanded[i + i] = other_parts[i] & 15;
            let other_parts_expanded[i + i + 1] = Int32.arith_rightshift(other_parts[i], 4);
            let i = i + 1;
        }

        let divisor_size = 255;
        let i = 7;
        while (i >= 0) {
            if (other_parts_expanded[i] > 0) {
                let divisor_size = i + 1;
                let i = -1; // break
            }
            let i = i - 1;
        }

        let result = Int32.u4_array_div_u4_array(self_parts_expanded, other_parts_expanded, divisor_size);

        let i = 0;
        while (i < 4) {
            let parts[i] = result[i + i] + (result[i + i + 1] * 16);
            let i = i + 1;
        }

        if (is_result_neg) {
            do do_neg();
        }

        if (abs1 ~= null) {
            do abs1.dispose();
        }
        if (abs2 ~= null) {
            do abs2.dispose();
        }

        do self_parts_shifted.dispose();
        do self_parts_expanded.dispose();
        do other_parts_expanded.dispose();
        do result.dispose();

        return;
    }


  method void do_abs() {
    if (is_negative()) {
      do do_neg();
    }
    return;
  }

  method Int32 initial_sqrt_guess() {
    var Int32 x;
    var Int32 y;

    if (parts[3] > 0) {
      let x = Int32.new(11);
      let y = Int32.new(4096);
      do x.do_mul(y);
      do y.dispose();
      return x;
    }
    if (parts[2] > 0) {
      let x = Int32.new(11);
      let y = Int32.new(256);
      do x.do_mul(y);
      do y.dispose();
      return x;
    }
    if (parts[1] > 0) {
      let x = Int32.new(11);
      let y = Int32.new(16);
      do x.do_mul(y);
      do y.dispose();
      return x;
    }

    return Int32.new(11);
  }

  method void do_sqrt() {
    var Int32 old_guess;
    var Int32 guess;
    var Int32 two;
    var Int32 inv;
    var int i;
    var Array guess_parts;

    if (is_zero()) {
      return;
    }

    let two = Int32.new(2);

    let old_guess = Int32.new(-1);
    let guess = initial_sqrt_guess();

    let i = 0;

    while (i < 20 & ~(old_guess.cmp(guess) = 0)) {
      let inv = clone();
      do inv.do_div(guess);

      do old_guess.dispose();
      let old_guess = guess.clone();

      do guess.do_add(inv);
      do guess.do_div(two);

      do inv.dispose();

      let i = i + 1;
    }

    let guess_parts = guess.getParts();
    let i = 0;
    while (i < 4){
        let parts[i] = guess_parts[i];
        let i = i + 1;
    }
    do two.dispose();
    do guess.dispose();
    do old_guess.dispose();

    return;
  }

    method void do_neg() {
        let parts[0] = ((~parts[0]) + 1) & 255;
        let parts[1] = (~parts[1]) & 255;
        let parts[2] = (~parts[2]) & 255;
        let parts[3] = (~parts[3]) & 255;

        if (parts[0] = 0) {
          let parts[1] = parts[1] + 1;
          if (parts[1] = 256) {
            let parts[1] = 0;
            let parts[2] = parts[2] + 1;
            if (parts[2] = 256) {
              let parts[2] = 0;
              let parts[3] = parts[3] + 1;
              if (parts[3] = 256) {
                let parts[3] = 0;
              }
            }
          }
        }

        return;
    }


  method boolean is_zero() {
    return (parts[0] = 0) & (parts[1] = 0) & (parts[2] = 0) & (parts[3] = 0);
  }

  method boolean is_negative()  {
    return (parts[3] >= 128);
  }

  method boolean is_positive()  {
    return (~is_zero()) & (parts[3] < 128);
  }

  method int cmp(Int32 other) {
    var Int32 r;
    var int x;
    let r = clone();
    do r.do_sub(other);

    if (r.is_zero()) {
      let x = 0;
    } else {
      if (r.is_negative()) {
        let x = -1;
      } else {
        let x = 1;
      }
    }

    do r.dispose();

    return x;
  }

  method void do_zero() {
    var int i;
    let i = 0;
    while (i < 4){
        let parts[i] = i;
        let i = i + 1;
    }
    return;
  }

    method void print() {
        var int i;
        do Output.printChar(91); // [
        let i = 0;
        while (i < 4) {
            do Output.printInt(parts[i]);
            if (i < 3) {
                do Output.printChar(32); // space
            }
            let i = i + 1;
        }
        do Output.printChar(93); // ]
        return;
    }


  function void printAllocs() {
    do Output.printString("int32 allocs: ");
    do Output.printInt(allocs);
    do Output.println();
    return;
  }

  method boolean is_even() {
    return (parts[0] & 1) = 0;
  }
}

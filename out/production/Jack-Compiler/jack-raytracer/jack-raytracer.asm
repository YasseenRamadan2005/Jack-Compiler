//Set 256 to be the start of the stack
@256 // 0
D=A // 1
@SP // 2
M=D // 3
//Set up the comparison ops subroutines
@SKIP // 4
0;JMP // 5
// ------------------------------------------------------------
//  Shared code for gt, lt, eq
//  Expectations on entry:
//Stack  – return address
//D  – (left – right)
// ------------------------------------------------------------
// want  (left  > right)  ⇔ (D > 0)
(DO_GT)
@RETURN_TRUE // 6
D;JGT // 7
@RETURN_FALSE // 8
0;JMP // 9
// want  (left == right)  ⇔ (D == 0)
(DO_EQ)
@RETURN_TRUE // 10
D;JEQ // 11
@RETURN_FALSE // 12
0;JMP // 13
// want  (left  < right)  ⇔ (D < 0)
(DO_LT)
@RETURN_TRUE // 14
D;JLT // 15
@RETURN_FALSE // 16
0;JMP // 17
// ---- set boolean in D --------------------------------------
(RETURN_TRUE)
D=-1 // 18
@WRITE_BACK // 19
0;JMP // 20
(RETURN_FALSE)
D=0 // 21
@WRITE_BACK // 22
0;JMP // 23
// ---- collapse stack and return -----------------------------
(WRITE_BACK)
@SP // 24
AM=M-1 // 25
A=M // 26
0;JMP // 27
(SKIP)
//Set up calling and returning from functions
@SKIPo // 28
0;JMP // 29
(CALL)
@SP // 30
AM=M+1 // 31
A=A-1 // 32
M=D // 33
@LCL // 34
D=M // 35
@SP // 36
AM=M+1 // 37
A=A-1 // 38
M=D // 39
@ARG // 40
D=M // 41
@SP // 42
AM=M+1 // 43
A=A-1 // 44
M=D // 45
@THIS // 46
D=M // 47
@SP // 48
AM=M+1 // 49
A=A-1 // 50
M=D // 51
@THAT // 52
D=M // 53
@SP // 54
AM=M+1 // 55
A=A-1 // 56
M=D // 57
@14 // 58
D=M // 59
@SP // 60
D=M-D // 61
@ARG // 62
M=D // 63
@SP // 64
D=M // 65
@LCL // 66
M=D // 67
@13 // 68
A=M // 69
0;JMP // 70
(RETURN)
@LCL // 71
D=M // 72
@14 // 73
M=D // 74
@5 // 75
A=D-A // 76
D=M // 77
@15 // 78
M=D // 79
@SP // 80
AM=M-1 // 81
D=M // 82
@ARG // 83
A=M // 84
M=D // 85
@ARG // 86
D=M // 87
@SP // 88
M=D+1 // 89
@14 // 90
A=M-1 // 91
D=M // 92
@THAT // 93
M=D // 94
@14 // 95
A=M-1 // 96
A=A-1 // 97
D=M // 98
@THIS // 99
M=D // 100
@14 // 101
A=M-1 // 102
A=A-1 // 103
A=A-1 // 104
D=M // 105
@ARG // 106
M=D // 107
@14 // 108
A=M-1 // 109
A=A-1 // 110
A=A-1 // 111
A=A-1 // 112
D=M // 113
@LCL // 114
M=D // 115
@15 // 116
A=M // 117
0;JMP // 118
(SKIPo)
// call Sys.init
@5 // 119
D=A // 120
@14 // 121
M=D // 122
@Sys.init // 123
D=A // 124
@13 // 125
M=D // 126
@global.ret.0 // 127
D=A // 128
@CALL // 129
0;JMP // 130
(global.ret.0)
////FunctionInstruction{functionName='String.dispose', numLocals=0, funcMapping={}}
// function String.dispose with 0
(String.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 131
A=M // 132
D=M // 133
@3 // 134
M=D // 135

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.dispose$IF_TRUE1}}
@String.dispose.EQ.0 // 136
D=A // 137
@SP // 138
AM=M+1 // 139
A=A-1 // 140
M=D // 141
@THIS // 142
A=M // 143
D=M // 144
@DO_EQ // 145
0;JMP // 146
(String.dispose.EQ.0)
D=!D // 147
@String.dispose$IF_TRUE1 // 148
D;JNE // 149

////GotoInstruction{label='String.dispose$IF_END1}
// goto String.dispose$IF_END1
@String.dispose$IF_END1 // 150
0;JMP // 151

////LabelInstruction{label='String.dispose$IF_TRUE1}
// label String.dispose$IF_TRUE1
(String.dispose$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 152
A=M // 153
D=M // 154
@SP // 155
AM=M+1 // 156
A=A-1 // 157
M=D // 158
// call Memory.deAlloc
@6 // 159
D=A // 160
@14 // 161
M=D // 162
@Memory.deAlloc // 163
D=A // 164
@13 // 165
M=D // 166
@String.dispose.ret.0 // 167
D=A // 168
@CALL // 169
0;JMP // 170
(String.dispose.ret.0)
@SP // 171
M=M-1 // 172

////LabelInstruction{label='String.dispose$IF_END1}
// label String.dispose$IF_END1
(String.dispose$IF_END1)

////PushInstruction("constant 0")
@SP // 173
AM=M+1 // 174
A=A-1 // 175
M=0 // 176
@RETURN // 177
0;JMP // 178

////FunctionInstruction{functionName='Int32.initial_sqrt_guess', numLocals=2, funcMapping={}}
// function Int32.initial_sqrt_guess with 2
(Int32.initial_sqrt_guess)
@SP // 179
M=M+1 // 180
AM=M+1 // 181
A=A-1 // 182
M=0 // 183
A=A-1 // 184
M=0 // 185

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 186
A=M // 187
D=M // 188
@3 // 189
M=D // 190

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE1}}
@Int32.initial_sqrt_guess.GT.1 // 191
D=A // 192
@SP // 193
AM=M+1 // 194
A=A-1 // 195
M=D // 196
@THIS // 197
A=M // 198
D=M // 199
@3 // 200
A=D+A // 201
D=M // 202
@DO_GT // 203
0;JMP // 204
(Int32.initial_sqrt_guess.GT.1)
@Int32.initial_sqrt_guess$IF_TRUE1 // 205
D;JNE // 206

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_END1}
// goto Int32.initial_sqrt_guess$IF_END1
@Int32.initial_sqrt_guess$IF_END1 // 207
0;JMP // 208

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE1}
// label Int32.initial_sqrt_guess$IF_TRUE1
(Int32.initial_sqrt_guess$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 209
D=A // 210
@SP // 211
AM=M+1 // 212
A=A-1 // 213
M=D // 214
// call Int32.new
@6 // 215
D=A // 216
@14 // 217
M=D // 218
@Int32.new // 219
D=A // 220
@13 // 221
M=D // 222
@Int32.initial_sqrt_guess.ret.0 // 223
D=A // 224
@CALL // 225
0;JMP // 226
(Int32.initial_sqrt_guess.ret.0)
@SP // 227
AM=M-1 // 228
D=M // 229
@LCL // 230
A=M // 231
M=D // 232

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4096")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@4096 // 233
D=A // 234
@SP // 235
AM=M+1 // 236
A=A-1 // 237
M=D // 238
// call Int32.new
@6 // 239
D=A // 240
@14 // 241
M=D // 242
@Int32.new // 243
D=A // 244
@13 // 245
M=D // 246
@Int32.initial_sqrt_guess.ret.1 // 247
D=A // 248
@CALL // 249
0;JMP // 250
(Int32.initial_sqrt_guess.ret.1)
@SP // 251
AM=M-1 // 252
D=M // 253
@LCL // 254
A=M+1 // 255
M=D // 256

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 257
A=M // 258
D=M // 259
@SP // 260
AM=M+1 // 261
A=A-1 // 262
M=D // 263
@LCL // 264
A=M+1 // 265
D=M // 266
@SP // 267
AM=M+1 // 268
A=A-1 // 269
M=D // 270
// call Int32.do_mul
@7 // 271
D=A // 272
@14 // 273
M=D // 274
@Int32.do_mul // 275
D=A // 276
@13 // 277
M=D // 278
@Int32.initial_sqrt_guess.ret.2 // 279
D=A // 280
@CALL // 281
0;JMP // 282
(Int32.initial_sqrt_guess.ret.2)
@SP // 283
M=M-1 // 284

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 285
A=M+1 // 286
D=M // 287
@SP // 288
AM=M+1 // 289
A=A-1 // 290
M=D // 291
// call Int32.dispose
@6 // 292
D=A // 293
@14 // 294
M=D // 295
@Int32.dispose // 296
D=A // 297
@13 // 298
M=D // 299
@Int32.initial_sqrt_guess.ret.3 // 300
D=A // 301
@CALL // 302
0;JMP // 303
(Int32.initial_sqrt_guess.ret.3)
@SP // 304
M=M-1 // 305

////PushInstruction("local 0")
@LCL // 306
A=M // 307
D=M // 308
@SP // 309
AM=M+1 // 310
A=A-1 // 311
M=D // 312
@RETURN // 313
0;JMP // 314

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_END1}
// label Int32.initial_sqrt_guess$IF_END1
(Int32.initial_sqrt_guess$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE2}}
@Int32.initial_sqrt_guess.GT.2 // 315
D=A // 316
@SP // 317
AM=M+1 // 318
A=A-1 // 319
M=D // 320
@THIS // 321
A=M // 322
D=M // 323
@2 // 324
A=D+A // 325
D=M // 326
@DO_GT // 327
0;JMP // 328
(Int32.initial_sqrt_guess.GT.2)
@Int32.initial_sqrt_guess$IF_TRUE2 // 329
D;JNE // 330

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_END2}
// goto Int32.initial_sqrt_guess$IF_END2
@Int32.initial_sqrt_guess$IF_END2 // 331
0;JMP // 332

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE2}
// label Int32.initial_sqrt_guess$IF_TRUE2
(Int32.initial_sqrt_guess$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 333
D=A // 334
@SP // 335
AM=M+1 // 336
A=A-1 // 337
M=D // 338
// call Int32.new
@6 // 339
D=A // 340
@14 // 341
M=D // 342
@Int32.new // 343
D=A // 344
@13 // 345
M=D // 346
@Int32.initial_sqrt_guess.ret.4 // 347
D=A // 348
@CALL // 349
0;JMP // 350
(Int32.initial_sqrt_guess.ret.4)
@SP // 351
AM=M-1 // 352
D=M // 353
@LCL // 354
A=M // 355
M=D // 356

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 256")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@256 // 357
D=A // 358
@SP // 359
AM=M+1 // 360
A=A-1 // 361
M=D // 362
// call Int32.new
@6 // 363
D=A // 364
@14 // 365
M=D // 366
@Int32.new // 367
D=A // 368
@13 // 369
M=D // 370
@Int32.initial_sqrt_guess.ret.5 // 371
D=A // 372
@CALL // 373
0;JMP // 374
(Int32.initial_sqrt_guess.ret.5)
@SP // 375
AM=M-1 // 376
D=M // 377
@LCL // 378
A=M+1 // 379
M=D // 380

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 381
A=M // 382
D=M // 383
@SP // 384
AM=M+1 // 385
A=A-1 // 386
M=D // 387
@LCL // 388
A=M+1 // 389
D=M // 390
@SP // 391
AM=M+1 // 392
A=A-1 // 393
M=D // 394
// call Int32.do_mul
@7 // 395
D=A // 396
@14 // 397
M=D // 398
@Int32.do_mul // 399
D=A // 400
@13 // 401
M=D // 402
@Int32.initial_sqrt_guess.ret.6 // 403
D=A // 404
@CALL // 405
0;JMP // 406
(Int32.initial_sqrt_guess.ret.6)
@SP // 407
M=M-1 // 408

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 409
A=M+1 // 410
D=M // 411
@SP // 412
AM=M+1 // 413
A=A-1 // 414
M=D // 415
// call Int32.dispose
@6 // 416
D=A // 417
@14 // 418
M=D // 419
@Int32.dispose // 420
D=A // 421
@13 // 422
M=D // 423
@Int32.initial_sqrt_guess.ret.7 // 424
D=A // 425
@CALL // 426
0;JMP // 427
(Int32.initial_sqrt_guess.ret.7)
@SP // 428
M=M-1 // 429

////PushInstruction("local 0")
@LCL // 430
A=M // 431
D=M // 432
@SP // 433
AM=M+1 // 434
A=A-1 // 435
M=D // 436
@RETURN // 437
0;JMP // 438

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_END2}
// label Int32.initial_sqrt_guess$IF_END2
(Int32.initial_sqrt_guess$IF_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.initial_sqrt_guess$IF_TRUE3}}
@Int32.initial_sqrt_guess.GT.3 // 439
D=A // 440
@SP // 441
AM=M+1 // 442
A=A-1 // 443
M=D // 444
@THIS // 445
A=M // 446
D=M // 447
A=D+1 // 448
D=M // 449
@DO_GT // 450
0;JMP // 451
(Int32.initial_sqrt_guess.GT.3)
@Int32.initial_sqrt_guess$IF_TRUE3 // 452
D;JNE // 453

////GotoInstruction{label='Int32.initial_sqrt_guess$IF_END3}
// goto Int32.initial_sqrt_guess$IF_END3
@Int32.initial_sqrt_guess$IF_END3 // 454
0;JMP // 455

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_TRUE3}
// label Int32.initial_sqrt_guess$IF_TRUE3
(Int32.initial_sqrt_guess$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 456
D=A // 457
@SP // 458
AM=M+1 // 459
A=A-1 // 460
M=D // 461
// call Int32.new
@6 // 462
D=A // 463
@14 // 464
M=D // 465
@Int32.new // 466
D=A // 467
@13 // 468
M=D // 469
@Int32.initial_sqrt_guess.ret.8 // 470
D=A // 471
@CALL // 472
0;JMP // 473
(Int32.initial_sqrt_guess.ret.8)
@SP // 474
AM=M-1 // 475
D=M // 476
@LCL // 477
A=M // 478
M=D // 479

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@16 // 480
D=A // 481
@SP // 482
AM=M+1 // 483
A=A-1 // 484
M=D // 485
// call Int32.new
@6 // 486
D=A // 487
@14 // 488
M=D // 489
@Int32.new // 490
D=A // 491
@13 // 492
M=D // 493
@Int32.initial_sqrt_guess.ret.9 // 494
D=A // 495
@CALL // 496
0;JMP // 497
(Int32.initial_sqrt_guess.ret.9)
@SP // 498
AM=M-1 // 499
D=M // 500
@LCL // 501
A=M+1 // 502
M=D // 503

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 504
A=M // 505
D=M // 506
@SP // 507
AM=M+1 // 508
A=A-1 // 509
M=D // 510
@LCL // 511
A=M+1 // 512
D=M // 513
@SP // 514
AM=M+1 // 515
A=A-1 // 516
M=D // 517
// call Int32.do_mul
@7 // 518
D=A // 519
@14 // 520
M=D // 521
@Int32.do_mul // 522
D=A // 523
@13 // 524
M=D // 525
@Int32.initial_sqrt_guess.ret.10 // 526
D=A // 527
@CALL // 528
0;JMP // 529
(Int32.initial_sqrt_guess.ret.10)
@SP // 530
M=M-1 // 531

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 532
A=M+1 // 533
D=M // 534
@SP // 535
AM=M+1 // 536
A=A-1 // 537
M=D // 538
// call Int32.dispose
@6 // 539
D=A // 540
@14 // 541
M=D // 542
@Int32.dispose // 543
D=A // 544
@13 // 545
M=D // 546
@Int32.initial_sqrt_guess.ret.11 // 547
D=A // 548
@CALL // 549
0;JMP // 550
(Int32.initial_sqrt_guess.ret.11)
@SP // 551
M=M-1 // 552

////PushInstruction("local 0")
@LCL // 553
A=M // 554
D=M // 555
@SP // 556
AM=M+1 // 557
A=A-1 // 558
M=D // 559
@RETURN // 560
0;JMP // 561

////LabelInstruction{label='Int32.initial_sqrt_guess$IF_END3}
// label Int32.initial_sqrt_guess$IF_END3
(Int32.initial_sqrt_guess$IF_END3)

////CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Int32.new}}
@11 // 562
D=A // 563
@SP // 564
AM=M+1 // 565
A=A-1 // 566
M=D // 567
// call Int32.new
@6 // 568
D=A // 569
@14 // 570
M=D // 571
@Int32.new // 572
D=A // 573
@13 // 574
M=D // 575
@Int32.initial_sqrt_guess.ret.12 // 576
D=A // 577
@CALL // 578
0;JMP // 579
(Int32.initial_sqrt_guess.ret.12)
@RETURN // 580
0;JMP // 581

////FunctionInstruction{functionName='Output.println', numLocals=0, funcMapping={}}
// function Output.println with 0
(Output.println)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 582
M=0 // 583

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("static 2"),
//    right:
//        PushInstruction("constant 22"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.println$IF_TRUE1}}
@Output.println.EQ.4 // 584
D=A // 585
@SP // 586
AM=M+1 // 587
A=A-1 // 588
M=D // 589
@Output.2 // 590
D=M // 591
@22 // 592
D=D-A // 593
@DO_EQ // 594
0;JMP // 595
(Output.println.EQ.4)
@Output.println$IF_TRUE1 // 596
D;JNE // 597

////GotoInstruction{label='Output.println$IF_FALSE1}
// goto Output.println$IF_FALSE1
@Output.println$IF_FALSE1 // 598
0;JMP // 599

////LabelInstruction{label='Output.println$IF_TRUE1}
// label Output.println$IF_TRUE1
(Output.println$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 600
M=0 // 601

////GotoInstruction{label='Output.println$IF_END1}
// goto Output.println$IF_END1
@Output.println$IF_END1 // 602
0;JMP // 603

////LabelInstruction{label='Output.println$IF_FALSE1}
// label Output.println$IF_FALSE1
(Output.println$IF_FALSE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 604
M=M+1 // 605

////LabelInstruction{label='Output.println$IF_END1}
// label Output.println$IF_END1
(Output.println$IF_END1)

////PushInstruction("constant 0")
@SP // 606
AM=M+1 // 607
A=A-1 // 608
M=0 // 609
@RETURN // 610
0;JMP // 611

////FunctionInstruction{functionName='Memory.get_best_fit', numLocals=1, funcMapping={}}
// function Memory.get_best_fit with 1
(Memory.get_best_fit)
@SP // 612
AM=M+1 // 613
A=A-1 // 614
M=0 // 615

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 616
A=M // 617
D=M // 618
@0 // 619
A=D+A // 620
D=M // 621
@LCL // 622
A=M // 623
M=D // 624

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 0"),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.get_best_fit$IF_TRUE1}}
@Memory.get_best_fit.LT.5 // 625
D=A // 626
@SP // 627
AM=M+1 // 628
A=A-1 // 629
M=D // 630
@LCL // 631
A=M // 632
D=M // 633
@0 // 634
A=D+A // 635
D=M // 636
@SP // 637
AM=M+1 // 638
A=A-1 // 639
M=D // 640
@ARG // 641
A=M+1 // 642
D=M // 643
@SP // 644
AM=M-1 // 645
D=M-D // 646
@DO_LT // 647
0;JMP // 648
(Memory.get_best_fit.LT.5)
D=!D // 649
@Memory.get_best_fit$IF_TRUE1 // 650
D;JNE // 651

////GotoInstruction{label='Memory.get_best_fit$IF_END1}
// goto Memory.get_best_fit$IF_END1
@Memory.get_best_fit$IF_END1 // 652
0;JMP // 653

////LabelInstruction{label='Memory.get_best_fit$IF_TRUE1}
// label Memory.get_best_fit$IF_TRUE1
(Memory.get_best_fit$IF_TRUE1)

////PushInstruction("local 0")
@LCL // 654
A=M // 655
D=M // 656
@SP // 657
AM=M+1 // 658
A=A-1 // 659
M=D // 660
@RETURN // 661
0;JMP // 662

////LabelInstruction{label='Memory.get_best_fit$IF_END1}
// label Memory.get_best_fit$IF_END1
(Memory.get_best_fit$IF_END1)

////LabelInstruction{label='Memory.get_best_fit_WHILE_EXP1}
// label Memory.get_best_fit_WHILE_EXP1
(Memory.get_best_fit_WHILE_EXP1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.get_best_fit_WHILE_END1}}
@Memory.get_best_fit.EQ.6 // 663
D=A // 664
@SP // 665
AM=M+1 // 666
A=A-1 // 667
M=D // 668
@LCL // 669
A=M // 670
D=M // 671
@3 // 672
A=D+A // 673
D=M // 674
@DO_EQ // 675
0;JMP // 676
(Memory.get_best_fit.EQ.6)
@Memory.get_best_fit_WHILE_END1 // 677
D;JNE // 678

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 679
A=M // 680
D=M // 681
@3 // 682
A=D+A // 683
D=M // 684
@LCL // 685
A=M // 686
M=D // 687

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 0"),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.get_best_fit$IF_TRUE2}}
@Memory.get_best_fit.LT.7 // 688
D=A // 689
@SP // 690
AM=M+1 // 691
A=A-1 // 692
M=D // 693
@LCL // 694
A=M // 695
D=M // 696
@0 // 697
A=D+A // 698
D=M // 699
@SP // 700
AM=M+1 // 701
A=A-1 // 702
M=D // 703
@ARG // 704
A=M+1 // 705
D=M // 706
@SP // 707
AM=M-1 // 708
D=M-D // 709
@DO_LT // 710
0;JMP // 711
(Memory.get_best_fit.LT.7)
D=!D // 712
@Memory.get_best_fit$IF_TRUE2 // 713
D;JNE // 714

////GotoInstruction{label='Memory.get_best_fit$IF_END2}
// goto Memory.get_best_fit$IF_END2
@Memory.get_best_fit$IF_END2 // 715
0;JMP // 716

////LabelInstruction{label='Memory.get_best_fit$IF_TRUE2}
// label Memory.get_best_fit$IF_TRUE2
(Memory.get_best_fit$IF_TRUE2)

////PushInstruction("local 0")
@LCL // 717
A=M // 718
D=M // 719
@SP // 720
AM=M+1 // 721
A=A-1 // 722
M=D // 723
@RETURN // 724
0;JMP // 725

////LabelInstruction{label='Memory.get_best_fit$IF_END2}
// label Memory.get_best_fit$IF_END2
(Memory.get_best_fit$IF_END2)

////GotoInstruction{label='Memory.get_best_fit_WHILE_EXP1}
// goto Memory.get_best_fit_WHILE_EXP1
@Memory.get_best_fit_WHILE_EXP1 // 726
0;JMP // 727

////LabelInstruction{label='Memory.get_best_fit_WHILE_END1}
// label Memory.get_best_fit_WHILE_END1
(Memory.get_best_fit_WHILE_END1)

////PushInstruction("constant 0")
@SP // 728
AM=M+1 // 729
A=A-1 // 730
M=0 // 731
@RETURN // 732
0;JMP // 733

////FunctionInstruction{functionName='Number.clone', numLocals=0, funcMapping={}}
// function Number.clone with 0
(Number.clone)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 734
A=M // 735
D=M // 736
@3 // 737
M=D // 738

////CallGroup{pushes=[CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.clone}}], call=CallInstruction{Number.new_from_int32}}
@THIS // 739
A=M // 740
D=M // 741
@SP // 742
AM=M+1 // 743
A=A-1 // 744
M=D // 745
// call Int32.clone
@6 // 746
D=A // 747
@14 // 748
M=D // 749
@Int32.clone // 750
D=A // 751
@13 // 752
M=D // 753
@Number.clone.ret.0 // 754
D=A // 755
@CALL // 756
0;JMP // 757
(Number.clone.ret.0)
// call Number.new_from_int32
@6 // 758
D=A // 759
@14 // 760
M=D // 761
@Number.new_from_int32 // 762
D=A // 763
@13 // 764
M=D // 765
@Number.clone.ret.1 // 766
D=A // 767
@CALL // 768
0;JMP // 769
(Number.clone.ret.1)
@RETURN // 770
0;JMP // 771

////FunctionInstruction{functionName='Main.getOneTwentieth', numLocals=2, funcMapping={}}
// function Main.getOneTwentieth with 2
(Main.getOneTwentieth)
@SP // 772
M=M+1 // 773
AM=M+1 // 774
A=A-1 // 775
M=0 // 776
A=A-1 // 777
M=0 // 778

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 779
AM=M+1 // 780
A=A-1 // 781
M=1 // 782
// call Number.new
@6 // 783
D=A // 784
@14 // 785
M=D // 786
@Number.new // 787
D=A // 788
@13 // 789
M=D // 790
@Main.getOneTwentieth.ret.0 // 791
D=A // 792
@CALL // 793
0;JMP // 794
(Main.getOneTwentieth.ret.0)
@SP // 795
AM=M-1 // 796
D=M // 797
@LCL // 798
A=M // 799
M=D // 800

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 20")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@20 // 801
D=A // 802
@SP // 803
AM=M+1 // 804
A=A-1 // 805
M=D // 806
// call Number.new
@6 // 807
D=A // 808
@14 // 809
M=D // 810
@Number.new // 811
D=A // 812
@13 // 813
M=D // 814
@Main.getOneTwentieth.ret.1 // 815
D=A // 816
@CALL // 817
0;JMP // 818
(Main.getOneTwentieth.ret.1)
@SP // 819
AM=M-1 // 820
D=M // 821
@LCL // 822
A=M+1 // 823
M=D // 824

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 825
A=M // 826
D=M // 827
@SP // 828
AM=M+1 // 829
A=A-1 // 830
M=D // 831
@LCL // 832
A=M+1 // 833
D=M // 834
@SP // 835
AM=M+1 // 836
A=A-1 // 837
M=D // 838
// call Number.do_div
@7 // 839
D=A // 840
@14 // 841
M=D // 842
@Number.do_div // 843
D=A // 844
@13 // 845
M=D // 846
@Main.getOneTwentieth.ret.2 // 847
D=A // 848
@CALL // 849
0;JMP // 850
(Main.getOneTwentieth.ret.2)
@SP // 851
M=M-1 // 852

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 853
A=M+1 // 854
D=M // 855
@SP // 856
AM=M+1 // 857
A=A-1 // 858
M=D // 859
// call Number.dispose
@6 // 860
D=A // 861
@14 // 862
M=D // 863
@Number.dispose // 864
D=A // 865
@13 // 866
M=D // 867
@Main.getOneTwentieth.ret.3 // 868
D=A // 869
@CALL // 870
0;JMP // 871
(Main.getOneTwentieth.ret.3)
@SP // 872
M=M-1 // 873

////PushInstruction("local 0")
@LCL // 874
A=M // 875
D=M // 876
@SP // 877
AM=M+1 // 878
A=A-1 // 879
M=D // 880
@RETURN // 881
0;JMP // 882

////FunctionInstruction{functionName='Int32.new_from_parts', numLocals=0, funcMapping={Int32.initial_sqrt_guess=13}}
// function Int32.new_from_parts with 0
(Int32.new_from_parts)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 883
AM=M+1 // 884
A=A-1 // 885
M=1 // 886
// call Memory.alloc
@6 // 887
D=A // 888
@14 // 889
M=D // 890
@Memory.alloc // 891
D=A // 892
@13 // 893
M=D // 894
@Int32.new_from_parts.ret.0 // 895
D=A // 896
@CALL // 897
0;JMP // 898
(Int32.new_from_parts.ret.0)
@SP // 899
AM=M-1 // 900
D=M // 901
@3 // 902
M=D // 903

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 904
M=M+1 // 905

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 906
A=M // 907
D=M // 908
@THIS // 909
A=M // 910
M=D // 911

////PushInstruction("pointer 0")
@3 // 912
D=M // 913
@SP // 914
AM=M+1 // 915
A=A-1 // 916
M=D // 917
@RETURN // 918
0;JMP // 919

////FunctionInstruction{functionName='Intersection.dispose', numLocals=0, funcMapping={}}
// function Intersection.dispose with 0
(Intersection.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 920
A=M // 921
D=M // 922
@3 // 923
M=D // 924

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Intersection.0 // 925
M=M-1 // 926

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 927
A=M // 928
D=M // 929
@SP // 930
AM=M+1 // 931
A=A-1 // 932
M=D // 933
// call Number.dispose
@6 // 934
D=A // 935
@14 // 936
M=D // 937
@Number.dispose // 938
D=A // 939
@13 // 940
M=D // 941
@Intersection.dispose.ret.0 // 942
D=A // 943
@CALL // 944
0;JMP // 945
(Intersection.dispose.ret.0)
@SP // 946
M=M-1 // 947

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 948
D=M // 949
@SP // 950
AM=M+1 // 951
A=A-1 // 952
M=D // 953
// call Memory.deAlloc
@6 // 954
D=A // 955
@14 // 956
M=D // 957
@Memory.deAlloc // 958
D=A // 959
@13 // 960
M=D // 961
@Intersection.dispose.ret.1 // 962
D=A // 963
@CALL // 964
0;JMP // 965
(Intersection.dispose.ret.1)
@SP // 966
M=M-1 // 967

////PushInstruction("constant 0")
@SP // 968
AM=M+1 // 969
A=A-1 // 970
M=0 // 971
@RETURN // 972
0;JMP // 973

////FunctionInstruction{functionName='Output.getMap', numLocals=0, funcMapping={Output.println=0}}
// function Output.getMap with 0
(Output.getMap)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 32"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 126"),
//            binaryOp: "GT"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Output.getMap$IF_TRUE1}}
@Output.getMap.LT.8 // 974
D=A // 975
@SP // 976
AM=M+1 // 977
A=A-1 // 978
M=D // 979
@ARG // 980
A=M // 981
D=M // 982
@32 // 983
D=D-A // 984
@DO_LT // 985
0;JMP // 986
(Output.getMap.LT.8)
@SP // 987
AM=M+1 // 988
A=A-1 // 989
M=D // 990
@Output.getMap.GT.9 // 991
D=A // 992
@SP // 993
AM=M+1 // 994
A=A-1 // 995
M=D // 996
@ARG // 997
A=M // 998
D=M // 999
@126 // 1000
D=D-A // 1001
@DO_GT // 1002
0;JMP // 1003
(Output.getMap.GT.9)
@SP // 1004
AM=M-1 // 1005
D=D|M // 1006
@Output.getMap$IF_TRUE1 // 1007
D;JNE // 1008

////GotoInstruction{label='Output.getMap$IF_END1}
// goto Output.getMap$IF_END1
@Output.getMap$IF_END1 // 1009
0;JMP // 1010

////LabelInstruction{label='Output.getMap$IF_TRUE1}
// label Output.getMap$IF_TRUE1
(Output.getMap$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=argument 0}
//}

@ARG // 1011
A=M // 1012
M=0 // 1013

////LabelInstruction{label='Output.getMap$IF_END1}
// label Output.getMap$IF_END1
(Output.getMap$IF_END1)

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 0"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        )
//)
@Output.0 // 1014
D=M // 1015
@SP // 1016
AM=M+1 // 1017
A=A-1 // 1018
M=D // 1019
@ARG // 1020
A=M // 1021
D=M // 1022
@SP // 1023
AM=M-1 // 1024
A=D+M // 1025
D=M // 1026
@SP // 1027
AM=M+1 // 1028
A=A-1 // 1029
M=D // 1030
@RETURN // 1031
0;JMP // 1032

////FunctionInstruction{functionName='Vec3.do_add', numLocals=0, funcMapping={}}
// function Vec3.do_add with 0
(Vec3.do_add)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1033
A=M // 1034
D=M // 1035
@3 // 1036
M=D // 1037

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1038
A=M // 1039
D=M // 1040
@SP // 1041
AM=M+1 // 1042
A=A-1 // 1043
M=D // 1044
@ARG // 1045
A=M+1 // 1046
D=M // 1047
@SP // 1048
AM=M+1 // 1049
A=A-1 // 1050
M=D // 1051
// call Vec3.getX
@6 // 1052
D=A // 1053
@14 // 1054
M=D // 1055
@Vec3.getX // 1056
D=A // 1057
@13 // 1058
M=D // 1059
@Vec3.do_add.ret.0 // 1060
D=A // 1061
@CALL // 1062
0;JMP // 1063
(Vec3.do_add.ret.0)
// call Number.do_add
@7 // 1064
D=A // 1065
@14 // 1066
M=D // 1067
@Number.do_add // 1068
D=A // 1069
@13 // 1070
M=D // 1071
@Vec3.do_add.ret.1 // 1072
D=A // 1073
@CALL // 1074
0;JMP // 1075
(Vec3.do_add.ret.1)
@SP // 1076
M=M-1 // 1077

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1078
A=M+1 // 1079
D=M // 1080
@SP // 1081
AM=M+1 // 1082
A=A-1 // 1083
M=D // 1084
@ARG // 1085
A=M+1 // 1086
D=M // 1087
@SP // 1088
AM=M+1 // 1089
A=A-1 // 1090
M=D // 1091
// call Vec3.getY
@6 // 1092
D=A // 1093
@14 // 1094
M=D // 1095
@Vec3.getY // 1096
D=A // 1097
@13 // 1098
M=D // 1099
@Vec3.do_add.ret.2 // 1100
D=A // 1101
@CALL // 1102
0;JMP // 1103
(Vec3.do_add.ret.2)
// call Number.do_add
@7 // 1104
D=A // 1105
@14 // 1106
M=D // 1107
@Number.do_add // 1108
D=A // 1109
@13 // 1110
M=D // 1111
@Vec3.do_add.ret.3 // 1112
D=A // 1113
@CALL // 1114
0;JMP // 1115
(Vec3.do_add.ret.3)
@SP // 1116
M=M-1 // 1117

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1118
A=M+1 // 1119
A=A+1 // 1120
D=M // 1121
@SP // 1122
AM=M+1 // 1123
A=A-1 // 1124
M=D // 1125
@ARG // 1126
A=M+1 // 1127
D=M // 1128
@SP // 1129
AM=M+1 // 1130
A=A-1 // 1131
M=D // 1132
// call Vec3.getZ
@6 // 1133
D=A // 1134
@14 // 1135
M=D // 1136
@Vec3.getZ // 1137
D=A // 1138
@13 // 1139
M=D // 1140
@Vec3.do_add.ret.4 // 1141
D=A // 1142
@CALL // 1143
0;JMP // 1144
(Vec3.do_add.ret.4)
// call Number.do_add
@7 // 1145
D=A // 1146
@14 // 1147
M=D // 1148
@Number.do_add // 1149
D=A // 1150
@13 // 1151
M=D // 1152
@Vec3.do_add.ret.5 // 1153
D=A // 1154
@CALL // 1155
0;JMP // 1156
(Vec3.do_add.ret.5)
@SP // 1157
M=M-1 // 1158

////PushInstruction("constant 0")
@SP // 1159
AM=M+1 // 1160
A=A-1 // 1161
M=0 // 1162
@RETURN // 1163
0;JMP // 1164

////FunctionInstruction{functionName='Int32.is_positive', numLocals=0, funcMapping={Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.is_positive with 0
(Int32.is_positive)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1165
A=M // 1166
D=M // 1167
@3 // 1168
M=D // 1169

////BinaryPushGroup(
//    left:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_zero}},
//NOT),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 128"),
//            binaryOp: "LT"
//        ),
//    binaryOp: "AND"
//)
@3 // 1170
D=M // 1171
@SP // 1172
AM=M+1 // 1173
A=A-1 // 1174
M=D // 1175
// call Int32.is_zero
@6 // 1176
D=A // 1177
@14 // 1178
M=D // 1179
@Int32.is_zero // 1180
D=A // 1181
@13 // 1182
M=D // 1183
@Int32.is_positive.ret.0 // 1184
D=A // 1185
@CALL // 1186
0;JMP // 1187
(Int32.is_positive.ret.0)
@SP // 1188
A=M-1 // 1189
M=!D // 1190
@Int32.is_positive.LT.10 // 1191
D=A // 1192
@SP // 1193
AM=M+1 // 1194
A=A-1 // 1195
M=D // 1196
@THIS // 1197
A=M // 1198
D=M // 1199
@3 // 1200
A=D+A // 1201
D=M // 1202
@128 // 1203
D=D-A // 1204
@DO_LT // 1205
0;JMP // 1206
(Int32.is_positive.LT.10)
@SP // 1207
AM=M-1 // 1208
D=D&M // 1209
@SP // 1210
AM=M+1 // 1211
A=A-1 // 1212
M=D // 1213
@RETURN // 1214
0;JMP // 1215

////FunctionInstruction{functionName='Int32.do_sub', numLocals=1, funcMapping={Int32.is_positive=1, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.do_sub with 1
(Int32.do_sub)
@SP // 1216
AM=M+1 // 1217
A=A-1 // 1218
M=0 // 1219

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1220
A=M // 1221
D=M // 1222
@3 // 1223
M=D // 1224

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 1225
A=M+1 // 1226
D=M // 1227
@SP // 1228
AM=M+1 // 1229
A=A-1 // 1230
M=D // 1231
// call Int32.clone
@6 // 1232
D=A // 1233
@14 // 1234
M=D // 1235
@Int32.clone // 1236
D=A // 1237
@13 // 1238
M=D // 1239
@Int32.do_sub.ret.0 // 1240
D=A // 1241
@CALL // 1242
0;JMP // 1243
(Int32.do_sub.ret.0)
@SP // 1244
AM=M-1 // 1245
D=M // 1246
@LCL // 1247
A=M // 1248
M=D // 1249

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1250
A=M // 1251
D=M // 1252
@SP // 1253
AM=M+1 // 1254
A=A-1 // 1255
M=D // 1256
// call Int32.do_neg
@6 // 1257
D=A // 1258
@14 // 1259
M=D // 1260
@Int32.do_neg // 1261
D=A // 1262
@13 // 1263
M=D // 1264
@Int32.do_sub.ret.1 // 1265
D=A // 1266
@CALL // 1267
0;JMP // 1268
(Int32.do_sub.ret.1)
@SP // 1269
M=M-1 // 1270

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("local 0")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 1271
D=M // 1272
@SP // 1273
AM=M+1 // 1274
A=A-1 // 1275
M=D // 1276
@LCL // 1277
A=M // 1278
D=M // 1279
@SP // 1280
AM=M+1 // 1281
A=A-1 // 1282
M=D // 1283
// call Int32.do_add
@7 // 1284
D=A // 1285
@14 // 1286
M=D // 1287
@Int32.do_add // 1288
D=A // 1289
@13 // 1290
M=D // 1291
@Int32.do_sub.ret.2 // 1292
D=A // 1293
@CALL // 1294
0;JMP // 1295
(Int32.do_sub.ret.2)
@SP // 1296
M=M-1 // 1297

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1298
A=M // 1299
D=M // 1300
@SP // 1301
AM=M+1 // 1302
A=A-1 // 1303
M=D // 1304
// call Int32.dispose
@6 // 1305
D=A // 1306
@14 // 1307
M=D // 1308
@Int32.dispose // 1309
D=A // 1310
@13 // 1311
M=D // 1312
@Int32.do_sub.ret.3 // 1313
D=A // 1314
@CALL // 1315
0;JMP // 1316
(Int32.do_sub.ret.3)
@SP // 1317
M=M-1 // 1318

////PushInstruction("constant 0")
@SP // 1319
AM=M+1 // 1320
A=A-1 // 1321
M=0 // 1322
@RETURN // 1323
0;JMP // 1324

////FunctionInstruction{functionName='Screen.init', numLocals=0, funcMapping={}}
// function Screen.init with 0
(Screen.init)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=static 0}
//}

@Screen.0 // 1325
M=-1 // 1326

////PushInstruction("constant 0")
@SP // 1327
AM=M+1 // 1328
A=A-1 // 1329
M=0 // 1330
@RETURN // 1331
0;JMP // 1332

////FunctionInstruction{functionName='Plane.initialize', numLocals=1, funcMapping={}}
// function Plane.initialize with 1
(Plane.initialize)
@SP // 1333
AM=M+1 // 1334
A=A-1 // 1335
M=0 // 1336

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=static 0}
//}

@SP // 1337
AM=M+1 // 1338
A=A-1 // 1339
M=0 // 1340
// call Number.new
@6 // 1341
D=A // 1342
@14 // 1343
M=D // 1344
@Number.new // 1345
D=A // 1346
@13 // 1347
M=D // 1348
@Plane.initialize.ret.0 // 1349
D=A // 1350
@CALL // 1351
0;JMP // 1352
(Plane.initialize.ret.0)
@SP // 1353
AM=M+1 // 1354
A=A-1 // 1355
M=0 // 1356
// call Number.new
@6 // 1357
D=A // 1358
@14 // 1359
M=D // 1360
@Number.new // 1361
D=A // 1362
@13 // 1363
M=D // 1364
@Plane.initialize.ret.1 // 1365
D=A // 1366
@CALL // 1367
0;JMP // 1368
(Plane.initialize.ret.1)
@SP // 1369
AM=M+1 // 1370
A=A-1 // 1371
M=1 // 1372
// call Number.new
@6 // 1373
D=A // 1374
@14 // 1375
M=D // 1376
@Number.new // 1377
D=A // 1378
@13 // 1379
M=D // 1380
@Plane.initialize.ret.2 // 1381
D=A // 1382
@CALL // 1383
0;JMP // 1384
(Plane.initialize.ret.2)
// call Vec3.new
@8 // 1385
D=A // 1386
@14 // 1387
M=D // 1388
@Vec3.new // 1389
D=A // 1390
@13 // 1391
M=D // 1392
@Plane.initialize.ret.3 // 1393
D=A // 1394
@CALL // 1395
0;JMP // 1396
(Plane.initialize.ret.3)
@SP // 1397
AM=M-1 // 1398
D=M // 1399
@Plane.0 // 1400
M=D // 1401

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=static 1}
//}

@SP // 1402
AM=M+1 // 1403
A=A-1 // 1404
M=0 // 1405
// call Number.new
@6 // 1406
D=A // 1407
@14 // 1408
M=D // 1409
@Number.new // 1410
D=A // 1411
@13 // 1412
M=D // 1413
@Plane.initialize.ret.4 // 1414
D=A // 1415
@CALL // 1416
0;JMP // 1417
(Plane.initialize.ret.4)
@SP // 1418
AM=M+1 // 1419
A=A-1 // 1420
M=1 // 1421
// call Number.new
@6 // 1422
D=A // 1423
@14 // 1424
M=D // 1425
@Number.new // 1426
D=A // 1427
@13 // 1428
M=D // 1429
@Plane.initialize.ret.5 // 1430
D=A // 1431
@CALL // 1432
0;JMP // 1433
(Plane.initialize.ret.5)
@SP // 1434
AM=M+1 // 1435
A=A-1 // 1436
M=0 // 1437
// call Number.new
@6 // 1438
D=A // 1439
@14 // 1440
M=D // 1441
@Number.new // 1442
D=A // 1443
@13 // 1444
M=D // 1445
@Plane.initialize.ret.6 // 1446
D=A // 1447
@CALL // 1448
0;JMP // 1449
(Plane.initialize.ret.6)
// call Vec3.new
@8 // 1450
D=A // 1451
@14 // 1452
M=D // 1453
@Vec3.new // 1454
D=A // 1455
@13 // 1456
M=D // 1457
@Plane.initialize.ret.7 // 1458
D=A // 1459
@CALL // 1460
0;JMP // 1461
(Plane.initialize.ret.7)
@SP // 1462
AM=M-1 // 1463
D=M // 1464
@Plane.1 // 1465
M=D // 1466

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1000")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 2}
//}

@1000 // 1467
D=A // 1468
@SP // 1469
AM=M+1 // 1470
A=A-1 // 1471
M=D // 1472
// call Number.new
@6 // 1473
D=A // 1474
@14 // 1475
M=D // 1476
@Number.new // 1477
D=A // 1478
@13 // 1479
M=D // 1480
@Plane.initialize.ret.8 // 1481
D=A // 1482
@CALL // 1483
0;JMP // 1484
(Plane.initialize.ret.8)
@SP // 1485
AM=M-1 // 1486
D=M // 1487
@Plane.2 // 1488
M=D // 1489

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 3}
//}

@SP // 1490
AM=M+1 // 1491
A=A-1 // 1492
M=1 // 1493
// call Number.new
@6 // 1494
D=A // 1495
@14 // 1496
M=D // 1497
@Number.new // 1498
D=A // 1499
@13 // 1500
M=D // 1501
@Plane.initialize.ret.9 // 1502
D=A // 1503
@CALL // 1504
0;JMP // 1505
(Plane.initialize.ret.9)
@SP // 1506
AM=M-1 // 1507
D=M // 1508
@Plane.3 // 1509
M=D // 1510

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 90")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 4}
//}

@90 // 1511
D=A // 1512
@SP // 1513
AM=M+1 // 1514
A=A-1 // 1515
M=D // 1516
// call Number.new
@6 // 1517
D=A // 1518
@14 // 1519
M=D // 1520
@Number.new // 1521
D=A // 1522
@13 // 1523
M=D // 1524
@Plane.initialize.ret.10 // 1525
D=A // 1526
@CALL // 1527
0;JMP // 1528
(Plane.initialize.ret.10)
@SP // 1529
AM=M-1 // 1530
D=M // 1531
@Plane.4 // 1532
M=D // 1533

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=static 5}
//}

@3 // 1534
D=A // 1535
@SP // 1536
AM=M+1 // 1537
A=A-1 // 1538
M=D // 1539
// call Number.new
@6 // 1540
D=A // 1541
@14 // 1542
M=D // 1543
@Number.new // 1544
D=A // 1545
@13 // 1546
M=D // 1547
@Plane.initialize.ret.11 // 1548
D=A // 1549
@CALL // 1550
0;JMP // 1551
(Plane.initialize.ret.11)
@SP // 1552
AM=M-1 // 1553
D=M // 1554
@Plane.5 // 1555
M=D // 1556

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 100")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@100 // 1557
D=A // 1558
@SP // 1559
AM=M+1 // 1560
A=A-1 // 1561
M=D // 1562
// call Number.new
@6 // 1563
D=A // 1564
@14 // 1565
M=D // 1566
@Number.new // 1567
D=A // 1568
@13 // 1569
M=D // 1570
@Plane.initialize.ret.12 // 1571
D=A // 1572
@CALL // 1573
0;JMP // 1574
(Plane.initialize.ret.12)
@SP // 1575
AM=M-1 // 1576
D=M // 1577
@LCL // 1578
A=M // 1579
M=D // 1580

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 4"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@Plane.4 // 1581
D=M // 1582
@SP // 1583
AM=M+1 // 1584
A=A-1 // 1585
M=D // 1586
@LCL // 1587
A=M // 1588
D=M // 1589
@SP // 1590
AM=M+1 // 1591
A=A-1 // 1592
M=D // 1593
// call Number.do_div
@7 // 1594
D=A // 1595
@14 // 1596
M=D // 1597
@Number.do_div // 1598
D=A // 1599
@13 // 1600
M=D // 1601
@Plane.initialize.ret.13 // 1602
D=A // 1603
@CALL // 1604
0;JMP // 1605
(Plane.initialize.ret.13)
@SP // 1606
M=M-1 // 1607

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 5"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@Plane.5 // 1608
D=M // 1609
@SP // 1610
AM=M+1 // 1611
A=A-1 // 1612
M=D // 1613
@LCL // 1614
A=M // 1615
D=M // 1616
@SP // 1617
AM=M+1 // 1618
A=A-1 // 1619
M=D // 1620
// call Number.do_div
@7 // 1621
D=A // 1622
@14 // 1623
M=D // 1624
@Number.do_div // 1625
D=A // 1626
@13 // 1627
M=D // 1628
@Plane.initialize.ret.14 // 1629
D=A // 1630
@CALL // 1631
0;JMP // 1632
(Plane.initialize.ret.14)
@SP // 1633
M=M-1 // 1634

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 1635
A=M // 1636
D=M // 1637
@SP // 1638
AM=M+1 // 1639
A=A-1 // 1640
M=D // 1641
// call Number.dispose
@6 // 1642
D=A // 1643
@14 // 1644
M=D // 1645
@Number.dispose // 1646
D=A // 1647
@13 // 1648
M=D // 1649
@Plane.initialize.ret.15 // 1650
D=A // 1651
@CALL // 1652
0;JMP // 1653
(Plane.initialize.ret.15)
@SP // 1654
M=M-1 // 1655

////PushInstruction("constant 0")
@SP // 1656
AM=M+1 // 1657
A=A-1 // 1658
M=0 // 1659
@RETURN // 1660
0;JMP // 1661

////FunctionInstruction{functionName='Plane.new', numLocals=0, funcMapping={Plane.initialize=16}}
// function Plane.new with 0
(Plane.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@4 // 1662
D=A // 1663
@SP // 1664
AM=M+1 // 1665
A=A-1 // 1666
M=D // 1667
// call Memory.alloc
@6 // 1668
D=A // 1669
@14 // 1670
M=D // 1671
@Memory.alloc // 1672
D=A // 1673
@13 // 1674
M=D // 1675
@Plane.new.ret.0 // 1676
D=A // 1677
@CALL // 1678
0;JMP // 1679
(Plane.new.ret.0)
@SP // 1680
AM=M-1 // 1681
D=M // 1682
@3 // 1683
M=D // 1684

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 1685
A=M // 1686
D=M // 1687
@THIS // 1688
A=M // 1689
M=D // 1690

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 1691
A=M+1 // 1692
D=M // 1693
@THIS // 1694
A=M+1 // 1695
M=D // 1696

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 1697
A=M+1 // 1698
A=A+1 // 1699
D=M // 1700
@THIS // 1701
A=M+1 // 1702
A=A+1 // 1703
M=D // 1704

////PushPopPair {
//  push: PushInstruction("argument 3")
//  pop:  PopInstruction{address=this 3}
//}

@ARG // 1705
A=M+1 // 1706
A=A+1 // 1707
A=A+1 // 1708
D=M // 1709
@THIS // 1710
A=M+1 // 1711
A=A+1 // 1712
A=A+1 // 1713
M=D // 1714

////PushInstruction("pointer 0")
@3 // 1715
D=M // 1716
@SP // 1717
AM=M+1 // 1718
A=A-1 // 1719
M=D // 1720
@RETURN // 1721
0;JMP // 1722

////FunctionInstruction{functionName='Number.do_mul', numLocals=0, funcMapping={Number.clone=2}}
// function Number.do_mul with 0
(Number.do_mul)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 1723
A=M // 1724
D=M // 1725
@3 // 1726
M=D // 1727

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}},
//    right:
//CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.is_zero}},
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Number.do_mul$IF_TRUE1}}
@THIS // 1728
A=M // 1729
D=M // 1730
@SP // 1731
AM=M+1 // 1732
A=A-1 // 1733
M=D // 1734
// call Int32.is_zero
@6 // 1735
D=A // 1736
@14 // 1737
M=D // 1738
@Int32.is_zero // 1739
D=A // 1740
@13 // 1741
M=D // 1742
@Number.do_mul.ret.0 // 1743
D=A // 1744
@CALL // 1745
0;JMP // 1746
(Number.do_mul.ret.0)
@ARG // 1747
A=M+1 // 1748
D=M // 1749
@SP // 1750
AM=M+1 // 1751
A=A-1 // 1752
M=D // 1753
// call Number.is_zero
@6 // 1754
D=A // 1755
@14 // 1756
M=D // 1757
@Number.is_zero // 1758
D=A // 1759
@13 // 1760
M=D // 1761
@Number.do_mul.ret.1 // 1762
D=A // 1763
@CALL // 1764
0;JMP // 1765
(Number.do_mul.ret.1)
@SP // 1766
AM=M-1 // 1767
D=M // 1768
@SP // 1769
AM=M-1 // 1770
D=D|M // 1771
@Number.do_mul$IF_TRUE1 // 1772
D;JNE // 1773

////GotoInstruction{label='Number.do_mul$IF_END1}
// goto Number.do_mul$IF_END1
@Number.do_mul$IF_END1 // 1774
0;JMP // 1775

////LabelInstruction{label='Number.do_mul$IF_TRUE1}
// label Number.do_mul$IF_TRUE1
(Number.do_mul$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_zero}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1776
A=M // 1777
D=M // 1778
@SP // 1779
AM=M+1 // 1780
A=A-1 // 1781
M=D // 1782
// call Int32.do_zero
@6 // 1783
D=A // 1784
@14 // 1785
M=D // 1786
@Int32.do_zero // 1787
D=A // 1788
@13 // 1789
M=D // 1790
@Number.do_mul.ret.2 // 1791
D=A // 1792
@CALL // 1793
0;JMP // 1794
(Number.do_mul.ret.2)
@SP // 1795
M=M-1 // 1796

////PushInstruction("constant 0")
@SP // 1797
AM=M+1 // 1798
A=A-1 // 1799
M=0 // 1800
@RETURN // 1801
0;JMP // 1802

////LabelInstruction{label='Number.do_mul$IF_END1}
// label Number.do_mul$IF_END1
(Number.do_mul$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}, PushInstruction("constant 2")], call=CallInstruction{Int32.do_mul_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 1803
A=M // 1804
D=M // 1805
@SP // 1806
AM=M+1 // 1807
A=A-1 // 1808
M=D // 1809
@ARG // 1810
A=M+1 // 1811
D=M // 1812
@SP // 1813
AM=M+1 // 1814
A=A-1 // 1815
M=D // 1816
// call Number.getV
@6 // 1817
D=A // 1818
@14 // 1819
M=D // 1820
@Number.getV // 1821
D=A // 1822
@13 // 1823
M=D // 1824
@Number.do_mul.ret.3 // 1825
D=A // 1826
@CALL // 1827
0;JMP // 1828
(Number.do_mul.ret.3)
@2 // 1829
D=A // 1830
@SP // 1831
AM=M+1 // 1832
A=A-1 // 1833
M=D // 1834
// call Int32.do_mul_right_shift_bytes
@8 // 1835
D=A // 1836
@14 // 1837
M=D // 1838
@Int32.do_mul_right_shift_bytes // 1839
D=A // 1840
@13 // 1841
M=D // 1842
@Number.do_mul.ret.4 // 1843
D=A // 1844
@CALL // 1845
0;JMP // 1846
(Number.do_mul.ret.4)
@SP // 1847
M=M-1 // 1848

////PushInstruction("constant 0")
@SP // 1849
AM=M+1 // 1850
A=A-1 // 1851
M=0 // 1852
@RETURN // 1853
0;JMP // 1854

////FunctionInstruction{functionName='Output.create', numLocals=1, funcMapping={Output.println=0, Output.getMap=0}}
// function Output.create with 1
(Output.create)
@SP // 1855
AM=M+1 // 1856
A=A-1 // 1857
M=0 // 1858

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 11")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 0}
//}

@11 // 1859
D=A // 1860
@SP // 1861
AM=M+1 // 1862
A=A-1 // 1863
M=D // 1864
// call Memory.alloc
@6 // 1865
D=A // 1866
@14 // 1867
M=D // 1868
@Memory.alloc // 1869
D=A // 1870
@13 // 1871
M=D // 1872
@Output.create.ret.0 // 1873
D=A // 1874
@CALL // 1875
0;JMP // 1876
(Output.create.ret.0)
@SP // 1877
AM=M-1 // 1878
D=M // 1879
@LCL // 1880
A=M // 1881
M=D // 1882

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)}
@Output.0 // 1883
D=M // 1884
@SP // 1885
AM=M+1 // 1886
A=A-1 // 1887
M=D // 1888
@ARG // 1889
A=M // 1890
D=M // 1891
@SP // 1892
AM=M-1 // 1893
D=D+M // 1894
@SP // 1895
AM=M+1 // 1896
A=A-1 // 1897
M=D // 1898
@LCL // 1899
A=M // 1900
D=M // 1901
@SP // 1902
AM=M-1 // 1903
A=M // 1904
M=D // 1905

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 1906
A=M // 1907
D=M // 1908
@SP // 1909
AM=M+1 // 1910
A=A-1 // 1911
M=D // 1912
@ARG // 1913
A=M+1 // 1914
D=M // 1915
@SP // 1916
AM=M-1 // 1917
A=M // 1918
M=D // 1919

////PushWriter{source=PushInstruction("argument 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 1920
A=M // 1921
D=M // 1922
@SP // 1923
AM=M+1 // 1924
A=A-1 // 1925
M=D+1 // 1926
@ARG // 1927
A=M+1 // 1928
A=A+1 // 1929
D=M // 1930
@SP // 1931
AM=M-1 // 1932
A=M // 1933
M=D // 1934

////PushWriter{source=PushInstruction("argument 3"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 1935
A=M // 1936
D=M // 1937
@2 // 1938
D=D+A // 1939
@SP // 1940
AM=M+1 // 1941
A=A-1 // 1942
M=D // 1943
@ARG // 1944
A=M+1 // 1945
A=A+1 // 1946
A=A+1 // 1947
D=M // 1948
@SP // 1949
AM=M-1 // 1950
A=M // 1951
M=D // 1952

////PushWriter{source=PushInstruction("argument 4"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 1953
A=M // 1954
D=M // 1955
@3 // 1956
D=D+A // 1957
@SP // 1958
AM=M+1 // 1959
A=A-1 // 1960
M=D // 1961
@ARG // 1962
D=M // 1963
@4 // 1964
A=D+A // 1965
D=M // 1966
@SP // 1967
AM=M-1 // 1968
A=M // 1969
M=D // 1970

////PushWriter{source=PushInstruction("argument 5"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 1971
A=M // 1972
D=M // 1973
@4 // 1974
D=D+A // 1975
@SP // 1976
AM=M+1 // 1977
A=A-1 // 1978
M=D // 1979
@ARG // 1980
D=M // 1981
@5 // 1982
A=D+A // 1983
D=M // 1984
@SP // 1985
AM=M-1 // 1986
A=M // 1987
M=D // 1988

////PushWriter{source=PushInstruction("argument 6"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)}
@LCL // 1989
A=M // 1990
D=M // 1991
@5 // 1992
D=D+A // 1993
@SP // 1994
AM=M+1 // 1995
A=A-1 // 1996
M=D // 1997
@ARG // 1998
D=M // 1999
@6 // 2000
A=D+A // 2001
D=M // 2002
@SP // 2003
AM=M-1 // 2004
A=M // 2005
M=D // 2006

////PushWriter{source=PushInstruction("argument 7"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//)}
@LCL // 2007
A=M // 2008
D=M // 2009
@6 // 2010
D=D+A // 2011
@SP // 2012
AM=M+1 // 2013
A=A-1 // 2014
M=D // 2015
@ARG // 2016
D=M // 2017
@7 // 2018
A=D+A // 2019
D=M // 2020
@SP // 2021
AM=M-1 // 2022
A=M // 2023
M=D // 2024

////PushWriter{source=PushInstruction("argument 8"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)}
@LCL // 2025
A=M // 2026
D=M // 2027
@7 // 2028
D=D+A // 2029
@SP // 2030
AM=M+1 // 2031
A=A-1 // 2032
M=D // 2033
@ARG // 2034
D=M // 2035
@8 // 2036
A=D+A // 2037
D=M // 2038
@SP // 2039
AM=M-1 // 2040
A=M // 2041
M=D // 2042

////PushWriter{source=PushInstruction("argument 9"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 8"),
//    binaryOp: "ADD"
//)}
@LCL // 2043
A=M // 2044
D=M // 2045
@8 // 2046
D=D+A // 2047
@SP // 2048
AM=M+1 // 2049
A=A-1 // 2050
M=D // 2051
@ARG // 2052
D=M // 2053
@9 // 2054
A=D+A // 2055
D=M // 2056
@SP // 2057
AM=M-1 // 2058
A=M // 2059
M=D // 2060

////PushWriter{source=PushInstruction("argument 10"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 9"),
//    binaryOp: "ADD"
//)}
@LCL // 2061
A=M // 2062
D=M // 2063
@9 // 2064
D=D+A // 2065
@SP // 2066
AM=M+1 // 2067
A=A-1 // 2068
M=D // 2069
@ARG // 2070
D=M // 2071
@10 // 2072
A=D+A // 2073
D=M // 2074
@SP // 2075
AM=M-1 // 2076
A=M // 2077
M=D // 2078

////PushWriter{source=PushInstruction("argument 11"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 10"),
//    binaryOp: "ADD"
//)}
@LCL // 2079
A=M // 2080
D=M // 2081
@10 // 2082
D=D+A // 2083
@SP // 2084
AM=M+1 // 2085
A=A-1 // 2086
M=D // 2087
@ARG // 2088
D=M // 2089
@11 // 2090
A=D+A // 2091
D=M // 2092
@SP // 2093
AM=M-1 // 2094
A=M // 2095
M=D // 2096

////PushInstruction("constant 0")
@SP // 2097
AM=M+1 // 2098
A=A-1 // 2099
M=0 // 2100
@RETURN // 2101
0;JMP // 2102

////FunctionInstruction{functionName='Int32.clone', numLocals=2, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1}}
// function Int32.clone with 2
(Int32.clone)
@SP // 2103
M=M+1 // 2104
AM=M+1 // 2105
A=A-1 // 2106
M=0 // 2107
A=A-1 // 2108
M=0 // 2109

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2110
A=M // 2111
D=M // 2112
@3 // 2113
M=D // 2114

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 0}
//}

@4 // 2115
D=A // 2116
@SP // 2117
AM=M+1 // 2118
A=A-1 // 2119
M=D // 2120
// call Memory.alloc
@6 // 2121
D=A // 2122
@14 // 2123
M=D // 2124
@Memory.alloc // 2125
D=A // 2126
@13 // 2127
M=D // 2128
@Int32.clone.ret.0 // 2129
D=A // 2130
@CALL // 2131
0;JMP // 2132
(Int32.clone.ret.0)
@SP // 2133
AM=M-1 // 2134
D=M // 2135
@LCL // 2136
A=M // 2137
M=D // 2138

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 2139
A=M+1 // 2140
M=0 // 2141

////LabelInstruction{label='Int32.clone_WHILE_EXP1}
// label Int32.clone_WHILE_EXP1
(Int32.clone_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.clone_WHILE_END1}}
@Int32.clone.LT.11 // 2142
D=A // 2143
@SP // 2144
AM=M+1 // 2145
A=A-1 // 2146
M=D // 2147
@LCL // 2148
A=M+1 // 2149
D=M // 2150
@4 // 2151
D=D-A // 2152
@DO_LT // 2153
0;JMP // 2154
(Int32.clone.LT.11)
D=!D // 2155
@Int32.clone_WHILE_END1 // 2156
D;JNE // 2157

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 2158
A=M+1 // 2159
D=M // 2160
A=A-1 // 2161
D=D+M // 2162
@SP // 2163
AM=M+1 // 2164
A=A-1 // 2165
M=D // 2166
@THIS // 2167
A=M // 2168
D=M // 2169
@SP // 2170
AM=M+1 // 2171
A=A-1 // 2172
M=D // 2173
@LCL // 2174
A=M+1 // 2175
D=M // 2176
@SP // 2177
AM=M-1 // 2178
A=D+M // 2179
D=M // 2180
@SP // 2181
AM=M-1 // 2182
A=M // 2183
M=D // 2184

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 2185
A=M+1 // 2186
M=M+1 // 2187

////GotoInstruction{label='Int32.clone_WHILE_EXP1}
// goto Int32.clone_WHILE_EXP1
@Int32.clone_WHILE_EXP1 // 2188
0;JMP // 2189

////LabelInstruction{label='Int32.clone_WHILE_END1}
// label Int32.clone_WHILE_END1
(Int32.clone_WHILE_END1)

////CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.new_from_parts}}
@LCL // 2190
A=M // 2191
D=M // 2192
@SP // 2193
AM=M+1 // 2194
A=A-1 // 2195
M=D // 2196
// call Int32.new_from_parts
@6 // 2197
D=A // 2198
@14 // 2199
M=D // 2200
@Int32.new_from_parts // 2201
D=A // 2202
@13 // 2203
M=D // 2204
@Int32.clone.ret.1 // 2205
D=A // 2206
@CALL // 2207
0;JMP // 2208
(Int32.clone.ret.1)
@RETURN // 2209
0;JMP // 2210

////FunctionInstruction{functionName='String.length', numLocals=0, funcMapping={String.dispose=1}}
// function String.length with 0
(String.length)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2211
A=M // 2212
D=M // 2213
@3 // 2214
M=D // 2215

////PushInstruction("this 1")
@THIS // 2216
A=M+1 // 2217
D=M // 2218
@SP // 2219
AM=M+1 // 2220
A=A-1 // 2221
M=D // 2222
@RETURN // 2223
0;JMP // 2224

////FunctionInstruction{functionName='Memory.getBinIndex', numLocals=1, funcMapping={Memory.get_best_fit=0}}
// function Memory.getBinIndex with 1
(Memory.getBinIndex)
@SP // 2225
AM=M+1 // 2226
A=A-1 // 2227
M=0 // 2228

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2229
A=M // 2230
M=0 // 2231

////LabelInstruction{label='Memory.getBinIndex_WHILE_EXP1}
// label Memory.getBinIndex_WHILE_EXP1
(Memory.getBinIndex_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("constant 7"),
//                binaryOp: "LT"
//            ),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("constant 2048"),
//                                    right:
//                                        PushInstruction("local 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.getBinIndex_WHILE_END1}}
@Memory.getBinIndex.LT.12 // 2232
D=A // 2233
@SP // 2234
AM=M+1 // 2235
A=A-1 // 2236
M=D // 2237
@LCL // 2238
A=M // 2239
D=M // 2240
@7 // 2241
D=D-A // 2242
@DO_LT // 2243
0;JMP // 2244
(Memory.getBinIndex.LT.12)
@SP // 2245
AM=M+1 // 2246
A=A-1 // 2247
M=D // 2248
@Memory.getBinIndex.EQ.13 // 2249
D=A // 2250
@SP // 2251
AM=M+1 // 2252
A=A-1 // 2253
M=D // 2254
@LCL // 2255
A=M // 2256
D=M // 2257
@2048 // 2258
A=D+A // 2259
D=M // 2260
@DO_EQ // 2261
0;JMP // 2262
(Memory.getBinIndex.EQ.13)
D=!D // 2263
@SP // 2264
AM=M-1 // 2265
D=D&M // 2266
D=!D // 2267
@Memory.getBinIndex_WHILE_END1 // 2268
D;JNE // 2269

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 0"),
//        right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.getBinIndex$IF_TRUE1}}
@Memory.getBinIndex.GT.14 // 2270
D=A // 2271
@SP // 2272
AM=M+1 // 2273
A=A-1 // 2274
M=D // 2275
@ARG // 2276
A=M // 2277
D=M // 2278
@SP // 2279
AM=M+1 // 2280
A=A-1 // 2281
M=D // 2282
@LCL // 2283
A=M // 2284
D=M // 2285
@SP // 2286
AM=M+1 // 2287
A=A-1 // 2288
M=D+1 // 2289
@16 // 2290
D=A // 2291
@SP // 2292
AM=M+1 // 2293
A=A-1 // 2294
M=D // 2295
// call Math.multiply
@7 // 2296
D=A // 2297
@14 // 2298
M=D // 2299
@Math.multiply // 2300
D=A // 2301
@13 // 2302
M=D // 2303
@Memory.getBinIndex.ret.0 // 2304
D=A // 2305
@CALL // 2306
0;JMP // 2307
(Memory.getBinIndex.ret.0)
@SP // 2308
AM=M-1 // 2309
D=M // 2310
@SP // 2311
AM=M-1 // 2312
D=M-D // 2313
@DO_GT // 2314
0;JMP // 2315
(Memory.getBinIndex.GT.14)
D=!D // 2316
@Memory.getBinIndex$IF_TRUE1 // 2317
D;JNE // 2318

////GotoInstruction{label='Memory.getBinIndex$IF_END1}
// goto Memory.getBinIndex$IF_END1
@Memory.getBinIndex$IF_END1 // 2319
0;JMP // 2320

////LabelInstruction{label='Memory.getBinIndex$IF_TRUE1}
// label Memory.getBinIndex$IF_TRUE1
(Memory.getBinIndex$IF_TRUE1)

////PushInstruction("local 0")
@LCL // 2321
A=M // 2322
D=M // 2323
@SP // 2324
AM=M+1 // 2325
A=A-1 // 2326
M=D // 2327
@RETURN // 2328
0;JMP // 2329

////LabelInstruction{label='Memory.getBinIndex$IF_END1}
// label Memory.getBinIndex$IF_END1
(Memory.getBinIndex$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2330
A=M // 2331
M=M+1 // 2332

////GotoInstruction{label='Memory.getBinIndex_WHILE_EXP1}
// goto Memory.getBinIndex_WHILE_EXP1
@Memory.getBinIndex_WHILE_EXP1 // 2333
0;JMP // 2334

////LabelInstruction{label='Memory.getBinIndex_WHILE_END1}
// label Memory.getBinIndex_WHILE_END1
(Memory.getBinIndex_WHILE_END1)

////BinaryPushGroup(
//    left:
//        PushInstruction("constant 7"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
@6 // 2335
D=A // 2336
@SP // 2337
AM=M+1 // 2338
A=A-1 // 2339
M=D // 2340
@7 // 2341
D=A // 2342
@SP // 2343
AM=M+1 // 2344
A=A-1 // 2345
M=D-1 // 2346
@RETURN // 2347
0;JMP // 2348

////FunctionInstruction{functionName='Sphere.new', numLocals=0, funcMapping={}}
// function Sphere.new with 0
(Sphere.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 2349
D=A // 2350
@SP // 2351
AM=M+1 // 2352
A=A-1 // 2353
M=D // 2354
// call Memory.alloc
@6 // 2355
D=A // 2356
@14 // 2357
M=D // 2358
@Memory.alloc // 2359
D=A // 2360
@13 // 2361
M=D // 2362
@Sphere.new.ret.0 // 2363
D=A // 2364
@CALL // 2365
0;JMP // 2366
(Sphere.new.ret.0)
@SP // 2367
AM=M-1 // 2368
D=M // 2369
@3 // 2370
M=D // 2371

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 2372
A=M // 2373
D=M // 2374
@THIS // 2375
A=M // 2376
M=D // 2377

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 2378
A=M+1 // 2379
D=M // 2380
@THIS // 2381
A=M+1 // 2382
M=D // 2383

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 2384
A=M+1 // 2385
A=A+1 // 2386
D=M // 2387
@THIS // 2388
A=M+1 // 2389
A=A+1 // 2390
M=D // 2391

////PushInstruction("pointer 0")
@3 // 2392
D=M // 2393
@SP // 2394
AM=M+1 // 2395
A=A-1 // 2396
M=D // 2397
@RETURN // 2398
0;JMP // 2399

////FunctionInstruction{functionName='Number.cmp', numLocals=0, funcMapping={Number.clone=2, Number.do_mul=5}}
// function Number.cmp with 0
(Number.cmp)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2400
A=M // 2401
D=M // 2402
@3 // 2403
M=D // 2404

////CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.cmp}}
@THIS // 2405
A=M // 2406
D=M // 2407
@SP // 2408
AM=M+1 // 2409
A=A-1 // 2410
M=D // 2411
@ARG // 2412
A=M+1 // 2413
D=M // 2414
@SP // 2415
AM=M+1 // 2416
A=A-1 // 2417
M=D // 2418
// call Number.getV
@6 // 2419
D=A // 2420
@14 // 2421
M=D // 2422
@Number.getV // 2423
D=A // 2424
@13 // 2425
M=D // 2426
@Number.cmp.ret.0 // 2427
D=A // 2428
@CALL // 2429
0;JMP // 2430
(Number.cmp.ret.0)
// call Int32.cmp
@7 // 2431
D=A // 2432
@14 // 2433
M=D // 2434
@Int32.cmp // 2435
D=A // 2436
@13 // 2437
M=D // 2438
@Number.cmp.ret.1 // 2439
D=A // 2440
@CALL // 2441
0;JMP // 2442
(Number.cmp.ret.1)
@RETURN // 2443
0;JMP // 2444

////FunctionInstruction{functionName='Int32.do_abs', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_abs with 0
(Int32.do_abs)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2445
A=M // 2446
D=M // 2447
@3 // 2448
M=D // 2449

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_abs$IF_TRUE1}}
@3 // 2450
D=M // 2451
@SP // 2452
AM=M+1 // 2453
A=A-1 // 2454
M=D // 2455
// call Int32.is_negative
@6 // 2456
D=A // 2457
@14 // 2458
M=D // 2459
@Int32.is_negative // 2460
D=A // 2461
@13 // 2462
M=D // 2463
@Int32.do_abs.ret.0 // 2464
D=A // 2465
@CALL // 2466
0;JMP // 2467
(Int32.do_abs.ret.0)
@SP // 2468
AM=M-1 // 2469
D=M // 2470
@Int32.do_abs$IF_TRUE1 // 2471
D;JNE // 2472

////GotoInstruction{label='Int32.do_abs$IF_END1}
// goto Int32.do_abs$IF_END1
@Int32.do_abs$IF_END1 // 2473
0;JMP // 2474

////LabelInstruction{label='Int32.do_abs$IF_TRUE1}
// label Int32.do_abs$IF_TRUE1
(Int32.do_abs$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2475
D=M // 2476
@SP // 2477
AM=M+1 // 2478
A=A-1 // 2479
M=D // 2480
// call Int32.do_neg
@6 // 2481
D=A // 2482
@14 // 2483
M=D // 2484
@Int32.do_neg // 2485
D=A // 2486
@13 // 2487
M=D // 2488
@Int32.do_abs.ret.1 // 2489
D=A // 2490
@CALL // 2491
0;JMP // 2492
(Int32.do_abs.ret.1)
@SP // 2493
M=M-1 // 2494

////LabelInstruction{label='Int32.do_abs$IF_END1}
// label Int32.do_abs$IF_END1
(Int32.do_abs$IF_END1)

////PushInstruction("constant 0")
@SP // 2495
AM=M+1 // 2496
A=A-1 // 2497
M=0 // 2498
@RETURN // 2499
0;JMP // 2500

////FunctionInstruction{functionName='Int32.do_right_shift_bytes', numLocals=2, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_right_shift_bytes with 2
(Int32.do_right_shift_bytes)
@SP // 2501
M=M+1 // 2502
AM=M+1 // 2503
A=A-1 // 2504
M=0 // 2505
A=A-1 // 2506
M=0 // 2507

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2508
A=M // 2509
D=M // 2510
@3 // 2511
M=D // 2512

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE1}}
@Int32.do_right_shift_bytes.GT.15 // 2513
D=A // 2514
@SP // 2515
AM=M+1 // 2516
A=A-1 // 2517
M=D // 2518
@ARG // 2519
A=M+1 // 2520
D=M // 2521
@DO_GT // 2522
0;JMP // 2523
(Int32.do_right_shift_bytes.GT.15)
D=!D // 2524
@Int32.do_right_shift_bytes$IF_TRUE1 // 2525
D;JNE // 2526

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END1}
// goto Int32.do_right_shift_bytes$IF_END1
@Int32.do_right_shift_bytes$IF_END1 // 2527
0;JMP // 2528

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE1}
// label Int32.do_right_shift_bytes$IF_TRUE1
(Int32.do_right_shift_bytes$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 2529
AM=M+1 // 2530
A=A-1 // 2531
M=0 // 2532
@RETURN // 2533
0;JMP // 2534

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END1}
// label Int32.do_right_shift_bytes$IF_END1
(Int32.do_right_shift_bytes$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}
//  pop:  PopInstruction{address=local 1}
//}

@3 // 2535
D=M // 2536
@SP // 2537
AM=M+1 // 2538
A=A-1 // 2539
M=D // 2540
// call Int32.is_negative
@6 // 2541
D=A // 2542
@14 // 2543
M=D // 2544
@Int32.is_negative // 2545
D=A // 2546
@13 // 2547
M=D // 2548
@Int32.do_right_shift_bytes.ret.0 // 2549
D=A // 2550
@CALL // 2551
0;JMP // 2552
(Int32.do_right_shift_bytes.ret.0)
@SP // 2553
AM=M-1 // 2554
D=M // 2555
@LCL // 2556
A=M+1 // 2557
M=D // 2558

////ConditionalGroup{push=PushInstruction("local 1"), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE2}}
@LCL // 2559
A=M+1 // 2560
D=M // 2561
@Int32.do_right_shift_bytes$IF_TRUE2 // 2562
D;JNE // 2563

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END2}
// goto Int32.do_right_shift_bytes$IF_END2
@Int32.do_right_shift_bytes$IF_END2 // 2564
0;JMP // 2565

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE2}
// label Int32.do_right_shift_bytes$IF_TRUE2
(Int32.do_right_shift_bytes$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2566
D=M // 2567
@SP // 2568
AM=M+1 // 2569
A=A-1 // 2570
M=D // 2571
// call Int32.do_neg
@6 // 2572
D=A // 2573
@14 // 2574
M=D // 2575
@Int32.do_neg // 2576
D=A // 2577
@13 // 2578
M=D // 2579
@Int32.do_right_shift_bytes.ret.1 // 2580
D=A // 2581
@CALL // 2582
0;JMP // 2583
(Int32.do_right_shift_bytes.ret.1)
@SP // 2584
M=M-1 // 2585

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END2}
// label Int32.do_right_shift_bytes$IF_END2
(Int32.do_right_shift_bytes$IF_END2)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2586
A=M // 2587
M=0 // 2588

////LabelInstruction{label='Int32.do_right_shift_bytes_WHILE_EXP1}
// label Int32.do_right_shift_bytes_WHILE_EXP1
(Int32.do_right_shift_bytes_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes_WHILE_END1}}
@Int32.do_right_shift_bytes.LT.16 // 2589
D=A // 2590
@SP // 2591
AM=M+1 // 2592
A=A-1 // 2593
M=D // 2594
@LCL // 2595
A=M // 2596
D=M // 2597
@4 // 2598
D=D-A // 2599
@DO_LT // 2600
0;JMP // 2601
(Int32.do_right_shift_bytes.LT.16)
D=!D // 2602
@Int32.do_right_shift_bytes_WHILE_END1 // 2603
D;JNE // 2604

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("argument 1"),
//                binaryOp: "ADD"
//            ),
//        right:
//            PushInstruction("constant 3"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE3}}
@Int32.do_right_shift_bytes.GT.17 // 2605
D=A // 2606
@SP // 2607
AM=M+1 // 2608
A=A-1 // 2609
M=D // 2610
@LCL // 2611
A=M // 2612
D=M // 2613
@SP // 2614
AM=M+1 // 2615
A=A-1 // 2616
M=D // 2617
@ARG // 2618
A=M+1 // 2619
D=M // 2620
@SP // 2621
AM=M-1 // 2622
D=D+M // 2623
@3 // 2624
D=D-A // 2625
@DO_GT // 2626
0;JMP // 2627
(Int32.do_right_shift_bytes.GT.17)
D=!D // 2628
@Int32.do_right_shift_bytes$IF_TRUE3 // 2629
D;JNE // 2630

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_FALSE3}
// goto Int32.do_right_shift_bytes$IF_FALSE3
@Int32.do_right_shift_bytes$IF_FALSE3 // 2631
0;JMP // 2632

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE3}
// label Int32.do_right_shift_bytes$IF_TRUE3
(Int32.do_right_shift_bytes$IF_TRUE3)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@THIS // 2633
A=M // 2634
D=M // 2635
@SP // 2636
AM=M+1 // 2637
A=A-1 // 2638
M=D // 2639
@LCL // 2640
A=M // 2641
D=M // 2642
@SP // 2643
AM=M-1 // 2644
D=D+M // 2645
@SP // 2646
AM=M+1 // 2647
A=A-1 // 2648
M=D // 2649
@THIS // 2650
A=M // 2651
D=M // 2652
@SP // 2653
AM=M+1 // 2654
A=A-1 // 2655
M=D // 2656
@LCL // 2657
A=M // 2658
D=M // 2659
@SP // 2660
AM=M+1 // 2661
A=A-1 // 2662
M=D // 2663
@ARG // 2664
A=M+1 // 2665
D=M // 2666
@SP // 2667
AM=M-1 // 2668
D=D+M // 2669
@SP // 2670
AM=M-1 // 2671
A=D+M // 2672
D=M // 2673
@SP // 2674
AM=M-1 // 2675
A=M // 2676
M=D // 2677

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END3}
// goto Int32.do_right_shift_bytes$IF_END3
@Int32.do_right_shift_bytes$IF_END3 // 2678
0;JMP // 2679

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_FALSE3}
// label Int32.do_right_shift_bytes$IF_FALSE3
(Int32.do_right_shift_bytes$IF_FALSE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@THIS // 2680
A=M // 2681
D=M // 2682
@SP // 2683
AM=M+1 // 2684
A=A-1 // 2685
M=D // 2686
@LCL // 2687
A=M // 2688
D=M // 2689
@SP // 2690
AM=M-1 // 2691
D=D+M // 2692
@SP // 2693
AM=M+1 // 2694
A=A-1 // 2695
M=D // 2696
D=0 // 2697
@SP // 2698
AM=M-1 // 2699
A=M // 2700
M=D // 2701

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END3}
// label Int32.do_right_shift_bytes$IF_END3
(Int32.do_right_shift_bytes$IF_END3)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 2702
A=M // 2703
M=M+1 // 2704

////GotoInstruction{label='Int32.do_right_shift_bytes_WHILE_EXP1}
// goto Int32.do_right_shift_bytes_WHILE_EXP1
@Int32.do_right_shift_bytes_WHILE_EXP1 // 2705
0;JMP // 2706

////LabelInstruction{label='Int32.do_right_shift_bytes_WHILE_END1}
// label Int32.do_right_shift_bytes_WHILE_END1
(Int32.do_right_shift_bytes_WHILE_END1)

////ConditionalGroup{push=PushInstruction("local 1"), ifGoto=IfGotoInstruction{label='Int32.do_right_shift_bytes$IF_TRUE4}}
@LCL // 2707
A=M+1 // 2708
D=M // 2709
@Int32.do_right_shift_bytes$IF_TRUE4 // 2710
D;JNE // 2711

////GotoInstruction{label='Int32.do_right_shift_bytes$IF_END4}
// goto Int32.do_right_shift_bytes$IF_END4
@Int32.do_right_shift_bytes$IF_END4 // 2712
0;JMP // 2713

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_TRUE4}
// label Int32.do_right_shift_bytes$IF_TRUE4
(Int32.do_right_shift_bytes$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 2714
D=M // 2715
@SP // 2716
AM=M+1 // 2717
A=A-1 // 2718
M=D // 2719
// call Int32.do_neg
@6 // 2720
D=A // 2721
@14 // 2722
M=D // 2723
@Int32.do_neg // 2724
D=A // 2725
@13 // 2726
M=D // 2727
@Int32.do_right_shift_bytes.ret.2 // 2728
D=A // 2729
@CALL // 2730
0;JMP // 2731
(Int32.do_right_shift_bytes.ret.2)
@SP // 2732
M=M-1 // 2733

////LabelInstruction{label='Int32.do_right_shift_bytes$IF_END4}
// label Int32.do_right_shift_bytes$IF_END4
(Int32.do_right_shift_bytes$IF_END4)

////PushInstruction("constant 0")
@SP // 2734
AM=M+1 // 2735
A=A-1 // 2736
M=0 // 2737
@RETURN // 2738
0;JMP // 2739

////FunctionInstruction{functionName='Main.getThreeTenths', numLocals=2, funcMapping={Main.getOneTwentieth=4}}
// function Main.getThreeTenths with 2
(Main.getThreeTenths)
@SP // 2740
M=M+1 // 2741
AM=M+1 // 2742
A=A-1 // 2743
M=0 // 2744
A=A-1 // 2745
M=0 // 2746

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 2747
D=A // 2748
@SP // 2749
AM=M+1 // 2750
A=A-1 // 2751
M=D // 2752
// call Number.new
@6 // 2753
D=A // 2754
@14 // 2755
M=D // 2756
@Number.new // 2757
D=A // 2758
@13 // 2759
M=D // 2760
@Main.getThreeTenths.ret.0 // 2761
D=A // 2762
@CALL // 2763
0;JMP // 2764
(Main.getThreeTenths.ret.0)
@SP // 2765
AM=M-1 // 2766
D=M // 2767
@LCL // 2768
A=M // 2769
M=D // 2770

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@10 // 2771
D=A // 2772
@SP // 2773
AM=M+1 // 2774
A=A-1 // 2775
M=D // 2776
// call Number.new
@6 // 2777
D=A // 2778
@14 // 2779
M=D // 2780
@Number.new // 2781
D=A // 2782
@13 // 2783
M=D // 2784
@Main.getThreeTenths.ret.1 // 2785
D=A // 2786
@CALL // 2787
0;JMP // 2788
(Main.getThreeTenths.ret.1)
@SP // 2789
AM=M-1 // 2790
D=M // 2791
@LCL // 2792
A=M+1 // 2793
M=D // 2794

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 2795
A=M // 2796
D=M // 2797
@SP // 2798
AM=M+1 // 2799
A=A-1 // 2800
M=D // 2801
@LCL // 2802
A=M+1 // 2803
D=M // 2804
@SP // 2805
AM=M+1 // 2806
A=A-1 // 2807
M=D // 2808
// call Number.do_div
@7 // 2809
D=A // 2810
@14 // 2811
M=D // 2812
@Number.do_div // 2813
D=A // 2814
@13 // 2815
M=D // 2816
@Main.getThreeTenths.ret.2 // 2817
D=A // 2818
@CALL // 2819
0;JMP // 2820
(Main.getThreeTenths.ret.2)
@SP // 2821
M=M-1 // 2822

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 2823
A=M+1 // 2824
D=M // 2825
@SP // 2826
AM=M+1 // 2827
A=A-1 // 2828
M=D // 2829
// call Number.dispose
@6 // 2830
D=A // 2831
@14 // 2832
M=D // 2833
@Number.dispose // 2834
D=A // 2835
@13 // 2836
M=D // 2837
@Main.getThreeTenths.ret.3 // 2838
D=A // 2839
@CALL // 2840
0;JMP // 2841
(Main.getThreeTenths.ret.3)
@SP // 2842
M=M-1 // 2843

////PushInstruction("local 0")
@LCL // 2844
A=M // 2845
D=M // 2846
@SP // 2847
AM=M+1 // 2848
A=A-1 // 2849
M=D // 2850
@RETURN // 2851
0;JMP // 2852

////FunctionInstruction{functionName='Math.max', numLocals=0, funcMapping={}}
// function Math.max with 0
(Math.max)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 1"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Math.max$IF_TRUE1}}
@Math.max.GT.18 // 2853
D=A // 2854
@SP // 2855
AM=M+1 // 2856
A=A-1 // 2857
M=D // 2858
@ARG // 2859
A=M+1 // 2860
D=M // 2861
A=A-1 // 2862
D=M-D // 2863
@DO_GT // 2864
0;JMP // 2865
(Math.max.GT.18)
@Math.max$IF_TRUE1 // 2866
D;JNE // 2867

////GotoInstruction{label='Math.max$IF_END1}
// goto Math.max$IF_END1
@Math.max$IF_END1 // 2868
0;JMP // 2869

////LabelInstruction{label='Math.max$IF_TRUE1}
// label Math.max$IF_TRUE1
(Math.max$IF_TRUE1)

////PushInstruction("argument 0")
@ARG // 2870
A=M // 2871
D=M // 2872
@SP // 2873
AM=M+1 // 2874
A=A-1 // 2875
M=D // 2876
@RETURN // 2877
0;JMP // 2878

////LabelInstruction{label='Math.max$IF_END1}
// label Math.max$IF_END1
(Math.max$IF_END1)

////PushInstruction("argument 1")
@ARG // 2879
A=M+1 // 2880
D=M // 2881
@SP // 2882
AM=M+1 // 2883
A=A-1 // 2884
M=D // 2885
@RETURN // 2886
0;JMP // 2887

////FunctionInstruction{functionName='Number.do_div', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5}}
// function Number.do_div with 0
(Number.do_div)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 2888
A=M // 2889
D=M // 2890
@3 // 2891
M=D // 2892

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}},
//    right:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.is_zero}},
//NOT),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Number.do_div$IF_TRUE1}}
@THIS // 2893
A=M // 2894
D=M // 2895
@SP // 2896
AM=M+1 // 2897
A=A-1 // 2898
M=D // 2899
// call Int32.is_zero
@6 // 2900
D=A // 2901
@14 // 2902
M=D // 2903
@Int32.is_zero // 2904
D=A // 2905
@13 // 2906
M=D // 2907
@Number.do_div.ret.0 // 2908
D=A // 2909
@CALL // 2910
0;JMP // 2911
(Number.do_div.ret.0)
@ARG // 2912
A=M+1 // 2913
D=M // 2914
@SP // 2915
AM=M+1 // 2916
A=A-1 // 2917
M=D // 2918
// call Number.is_zero
@6 // 2919
D=A // 2920
@14 // 2921
M=D // 2922
@Number.is_zero // 2923
D=A // 2924
@13 // 2925
M=D // 2926
@Number.do_div.ret.1 // 2927
D=A // 2928
@CALL // 2929
0;JMP // 2930
(Number.do_div.ret.1)
@SP // 2931
AM=M-1 // 2932
D=M // 2933
D=!D // 2934
@SP // 2935
AM=M-1 // 2936
D=D&M // 2937
@Number.do_div$IF_TRUE1 // 2938
D;JNE // 2939

////GotoInstruction{label='Number.do_div$IF_END1}
// goto Number.do_div$IF_END1
@Number.do_div$IF_END1 // 2940
0;JMP // 2941

////LabelInstruction{label='Number.do_div$IF_TRUE1}
// label Number.do_div$IF_TRUE1
(Number.do_div$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_zero}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 2942
A=M // 2943
D=M // 2944
@SP // 2945
AM=M+1 // 2946
A=A-1 // 2947
M=D // 2948
// call Int32.do_zero
@6 // 2949
D=A // 2950
@14 // 2951
M=D // 2952
@Int32.do_zero // 2953
D=A // 2954
@13 // 2955
M=D // 2956
@Number.do_div.ret.2 // 2957
D=A // 2958
@CALL // 2959
0;JMP // 2960
(Number.do_div.ret.2)
@SP // 2961
M=M-1 // 2962

////PushInstruction("constant 0")
@SP // 2963
AM=M+1 // 2964
A=A-1 // 2965
M=0 // 2966
@RETURN // 2967
0;JMP // 2968

////LabelInstruction{label='Number.do_div$IF_END1}
// label Number.do_div$IF_END1
(Number.do_div$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("constant 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_left_shift_bytes_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 2969
A=M // 2970
D=M // 2971
@SP // 2972
AM=M+1 // 2973
A=A-1 // 2974
M=D // 2975
@2 // 2976
D=A // 2977
@SP // 2978
AM=M+1 // 2979
A=A-1 // 2980
M=D // 2981
@ARG // 2982
A=M+1 // 2983
D=M // 2984
@SP // 2985
AM=M+1 // 2986
A=A-1 // 2987
M=D // 2988
// call Number.getV
@6 // 2989
D=A // 2990
@14 // 2991
M=D // 2992
@Number.getV // 2993
D=A // 2994
@13 // 2995
M=D // 2996
@Number.do_div.ret.3 // 2997
D=A // 2998
@CALL // 2999
0;JMP // 3000
(Number.do_div.ret.3)
// call Int32.do_left_shift_bytes_div
@8 // 3001
D=A // 3002
@14 // 3003
M=D // 3004
@Int32.do_left_shift_bytes_div // 3005
D=A // 3006
@13 // 3007
M=D // 3008
@Number.do_div.ret.4 // 3009
D=A // 3010
@CALL // 3011
0;JMP // 3012
(Number.do_div.ret.4)
@SP // 3013
M=M-1 // 3014

////PushInstruction("constant 0")
@SP // 3015
AM=M+1 // 3016
A=A-1 // 3017
M=0 // 3018
@RETURN // 3019
0;JMP // 3020

////FunctionInstruction{functionName='Int32.do_mul_right_shift_bytes', numLocals=10, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.clone=2}}
// function Int32.do_mul_right_shift_bytes with 10
(Int32.do_mul_right_shift_bytes)
@10 // 3021
D=A // 3022
@SP // 3023
AM=D+M // 3024
A=A-1 // 3025
M=0 // 3026
A=A-1 // 3027
M=0 // 3028
A=A-1 // 3029
M=0 // 3030
A=A-1 // 3031
M=0 // 3032
A=A-1 // 3033
M=0 // 3034
A=A-1 // 3035
M=0 // 3036
A=A-1 // 3037
M=0 // 3038
A=A-1 // 3039
M=0 // 3040
A=A-1 // 3041
M=0 // 3042
A=A-1 // 3043
M=0 // 3044

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 3045
A=M // 3046
D=M // 3047
@3 // 3048
M=D // 3049

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.is_negative}}], call=CallInstruction{Int32.xor}}
//  pop:  PopInstruction{address=local 7}
//}

@3 // 3050
D=M // 3051
@SP // 3052
AM=M+1 // 3053
A=A-1 // 3054
M=D // 3055
// call Int32.is_negative
@6 // 3056
D=A // 3057
@14 // 3058
M=D // 3059
@Int32.is_negative // 3060
D=A // 3061
@13 // 3062
M=D // 3063
@Int32.do_mul_right_shift_bytes.ret.0 // 3064
D=A // 3065
@CALL // 3066
0;JMP // 3067
(Int32.do_mul_right_shift_bytes.ret.0)
@ARG // 3068
A=M+1 // 3069
D=M // 3070
@SP // 3071
AM=M+1 // 3072
A=A-1 // 3073
M=D // 3074
// call Int32.is_negative
@6 // 3075
D=A // 3076
@14 // 3077
M=D // 3078
@Int32.is_negative // 3079
D=A // 3080
@13 // 3081
M=D // 3082
@Int32.do_mul_right_shift_bytes.ret.1 // 3083
D=A // 3084
@CALL // 3085
0;JMP // 3086
(Int32.do_mul_right_shift_bytes.ret.1)
// call Int32.xor
@7 // 3087
D=A // 3088
@14 // 3089
M=D // 3090
@Int32.xor // 3091
D=A // 3092
@13 // 3093
M=D // 3094
@Int32.do_mul_right_shift_bytes.ret.2 // 3095
D=A // 3096
@CALL // 3097
0;JMP // 3098
(Int32.do_mul_right_shift_bytes.ret.2)
@LCL // 3099
D=M // 3100
@7 // 3101
A=D+A // 3102
D=A // 3103
@R13 // 3104
M=D // 3105
@SP // 3106
AM=M-1 // 3107
D=M // 3108
@R13 // 3109
A=M // 3110
M=D // 3111

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE1}}
@3 // 3112
D=M // 3113
@SP // 3114
AM=M+1 // 3115
A=A-1 // 3116
M=D // 3117
// call Int32.is_negative
@6 // 3118
D=A // 3119
@14 // 3120
M=D // 3121
@Int32.is_negative // 3122
D=A // 3123
@13 // 3124
M=D // 3125
@Int32.do_mul_right_shift_bytes.ret.3 // 3126
D=A // 3127
@CALL // 3128
0;JMP // 3129
(Int32.do_mul_right_shift_bytes.ret.3)
@SP // 3130
AM=M-1 // 3131
D=M // 3132
@Int32.do_mul_right_shift_bytes$IF_TRUE1 // 3133
D;JNE // 3134

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE1}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE1
@Int32.do_mul_right_shift_bytes$IF_FALSE1 // 3135
0;JMP // 3136

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE1}
// label Int32.do_mul_right_shift_bytes$IF_TRUE1
(Int32.do_mul_right_shift_bytes$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 5}
//}

@3 // 3137
D=M // 3138
@SP // 3139
AM=M+1 // 3140
A=A-1 // 3141
M=D // 3142
// call Int32.clone
@6 // 3143
D=A // 3144
@14 // 3145
M=D // 3146
@Int32.clone // 3147
D=A // 3148
@13 // 3149
M=D // 3150
@Int32.do_mul_right_shift_bytes.ret.4 // 3151
D=A // 3152
@CALL // 3153
0;JMP // 3154
(Int32.do_mul_right_shift_bytes.ret.4)
@LCL // 3155
D=M // 3156
@5 // 3157
A=D+A // 3158
D=A // 3159
@R13 // 3160
M=D // 3161
@SP // 3162
AM=M-1 // 3163
D=M // 3164
@R13 // 3165
A=M // 3166
M=D // 3167

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3168
D=M // 3169
@5 // 3170
A=D+A // 3171
D=M // 3172
@SP // 3173
AM=M+1 // 3174
A=A-1 // 3175
M=D // 3176
// call Int32.do_abs
@6 // 3177
D=A // 3178
@14 // 3179
M=D // 3180
@Int32.do_abs // 3181
D=A // 3182
@13 // 3183
M=D // 3184
@Int32.do_mul_right_shift_bytes.ret.5 // 3185
D=A // 3186
@CALL // 3187
0;JMP // 3188
(Int32.do_mul_right_shift_bytes.ret.5)
@SP // 3189
M=M-1 // 3190

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 3191
D=M // 3192
@5 // 3193
A=D+A // 3194
D=M // 3195
@SP // 3196
AM=M+1 // 3197
A=A-1 // 3198
M=D // 3199
// call Int32.getParts
@6 // 3200
D=A // 3201
@14 // 3202
M=D // 3203
@Int32.getParts // 3204
D=A // 3205
@13 // 3206
M=D // 3207
@Int32.do_mul_right_shift_bytes.ret.6 // 3208
D=A // 3209
@CALL // 3210
0;JMP // 3211
(Int32.do_mul_right_shift_bytes.ret.6)
@SP // 3212
AM=M-1 // 3213
D=M // 3214
@LCL // 3215
A=M // 3216
M=D // 3217

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END1}
// goto Int32.do_mul_right_shift_bytes$IF_END1
@Int32.do_mul_right_shift_bytes$IF_END1 // 3218
0;JMP // 3219

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE1}
// label Int32.do_mul_right_shift_bytes$IF_FALSE1
(Int32.do_mul_right_shift_bytes$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("this 0")
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 3220
A=M // 3221
D=M // 3222
@LCL // 3223
A=M // 3224
M=D // 3225

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END1}
// label Int32.do_mul_right_shift_bytes$IF_END1
(Int32.do_mul_right_shift_bytes$IF_END1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE2}}
@ARG // 3226
A=M+1 // 3227
D=M // 3228
@SP // 3229
AM=M+1 // 3230
A=A-1 // 3231
M=D // 3232
// call Int32.is_negative
@6 // 3233
D=A // 3234
@14 // 3235
M=D // 3236
@Int32.is_negative // 3237
D=A // 3238
@13 // 3239
M=D // 3240
@Int32.do_mul_right_shift_bytes.ret.7 // 3241
D=A // 3242
@CALL // 3243
0;JMP // 3244
(Int32.do_mul_right_shift_bytes.ret.7)
@SP // 3245
AM=M-1 // 3246
D=M // 3247
@Int32.do_mul_right_shift_bytes$IF_TRUE2 // 3248
D;JNE // 3249

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE2}
// goto Int32.do_mul_right_shift_bytes$IF_FALSE2
@Int32.do_mul_right_shift_bytes$IF_FALSE2 // 3250
0;JMP // 3251

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE2}
// label Int32.do_mul_right_shift_bytes$IF_TRUE2
(Int32.do_mul_right_shift_bytes$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@ARG // 3252
A=M+1 // 3253
D=M // 3254
@SP // 3255
AM=M+1 // 3256
A=A-1 // 3257
M=D // 3258
// call Int32.clone
@6 // 3259
D=A // 3260
@14 // 3261
M=D // 3262
@Int32.clone // 3263
D=A // 3264
@13 // 3265
M=D // 3266
@Int32.do_mul_right_shift_bytes.ret.8 // 3267
D=A // 3268
@CALL // 3269
0;JMP // 3270
(Int32.do_mul_right_shift_bytes.ret.8)
@LCL // 3271
D=M // 3272
@6 // 3273
A=D+A // 3274
D=A // 3275
@R13 // 3276
M=D // 3277
@SP // 3278
AM=M-1 // 3279
D=M // 3280
@R13 // 3281
A=M // 3282
M=D // 3283

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3284
D=M // 3285
@6 // 3286
A=D+A // 3287
D=M // 3288
@SP // 3289
AM=M+1 // 3290
A=A-1 // 3291
M=D // 3292
// call Int32.do_abs
@6 // 3293
D=A // 3294
@14 // 3295
M=D // 3296
@Int32.do_abs // 3297
D=A // 3298
@13 // 3299
M=D // 3300
@Int32.do_mul_right_shift_bytes.ret.9 // 3301
D=A // 3302
@CALL // 3303
0;JMP // 3304
(Int32.do_mul_right_shift_bytes.ret.9)
@SP // 3305
M=M-1 // 3306

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 3307
D=M // 3308
@6 // 3309
A=D+A // 3310
D=M // 3311
@SP // 3312
AM=M+1 // 3313
A=A-1 // 3314
M=D // 3315
// call Int32.getParts
@6 // 3316
D=A // 3317
@14 // 3318
M=D // 3319
@Int32.getParts // 3320
D=A // 3321
@13 // 3322
M=D // 3323
@Int32.do_mul_right_shift_bytes.ret.10 // 3324
D=A // 3325
@CALL // 3326
0;JMP // 3327
(Int32.do_mul_right_shift_bytes.ret.10)
@SP // 3328
AM=M-1 // 3329
D=M // 3330
@LCL // 3331
A=M+1 // 3332
M=D // 3333

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END2}
// goto Int32.do_mul_right_shift_bytes$IF_END2
@Int32.do_mul_right_shift_bytes$IF_END2 // 3334
0;JMP // 3335

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_FALSE2}
// label Int32.do_mul_right_shift_bytes$IF_FALSE2
(Int32.do_mul_right_shift_bytes$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 3336
A=M+1 // 3337
D=M // 3338
@SP // 3339
AM=M+1 // 3340
A=A-1 // 3341
M=D // 3342
// call Int32.getParts
@6 // 3343
D=A // 3344
@14 // 3345
M=D // 3346
@Int32.getParts // 3347
D=A // 3348
@13 // 3349
M=D // 3350
@Int32.do_mul_right_shift_bytes.ret.11 // 3351
D=A // 3352
@CALL // 3353
0;JMP // 3354
(Int32.do_mul_right_shift_bytes.ret.11)
@SP // 3355
AM=M-1 // 3356
D=M // 3357
@LCL // 3358
A=M+1 // 3359
M=D // 3360

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END2}
// label Int32.do_mul_right_shift_bytes$IF_END2
(Int32.do_mul_right_shift_bytes$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 2}
//}

@8 // 3361
D=A // 3362
@SP // 3363
AM=M+1 // 3364
A=A-1 // 3365
M=D // 3366
// call Memory.alloc
@6 // 3367
D=A // 3368
@14 // 3369
M=D // 3370
@Memory.alloc // 3371
D=A // 3372
@13 // 3373
M=D // 3374
@Int32.do_mul_right_shift_bytes.ret.12 // 3375
D=A // 3376
@CALL // 3377
0;JMP // 3378
(Int32.do_mul_right_shift_bytes.ret.12)
@SP // 3379
AM=M-1 // 3380
D=M // 3381
@LCL // 3382
A=M+1 // 3383
A=A+1 // 3384
M=D // 3385

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 3}
//}

@8 // 3386
D=A // 3387
@SP // 3388
AM=M+1 // 3389
A=A-1 // 3390
M=D // 3391
// call Memory.alloc
@6 // 3392
D=A // 3393
@14 // 3394
M=D // 3395
@Memory.alloc // 3396
D=A // 3397
@13 // 3398
M=D // 3399
@Int32.do_mul_right_shift_bytes.ret.13 // 3400
D=A // 3401
@CALL // 3402
0;JMP // 3403
(Int32.do_mul_right_shift_bytes.ret.13)
@SP // 3404
AM=M-1 // 3405
D=M // 3406
@LCL // 3407
A=M+1 // 3408
A=A+1 // 3409
A=A+1 // 3410
M=D // 3411

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 3412
D=M // 3413
@8 // 3414
A=D+A // 3415
M=0 // 3416

////LabelInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_EXP1}
// label Int32.do_mul_right_shift_bytes_WHILE_EXP1
(Int32.do_mul_right_shift_bytes_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 8"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_END1}}
@Int32.do_mul_right_shift_bytes.LT.19 // 3417
D=A // 3418
@SP // 3419
AM=M+1 // 3420
A=A-1 // 3421
M=D // 3422
@LCL // 3423
D=M // 3424
@8 // 3425
A=D+A // 3426
D=M // 3427
@4 // 3428
D=D-A // 3429
@DO_LT // 3430
0;JMP // 3431
(Int32.do_mul_right_shift_bytes.LT.19)
D=!D // 3432
@Int32.do_mul_right_shift_bytes_WHILE_END1 // 3433
D;JNE // 3434

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("local 8"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 8"),
//            right:
//                PushInstruction("local 8"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 3435
A=M+1 // 3436
A=A+1 // 3437
D=M // 3438
@SP // 3439
AM=M+1 // 3440
A=A-1 // 3441
M=D // 3442
@LCL // 3443
D=M // 3444
@8 // 3445
A=D+A // 3446
D=M // 3447
D=D+M // 3448
@SP // 3449
AM=M-1 // 3450
D=D+M // 3451
@SP // 3452
AM=M+1 // 3453
A=A-1 // 3454
M=D // 3455
@LCL // 3456
A=M // 3457
D=M // 3458
@SP // 3459
AM=M+1 // 3460
A=A-1 // 3461
M=D // 3462
@LCL // 3463
D=M // 3464
@8 // 3465
A=D+A // 3466
D=M // 3467
@SP // 3468
AM=M-1 // 3469
A=D+M // 3470
D=M // 3471
@15 // 3472
D=D&A // 3473
@SP // 3474
AM=M-1 // 3475
A=M // 3476
M=D // 3477

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 8"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("local 8"),
//                    binaryOp: "ADD"
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 3478
A=M+1 // 3479
A=A+1 // 3480
D=M // 3481
@SP // 3482
AM=M+1 // 3483
A=A-1 // 3484
M=D // 3485
@LCL // 3486
D=M // 3487
@8 // 3488
A=D+A // 3489
D=M // 3490
D=D+M // 3491
D=D+1 // 3492
@SP // 3493
AM=M-1 // 3494
D=D+M // 3495
@SP // 3496
AM=M+1 // 3497
A=A-1 // 3498
M=D // 3499
@LCL // 3500
A=M // 3501
D=M // 3502
@SP // 3503
AM=M+1 // 3504
A=A-1 // 3505
M=D // 3506
@LCL // 3507
D=M // 3508
@8 // 3509
A=D+A // 3510
D=M // 3511
@SP // 3512
AM=M-1 // 3513
A=D+M // 3514
D=M // 3515
@SP // 3516
AM=M+1 // 3517
A=A-1 // 3518
M=D // 3519
@4 // 3520
D=A // 3521
@SP // 3522
AM=M+1 // 3523
A=A-1 // 3524
M=D // 3525
// call Int32.arith_rightshift
@7 // 3526
D=A // 3527
@14 // 3528
M=D // 3529
@Int32.arith_rightshift // 3530
D=A // 3531
@13 // 3532
M=D // 3533
@Int32.do_mul_right_shift_bytes.ret.14 // 3534
D=A // 3535
@CALL // 3536
0;JMP // 3537
(Int32.do_mul_right_shift_bytes.ret.14)
@SP // 3538
AM=M-1 // 3539
D=M // 3540
@SP // 3541
AM=M-1 // 3542
A=M // 3543
M=D // 3544

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("local 8"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 8"),
//            right:
//                PushInstruction("local 8"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 3545
A=M+1 // 3546
A=A+1 // 3547
A=A+1 // 3548
D=M // 3549
@SP // 3550
AM=M+1 // 3551
A=A-1 // 3552
M=D // 3553
@LCL // 3554
D=M // 3555
@8 // 3556
A=D+A // 3557
D=M // 3558
D=D+M // 3559
@SP // 3560
AM=M-1 // 3561
D=D+M // 3562
@SP // 3563
AM=M+1 // 3564
A=A-1 // 3565
M=D // 3566
@LCL // 3567
A=M+1 // 3568
D=M // 3569
@SP // 3570
AM=M+1 // 3571
A=A-1 // 3572
M=D // 3573
@LCL // 3574
D=M // 3575
@8 // 3576
A=D+A // 3577
D=M // 3578
@SP // 3579
AM=M-1 // 3580
A=D+M // 3581
D=M // 3582
@15 // 3583
D=D&A // 3584
@SP // 3585
AM=M-1 // 3586
A=M // 3587
M=D // 3588

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 8"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        PushInstruction("local 8"),
//                    binaryOp: "ADD"
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 3589
A=M+1 // 3590
A=A+1 // 3591
A=A+1 // 3592
D=M // 3593
@SP // 3594
AM=M+1 // 3595
A=A-1 // 3596
M=D // 3597
@LCL // 3598
D=M // 3599
@8 // 3600
A=D+A // 3601
D=M // 3602
D=D+M // 3603
D=D+1 // 3604
@SP // 3605
AM=M-1 // 3606
D=D+M // 3607
@SP // 3608
AM=M+1 // 3609
A=A-1 // 3610
M=D // 3611
@LCL // 3612
A=M+1 // 3613
D=M // 3614
@SP // 3615
AM=M+1 // 3616
A=A-1 // 3617
M=D // 3618
@LCL // 3619
D=M // 3620
@8 // 3621
A=D+A // 3622
D=M // 3623
@SP // 3624
AM=M-1 // 3625
A=D+M // 3626
D=M // 3627
@SP // 3628
AM=M+1 // 3629
A=A-1 // 3630
M=D // 3631
@4 // 3632
D=A // 3633
@SP // 3634
AM=M+1 // 3635
A=A-1 // 3636
M=D // 3637
// call Int32.arith_rightshift
@7 // 3638
D=A // 3639
@14 // 3640
M=D // 3641
@Int32.arith_rightshift // 3642
D=A // 3643
@13 // 3644
M=D // 3645
@Int32.do_mul_right_shift_bytes.ret.15 // 3646
D=A // 3647
@CALL // 3648
0;JMP // 3649
(Int32.do_mul_right_shift_bytes.ret.15)
@SP // 3650
AM=M-1 // 3651
D=M // 3652
@SP // 3653
AM=M-1 // 3654
A=M // 3655
M=D // 3656

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 3657
D=M // 3658
@8 // 3659
A=D+A // 3660
M=M+1 // 3661

////GotoInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_EXP1}
// goto Int32.do_mul_right_shift_bytes_WHILE_EXP1
@Int32.do_mul_right_shift_bytes_WHILE_EXP1 // 3662
0;JMP // 3663

////LabelInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_END1}
// label Int32.do_mul_right_shift_bytes_WHILE_END1
(Int32.do_mul_right_shift_bytes_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 3")], call=CallInstruction{Int32.u4_array_mul_u4_array}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 3664
A=M+1 // 3665
A=A+1 // 3666
D=M // 3667
@SP // 3668
AM=M+1 // 3669
A=A-1 // 3670
M=D // 3671
@LCL // 3672
A=M+1 // 3673
A=A+1 // 3674
A=A+1 // 3675
D=M // 3676
@SP // 3677
AM=M+1 // 3678
A=A-1 // 3679
M=D // 3680
// call Int32.u4_array_mul_u4_array
@7 // 3681
D=A // 3682
@14 // 3683
M=D // 3684
@Int32.u4_array_mul_u4_array // 3685
D=A // 3686
@13 // 3687
M=D // 3688
@Int32.do_mul_right_shift_bytes.ret.16 // 3689
D=A // 3690
@CALL // 3691
0;JMP // 3692
(Int32.do_mul_right_shift_bytes.ret.16)
@LCL // 3693
D=M // 3694
@4 // 3695
A=D+A // 3696
D=A // 3697
@R13 // 3698
M=D // 3699
@SP // 3700
AM=M-1 // 3701
D=M // 3702
@R13 // 3703
A=M // 3704
M=D // 3705

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 2"),
//    right:
//        PushInstruction("argument 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 9}
//}

@ARG // 3706
A=M+1 // 3707
A=A+1 // 3708
D=M // 3709
D=D+M // 3710
@SP // 3711
AM=M+1 // 3712
A=A-1 // 3713
M=D // 3714
@LCL // 3715
D=M // 3716
@9 // 3717
A=D+A // 3718
D=A // 3719
@R13 // 3720
M=D // 3721
@SP // 3722
AM=M-1 // 3723
D=M // 3724
@R13 // 3725
A=M // 3726
M=D // 3727

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 3728
D=M // 3729
@8 // 3730
A=D+A // 3731
M=0 // 3732

////LabelInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_EXP2}
// label Int32.do_mul_right_shift_bytes_WHILE_EXP2
(Int32.do_mul_right_shift_bytes_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 8"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_END2}}
@Int32.do_mul_right_shift_bytes.LT.20 // 3733
D=A // 3734
@SP // 3735
AM=M+1 // 3736
A=A-1 // 3737
M=D // 3738
@LCL // 3739
D=M // 3740
@8 // 3741
A=D+A // 3742
D=M // 3743
@4 // 3744
D=D-A // 3745
@DO_LT // 3746
0;JMP // 3747
(Int32.do_mul_right_shift_bytes.LT.20)
D=!D // 3748
@Int32.do_mul_right_shift_bytes_WHILE_END2 // 3749
D;JNE // 3750

////PushWriter{source=CallGroup{pushes=[BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 4"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 9"),
//                                    right:
//                                        PushInstruction("local 8"),
//                                    binaryOp: "ADD"
//                                ),
//                            right:
//                                PushInstruction("local 8"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 4"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                BinaryPushGroup(
//                                    left:
//                                        BinaryPushGroup(
//                                            left:
//                                                PushInstruction("local 9"),
//                                            right:
//                                                PushInstruction("local 8"),
//                                            binaryOp: "ADD"
//                                        ),
//                                    right:
//                                        PushInstruction("local 8"),
//                                    binaryOp: "ADD"
//                                ),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 8"),
//    binaryOp: "ADD"
//)}
@THIS // 3751
A=M // 3752
D=M // 3753
@SP // 3754
AM=M+1 // 3755
A=A-1 // 3756
M=D // 3757
@LCL // 3758
D=M // 3759
@8 // 3760
A=D+A // 3761
D=M // 3762
@SP // 3763
AM=M-1 // 3764
D=D+M // 3765
@SP // 3766
AM=M+1 // 3767
A=A-1 // 3768
M=D // 3769
@LCL // 3770
D=M // 3771
@4 // 3772
A=D+A // 3773
D=M // 3774
@SP // 3775
AM=M+1 // 3776
A=A-1 // 3777
M=D // 3778
@LCL // 3779
D=M // 3780
@9 // 3781
A=D+A // 3782
D=M // 3783
A=A-1 // 3784
D=D+M // 3785
@SP // 3786
AM=M+1 // 3787
A=A-1 // 3788
M=D // 3789
@LCL // 3790
D=M // 3791
@8 // 3792
A=D+A // 3793
D=M // 3794
@SP // 3795
AM=M-1 // 3796
D=D+M // 3797
@SP // 3798
AM=M-1 // 3799
A=D+M // 3800
D=M // 3801
@SP // 3802
AM=M+1 // 3803
A=A-1 // 3804
M=D // 3805
@LCL // 3806
D=M // 3807
@4 // 3808
A=D+A // 3809
D=M // 3810
@SP // 3811
AM=M+1 // 3812
A=A-1 // 3813
M=D // 3814
@LCL // 3815
D=M // 3816
@9 // 3817
A=D+A // 3818
D=M // 3819
A=A-1 // 3820
D=D+M // 3821
@SP // 3822
AM=M+1 // 3823
A=A-1 // 3824
M=D // 3825
@LCL // 3826
D=M // 3827
@8 // 3828
A=D+A // 3829
D=M // 3830
@SP // 3831
AM=M-1 // 3832
D=D+M // 3833
D=D+1 // 3834
@SP // 3835
AM=M-1 // 3836
A=D+M // 3837
D=M // 3838
@SP // 3839
AM=M-1 // 3840
D=D+M // 3841
@SP // 3842
AM=M+1 // 3843
A=A-1 // 3844
M=D // 3845
@16 // 3846
D=A // 3847
@SP // 3848
AM=M+1 // 3849
A=A-1 // 3850
M=D // 3851
// call Math.multiply
@7 // 3852
D=A // 3853
@14 // 3854
M=D // 3855
@Math.multiply // 3856
D=A // 3857
@13 // 3858
M=D // 3859
@Int32.do_mul_right_shift_bytes.ret.17 // 3860
D=A // 3861
@CALL // 3862
0;JMP // 3863
(Int32.do_mul_right_shift_bytes.ret.17)
@SP // 3864
AM=M-1 // 3865
D=M // 3866
@SP // 3867
AM=M-1 // 3868
A=M // 3869
M=D // 3870

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 3871
D=M // 3872
@8 // 3873
A=D+A // 3874
M=M+1 // 3875

////GotoInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_EXP2}
// goto Int32.do_mul_right_shift_bytes_WHILE_EXP2
@Int32.do_mul_right_shift_bytes_WHILE_EXP2 // 3876
0;JMP // 3877

////LabelInstruction{label='Int32.do_mul_right_shift_bytes_WHILE_END2}
// label Int32.do_mul_right_shift_bytes_WHILE_END2
(Int32.do_mul_right_shift_bytes_WHILE_END2)

////ConditionalGroup{push=PushInstruction("local 7"), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE3}}
@LCL // 3878
D=M // 3879
@7 // 3880
A=D+A // 3881
D=M // 3882
@Int32.do_mul_right_shift_bytes$IF_TRUE3 // 3883
D;JNE // 3884

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END3}
// goto Int32.do_mul_right_shift_bytes$IF_END3
@Int32.do_mul_right_shift_bytes$IF_END3 // 3885
0;JMP // 3886

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE3}
// label Int32.do_mul_right_shift_bytes$IF_TRUE3
(Int32.do_mul_right_shift_bytes$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 3887
D=M // 3888
@SP // 3889
AM=M+1 // 3890
A=A-1 // 3891
M=D // 3892
// call Int32.do_neg
@6 // 3893
D=A // 3894
@14 // 3895
M=D // 3896
@Int32.do_neg // 3897
D=A // 3898
@13 // 3899
M=D // 3900
@Int32.do_mul_right_shift_bytes.ret.18 // 3901
D=A // 3902
@CALL // 3903
0;JMP // 3904
(Int32.do_mul_right_shift_bytes.ret.18)
@SP // 3905
M=M-1 // 3906

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END3}
// label Int32.do_mul_right_shift_bytes$IF_END3
(Int32.do_mul_right_shift_bytes$IF_END3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 5"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE4}}
@Int32.do_mul_right_shift_bytes.EQ.21 // 3907
D=A // 3908
@SP // 3909
AM=M+1 // 3910
A=A-1 // 3911
M=D // 3912
@LCL // 3913
D=M // 3914
@5 // 3915
A=D+A // 3916
D=M // 3917
@DO_EQ // 3918
0;JMP // 3919
(Int32.do_mul_right_shift_bytes.EQ.21)
D=!D // 3920
@Int32.do_mul_right_shift_bytes$IF_TRUE4 // 3921
D;JNE // 3922

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END4}
// goto Int32.do_mul_right_shift_bytes$IF_END4
@Int32.do_mul_right_shift_bytes$IF_END4 // 3923
0;JMP // 3924

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE4}
// label Int32.do_mul_right_shift_bytes$IF_TRUE4
(Int32.do_mul_right_shift_bytes$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3925
D=M // 3926
@5 // 3927
A=D+A // 3928
D=M // 3929
@SP // 3930
AM=M+1 // 3931
A=A-1 // 3932
M=D // 3933
// call Int32.dispose
@6 // 3934
D=A // 3935
@14 // 3936
M=D // 3937
@Int32.dispose // 3938
D=A // 3939
@13 // 3940
M=D // 3941
@Int32.do_mul_right_shift_bytes.ret.19 // 3942
D=A // 3943
@CALL // 3944
0;JMP // 3945
(Int32.do_mul_right_shift_bytes.ret.19)
@SP // 3946
M=M-1 // 3947

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END4}
// label Int32.do_mul_right_shift_bytes$IF_END4
(Int32.do_mul_right_shift_bytes$IF_END4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 6"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE5}}
@Int32.do_mul_right_shift_bytes.EQ.22 // 3948
D=A // 3949
@SP // 3950
AM=M+1 // 3951
A=A-1 // 3952
M=D // 3953
@LCL // 3954
D=M // 3955
@6 // 3956
A=D+A // 3957
D=M // 3958
@DO_EQ // 3959
0;JMP // 3960
(Int32.do_mul_right_shift_bytes.EQ.22)
D=!D // 3961
@Int32.do_mul_right_shift_bytes$IF_TRUE5 // 3962
D;JNE // 3963

////GotoInstruction{label='Int32.do_mul_right_shift_bytes$IF_END5}
// goto Int32.do_mul_right_shift_bytes$IF_END5
@Int32.do_mul_right_shift_bytes$IF_END5 // 3964
0;JMP // 3965

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_TRUE5}
// label Int32.do_mul_right_shift_bytes$IF_TRUE5
(Int32.do_mul_right_shift_bytes$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3966
D=M // 3967
@6 // 3968
A=D+A // 3969
D=M // 3970
@SP // 3971
AM=M+1 // 3972
A=A-1 // 3973
M=D // 3974
// call Int32.dispose
@6 // 3975
D=A // 3976
@14 // 3977
M=D // 3978
@Int32.dispose // 3979
D=A // 3980
@13 // 3981
M=D // 3982
@Int32.do_mul_right_shift_bytes.ret.20 // 3983
D=A // 3984
@CALL // 3985
0;JMP // 3986
(Int32.do_mul_right_shift_bytes.ret.20)
@SP // 3987
M=M-1 // 3988

////LabelInstruction{label='Int32.do_mul_right_shift_bytes$IF_END5}
// label Int32.do_mul_right_shift_bytes$IF_END5
(Int32.do_mul_right_shift_bytes$IF_END5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 3989
A=M+1 // 3990
A=A+1 // 3991
D=M // 3992
@SP // 3993
AM=M+1 // 3994
A=A-1 // 3995
M=D // 3996
// call Memory.deAlloc
@6 // 3997
D=A // 3998
@14 // 3999
M=D // 4000
@Memory.deAlloc // 4001
D=A // 4002
@13 // 4003
M=D // 4004
@Int32.do_mul_right_shift_bytes.ret.21 // 4005
D=A // 4006
@CALL // 4007
0;JMP // 4008
(Int32.do_mul_right_shift_bytes.ret.21)
@SP // 4009
M=M-1 // 4010

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4011
A=M+1 // 4012
A=A+1 // 4013
A=A+1 // 4014
D=M // 4015
@SP // 4016
AM=M+1 // 4017
A=A-1 // 4018
M=D // 4019
// call Memory.deAlloc
@6 // 4020
D=A // 4021
@14 // 4022
M=D // 4023
@Memory.deAlloc // 4024
D=A // 4025
@13 // 4026
M=D // 4027
@Int32.do_mul_right_shift_bytes.ret.22 // 4028
D=A // 4029
@CALL // 4030
0;JMP // 4031
(Int32.do_mul_right_shift_bytes.ret.22)
@SP // 4032
M=M-1 // 4033

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4034
D=M // 4035
@4 // 4036
A=D+A // 4037
D=M // 4038
@SP // 4039
AM=M+1 // 4040
A=A-1 // 4041
M=D // 4042
// call Memory.deAlloc
@6 // 4043
D=A // 4044
@14 // 4045
M=D // 4046
@Memory.deAlloc // 4047
D=A // 4048
@13 // 4049
M=D // 4050
@Int32.do_mul_right_shift_bytes.ret.23 // 4051
D=A // 4052
@CALL // 4053
0;JMP // 4054
(Int32.do_mul_right_shift_bytes.ret.23)
@SP // 4055
M=M-1 // 4056

////PushInstruction("constant 0")
@SP // 4057
AM=M+1 // 4058
A=A-1 // 4059
M=0 // 4060
@RETURN // 4061
0;JMP // 4062

////FunctionInstruction{functionName='Sys.halt', numLocals=0, funcMapping={}}
// function Sys.halt with 0
(Sys.halt)

////LabelInstruction{label='Sys.halt_WHILE_EXP1}
// label Sys.halt_WHILE_EXP1
(Sys.halt_WHILE_EXP1)

////ConditionalGroup{push=PushInstruction("constant 0"), ifGoto=IfGotoInstruction{label='Sys.halt_WHILE_END1}}
D=0 // 4063
@Sys.halt_WHILE_END1 // 4064
D;JNE // 4065

////GotoInstruction{label='Sys.halt_WHILE_EXP1}
// goto Sys.halt_WHILE_EXP1
@Sys.halt_WHILE_EXP1 // 4066
0;JMP // 4067

////LabelInstruction{label='Sys.halt_WHILE_END1}
// label Sys.halt_WHILE_END1
(Sys.halt_WHILE_END1)

////PushInstruction("constant 0")
@SP // 4068
AM=M+1 // 4069
A=A-1 // 4070
M=0 // 4071
@RETURN // 4072
0;JMP // 4073

////FunctionInstruction{functionName='Vec3.clone', numLocals=0, funcMapping={Vec3.do_add=6}}
// function Vec3.clone with 0
(Vec3.clone)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4074
A=M // 4075
D=M // 4076
@3 // 4077
M=D // 4078

////CallGroup{pushes=[CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}, CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}, CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}], call=CallInstruction{Vec3.new}}
@THIS // 4079
A=M // 4080
D=M // 4081
@SP // 4082
AM=M+1 // 4083
A=A-1 // 4084
M=D // 4085
// call Number.clone
@6 // 4086
D=A // 4087
@14 // 4088
M=D // 4089
@Number.clone // 4090
D=A // 4091
@13 // 4092
M=D // 4093
@Vec3.clone.ret.0 // 4094
D=A // 4095
@CALL // 4096
0;JMP // 4097
(Vec3.clone.ret.0)
@THIS // 4098
A=M+1 // 4099
D=M // 4100
@SP // 4101
AM=M+1 // 4102
A=A-1 // 4103
M=D // 4104
// call Number.clone
@6 // 4105
D=A // 4106
@14 // 4107
M=D // 4108
@Number.clone // 4109
D=A // 4110
@13 // 4111
M=D // 4112
@Vec3.clone.ret.1 // 4113
D=A // 4114
@CALL // 4115
0;JMP // 4116
(Vec3.clone.ret.1)
@THIS // 4117
A=M+1 // 4118
A=A+1 // 4119
D=M // 4120
@SP // 4121
AM=M+1 // 4122
A=A-1 // 4123
M=D // 4124
// call Number.clone
@6 // 4125
D=A // 4126
@14 // 4127
M=D // 4128
@Number.clone // 4129
D=A // 4130
@13 // 4131
M=D // 4132
@Vec3.clone.ret.2 // 4133
D=A // 4134
@CALL // 4135
0;JMP // 4136
(Vec3.clone.ret.2)
// call Vec3.new
@8 // 4137
D=A // 4138
@14 // 4139
M=D // 4140
@Vec3.new // 4141
D=A // 4142
@13 // 4143
M=D // 4144
@Vec3.clone.ret.3 // 4145
D=A // 4146
@CALL // 4147
0;JMP // 4148
(Vec3.clone.ret.3)
@RETURN // 4149
0;JMP // 4150

////FunctionInstruction{functionName='Element.color', numLocals=0, funcMapping={}}
// function Element.color with 0
(Element.color)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4151
A=M // 4152
D=M // 4153
@3 // 4154
M=D // 4155

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.color$IF_TRUE1}}
@Element.color.EQ.23 // 4156
D=A // 4157
@SP // 4158
AM=M+1 // 4159
A=A-1 // 4160
M=D // 4161
@THIS // 4162
A=M // 4163
D=M // 4164
@DO_EQ // 4165
0;JMP // 4166
(Element.color.EQ.23)
D=!D // 4167
@Element.color$IF_TRUE1 // 4168
D;JNE // 4169

////GotoInstruction{label='Element.color$IF_END1}
// goto Element.color$IF_END1
@Element.color$IF_END1 // 4170
0;JMP // 4171

////LabelInstruction{label='Element.color$IF_TRUE1}
// label Element.color$IF_TRUE1
(Element.color$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Plane.color}}
@THIS // 4172
A=M // 4173
D=M // 4174
@SP // 4175
AM=M+1 // 4176
A=A-1 // 4177
M=D // 4178
@ARG // 4179
A=M+1 // 4180
D=M // 4181
@SP // 4182
AM=M+1 // 4183
A=A-1 // 4184
M=D // 4185
// call Plane.color
@7 // 4186
D=A // 4187
@14 // 4188
M=D // 4189
@Plane.color // 4190
D=A // 4191
@13 // 4192
M=D // 4193
@Element.color.ret.0 // 4194
D=A // 4195
@CALL // 4196
0;JMP // 4197
(Element.color.ret.0)
@RETURN // 4198
0;JMP // 4199

////LabelInstruction{label='Element.color$IF_END1}
// label Element.color$IF_END1
(Element.color$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.color$IF_TRUE2}}
@Element.color.EQ.24 // 4200
D=A // 4201
@SP // 4202
AM=M+1 // 4203
A=A-1 // 4204
M=D // 4205
@THIS // 4206
A=M+1 // 4207
D=M // 4208
@DO_EQ // 4209
0;JMP // 4210
(Element.color.EQ.24)
D=!D // 4211
@Element.color$IF_TRUE2 // 4212
D;JNE // 4213

////GotoInstruction{label='Element.color$IF_END2}
// goto Element.color$IF_END2
@Element.color$IF_END2 // 4214
0;JMP // 4215

////LabelInstruction{label='Element.color$IF_TRUE2}
// label Element.color$IF_TRUE2
(Element.color$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Sphere.color}}
@THIS // 4216
A=M+1 // 4217
D=M // 4218
@SP // 4219
AM=M+1 // 4220
A=A-1 // 4221
M=D // 4222
// call Sphere.color
@6 // 4223
D=A // 4224
@14 // 4225
M=D // 4226
@Sphere.color // 4227
D=A // 4228
@13 // 4229
M=D // 4230
@Element.color.ret.1 // 4231
D=A // 4232
@CALL // 4233
0;JMP // 4234
(Element.color.ret.1)
@RETURN // 4235
0;JMP // 4236

////LabelInstruction{label='Element.color$IF_END2}
// label Element.color$IF_END2
(Element.color$IF_END2)

////PushInstruction("constant 0")
@SP // 4237
AM=M+1 // 4238
A=A-1 // 4239
M=0 // 4240
@RETURN // 4241
0;JMP // 4242

////FunctionInstruction{functionName='Number.do_neg', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5}}
// function Number.do_neg with 0
(Number.do_neg)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4243
A=M // 4244
D=M // 4245
@3 // 4246
M=D // 4247

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 4248
A=M // 4249
D=M // 4250
@SP // 4251
AM=M+1 // 4252
A=A-1 // 4253
M=D // 4254
// call Int32.do_neg
@6 // 4255
D=A // 4256
@14 // 4257
M=D // 4258
@Int32.do_neg // 4259
D=A // 4260
@13 // 4261
M=D // 4262
@Number.do_neg.ret.0 // 4263
D=A // 4264
@CALL // 4265
0;JMP // 4266
(Number.do_neg.ret.0)
@SP // 4267
M=M-1 // 4268

////PushInstruction("constant 0")
@SP // 4269
AM=M+1 // 4270
A=A-1 // 4271
M=0 // 4272
@RETURN // 4273
0;JMP // 4274

////FunctionInstruction{functionName='Plane.color', numLocals=8, funcMapping={Plane.initialize=16, Plane.new=1}}
// function Plane.color with 8
(Plane.color)
@8 // 4275
D=A // 4276
@SP // 4277
AM=D+M // 4278
A=A-1 // 4279
M=0 // 4280
A=A-1 // 4281
M=0 // 4282
A=A-1 // 4283
M=0 // 4284
A=A-1 // 4285
M=0 // 4286
A=A-1 // 4287
M=0 // 4288
A=A-1 // 4289
M=0 // 4290
A=A-1 // 4291
M=0 // 4292
A=A-1 // 4293
M=0 // 4294

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 4295
A=M // 4296
D=M // 4297
@3 // 4298
M=D // 4299

////ConditionalGroup{push=PushInstruction("this 3"), ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE1}}
@THIS // 4300
A=M+1 // 4301
A=A+1 // 4302
A=A+1 // 4303
D=M // 4304
@Plane.color$IF_TRUE1 // 4305
D;JNE // 4306

////GotoInstruction{label='Plane.color$IF_FALSE1}
// goto Plane.color$IF_FALSE1
@Plane.color$IF_FALSE1 // 4307
0;JMP // 4308

////LabelInstruction{label='Plane.color$IF_TRUE1}
// label Plane.color$IF_TRUE1
(Plane.color$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 4309
A=M+1 // 4310
D=M // 4311
@SP // 4312
AM=M+1 // 4313
A=A-1 // 4314
M=D // 4315
// call Vec3.clone
@6 // 4316
D=A // 4317
@14 // 4318
M=D // 4319
@Vec3.clone // 4320
D=A // 4321
@13 // 4322
M=D // 4323
@Plane.color.ret.0 // 4324
D=A // 4325
@CALL // 4326
0;JMP // 4327
(Plane.color.ret.0)
@SP // 4328
AM=M-1 // 4329
D=M // 4330
@LCL // 4331
A=M // 4332
M=D // 4333

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("static 0")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4334
A=M // 4335
D=M // 4336
@SP // 4337
AM=M+1 // 4338
A=A-1 // 4339
M=D // 4340
@Plane.0 // 4341
D=M // 4342
@SP // 4343
AM=M+1 // 4344
A=A-1 // 4345
M=D // 4346
// call Vec3.do_cross
@7 // 4347
D=A // 4348
@14 // 4349
M=D // 4350
@Vec3.do_cross // 4351
D=A // 4352
@13 // 4353
M=D // 4354
@Plane.color.ret.1 // 4355
D=A // 4356
@CALL // 4357
0;JMP // 4358
(Plane.color.ret.1)
@SP // 4359
M=M-1 // 4360

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dist_sq}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 4361
A=M // 4362
D=M // 4363
@SP // 4364
AM=M+1 // 4365
A=A-1 // 4366
M=D // 4367
// call Vec3.dist_sq
@6 // 4368
D=A // 4369
@14 // 4370
M=D // 4371
@Vec3.dist_sq // 4372
D=A // 4373
@13 // 4374
M=D // 4375
@Plane.color.ret.2 // 4376
D=A // 4377
@CALL // 4378
0;JMP // 4379
(Plane.color.ret.2)
@SP // 4380
AM=M-1 // 4381
D=M // 4382
@LCL // 4383
A=M+1 // 4384
A=A+1 // 4385
M=D // 4386

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.is_zero}}, ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE2}}
@LCL // 4387
A=M+1 // 4388
A=A+1 // 4389
D=M // 4390
@SP // 4391
AM=M+1 // 4392
A=A-1 // 4393
M=D // 4394
// call Number.is_zero
@6 // 4395
D=A // 4396
@14 // 4397
M=D // 4398
@Number.is_zero // 4399
D=A // 4400
@13 // 4401
M=D // 4402
@Plane.color.ret.3 // 4403
D=A // 4404
@CALL // 4405
0;JMP // 4406
(Plane.color.ret.3)
@SP // 4407
AM=M-1 // 4408
D=M // 4409
@Plane.color$IF_TRUE2 // 4410
D;JNE // 4411

////GotoInstruction{label='Plane.color$IF_END2}
// goto Plane.color$IF_END2
@Plane.color$IF_END2 // 4412
0;JMP // 4413

////LabelInstruction{label='Plane.color$IF_TRUE2}
// label Plane.color$IF_TRUE2
(Plane.color$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4414
A=M // 4415
D=M // 4416
@SP // 4417
AM=M+1 // 4418
A=A-1 // 4419
M=D // 4420
// call Vec3.dispose
@6 // 4421
D=A // 4422
@14 // 4423
M=D // 4424
@Vec3.dispose // 4425
D=A // 4426
@13 // 4427
M=D // 4428
@Plane.color.ret.4 // 4429
D=A // 4430
@CALL // 4431
0;JMP // 4432
(Plane.color.ret.4)
@SP // 4433
M=M-1 // 4434

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 4435
A=M+1 // 4436
D=M // 4437
@SP // 4438
AM=M+1 // 4439
A=A-1 // 4440
M=D // 4441
// call Vec3.clone
@6 // 4442
D=A // 4443
@14 // 4444
M=D // 4445
@Vec3.clone // 4446
D=A // 4447
@13 // 4448
M=D // 4449
@Plane.color.ret.5 // 4450
D=A // 4451
@CALL // 4452
0;JMP // 4453
(Plane.color.ret.5)
@SP // 4454
AM=M-1 // 4455
D=M // 4456
@LCL // 4457
A=M // 4458
M=D // 4459

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("static 1")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4460
A=M // 4461
D=M // 4462
@SP // 4463
AM=M+1 // 4464
A=A-1 // 4465
M=D // 4466
@Plane.1 // 4467
D=M // 4468
@SP // 4469
AM=M+1 // 4470
A=A-1 // 4471
M=D // 4472
// call Vec3.do_cross
@7 // 4473
D=A // 4474
@14 // 4475
M=D // 4476
@Vec3.do_cross // 4477
D=A // 4478
@13 // 4479
M=D // 4480
@Plane.color.ret.6 // 4481
D=A // 4482
@CALL // 4483
0;JMP // 4484
(Plane.color.ret.6)
@SP // 4485
M=M-1 // 4486

////LabelInstruction{label='Plane.color$IF_END2}
// label Plane.color$IF_END2
(Plane.color$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 4487
A=M+1 // 4488
D=M // 4489
@SP // 4490
AM=M+1 // 4491
A=A-1 // 4492
M=D // 4493
// call Vec3.clone
@6 // 4494
D=A // 4495
@14 // 4496
M=D // 4497
@Vec3.clone // 4498
D=A // 4499
@13 // 4500
M=D // 4501
@Plane.color.ret.7 // 4502
D=A // 4503
@CALL // 4504
0;JMP // 4505
(Plane.color.ret.7)
@SP // 4506
AM=M-1 // 4507
D=M // 4508
@LCL // 4509
A=M+1 // 4510
M=D // 4511

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_cross}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4512
A=M+1 // 4513
D=M // 4514
@SP // 4515
AM=M+1 // 4516
A=A-1 // 4517
M=D // 4518
@LCL // 4519
A=M // 4520
D=M // 4521
@SP // 4522
AM=M+1 // 4523
A=A-1 // 4524
M=D // 4525
// call Vec3.do_cross
@7 // 4526
D=A // 4527
@14 // 4528
M=D // 4529
@Vec3.do_cross // 4530
D=A // 4531
@13 // 4532
M=D // 4533
@Plane.color.ret.8 // 4534
D=A // 4535
@CALL // 4536
0;JMP // 4537
(Plane.color.ret.8)
@SP // 4538
M=M-1 // 4539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 4540
A=M+1 // 4541
D=M // 4542
@SP // 4543
AM=M+1 // 4544
A=A-1 // 4545
M=D // 4546
@LCL // 4547
A=M // 4548
D=M // 4549
@SP // 4550
AM=M+1 // 4551
A=A-1 // 4552
M=D // 4553
// call Vec3.dot
@7 // 4554
D=A // 4555
@14 // 4556
M=D // 4557
@Vec3.dot // 4558
D=A // 4559
@13 // 4560
M=D // 4561
@Plane.color.ret.9 // 4562
D=A // 4563
@CALL // 4564
0;JMP // 4565
(Plane.color.ret.9)
@SP // 4566
AM=M-1 // 4567
D=M // 4568
@LCL // 4569
A=M+1 // 4570
A=A+1 // 4571
A=A+1 // 4572
M=D // 4573

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 3")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4574
A=M+1 // 4575
A=A+1 // 4576
A=A+1 // 4577
D=M // 4578
@SP // 4579
AM=M+1 // 4580
A=A-1 // 4581
M=D // 4582
@Plane.3 // 4583
D=M // 4584
@SP // 4585
AM=M+1 // 4586
A=A-1 // 4587
M=D // 4588
// call Number.do_mul
@7 // 4589
D=A // 4590
@14 // 4591
M=D // 4592
@Number.do_mul // 4593
D=A // 4594
@13 // 4595
M=D // 4596
@Plane.color.ret.10 // 4597
D=A // 4598
@CALL // 4599
0;JMP // 4600
(Plane.color.ret.10)
@SP // 4601
M=M-1 // 4602

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4603
A=M+1 // 4604
A=A+1 // 4605
A=A+1 // 4606
D=M // 4607
@SP // 4608
AM=M+1 // 4609
A=A-1 // 4610
M=D // 4611
@Plane.2 // 4612
D=M // 4613
@SP // 4614
AM=M+1 // 4615
A=A-1 // 4616
M=D // 4617
// call Number.do_add
@7 // 4618
D=A // 4619
@14 // 4620
M=D // 4621
@Number.do_add // 4622
D=A // 4623
@13 // 4624
M=D // 4625
@Plane.color.ret.11 // 4626
D=A // 4627
@CALL // 4628
0;JMP // 4629
(Plane.color.ret.11)
@SP // 4630
M=M-1 // 4631

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.to_int32}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 4632
A=M+1 // 4633
A=A+1 // 4634
A=A+1 // 4635
D=M // 4636
@SP // 4637
AM=M+1 // 4638
A=A-1 // 4639
M=D // 4640
// call Number.to_int32
@6 // 4641
D=A // 4642
@14 // 4643
M=D // 4644
@Number.to_int32 // 4645
D=A // 4646
@13 // 4647
M=D // 4648
@Plane.color.ret.12 // 4649
D=A // 4650
@CALL // 4651
0;JMP // 4652
(Plane.color.ret.12)
@LCL // 4653
D=M // 4654
@4 // 4655
A=D+A // 4656
D=A // 4657
@R13 // 4658
M=D // 4659
@SP // 4660
AM=M-1 // 4661
D=M // 4662
@R13 // 4663
A=M // 4664
M=D // 4665

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("local 1")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 4666
A=M+1 // 4667
D=M // 4668
@SP // 4669
AM=M+1 // 4670
A=A-1 // 4671
M=D // 4672
@LCL // 4673
A=M+1 // 4674
D=M // 4675
@SP // 4676
AM=M+1 // 4677
A=A-1 // 4678
M=D // 4679
// call Vec3.dot
@7 // 4680
D=A // 4681
@14 // 4682
M=D // 4683
@Vec3.dot // 4684
D=A // 4685
@13 // 4686
M=D // 4687
@Plane.color.ret.13 // 4688
D=A // 4689
@CALL // 4690
0;JMP // 4691
(Plane.color.ret.13)
@SP // 4692
AM=M-1 // 4693
D=M // 4694
@LCL // 4695
A=M+1 // 4696
A=A+1 // 4697
A=A+1 // 4698
M=D // 4699

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 3")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4700
A=M+1 // 4701
A=A+1 // 4702
A=A+1 // 4703
D=M // 4704
@SP // 4705
AM=M+1 // 4706
A=A-1 // 4707
M=D // 4708
@Plane.3 // 4709
D=M // 4710
@SP // 4711
AM=M+1 // 4712
A=A-1 // 4713
M=D // 4714
// call Number.do_mul
@7 // 4715
D=A // 4716
@14 // 4717
M=D // 4718
@Number.do_mul // 4719
D=A // 4720
@13 // 4721
M=D // 4722
@Plane.color.ret.14 // 4723
D=A // 4724
@CALL // 4725
0;JMP // 4726
(Plane.color.ret.14)
@SP // 4727
M=M-1 // 4728

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("static 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4729
A=M+1 // 4730
A=A+1 // 4731
A=A+1 // 4732
D=M // 4733
@SP // 4734
AM=M+1 // 4735
A=A-1 // 4736
M=D // 4737
@Plane.2 // 4738
D=M // 4739
@SP // 4740
AM=M+1 // 4741
A=A-1 // 4742
M=D // 4743
// call Number.do_add
@7 // 4744
D=A // 4745
@14 // 4746
M=D // 4747
@Number.do_add // 4748
D=A // 4749
@13 // 4750
M=D // 4751
@Plane.color.ret.15 // 4752
D=A // 4753
@CALL // 4754
0;JMP // 4755
(Plane.color.ret.15)
@SP // 4756
M=M-1 // 4757

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.to_int32}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 4758
A=M+1 // 4759
A=A+1 // 4760
A=A+1 // 4761
D=M // 4762
@SP // 4763
AM=M+1 // 4764
A=A-1 // 4765
M=D // 4766
// call Number.to_int32
@6 // 4767
D=A // 4768
@14 // 4769
M=D // 4770
@Number.to_int32 // 4771
D=A // 4772
@13 // 4773
M=D // 4774
@Plane.color.ret.16 // 4775
D=A // 4776
@CALL // 4777
0;JMP // 4778
(Plane.color.ret.16)
@LCL // 4779
D=M // 4780
@5 // 4781
A=D+A // 4782
D=A // 4783
@R13 // 4784
M=D // 4785
@SP // 4786
AM=M-1 // 4787
D=M // 4788
@R13 // 4789
A=M // 4790
M=D // 4791

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 4792
D=M // 4793
@4 // 4794
A=D+A // 4795
D=M // 4796
@SP // 4797
AM=M+1 // 4798
A=A-1 // 4799
M=D // 4800
// call Int32.clone
@6 // 4801
D=A // 4802
@14 // 4803
M=D // 4804
@Int32.clone // 4805
D=A // 4806
@13 // 4807
M=D // 4808
@Plane.color.ret.17 // 4809
D=A // 4810
@CALL // 4811
0;JMP // 4812
(Plane.color.ret.17)
@LCL // 4813
D=M // 4814
@6 // 4815
A=D+A // 4816
D=A // 4817
@R13 // 4818
M=D // 4819
@SP // 4820
AM=M-1 // 4821
D=M // 4822
@R13 // 4823
A=M // 4824
M=D // 4825

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 5")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4826
D=M // 4827
@6 // 4828
A=D+A // 4829
D=M // 4830
@SP // 4831
AM=M+1 // 4832
A=A-1 // 4833
M=D // 4834
@LCL // 4835
D=M // 4836
@5 // 4837
A=D+A // 4838
D=M // 4839
@SP // 4840
AM=M+1 // 4841
A=A-1 // 4842
M=D // 4843
// call Int32.do_add
@7 // 4844
D=A // 4845
@14 // 4846
M=D // 4847
@Int32.do_add // 4848
D=A // 4849
@13 // 4850
M=D // 4851
@Plane.color.ret.18 // 4852
D=A // 4853
@CALL // 4854
0;JMP // 4855
(Plane.color.ret.18)
@SP // 4856
M=M-1 // 4857

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.is_even}}, ifGoto=IfGotoInstruction{label='Plane.color$IF_TRUE3}}
@LCL // 4858
D=M // 4859
@6 // 4860
A=D+A // 4861
D=M // 4862
@SP // 4863
AM=M+1 // 4864
A=A-1 // 4865
M=D // 4866
// call Int32.is_even
@6 // 4867
D=A // 4868
@14 // 4869
M=D // 4870
@Int32.is_even // 4871
D=A // 4872
@13 // 4873
M=D // 4874
@Plane.color.ret.19 // 4875
D=A // 4876
@CALL // 4877
0;JMP // 4878
(Plane.color.ret.19)
@SP // 4879
AM=M-1 // 4880
D=M // 4881
@Plane.color$IF_TRUE3 // 4882
D;JNE // 4883

////GotoInstruction{label='Plane.color$IF_FALSE3}
// goto Plane.color$IF_FALSE3
@Plane.color$IF_FALSE3 // 4884
0;JMP // 4885

////LabelInstruction{label='Plane.color$IF_TRUE3}
// label Plane.color$IF_TRUE3
(Plane.color$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 4")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@Plane.4 // 4886
D=M // 4887
@SP // 4888
AM=M+1 // 4889
A=A-1 // 4890
M=D // 4891
// call Number.clone
@6 // 4892
D=A // 4893
@14 // 4894
M=D // 4895
@Number.clone // 4896
D=A // 4897
@13 // 4898
M=D // 4899
@Plane.color.ret.20 // 4900
D=A // 4901
@CALL // 4902
0;JMP // 4903
(Plane.color.ret.20)
@LCL // 4904
D=M // 4905
@7 // 4906
A=D+A // 4907
D=A // 4908
@R13 // 4909
M=D // 4910
@SP // 4911
AM=M-1 // 4912
D=M // 4913
@R13 // 4914
A=M // 4915
M=D // 4916

////GotoInstruction{label='Plane.color$IF_END3}
// goto Plane.color$IF_END3
@Plane.color$IF_END3 // 4917
0;JMP // 4918

////LabelInstruction{label='Plane.color$IF_FALSE3}
// label Plane.color$IF_FALSE3
(Plane.color$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 5")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@Plane.5 // 4919
D=M // 4920
@SP // 4921
AM=M+1 // 4922
A=A-1 // 4923
M=D // 4924
// call Number.clone
@6 // 4925
D=A // 4926
@14 // 4927
M=D // 4928
@Number.clone // 4929
D=A // 4930
@13 // 4931
M=D // 4932
@Plane.color.ret.21 // 4933
D=A // 4934
@CALL // 4935
0;JMP // 4936
(Plane.color.ret.21)
@LCL // 4937
D=M // 4938
@7 // 4939
A=D+A // 4940
D=A // 4941
@R13 // 4942
M=D // 4943
@SP // 4944
AM=M-1 // 4945
D=M // 4946
@R13 // 4947
A=M // 4948
M=D // 4949

////LabelInstruction{label='Plane.color$IF_END3}
// label Plane.color$IF_END3
(Plane.color$IF_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4950
A=M // 4951
D=M // 4952
@SP // 4953
AM=M+1 // 4954
A=A-1 // 4955
M=D // 4956
// call Vec3.dispose
@6 // 4957
D=A // 4958
@14 // 4959
M=D // 4960
@Vec3.dispose // 4961
D=A // 4962
@13 // 4963
M=D // 4964
@Plane.color.ret.22 // 4965
D=A // 4966
@CALL // 4967
0;JMP // 4968
(Plane.color.ret.22)
@SP // 4969
M=M-1 // 4970

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4971
A=M+1 // 4972
D=M // 4973
@SP // 4974
AM=M+1 // 4975
A=A-1 // 4976
M=D // 4977
// call Vec3.dispose
@6 // 4978
D=A // 4979
@14 // 4980
M=D // 4981
@Vec3.dispose // 4982
D=A // 4983
@13 // 4984
M=D // 4985
@Plane.color.ret.23 // 4986
D=A // 4987
@CALL // 4988
0;JMP // 4989
(Plane.color.ret.23)
@SP // 4990
M=M-1 // 4991

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 4992
A=M+1 // 4993
A=A+1 // 4994
D=M // 4995
@SP // 4996
AM=M+1 // 4997
A=A-1 // 4998
M=D // 4999
// call Number.dispose
@6 // 5000
D=A // 5001
@14 // 5002
M=D // 5003
@Number.dispose // 5004
D=A // 5005
@13 // 5006
M=D // 5007
@Plane.color.ret.24 // 5008
D=A // 5009
@CALL // 5010
0;JMP // 5011
(Plane.color.ret.24)
@SP // 5012
M=M-1 // 5013

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5014
D=M // 5015
@4 // 5016
A=D+A // 5017
D=M // 5018
@SP // 5019
AM=M+1 // 5020
A=A-1 // 5021
M=D // 5022
// call Int32.dispose
@6 // 5023
D=A // 5024
@14 // 5025
M=D // 5026
@Int32.dispose // 5027
D=A // 5028
@13 // 5029
M=D // 5030
@Plane.color.ret.25 // 5031
D=A // 5032
@CALL // 5033
0;JMP // 5034
(Plane.color.ret.25)
@SP // 5035
M=M-1 // 5036

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5037
D=M // 5038
@5 // 5039
A=D+A // 5040
D=M // 5041
@SP // 5042
AM=M+1 // 5043
A=A-1 // 5044
M=D // 5045
// call Int32.dispose
@6 // 5046
D=A // 5047
@14 // 5048
M=D // 5049
@Int32.dispose // 5050
D=A // 5051
@13 // 5052
M=D // 5053
@Plane.color.ret.26 // 5054
D=A // 5055
@CALL // 5056
0;JMP // 5057
(Plane.color.ret.26)
@SP // 5058
M=M-1 // 5059

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 5060
D=M // 5061
@6 // 5062
A=D+A // 5063
D=M // 5064
@SP // 5065
AM=M+1 // 5066
A=A-1 // 5067
M=D // 5068
// call Int32.dispose
@6 // 5069
D=A // 5070
@14 // 5071
M=D // 5072
@Int32.dispose // 5073
D=A // 5074
@13 // 5075
M=D // 5076
@Plane.color.ret.27 // 5077
D=A // 5078
@CALL // 5079
0;JMP // 5080
(Plane.color.ret.27)
@SP // 5081
M=M-1 // 5082

////PushInstruction("local 7")
@LCL // 5083
D=M // 5084
@7 // 5085
A=D+A // 5086
D=M // 5087
@SP // 5088
AM=M+1 // 5089
A=A-1 // 5090
M=D // 5091
@RETURN // 5092
0;JMP // 5093

////GotoInstruction{label='Plane.color$IF_END1}
// goto Plane.color$IF_END1
@Plane.color$IF_END1 // 5094
0;JMP // 5095

////LabelInstruction{label='Plane.color$IF_FALSE1}
// label Plane.color$IF_FALSE1
(Plane.color$IF_FALSE1)

////CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
@THIS // 5096
A=M+1 // 5097
A=A+1 // 5098
D=M // 5099
@SP // 5100
AM=M+1 // 5101
A=A-1 // 5102
M=D // 5103
// call Number.clone
@6 // 5104
D=A // 5105
@14 // 5106
M=D // 5107
@Number.clone // 5108
D=A // 5109
@13 // 5110
M=D // 5111
@Plane.color.ret.28 // 5112
D=A // 5113
@CALL // 5114
0;JMP // 5115
(Plane.color.ret.28)
@RETURN // 5116
0;JMP // 5117

////LabelInstruction{label='Plane.color$IF_END1}
// label Plane.color$IF_END1
(Plane.color$IF_END1)

////FunctionInstruction{functionName='Output.init', numLocals=1, funcMapping={Output.println=0, Output.getMap=0, Output.create=1}}
// function Output.init with 1
(Output.init)
@SP // 5118
AM=M+1 // 5119
A=A-1 // 5120
M=0 // 5121

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 127")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=static 0}
//}

@127 // 5122
D=A // 5123
@SP // 5124
AM=M+1 // 5125
A=A-1 // 5126
M=D // 5127
// call Memory.alloc
@6 // 5128
D=A // 5129
@14 // 5130
M=D // 5131
@Memory.alloc // 5132
D=A // 5133
@13 // 5134
M=D // 5135
@Output.init.ret.0 // 5136
D=A // 5137
@CALL // 5138
0;JMP // 5139
(Output.init.ret.0)
@SP // 5140
AM=M-1 // 5141
D=M // 5142
@Output.0 // 5143
M=D // 5144

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@12 // 5145
D=A // 5146
@SP // 5147
M=D+M // 5148
@63 // 5149
D=A // 5150
@SP // 5151
A=M-1 // 5152
M=0 // 5153
A=A-1 // 5154
M=0 // 5155
A=A-1 // 5156
M=D // 5157
A=A-1 // 5158
M=D // 5159
A=A-1 // 5160
M=D // 5161
A=A-1 // 5162
M=D // 5163
A=A-1 // 5164
M=D // 5165
A=A-1 // 5166
M=D // 5167
A=A-1 // 5168
M=D // 5169
A=A-1 // 5170
M=D // 5171
A=A-1 // 5172
M=D // 5173
A=A-1 // 5174
M=0 // 5175
// call Output.create
@17 // 5176
D=A // 5177
@14 // 5178
M=D // 5179
@Output.create // 5180
D=A // 5181
@13 // 5182
M=D // 5183
@Output.init.ret.1 // 5184
D=A // 5185
@CALL // 5186
0;JMP // 5187
(Output.init.ret.1)
@SP // 5188
M=M-1 // 5189

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 32"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@12 // 5190
D=A // 5191
@SP // 5192
M=D+M // 5193
@32 // 5194
D=A // 5195
@SP // 5196
A=M-1 // 5197
M=0 // 5198
A=A-1 // 5199
M=0 // 5200
A=A-1 // 5201
M=0 // 5202
A=A-1 // 5203
M=0 // 5204
A=A-1 // 5205
M=0 // 5206
A=A-1 // 5207
M=0 // 5208
A=A-1 // 5209
M=0 // 5210
A=A-1 // 5211
M=0 // 5212
A=A-1 // 5213
M=0 // 5214
A=A-1 // 5215
M=0 // 5216
A=A-1 // 5217
M=0 // 5218
A=A-1 // 5219
M=D // 5220
A=A-1 // 5221
// call Output.create
@17 // 5222
D=A // 5223
@14 // 5224
M=D // 5225
@Output.create // 5226
D=A // 5227
@13 // 5228
M=D // 5229
@Output.init.ret.2 // 5230
D=A // 5231
@CALL // 5232
0;JMP // 5233
(Output.init.ret.2)
@SP // 5234
M=M-1 // 5235

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 33"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@33 // 5236
D=A // 5237
@SP // 5238
AM=M+1 // 5239
A=A-1 // 5240
M=D // 5241
@12 // 5242
D=A // 5243
@SP // 5244
AM=M+1 // 5245
A=A-1 // 5246
M=D // 5247
@30 // 5248
D=A // 5249
@SP // 5250
AM=M+1 // 5251
A=A-1 // 5252
M=D // 5253
@30 // 5254
D=A // 5255
@SP // 5256
AM=M+1 // 5257
A=A-1 // 5258
M=D // 5259
@30 // 5260
D=A // 5261
@SP // 5262
AM=M+1 // 5263
A=A-1 // 5264
M=D // 5265
@12 // 5266
D=A // 5267
@SP // 5268
AM=M+1 // 5269
A=A-1 // 5270
M=D // 5271
@12 // 5272
D=A // 5273
@SP // 5274
AM=M+1 // 5275
A=A-1 // 5276
M=D // 5277
@SP // 5278
AM=M+1 // 5279
A=A-1 // 5280
M=0 // 5281
@4 // 5282
D=A // 5283
@SP // 5284
M=D+M // 5285
@12 // 5286
D=A // 5287
@SP // 5288
A=M-1 // 5289
M=0 // 5290
A=A-1 // 5291
M=0 // 5292
A=A-1 // 5293
M=D // 5294
A=A-1 // 5295
M=D // 5296
A=A-1 // 5297
// call Output.create
@17 // 5298
D=A // 5299
@14 // 5300
M=D // 5301
@Output.create // 5302
D=A // 5303
@13 // 5304
M=D // 5305
@Output.init.ret.3 // 5306
D=A // 5307
@CALL // 5308
0;JMP // 5309
(Output.init.ret.3)
@SP // 5310
M=M-1 // 5311

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 34"), PushInstruction("constant 54"), PushInstruction("constant 54"), PushInstruction("constant 20"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@34 // 5312
D=A // 5313
@SP // 5314
AM=M+1 // 5315
A=A-1 // 5316
M=D // 5317
@54 // 5318
D=A // 5319
@SP // 5320
AM=M+1 // 5321
A=A-1 // 5322
M=D // 5323
@54 // 5324
D=A // 5325
@SP // 5326
AM=M+1 // 5327
A=A-1 // 5328
M=D // 5329
@20 // 5330
D=A // 5331
@SP // 5332
AM=M+1 // 5333
A=A-1 // 5334
M=D // 5335
@SP // 5336
AM=M+1 // 5337
A=A-1 // 5338
M=0 // 5339
@SP // 5340
AM=M+1 // 5341
A=A-1 // 5342
M=0 // 5343
@SP // 5344
AM=M+1 // 5345
A=A-1 // 5346
M=0 // 5347
@SP // 5348
AM=M+1 // 5349
A=A-1 // 5350
M=0 // 5351
@SP // 5352
AM=M+1 // 5353
A=A-1 // 5354
M=0 // 5355
@SP // 5356
AM=M+1 // 5357
A=A-1 // 5358
M=0 // 5359
@SP // 5360
AM=M+1 // 5361
A=A-1 // 5362
M=0 // 5363
@SP // 5364
AM=M+1 // 5365
A=A-1 // 5366
M=0 // 5367
// call Output.create
@17 // 5368
D=A // 5369
@14 // 5370
M=D // 5371
@Output.create // 5372
D=A // 5373
@13 // 5374
M=D // 5375
@Output.init.ret.4 // 5376
D=A // 5377
@CALL // 5378
0;JMP // 5379
(Output.init.ret.4)
@SP // 5380
M=M-1 // 5381

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 35"), PushInstruction("constant 0"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 5382
D=A // 5383
@SP // 5384
M=D+M // 5385
@35 // 5386
D=A // 5387
@SP // 5388
A=M-1 // 5389
M=0 // 5390
A=A-1 // 5391
M=D // 5392
A=A-1 // 5393
@18 // 5394
D=A // 5395
@SP // 5396
AM=M+1 // 5397
A=A-1 // 5398
M=D // 5399
@18 // 5400
D=A // 5401
@SP // 5402
AM=M+1 // 5403
A=A-1 // 5404
M=D // 5405
@63 // 5406
D=A // 5407
@SP // 5408
AM=M+1 // 5409
A=A-1 // 5410
M=D // 5411
@18 // 5412
D=A // 5413
@SP // 5414
AM=M+1 // 5415
A=A-1 // 5416
M=D // 5417
@18 // 5418
D=A // 5419
@SP // 5420
AM=M+1 // 5421
A=A-1 // 5422
M=D // 5423
@63 // 5424
D=A // 5425
@SP // 5426
AM=M+1 // 5427
A=A-1 // 5428
M=D // 5429
@18 // 5430
D=A // 5431
@SP // 5432
AM=M+1 // 5433
A=A-1 // 5434
M=D // 5435
@18 // 5436
D=A // 5437
@SP // 5438
AM=M+1 // 5439
A=A-1 // 5440
M=D // 5441
@SP // 5442
AM=M+1 // 5443
A=A-1 // 5444
M=0 // 5445
@SP // 5446
AM=M+1 // 5447
A=A-1 // 5448
M=0 // 5449
// call Output.create
@17 // 5450
D=A // 5451
@14 // 5452
M=D // 5453
@Output.create // 5454
D=A // 5455
@13 // 5456
M=D // 5457
@Output.init.ret.5 // 5458
D=A // 5459
@CALL // 5460
0;JMP // 5461
(Output.init.ret.5)
@SP // 5462
M=M-1 // 5463

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 36"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 30"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@36 // 5464
D=A // 5465
@SP // 5466
AM=M+1 // 5467
A=A-1 // 5468
M=D // 5469
@12 // 5470
D=A // 5471
@SP // 5472
AM=M+1 // 5473
A=A-1 // 5474
M=D // 5475
@30 // 5476
D=A // 5477
@SP // 5478
AM=M+1 // 5479
A=A-1 // 5480
M=D // 5481
@51 // 5482
D=A // 5483
@SP // 5484
AM=M+1 // 5485
A=A-1 // 5486
M=D // 5487
@3 // 5488
D=A // 5489
@SP // 5490
AM=M+1 // 5491
A=A-1 // 5492
M=D // 5493
@30 // 5494
D=A // 5495
@SP // 5496
AM=M+1 // 5497
A=A-1 // 5498
M=D // 5499
@48 // 5500
D=A // 5501
@SP // 5502
AM=M+1 // 5503
A=A-1 // 5504
M=D // 5505
@51 // 5506
D=A // 5507
@SP // 5508
AM=M+1 // 5509
A=A-1 // 5510
M=D // 5511
@30 // 5512
D=A // 5513
@SP // 5514
AM=M+1 // 5515
A=A-1 // 5516
M=D // 5517
@12 // 5518
D=A // 5519
@SP // 5520
AM=M+1 // 5521
A=A-1 // 5522
M=D // 5523
@12 // 5524
D=A // 5525
@SP // 5526
AM=M+1 // 5527
A=A-1 // 5528
M=D // 5529
@SP // 5530
AM=M+1 // 5531
A=A-1 // 5532
M=0 // 5533
// call Output.create
@17 // 5534
D=A // 5535
@14 // 5536
M=D // 5537
@Output.create // 5538
D=A // 5539
@13 // 5540
M=D // 5541
@Output.init.ret.6 // 5542
D=A // 5543
@CALL // 5544
0;JMP // 5545
(Output.init.ret.6)
@SP // 5546
M=M-1 // 5547

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 37"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 51"), PushInstruction("constant 49"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 5548
D=A // 5549
@SP // 5550
M=D+M // 5551
@37 // 5552
D=A // 5553
@SP // 5554
A=M-1 // 5555
M=0 // 5556
A=A-1 // 5557
M=0 // 5558
A=A-1 // 5559
M=D // 5560
A=A-1 // 5561
@35 // 5562
D=A // 5563
@SP // 5564
AM=M+1 // 5565
A=A-1 // 5566
M=D // 5567
@51 // 5568
D=A // 5569
@SP // 5570
AM=M+1 // 5571
A=A-1 // 5572
M=D // 5573
@24 // 5574
D=A // 5575
@SP // 5576
AM=M+1 // 5577
A=A-1 // 5578
M=D // 5579
@12 // 5580
D=A // 5581
@SP // 5582
AM=M+1 // 5583
A=A-1 // 5584
M=D // 5585
@6 // 5586
D=A // 5587
@SP // 5588
AM=M+1 // 5589
A=A-1 // 5590
M=D // 5591
@51 // 5592
D=A // 5593
@SP // 5594
AM=M+1 // 5595
A=A-1 // 5596
M=D // 5597
@49 // 5598
D=A // 5599
@SP // 5600
AM=M+1 // 5601
A=A-1 // 5602
M=D // 5603
@SP // 5604
AM=M+1 // 5605
A=A-1 // 5606
M=0 // 5607
@SP // 5608
AM=M+1 // 5609
A=A-1 // 5610
M=0 // 5611
// call Output.create
@17 // 5612
D=A // 5613
@14 // 5614
M=D // 5615
@Output.create // 5616
D=A // 5617
@13 // 5618
M=D // 5619
@Output.init.ret.7 // 5620
D=A // 5621
@CALL // 5622
0;JMP // 5623
(Output.init.ret.7)
@SP // 5624
M=M-1 // 5625

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 38"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 54"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@38 // 5626
D=A // 5627
@SP // 5628
AM=M+1 // 5629
A=A-1 // 5630
M=D // 5631
@12 // 5632
D=A // 5633
@SP // 5634
AM=M+1 // 5635
A=A-1 // 5636
M=D // 5637
@30 // 5638
D=A // 5639
@SP // 5640
AM=M+1 // 5641
A=A-1 // 5642
M=D // 5643
@30 // 5644
D=A // 5645
@SP // 5646
AM=M+1 // 5647
A=A-1 // 5648
M=D // 5649
@12 // 5650
D=A // 5651
@SP // 5652
AM=M+1 // 5653
A=A-1 // 5654
M=D // 5655
@54 // 5656
D=A // 5657
@SP // 5658
AM=M+1 // 5659
A=A-1 // 5660
M=D // 5661
@27 // 5662
D=A // 5663
@SP // 5664
AM=M+1 // 5665
A=A-1 // 5666
M=D // 5667
@27 // 5668
D=A // 5669
@SP // 5670
AM=M+1 // 5671
A=A-1 // 5672
M=D // 5673
@27 // 5674
D=A // 5675
@SP // 5676
AM=M+1 // 5677
A=A-1 // 5678
M=D // 5679
@54 // 5680
D=A // 5681
@SP // 5682
AM=M+1 // 5683
A=A-1 // 5684
M=D // 5685
@SP // 5686
AM=M+1 // 5687
A=A-1 // 5688
M=0 // 5689
@SP // 5690
AM=M+1 // 5691
A=A-1 // 5692
M=0 // 5693
// call Output.create
@17 // 5694
D=A // 5695
@14 // 5696
M=D // 5697
@Output.create // 5698
D=A // 5699
@13 // 5700
M=D // 5701
@Output.init.ret.8 // 5702
D=A // 5703
@CALL // 5704
0;JMP // 5705
(Output.init.ret.8)
@SP // 5706
M=M-1 // 5707

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 39"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@39 // 5708
D=A // 5709
@SP // 5710
AM=M+1 // 5711
A=A-1 // 5712
M=D // 5713
@12 // 5714
D=A // 5715
@SP // 5716
AM=M+1 // 5717
A=A-1 // 5718
M=D // 5719
@12 // 5720
D=A // 5721
@SP // 5722
AM=M+1 // 5723
A=A-1 // 5724
M=D // 5725
@6 // 5726
D=A // 5727
@SP // 5728
AM=M+1 // 5729
A=A-1 // 5730
M=D // 5731
@SP // 5732
AM=M+1 // 5733
A=A-1 // 5734
M=0 // 5735
@SP // 5736
AM=M+1 // 5737
A=A-1 // 5738
M=0 // 5739
@SP // 5740
AM=M+1 // 5741
A=A-1 // 5742
M=0 // 5743
@SP // 5744
AM=M+1 // 5745
A=A-1 // 5746
M=0 // 5747
@SP // 5748
AM=M+1 // 5749
A=A-1 // 5750
M=0 // 5751
@SP // 5752
AM=M+1 // 5753
A=A-1 // 5754
M=0 // 5755
@SP // 5756
AM=M+1 // 5757
A=A-1 // 5758
M=0 // 5759
@SP // 5760
AM=M+1 // 5761
A=A-1 // 5762
M=0 // 5763
// call Output.create
@17 // 5764
D=A // 5765
@14 // 5766
M=D // 5767
@Output.create // 5768
D=A // 5769
@13 // 5770
M=D // 5771
@Output.init.ret.9 // 5772
D=A // 5773
@CALL // 5774
0;JMP // 5775
(Output.init.ret.9)
@SP // 5776
M=M-1 // 5777

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 40"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@40 // 5778
D=A // 5779
@SP // 5780
AM=M+1 // 5781
A=A-1 // 5782
M=D // 5783
@24 // 5784
D=A // 5785
@SP // 5786
AM=M+1 // 5787
A=A-1 // 5788
M=D // 5789
@12 // 5790
D=A // 5791
@SP // 5792
AM=M+1 // 5793
A=A-1 // 5794
M=D // 5795
@6 // 5796
D=A // 5797
@SP // 5798
AM=M+1 // 5799
A=A-1 // 5800
M=D // 5801
@6 // 5802
D=A // 5803
@SP // 5804
AM=M+1 // 5805
A=A-1 // 5806
M=D // 5807
@6 // 5808
D=A // 5809
@SP // 5810
AM=M+1 // 5811
A=A-1 // 5812
M=D // 5813
@6 // 5814
D=A // 5815
@SP // 5816
AM=M+1 // 5817
A=A-1 // 5818
M=D // 5819
@6 // 5820
D=A // 5821
@SP // 5822
AM=M+1 // 5823
A=A-1 // 5824
M=D // 5825
@12 // 5826
D=A // 5827
@SP // 5828
AM=M+1 // 5829
A=A-1 // 5830
M=D // 5831
@24 // 5832
D=A // 5833
@SP // 5834
AM=M+1 // 5835
A=A-1 // 5836
M=D // 5837
@SP // 5838
AM=M+1 // 5839
A=A-1 // 5840
M=0 // 5841
@SP // 5842
AM=M+1 // 5843
A=A-1 // 5844
M=0 // 5845
// call Output.create
@17 // 5846
D=A // 5847
@14 // 5848
M=D // 5849
@Output.create // 5850
D=A // 5851
@13 // 5852
M=D // 5853
@Output.init.ret.10 // 5854
D=A // 5855
@CALL // 5856
0;JMP // 5857
(Output.init.ret.10)
@SP // 5858
M=M-1 // 5859

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 41"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@41 // 5860
D=A // 5861
@SP // 5862
AM=M+1 // 5863
A=A-1 // 5864
M=D // 5865
@6 // 5866
D=A // 5867
@SP // 5868
AM=M+1 // 5869
A=A-1 // 5870
M=D // 5871
@12 // 5872
D=A // 5873
@SP // 5874
AM=M+1 // 5875
A=A-1 // 5876
M=D // 5877
@24 // 5878
D=A // 5879
@SP // 5880
AM=M+1 // 5881
A=A-1 // 5882
M=D // 5883
@24 // 5884
D=A // 5885
@SP // 5886
AM=M+1 // 5887
A=A-1 // 5888
M=D // 5889
@24 // 5890
D=A // 5891
@SP // 5892
AM=M+1 // 5893
A=A-1 // 5894
M=D // 5895
@24 // 5896
D=A // 5897
@SP // 5898
AM=M+1 // 5899
A=A-1 // 5900
M=D // 5901
@24 // 5902
D=A // 5903
@SP // 5904
AM=M+1 // 5905
A=A-1 // 5906
M=D // 5907
@12 // 5908
D=A // 5909
@SP // 5910
AM=M+1 // 5911
A=A-1 // 5912
M=D // 5913
@6 // 5914
D=A // 5915
@SP // 5916
AM=M+1 // 5917
A=A-1 // 5918
M=D // 5919
@SP // 5920
AM=M+1 // 5921
A=A-1 // 5922
M=0 // 5923
@SP // 5924
AM=M+1 // 5925
A=A-1 // 5926
M=0 // 5927
// call Output.create
@17 // 5928
D=A // 5929
@14 // 5930
M=D // 5931
@Output.create // 5932
D=A // 5933
@13 // 5934
M=D // 5935
@Output.init.ret.11 // 5936
D=A // 5937
@CALL // 5938
0;JMP // 5939
(Output.init.ret.11)
@SP // 5940
M=M-1 // 5941

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 42"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 63"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 5942
D=A // 5943
@SP // 5944
M=D+M // 5945
@42 // 5946
D=A // 5947
@SP // 5948
A=M-1 // 5949
M=0 // 5950
A=A-1 // 5951
M=0 // 5952
A=A-1 // 5953
M=0 // 5954
A=A-1 // 5955
M=D // 5956
A=A-1 // 5957
@51 // 5958
D=A // 5959
@SP // 5960
AM=M+1 // 5961
A=A-1 // 5962
M=D // 5963
@30 // 5964
D=A // 5965
@SP // 5966
AM=M+1 // 5967
A=A-1 // 5968
M=D // 5969
@63 // 5970
D=A // 5971
@SP // 5972
AM=M+1 // 5973
A=A-1 // 5974
M=D // 5975
@30 // 5976
D=A // 5977
@SP // 5978
AM=M+1 // 5979
A=A-1 // 5980
M=D // 5981
@51 // 5982
D=A // 5983
@SP // 5984
AM=M+1 // 5985
A=A-1 // 5986
M=D // 5987
@SP // 5988
AM=M+1 // 5989
A=A-1 // 5990
M=0 // 5991
@SP // 5992
AM=M+1 // 5993
A=A-1 // 5994
M=0 // 5995
@SP // 5996
AM=M+1 // 5997
A=A-1 // 5998
M=0 // 5999
// call Output.create
@17 // 6000
D=A // 6001
@14 // 6002
M=D // 6003
@Output.create // 6004
D=A // 6005
@13 // 6006
M=D // 6007
@Output.init.ret.12 // 6008
D=A // 6009
@CALL // 6010
0;JMP // 6011
(Output.init.ret.12)
@SP // 6012
M=M-1 // 6013

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 43"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 63"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 6014
D=A // 6015
@SP // 6016
M=D+M // 6017
@43 // 6018
D=A // 6019
@SP // 6020
A=M-1 // 6021
M=0 // 6022
A=A-1 // 6023
M=0 // 6024
A=A-1 // 6025
M=0 // 6026
A=A-1 // 6027
M=D // 6028
A=A-1 // 6029
@12 // 6030
D=A // 6031
@SP // 6032
AM=M+1 // 6033
A=A-1 // 6034
M=D // 6035
@12 // 6036
D=A // 6037
@SP // 6038
AM=M+1 // 6039
A=A-1 // 6040
M=D // 6041
@63 // 6042
D=A // 6043
@SP // 6044
AM=M+1 // 6045
A=A-1 // 6046
M=D // 6047
@12 // 6048
D=A // 6049
@SP // 6050
AM=M+1 // 6051
A=A-1 // 6052
M=D // 6053
@12 // 6054
D=A // 6055
@SP // 6056
AM=M+1 // 6057
A=A-1 // 6058
M=D // 6059
@SP // 6060
AM=M+1 // 6061
A=A-1 // 6062
M=0 // 6063
@SP // 6064
AM=M+1 // 6065
A=A-1 // 6066
M=0 // 6067
@SP // 6068
AM=M+1 // 6069
A=A-1 // 6070
M=0 // 6071
// call Output.create
@17 // 6072
D=A // 6073
@14 // 6074
M=D // 6075
@Output.create // 6076
D=A // 6077
@13 // 6078
M=D // 6079
@Output.init.ret.13 // 6080
D=A // 6081
@CALL // 6082
0;JMP // 6083
(Output.init.ret.13)
@SP // 6084
M=M-1 // 6085

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 44"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@8 // 6086
D=A // 6087
@SP // 6088
M=D+M // 6089
@44 // 6090
D=A // 6091
@SP // 6092
A=M-1 // 6093
M=0 // 6094
A=A-1 // 6095
M=0 // 6096
A=A-1 // 6097
M=0 // 6098
A=A-1 // 6099
M=0 // 6100
A=A-1 // 6101
M=0 // 6102
A=A-1 // 6103
M=0 // 6104
A=A-1 // 6105
M=0 // 6106
A=A-1 // 6107
M=D // 6108
A=A-1 // 6109
@12 // 6110
D=A // 6111
@SP // 6112
AM=M+1 // 6113
A=A-1 // 6114
M=D // 6115
@12 // 6116
D=A // 6117
@SP // 6118
AM=M+1 // 6119
A=A-1 // 6120
M=D // 6121
@6 // 6122
D=A // 6123
@SP // 6124
AM=M+1 // 6125
A=A-1 // 6126
M=D // 6127
@SP // 6128
AM=M+1 // 6129
A=A-1 // 6130
M=0 // 6131
// call Output.create
@17 // 6132
D=A // 6133
@14 // 6134
M=D // 6135
@Output.create // 6136
D=A // 6137
@13 // 6138
M=D // 6139
@Output.init.ret.14 // 6140
D=A // 6141
@CALL // 6142
0;JMP // 6143
(Output.init.ret.14)
@SP // 6144
M=M-1 // 6145

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 45"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@6 // 6146
D=A // 6147
@SP // 6148
M=D+M // 6149
@45 // 6150
D=A // 6151
@SP // 6152
A=M-1 // 6153
M=0 // 6154
A=A-1 // 6155
M=0 // 6156
A=A-1 // 6157
M=0 // 6158
A=A-1 // 6159
M=0 // 6160
A=A-1 // 6161
M=0 // 6162
A=A-1 // 6163
M=D // 6164
A=A-1 // 6165
@6 // 6166
D=A // 6167
@SP // 6168
M=D+M // 6169
@63 // 6170
D=A // 6171
@SP // 6172
A=M-1 // 6173
M=0 // 6174
A=A-1 // 6175
M=0 // 6176
A=A-1 // 6177
M=0 // 6178
A=A-1 // 6179
M=0 // 6180
A=A-1 // 6181
M=0 // 6182
A=A-1 // 6183
M=D // 6184
A=A-1 // 6185
// call Output.create
@17 // 6186
D=A // 6187
@14 // 6188
M=D // 6189
@Output.create // 6190
D=A // 6191
@13 // 6192
M=D // 6193
@Output.init.ret.15 // 6194
D=A // 6195
@CALL // 6196
0;JMP // 6197
(Output.init.ret.15)
@SP // 6198
M=M-1 // 6199

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 46"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@8 // 6200
D=A // 6201
@SP // 6202
M=D+M // 6203
@46 // 6204
D=A // 6205
@SP // 6206
A=M-1 // 6207
M=0 // 6208
A=A-1 // 6209
M=0 // 6210
A=A-1 // 6211
M=0 // 6212
A=A-1 // 6213
M=0 // 6214
A=A-1 // 6215
M=0 // 6216
A=A-1 // 6217
M=0 // 6218
A=A-1 // 6219
M=0 // 6220
A=A-1 // 6221
M=D // 6222
A=A-1 // 6223
@4 // 6224
D=A // 6225
@SP // 6226
M=D+M // 6227
@12 // 6228
D=A // 6229
@SP // 6230
A=M-1 // 6231
M=0 // 6232
A=A-1 // 6233
M=0 // 6234
A=A-1 // 6235
M=D // 6236
A=A-1 // 6237
M=D // 6238
A=A-1 // 6239
// call Output.create
@17 // 6240
D=A // 6241
@14 // 6242
M=D // 6243
@Output.create // 6244
D=A // 6245
@13 // 6246
M=D // 6247
@Output.init.ret.16 // 6248
D=A // 6249
@CALL // 6250
0;JMP // 6251
(Output.init.ret.16)
@SP // 6252
M=M-1 // 6253

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 47"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 32"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 1"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 6254
D=A // 6255
@SP // 6256
M=D+M // 6257
@47 // 6258
D=A // 6259
@SP // 6260
A=M-1 // 6261
M=0 // 6262
A=A-1 // 6263
M=0 // 6264
A=A-1 // 6265
M=D // 6266
A=A-1 // 6267
@32 // 6268
D=A // 6269
@SP // 6270
AM=M+1 // 6271
A=A-1 // 6272
M=D // 6273
@48 // 6274
D=A // 6275
@SP // 6276
AM=M+1 // 6277
A=A-1 // 6278
M=D // 6279
@24 // 6280
D=A // 6281
@SP // 6282
AM=M+1 // 6283
A=A-1 // 6284
M=D // 6285
@12 // 6286
D=A // 6287
@SP // 6288
AM=M+1 // 6289
A=A-1 // 6290
M=D // 6291
@6 // 6292
D=A // 6293
@SP // 6294
AM=M+1 // 6295
A=A-1 // 6296
M=D // 6297
@3 // 6298
D=A // 6299
@SP // 6300
AM=M+1 // 6301
A=A-1 // 6302
M=D // 6303
@SP // 6304
AM=M+1 // 6305
A=A-1 // 6306
M=1 // 6307
@SP // 6308
AM=M+1 // 6309
A=A-1 // 6310
M=0 // 6311
@SP // 6312
AM=M+1 // 6313
A=A-1 // 6314
M=0 // 6315
// call Output.create
@17 // 6316
D=A // 6317
@14 // 6318
M=D // 6319
@Output.create // 6320
D=A // 6321
@13 // 6322
M=D // 6323
@Output.init.ret.17 // 6324
D=A // 6325
@CALL // 6326
0;JMP // 6327
(Output.init.ret.17)
@SP // 6328
M=M-1 // 6329

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 48"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@48 // 6330
D=A // 6331
@SP // 6332
AM=M+1 // 6333
A=A-1 // 6334
M=D // 6335
@12 // 6336
D=A // 6337
@SP // 6338
AM=M+1 // 6339
A=A-1 // 6340
M=D // 6341
@30 // 6342
D=A // 6343
@SP // 6344
AM=M+1 // 6345
A=A-1 // 6346
M=D // 6347
@51 // 6348
D=A // 6349
@SP // 6350
AM=M+1 // 6351
A=A-1 // 6352
M=D // 6353
@51 // 6354
D=A // 6355
@SP // 6356
AM=M+1 // 6357
A=A-1 // 6358
M=D // 6359
@51 // 6360
D=A // 6361
@SP // 6362
AM=M+1 // 6363
A=A-1 // 6364
M=D // 6365
@51 // 6366
D=A // 6367
@SP // 6368
AM=M+1 // 6369
A=A-1 // 6370
M=D // 6371
@51 // 6372
D=A // 6373
@SP // 6374
AM=M+1 // 6375
A=A-1 // 6376
M=D // 6377
@30 // 6378
D=A // 6379
@SP // 6380
AM=M+1 // 6381
A=A-1 // 6382
M=D // 6383
@12 // 6384
D=A // 6385
@SP // 6386
AM=M+1 // 6387
A=A-1 // 6388
M=D // 6389
@SP // 6390
AM=M+1 // 6391
A=A-1 // 6392
M=0 // 6393
@SP // 6394
AM=M+1 // 6395
A=A-1 // 6396
M=0 // 6397
// call Output.create
@17 // 6398
D=A // 6399
@14 // 6400
M=D // 6401
@Output.create // 6402
D=A // 6403
@13 // 6404
M=D // 6405
@Output.init.ret.18 // 6406
D=A // 6407
@CALL // 6408
0;JMP // 6409
(Output.init.ret.18)
@SP // 6410
M=M-1 // 6411

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 49"), PushInstruction("constant 12"), PushInstruction("constant 14"), PushInstruction("constant 15"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@49 // 6412
D=A // 6413
@SP // 6414
AM=M+1 // 6415
A=A-1 // 6416
M=D // 6417
@12 // 6418
D=A // 6419
@SP // 6420
AM=M+1 // 6421
A=A-1 // 6422
M=D // 6423
@14 // 6424
D=A // 6425
@SP // 6426
AM=M+1 // 6427
A=A-1 // 6428
M=D // 6429
@15 // 6430
D=A // 6431
@SP // 6432
AM=M+1 // 6433
A=A-1 // 6434
M=D // 6435
@12 // 6436
D=A // 6437
@SP // 6438
AM=M+1 // 6439
A=A-1 // 6440
M=D // 6441
@12 // 6442
D=A // 6443
@SP // 6444
AM=M+1 // 6445
A=A-1 // 6446
M=D // 6447
@12 // 6448
D=A // 6449
@SP // 6450
AM=M+1 // 6451
A=A-1 // 6452
M=D // 6453
@12 // 6454
D=A // 6455
@SP // 6456
AM=M+1 // 6457
A=A-1 // 6458
M=D // 6459
@12 // 6460
D=A // 6461
@SP // 6462
AM=M+1 // 6463
A=A-1 // 6464
M=D // 6465
@63 // 6466
D=A // 6467
@SP // 6468
AM=M+1 // 6469
A=A-1 // 6470
M=D // 6471
@SP // 6472
AM=M+1 // 6473
A=A-1 // 6474
M=0 // 6475
@SP // 6476
AM=M+1 // 6477
A=A-1 // 6478
M=0 // 6479
// call Output.create
@17 // 6480
D=A // 6481
@14 // 6482
M=D // 6483
@Output.create // 6484
D=A // 6485
@13 // 6486
M=D // 6487
@Output.init.ret.19 // 6488
D=A // 6489
@CALL // 6490
0;JMP // 6491
(Output.init.ret.19)
@SP // 6492
M=M-1 // 6493

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 50"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@50 // 6494
D=A // 6495
@SP // 6496
AM=M+1 // 6497
A=A-1 // 6498
M=D // 6499
@30 // 6500
D=A // 6501
@SP // 6502
AM=M+1 // 6503
A=A-1 // 6504
M=D // 6505
@51 // 6506
D=A // 6507
@SP // 6508
AM=M+1 // 6509
A=A-1 // 6510
M=D // 6511
@48 // 6512
D=A // 6513
@SP // 6514
AM=M+1 // 6515
A=A-1 // 6516
M=D // 6517
@24 // 6518
D=A // 6519
@SP // 6520
AM=M+1 // 6521
A=A-1 // 6522
M=D // 6523
@12 // 6524
D=A // 6525
@SP // 6526
AM=M+1 // 6527
A=A-1 // 6528
M=D // 6529
@6 // 6530
D=A // 6531
@SP // 6532
AM=M+1 // 6533
A=A-1 // 6534
M=D // 6535
@3 // 6536
D=A // 6537
@SP // 6538
AM=M+1 // 6539
A=A-1 // 6540
M=D // 6541
@51 // 6542
D=A // 6543
@SP // 6544
AM=M+1 // 6545
A=A-1 // 6546
M=D // 6547
@63 // 6548
D=A // 6549
@SP // 6550
AM=M+1 // 6551
A=A-1 // 6552
M=D // 6553
@SP // 6554
AM=M+1 // 6555
A=A-1 // 6556
M=0 // 6557
@SP // 6558
AM=M+1 // 6559
A=A-1 // 6560
M=0 // 6561
// call Output.create
@17 // 6562
D=A // 6563
@14 // 6564
M=D // 6565
@Output.create // 6566
D=A // 6567
@13 // 6568
M=D // 6569
@Output.init.ret.20 // 6570
D=A // 6571
@CALL // 6572
0;JMP // 6573
(Output.init.ret.20)
@SP // 6574
M=M-1 // 6575

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 28"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@51 // 6576
D=A // 6577
@SP // 6578
AM=M+1 // 6579
A=A-1 // 6580
M=D // 6581
@30 // 6582
D=A // 6583
@SP // 6584
AM=M+1 // 6585
A=A-1 // 6586
M=D // 6587
@51 // 6588
D=A // 6589
@SP // 6590
AM=M+1 // 6591
A=A-1 // 6592
M=D // 6593
@48 // 6594
D=A // 6595
@SP // 6596
AM=M+1 // 6597
A=A-1 // 6598
M=D // 6599
@48 // 6600
D=A // 6601
@SP // 6602
AM=M+1 // 6603
A=A-1 // 6604
M=D // 6605
@28 // 6606
D=A // 6607
@SP // 6608
AM=M+1 // 6609
A=A-1 // 6610
M=D // 6611
@48 // 6612
D=A // 6613
@SP // 6614
AM=M+1 // 6615
A=A-1 // 6616
M=D // 6617
@48 // 6618
D=A // 6619
@SP // 6620
AM=M+1 // 6621
A=A-1 // 6622
M=D // 6623
@51 // 6624
D=A // 6625
@SP // 6626
AM=M+1 // 6627
A=A-1 // 6628
M=D // 6629
@30 // 6630
D=A // 6631
@SP // 6632
AM=M+1 // 6633
A=A-1 // 6634
M=D // 6635
@SP // 6636
AM=M+1 // 6637
A=A-1 // 6638
M=0 // 6639
@SP // 6640
AM=M+1 // 6641
A=A-1 // 6642
M=0 // 6643
// call Output.create
@17 // 6644
D=A // 6645
@14 // 6646
M=D // 6647
@Output.create // 6648
D=A // 6649
@13 // 6650
M=D // 6651
@Output.init.ret.21 // 6652
D=A // 6653
@CALL // 6654
0;JMP // 6655
(Output.init.ret.21)
@SP // 6656
M=M-1 // 6657

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 52"), PushInstruction("constant 16"), PushInstruction("constant 24"), PushInstruction("constant 28"), PushInstruction("constant 26"), PushInstruction("constant 25"), PushInstruction("constant 63"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 60"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@52 // 6658
D=A // 6659
@SP // 6660
AM=M+1 // 6661
A=A-1 // 6662
M=D // 6663
@16 // 6664
D=A // 6665
@SP // 6666
AM=M+1 // 6667
A=A-1 // 6668
M=D // 6669
@24 // 6670
D=A // 6671
@SP // 6672
AM=M+1 // 6673
A=A-1 // 6674
M=D // 6675
@28 // 6676
D=A // 6677
@SP // 6678
AM=M+1 // 6679
A=A-1 // 6680
M=D // 6681
@26 // 6682
D=A // 6683
@SP // 6684
AM=M+1 // 6685
A=A-1 // 6686
M=D // 6687
@25 // 6688
D=A // 6689
@SP // 6690
AM=M+1 // 6691
A=A-1 // 6692
M=D // 6693
@63 // 6694
D=A // 6695
@SP // 6696
AM=M+1 // 6697
A=A-1 // 6698
M=D // 6699
@24 // 6700
D=A // 6701
@SP // 6702
AM=M+1 // 6703
A=A-1 // 6704
M=D // 6705
@24 // 6706
D=A // 6707
@SP // 6708
AM=M+1 // 6709
A=A-1 // 6710
M=D // 6711
@60 // 6712
D=A // 6713
@SP // 6714
AM=M+1 // 6715
A=A-1 // 6716
M=D // 6717
@SP // 6718
AM=M+1 // 6719
A=A-1 // 6720
M=0 // 6721
@SP // 6722
AM=M+1 // 6723
A=A-1 // 6724
M=0 // 6725
// call Output.create
@17 // 6726
D=A // 6727
@14 // 6728
M=D // 6729
@Output.create // 6730
D=A // 6731
@13 // 6732
M=D // 6733
@Output.init.ret.22 // 6734
D=A // 6735
@CALL // 6736
0;JMP // 6737
(Output.init.ret.22)
@SP // 6738
M=M-1 // 6739

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 53"), PushInstruction("constant 63"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 31"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@53 // 6740
D=A // 6741
@SP // 6742
AM=M+1 // 6743
A=A-1 // 6744
M=D // 6745
@63 // 6746
D=A // 6747
@SP // 6748
AM=M+1 // 6749
A=A-1 // 6750
M=D // 6751
@3 // 6752
D=A // 6753
@SP // 6754
AM=M+1 // 6755
A=A-1 // 6756
M=D // 6757
@3 // 6758
D=A // 6759
@SP // 6760
AM=M+1 // 6761
A=A-1 // 6762
M=D // 6763
@31 // 6764
D=A // 6765
@SP // 6766
AM=M+1 // 6767
A=A-1 // 6768
M=D // 6769
@48 // 6770
D=A // 6771
@SP // 6772
AM=M+1 // 6773
A=A-1 // 6774
M=D // 6775
@48 // 6776
D=A // 6777
@SP // 6778
AM=M+1 // 6779
A=A-1 // 6780
M=D // 6781
@48 // 6782
D=A // 6783
@SP // 6784
AM=M+1 // 6785
A=A-1 // 6786
M=D // 6787
@51 // 6788
D=A // 6789
@SP // 6790
AM=M+1 // 6791
A=A-1 // 6792
M=D // 6793
@30 // 6794
D=A // 6795
@SP // 6796
AM=M+1 // 6797
A=A-1 // 6798
M=D // 6799
@SP // 6800
AM=M+1 // 6801
A=A-1 // 6802
M=0 // 6803
@SP // 6804
AM=M+1 // 6805
A=A-1 // 6806
M=0 // 6807
// call Output.create
@17 // 6808
D=A // 6809
@14 // 6810
M=D // 6811
@Output.create // 6812
D=A // 6813
@13 // 6814
M=D // 6815
@Output.init.ret.23 // 6816
D=A // 6817
@CALL // 6818
0;JMP // 6819
(Output.init.ret.23)
@SP // 6820
M=M-1 // 6821

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@54 // 6822
D=A // 6823
@SP // 6824
AM=M+1 // 6825
A=A-1 // 6826
M=D // 6827
@28 // 6828
D=A // 6829
@SP // 6830
AM=M+1 // 6831
A=A-1 // 6832
M=D // 6833
@6 // 6834
D=A // 6835
@SP // 6836
AM=M+1 // 6837
A=A-1 // 6838
M=D // 6839
@3 // 6840
D=A // 6841
@SP // 6842
AM=M+1 // 6843
A=A-1 // 6844
M=D // 6845
@3 // 6846
D=A // 6847
@SP // 6848
AM=M+1 // 6849
A=A-1 // 6850
M=D // 6851
@31 // 6852
D=A // 6853
@SP // 6854
AM=M+1 // 6855
A=A-1 // 6856
M=D // 6857
@51 // 6858
D=A // 6859
@SP // 6860
AM=M+1 // 6861
A=A-1 // 6862
M=D // 6863
@51 // 6864
D=A // 6865
@SP // 6866
AM=M+1 // 6867
A=A-1 // 6868
M=D // 6869
@51 // 6870
D=A // 6871
@SP // 6872
AM=M+1 // 6873
A=A-1 // 6874
M=D // 6875
@30 // 6876
D=A // 6877
@SP // 6878
AM=M+1 // 6879
A=A-1 // 6880
M=D // 6881
@SP // 6882
AM=M+1 // 6883
A=A-1 // 6884
M=0 // 6885
@SP // 6886
AM=M+1 // 6887
A=A-1 // 6888
M=0 // 6889
// call Output.create
@17 // 6890
D=A // 6891
@14 // 6892
M=D // 6893
@Output.create // 6894
D=A // 6895
@13 // 6896
M=D // 6897
@Output.init.ret.24 // 6898
D=A // 6899
@CALL // 6900
0;JMP // 6901
(Output.init.ret.24)
@SP // 6902
M=M-1 // 6903

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 55"), PushInstruction("constant 63"), PushInstruction("constant 49"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@55 // 6904
D=A // 6905
@SP // 6906
AM=M+1 // 6907
A=A-1 // 6908
M=D // 6909
@63 // 6910
D=A // 6911
@SP // 6912
AM=M+1 // 6913
A=A-1 // 6914
M=D // 6915
@49 // 6916
D=A // 6917
@SP // 6918
AM=M+1 // 6919
A=A-1 // 6920
M=D // 6921
@48 // 6922
D=A // 6923
@SP // 6924
AM=M+1 // 6925
A=A-1 // 6926
M=D // 6927
@48 // 6928
D=A // 6929
@SP // 6930
AM=M+1 // 6931
A=A-1 // 6932
M=D // 6933
@24 // 6934
D=A // 6935
@SP // 6936
AM=M+1 // 6937
A=A-1 // 6938
M=D // 6939
@12 // 6940
D=A // 6941
@SP // 6942
AM=M+1 // 6943
A=A-1 // 6944
M=D // 6945
@12 // 6946
D=A // 6947
@SP // 6948
AM=M+1 // 6949
A=A-1 // 6950
M=D // 6951
@12 // 6952
D=A // 6953
@SP // 6954
AM=M+1 // 6955
A=A-1 // 6956
M=D // 6957
@12 // 6958
D=A // 6959
@SP // 6960
AM=M+1 // 6961
A=A-1 // 6962
M=D // 6963
@SP // 6964
AM=M+1 // 6965
A=A-1 // 6966
M=0 // 6967
@SP // 6968
AM=M+1 // 6969
A=A-1 // 6970
M=0 // 6971
// call Output.create
@17 // 6972
D=A // 6973
@14 // 6974
M=D // 6975
@Output.create // 6976
D=A // 6977
@13 // 6978
M=D // 6979
@Output.init.ret.25 // 6980
D=A // 6981
@CALL // 6982
0;JMP // 6983
(Output.init.ret.25)
@SP // 6984
M=M-1 // 6985

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 56"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@56 // 6986
D=A // 6987
@SP // 6988
AM=M+1 // 6989
A=A-1 // 6990
M=D // 6991
@30 // 6992
D=A // 6993
@SP // 6994
AM=M+1 // 6995
A=A-1 // 6996
M=D // 6997
@51 // 6998
D=A // 6999
@SP // 7000
AM=M+1 // 7001
A=A-1 // 7002
M=D // 7003
@51 // 7004
D=A // 7005
@SP // 7006
AM=M+1 // 7007
A=A-1 // 7008
M=D // 7009
@51 // 7010
D=A // 7011
@SP // 7012
AM=M+1 // 7013
A=A-1 // 7014
M=D // 7015
@30 // 7016
D=A // 7017
@SP // 7018
AM=M+1 // 7019
A=A-1 // 7020
M=D // 7021
@51 // 7022
D=A // 7023
@SP // 7024
AM=M+1 // 7025
A=A-1 // 7026
M=D // 7027
@51 // 7028
D=A // 7029
@SP // 7030
AM=M+1 // 7031
A=A-1 // 7032
M=D // 7033
@51 // 7034
D=A // 7035
@SP // 7036
AM=M+1 // 7037
A=A-1 // 7038
M=D // 7039
@30 // 7040
D=A // 7041
@SP // 7042
AM=M+1 // 7043
A=A-1 // 7044
M=D // 7045
@SP // 7046
AM=M+1 // 7047
A=A-1 // 7048
M=0 // 7049
@SP // 7050
AM=M+1 // 7051
A=A-1 // 7052
M=0 // 7053
// call Output.create
@17 // 7054
D=A // 7055
@14 // 7056
M=D // 7057
@Output.create // 7058
D=A // 7059
@13 // 7060
M=D // 7061
@Output.init.ret.26 // 7062
D=A // 7063
@CALL // 7064
0;JMP // 7065
(Output.init.ret.26)
@SP // 7066
M=M-1 // 7067

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 57"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 14"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@57 // 7068
D=A // 7069
@SP // 7070
AM=M+1 // 7071
A=A-1 // 7072
M=D // 7073
@30 // 7074
D=A // 7075
@SP // 7076
AM=M+1 // 7077
A=A-1 // 7078
M=D // 7079
@51 // 7080
D=A // 7081
@SP // 7082
AM=M+1 // 7083
A=A-1 // 7084
M=D // 7085
@51 // 7086
D=A // 7087
@SP // 7088
AM=M+1 // 7089
A=A-1 // 7090
M=D // 7091
@51 // 7092
D=A // 7093
@SP // 7094
AM=M+1 // 7095
A=A-1 // 7096
M=D // 7097
@62 // 7098
D=A // 7099
@SP // 7100
AM=M+1 // 7101
A=A-1 // 7102
M=D // 7103
@48 // 7104
D=A // 7105
@SP // 7106
AM=M+1 // 7107
A=A-1 // 7108
M=D // 7109
@48 // 7110
D=A // 7111
@SP // 7112
AM=M+1 // 7113
A=A-1 // 7114
M=D // 7115
@24 // 7116
D=A // 7117
@SP // 7118
AM=M+1 // 7119
A=A-1 // 7120
M=D // 7121
@14 // 7122
D=A // 7123
@SP // 7124
AM=M+1 // 7125
A=A-1 // 7126
M=D // 7127
@SP // 7128
AM=M+1 // 7129
A=A-1 // 7130
M=0 // 7131
@SP // 7132
AM=M+1 // 7133
A=A-1 // 7134
M=0 // 7135
// call Output.create
@17 // 7136
D=A // 7137
@14 // 7138
M=D // 7139
@Output.create // 7140
D=A // 7141
@13 // 7142
M=D // 7143
@Output.init.ret.27 // 7144
D=A // 7145
@CALL // 7146
0;JMP // 7147
(Output.init.ret.27)
@SP // 7148
M=M-1 // 7149

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 58"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7150
D=A // 7151
@SP // 7152
M=D+M // 7153
@58 // 7154
D=A // 7155
@SP // 7156
A=M-1 // 7157
M=0 // 7158
A=A-1 // 7159
M=0 // 7160
A=A-1 // 7161
M=D // 7162
A=A-1 // 7163
@4 // 7164
D=A // 7165
@SP // 7166
M=D+M // 7167
@12 // 7168
D=A // 7169
@SP // 7170
A=M-1 // 7171
M=0 // 7172
A=A-1 // 7173
M=0 // 7174
A=A-1 // 7175
M=D // 7176
A=A-1 // 7177
M=D // 7178
A=A-1 // 7179
@5 // 7180
D=A // 7181
@SP // 7182
M=D+M // 7183
@12 // 7184
D=A // 7185
@SP // 7186
A=M-1 // 7187
M=0 // 7188
A=A-1 // 7189
M=0 // 7190
A=A-1 // 7191
M=0 // 7192
A=A-1 // 7193
M=D // 7194
A=A-1 // 7195
M=D // 7196
A=A-1 // 7197
// call Output.create
@17 // 7198
D=A // 7199
@14 // 7200
M=D // 7201
@Output.create // 7202
D=A // 7203
@13 // 7204
M=D // 7205
@Output.init.ret.28 // 7206
D=A // 7207
@CALL // 7208
0;JMP // 7209
(Output.init.ret.28)
@SP // 7210
M=M-1 // 7211

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 59"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7212
D=A // 7213
@SP // 7214
M=D+M // 7215
@59 // 7216
D=A // 7217
@SP // 7218
A=M-1 // 7219
M=0 // 7220
A=A-1 // 7221
M=0 // 7222
A=A-1 // 7223
M=D // 7224
A=A-1 // 7225
@4 // 7226
D=A // 7227
@SP // 7228
M=D+M // 7229
@12 // 7230
D=A // 7231
@SP // 7232
A=M-1 // 7233
M=0 // 7234
A=A-1 // 7235
M=0 // 7236
A=A-1 // 7237
M=D // 7238
A=A-1 // 7239
M=D // 7240
A=A-1 // 7241
@12 // 7242
D=A // 7243
@SP // 7244
AM=M+1 // 7245
A=A-1 // 7246
M=D // 7247
@12 // 7248
D=A // 7249
@SP // 7250
AM=M+1 // 7251
A=A-1 // 7252
M=D // 7253
@6 // 7254
D=A // 7255
@SP // 7256
AM=M+1 // 7257
A=A-1 // 7258
M=D // 7259
@SP // 7260
AM=M+1 // 7261
A=A-1 // 7262
M=0 // 7263
@SP // 7264
AM=M+1 // 7265
A=A-1 // 7266
M=0 // 7267
// call Output.create
@17 // 7268
D=A // 7269
@14 // 7270
M=D // 7271
@Output.create // 7272
D=A // 7273
@13 // 7274
M=D // 7275
@Output.init.ret.29 // 7276
D=A // 7277
@CALL // 7278
0;JMP // 7279
(Output.init.ret.29)
@SP // 7280
M=M-1 // 7281

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 60"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7282
D=A // 7283
@SP // 7284
M=D+M // 7285
@60 // 7286
D=A // 7287
@SP // 7288
A=M-1 // 7289
M=0 // 7290
A=A-1 // 7291
M=0 // 7292
A=A-1 // 7293
M=D // 7294
A=A-1 // 7295
@24 // 7296
D=A // 7297
@SP // 7298
AM=M+1 // 7299
A=A-1 // 7300
M=D // 7301
@12 // 7302
D=A // 7303
@SP // 7304
AM=M+1 // 7305
A=A-1 // 7306
M=D // 7307
@6 // 7308
D=A // 7309
@SP // 7310
AM=M+1 // 7311
A=A-1 // 7312
M=D // 7313
@3 // 7314
D=A // 7315
@SP // 7316
AM=M+1 // 7317
A=A-1 // 7318
M=D // 7319
@6 // 7320
D=A // 7321
@SP // 7322
AM=M+1 // 7323
A=A-1 // 7324
M=D // 7325
@12 // 7326
D=A // 7327
@SP // 7328
AM=M+1 // 7329
A=A-1 // 7330
M=D // 7331
@24 // 7332
D=A // 7333
@SP // 7334
AM=M+1 // 7335
A=A-1 // 7336
M=D // 7337
@SP // 7338
AM=M+1 // 7339
A=A-1 // 7340
M=0 // 7341
@SP // 7342
AM=M+1 // 7343
A=A-1 // 7344
M=0 // 7345
// call Output.create
@17 // 7346
D=A // 7347
@14 // 7348
M=D // 7349
@Output.create // 7350
D=A // 7351
@13 // 7352
M=D // 7353
@Output.init.ret.30 // 7354
D=A // 7355
@CALL // 7356
0;JMP // 7357
(Output.init.ret.30)
@SP // 7358
M=M-1 // 7359

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 61"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 7360
D=A // 7361
@SP // 7362
M=D+M // 7363
@61 // 7364
D=A // 7365
@SP // 7366
A=M-1 // 7367
M=0 // 7368
A=A-1 // 7369
M=0 // 7370
A=A-1 // 7371
M=0 // 7372
A=A-1 // 7373
M=D // 7374
A=A-1 // 7375
@3 // 7376
D=A // 7377
@SP // 7378
M=D+M // 7379
@63 // 7380
D=A // 7381
@SP // 7382
A=M-1 // 7383
M=0 // 7384
A=A-1 // 7385
M=0 // 7386
A=A-1 // 7387
M=D // 7388
A=A-1 // 7389
@5 // 7390
D=A // 7391
@SP // 7392
M=D+M // 7393
@63 // 7394
D=A // 7395
@SP // 7396
A=M-1 // 7397
M=0 // 7398
A=A-1 // 7399
M=0 // 7400
A=A-1 // 7401
M=0 // 7402
A=A-1 // 7403
M=0 // 7404
A=A-1 // 7405
M=D // 7406
A=A-1 // 7407
// call Output.create
@17 // 7408
D=A // 7409
@14 // 7410
M=D // 7411
@Output.create // 7412
D=A // 7413
@13 // 7414
M=D // 7415
@Output.init.ret.31 // 7416
D=A // 7417
@CALL // 7418
0;JMP // 7419
(Output.init.ret.31)
@SP // 7420
M=M-1 // 7421

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 62"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 7422
D=A // 7423
@SP // 7424
M=D+M // 7425
@62 // 7426
D=A // 7427
@SP // 7428
A=M-1 // 7429
M=0 // 7430
A=A-1 // 7431
M=0 // 7432
A=A-1 // 7433
M=D // 7434
A=A-1 // 7435
@3 // 7436
D=A // 7437
@SP // 7438
AM=M+1 // 7439
A=A-1 // 7440
M=D // 7441
@6 // 7442
D=A // 7443
@SP // 7444
AM=M+1 // 7445
A=A-1 // 7446
M=D // 7447
@12 // 7448
D=A // 7449
@SP // 7450
AM=M+1 // 7451
A=A-1 // 7452
M=D // 7453
@24 // 7454
D=A // 7455
@SP // 7456
AM=M+1 // 7457
A=A-1 // 7458
M=D // 7459
@12 // 7460
D=A // 7461
@SP // 7462
AM=M+1 // 7463
A=A-1 // 7464
M=D // 7465
@6 // 7466
D=A // 7467
@SP // 7468
AM=M+1 // 7469
A=A-1 // 7470
M=D // 7471
@3 // 7472
D=A // 7473
@SP // 7474
AM=M+1 // 7475
A=A-1 // 7476
M=D // 7477
@SP // 7478
AM=M+1 // 7479
A=A-1 // 7480
M=0 // 7481
@SP // 7482
AM=M+1 // 7483
A=A-1 // 7484
M=0 // 7485
// call Output.create
@17 // 7486
D=A // 7487
@14 // 7488
M=D // 7489
@Output.create // 7490
D=A // 7491
@13 // 7492
M=D // 7493
@Output.init.ret.32 // 7494
D=A // 7495
@CALL // 7496
0;JMP // 7497
(Output.init.ret.32)
@SP // 7498
M=M-1 // 7499

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 64"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 27"), PushInstruction("constant 3"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@64 // 7500
D=A // 7501
@SP // 7502
AM=M+1 // 7503
A=A-1 // 7504
M=D // 7505
@30 // 7506
D=A // 7507
@SP // 7508
AM=M+1 // 7509
A=A-1 // 7510
M=D // 7511
@51 // 7512
D=A // 7513
@SP // 7514
AM=M+1 // 7515
A=A-1 // 7516
M=D // 7517
@51 // 7518
D=A // 7519
@SP // 7520
AM=M+1 // 7521
A=A-1 // 7522
M=D // 7523
@59 // 7524
D=A // 7525
@SP // 7526
AM=M+1 // 7527
A=A-1 // 7528
M=D // 7529
@59 // 7530
D=A // 7531
@SP // 7532
AM=M+1 // 7533
A=A-1 // 7534
M=D // 7535
@59 // 7536
D=A // 7537
@SP // 7538
AM=M+1 // 7539
A=A-1 // 7540
M=D // 7541
@27 // 7542
D=A // 7543
@SP // 7544
AM=M+1 // 7545
A=A-1 // 7546
M=D // 7547
@3 // 7548
D=A // 7549
@SP // 7550
AM=M+1 // 7551
A=A-1 // 7552
M=D // 7553
@30 // 7554
D=A // 7555
@SP // 7556
AM=M+1 // 7557
A=A-1 // 7558
M=D // 7559
@SP // 7560
AM=M+1 // 7561
A=A-1 // 7562
M=0 // 7563
@SP // 7564
AM=M+1 // 7565
A=A-1 // 7566
M=0 // 7567
// call Output.create
@17 // 7568
D=A // 7569
@14 // 7570
M=D // 7571
@Output.create // 7572
D=A // 7573
@13 // 7574
M=D // 7575
@Output.init.ret.33 // 7576
D=A // 7577
@CALL // 7578
0;JMP // 7579
(Output.init.ret.33)
@SP // 7580
M=M-1 // 7581

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 63"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@63 // 7582
D=A // 7583
@SP // 7584
AM=M+1 // 7585
A=A-1 // 7586
M=D // 7587
@30 // 7588
D=A // 7589
@SP // 7590
AM=M+1 // 7591
A=A-1 // 7592
M=D // 7593
@51 // 7594
D=A // 7595
@SP // 7596
AM=M+1 // 7597
A=A-1 // 7598
M=D // 7599
@51 // 7600
D=A // 7601
@SP // 7602
AM=M+1 // 7603
A=A-1 // 7604
M=D // 7605
@24 // 7606
D=A // 7607
@SP // 7608
AM=M+1 // 7609
A=A-1 // 7610
M=D // 7611
@12 // 7612
D=A // 7613
@SP // 7614
AM=M+1 // 7615
A=A-1 // 7616
M=D // 7617
@12 // 7618
D=A // 7619
@SP // 7620
AM=M+1 // 7621
A=A-1 // 7622
M=D // 7623
@SP // 7624
AM=M+1 // 7625
A=A-1 // 7626
M=0 // 7627
@4 // 7628
D=A // 7629
@SP // 7630
M=D+M // 7631
@12 // 7632
D=A // 7633
@SP // 7634
A=M-1 // 7635
M=0 // 7636
A=A-1 // 7637
M=0 // 7638
A=A-1 // 7639
M=D // 7640
A=A-1 // 7641
M=D // 7642
A=A-1 // 7643
// call Output.create
@17 // 7644
D=A // 7645
@14 // 7646
M=D // 7647
@Output.create // 7648
D=A // 7649
@13 // 7650
M=D // 7651
@Output.init.ret.34 // 7652
D=A // 7653
@CALL // 7654
0;JMP // 7655
(Output.init.ret.34)
@SP // 7656
M=M-1 // 7657

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 65"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@65 // 7658
D=A // 7659
@SP // 7660
AM=M+1 // 7661
A=A-1 // 7662
M=D // 7663
@12 // 7664
D=A // 7665
@SP // 7666
AM=M+1 // 7667
A=A-1 // 7668
M=D // 7669
@30 // 7670
D=A // 7671
@SP // 7672
AM=M+1 // 7673
A=A-1 // 7674
M=D // 7675
@51 // 7676
D=A // 7677
@SP // 7678
AM=M+1 // 7679
A=A-1 // 7680
M=D // 7681
@51 // 7682
D=A // 7683
@SP // 7684
AM=M+1 // 7685
A=A-1 // 7686
M=D // 7687
@63 // 7688
D=A // 7689
@SP // 7690
AM=M+1 // 7691
A=A-1 // 7692
M=D // 7693
@51 // 7694
D=A // 7695
@SP // 7696
AM=M+1 // 7697
A=A-1 // 7698
M=D // 7699
@51 // 7700
D=A // 7701
@SP // 7702
AM=M+1 // 7703
A=A-1 // 7704
M=D // 7705
@51 // 7706
D=A // 7707
@SP // 7708
AM=M+1 // 7709
A=A-1 // 7710
M=D // 7711
@51 // 7712
D=A // 7713
@SP // 7714
AM=M+1 // 7715
A=A-1 // 7716
M=D // 7717
@SP // 7718
AM=M+1 // 7719
A=A-1 // 7720
M=0 // 7721
@SP // 7722
AM=M+1 // 7723
A=A-1 // 7724
M=0 // 7725
// call Output.create
@17 // 7726
D=A // 7727
@14 // 7728
M=D // 7729
@Output.create // 7730
D=A // 7731
@13 // 7732
M=D // 7733
@Output.init.ret.35 // 7734
D=A // 7735
@CALL // 7736
0;JMP // 7737
(Output.init.ret.35)
@SP // 7738
M=M-1 // 7739

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 66"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@66 // 7740
D=A // 7741
@SP // 7742
AM=M+1 // 7743
A=A-1 // 7744
M=D // 7745
@31 // 7746
D=A // 7747
@SP // 7748
AM=M+1 // 7749
A=A-1 // 7750
M=D // 7751
@51 // 7752
D=A // 7753
@SP // 7754
AM=M+1 // 7755
A=A-1 // 7756
M=D // 7757
@51 // 7758
D=A // 7759
@SP // 7760
AM=M+1 // 7761
A=A-1 // 7762
M=D // 7763
@51 // 7764
D=A // 7765
@SP // 7766
AM=M+1 // 7767
A=A-1 // 7768
M=D // 7769
@31 // 7770
D=A // 7771
@SP // 7772
AM=M+1 // 7773
A=A-1 // 7774
M=D // 7775
@51 // 7776
D=A // 7777
@SP // 7778
AM=M+1 // 7779
A=A-1 // 7780
M=D // 7781
@51 // 7782
D=A // 7783
@SP // 7784
AM=M+1 // 7785
A=A-1 // 7786
M=D // 7787
@51 // 7788
D=A // 7789
@SP // 7790
AM=M+1 // 7791
A=A-1 // 7792
M=D // 7793
@31 // 7794
D=A // 7795
@SP // 7796
AM=M+1 // 7797
A=A-1 // 7798
M=D // 7799
@SP // 7800
AM=M+1 // 7801
A=A-1 // 7802
M=0 // 7803
@SP // 7804
AM=M+1 // 7805
A=A-1 // 7806
M=0 // 7807
// call Output.create
@17 // 7808
D=A // 7809
@14 // 7810
M=D // 7811
@Output.create // 7812
D=A // 7813
@13 // 7814
M=D // 7815
@Output.init.ret.36 // 7816
D=A // 7817
@CALL // 7818
0;JMP // 7819
(Output.init.ret.36)
@SP // 7820
M=M-1 // 7821

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 67"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 35"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 35"), PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@67 // 7822
D=A // 7823
@SP // 7824
AM=M+1 // 7825
A=A-1 // 7826
M=D // 7827
@28 // 7828
D=A // 7829
@SP // 7830
AM=M+1 // 7831
A=A-1 // 7832
M=D // 7833
@54 // 7834
D=A // 7835
@SP // 7836
AM=M+1 // 7837
A=A-1 // 7838
M=D // 7839
@35 // 7840
D=A // 7841
@SP // 7842
AM=M+1 // 7843
A=A-1 // 7844
M=D // 7845
@3 // 7846
D=A // 7847
@SP // 7848
AM=M+1 // 7849
A=A-1 // 7850
M=D // 7851
@3 // 7852
D=A // 7853
@SP // 7854
AM=M+1 // 7855
A=A-1 // 7856
M=D // 7857
@3 // 7858
D=A // 7859
@SP // 7860
AM=M+1 // 7861
A=A-1 // 7862
M=D // 7863
@35 // 7864
D=A // 7865
@SP // 7866
AM=M+1 // 7867
A=A-1 // 7868
M=D // 7869
@54 // 7870
D=A // 7871
@SP // 7872
AM=M+1 // 7873
A=A-1 // 7874
M=D // 7875
@28 // 7876
D=A // 7877
@SP // 7878
AM=M+1 // 7879
A=A-1 // 7880
M=D // 7881
@SP // 7882
AM=M+1 // 7883
A=A-1 // 7884
M=0 // 7885
@SP // 7886
AM=M+1 // 7887
A=A-1 // 7888
M=0 // 7889
// call Output.create
@17 // 7890
D=A // 7891
@14 // 7892
M=D // 7893
@Output.create // 7894
D=A // 7895
@13 // 7896
M=D // 7897
@Output.init.ret.37 // 7898
D=A // 7899
@CALL // 7900
0;JMP // 7901
(Output.init.ret.37)
@SP // 7902
M=M-1 // 7903

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 68"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@68 // 7904
D=A // 7905
@SP // 7906
AM=M+1 // 7907
A=A-1 // 7908
M=D // 7909
@15 // 7910
D=A // 7911
@SP // 7912
AM=M+1 // 7913
A=A-1 // 7914
M=D // 7915
@27 // 7916
D=A // 7917
@SP // 7918
AM=M+1 // 7919
A=A-1 // 7920
M=D // 7921
@51 // 7922
D=A // 7923
@SP // 7924
AM=M+1 // 7925
A=A-1 // 7926
M=D // 7927
@51 // 7928
D=A // 7929
@SP // 7930
AM=M+1 // 7931
A=A-1 // 7932
M=D // 7933
@51 // 7934
D=A // 7935
@SP // 7936
AM=M+1 // 7937
A=A-1 // 7938
M=D // 7939
@51 // 7940
D=A // 7941
@SP // 7942
AM=M+1 // 7943
A=A-1 // 7944
M=D // 7945
@51 // 7946
D=A // 7947
@SP // 7948
AM=M+1 // 7949
A=A-1 // 7950
M=D // 7951
@27 // 7952
D=A // 7953
@SP // 7954
AM=M+1 // 7955
A=A-1 // 7956
M=D // 7957
@15 // 7958
D=A // 7959
@SP // 7960
AM=M+1 // 7961
A=A-1 // 7962
M=D // 7963
@SP // 7964
AM=M+1 // 7965
A=A-1 // 7966
M=0 // 7967
@SP // 7968
AM=M+1 // 7969
A=A-1 // 7970
M=0 // 7971
// call Output.create
@17 // 7972
D=A // 7973
@14 // 7974
M=D // 7975
@Output.create // 7976
D=A // 7977
@13 // 7978
M=D // 7979
@Output.init.ret.38 // 7980
D=A // 7981
@CALL // 7982
0;JMP // 7983
(Output.init.ret.38)
@SP // 7984
M=M-1 // 7985

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 69"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 35"), PushInstruction("constant 11"), PushInstruction("constant 15"), PushInstruction("constant 11"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@69 // 7986
D=A // 7987
@SP // 7988
AM=M+1 // 7989
A=A-1 // 7990
M=D // 7991
@63 // 7992
D=A // 7993
@SP // 7994
AM=M+1 // 7995
A=A-1 // 7996
M=D // 7997
@51 // 7998
D=A // 7999
@SP // 8000
AM=M+1 // 8001
A=A-1 // 8002
M=D // 8003
@35 // 8004
D=A // 8005
@SP // 8006
AM=M+1 // 8007
A=A-1 // 8008
M=D // 8009
@11 // 8010
D=A // 8011
@SP // 8012
AM=M+1 // 8013
A=A-1 // 8014
M=D // 8015
@15 // 8016
D=A // 8017
@SP // 8018
AM=M+1 // 8019
A=A-1 // 8020
M=D // 8021
@11 // 8022
D=A // 8023
@SP // 8024
AM=M+1 // 8025
A=A-1 // 8026
M=D // 8027
@35 // 8028
D=A // 8029
@SP // 8030
AM=M+1 // 8031
A=A-1 // 8032
M=D // 8033
@51 // 8034
D=A // 8035
@SP // 8036
AM=M+1 // 8037
A=A-1 // 8038
M=D // 8039
@63 // 8040
D=A // 8041
@SP // 8042
AM=M+1 // 8043
A=A-1 // 8044
M=D // 8045
@SP // 8046
AM=M+1 // 8047
A=A-1 // 8048
M=0 // 8049
@SP // 8050
AM=M+1 // 8051
A=A-1 // 8052
M=0 // 8053
// call Output.create
@17 // 8054
D=A // 8055
@14 // 8056
M=D // 8057
@Output.create // 8058
D=A // 8059
@13 // 8060
M=D // 8061
@Output.init.ret.39 // 8062
D=A // 8063
@CALL // 8064
0;JMP // 8065
(Output.init.ret.39)
@SP // 8066
M=M-1 // 8067

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 70"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 35"), PushInstruction("constant 11"), PushInstruction("constant 15"), PushInstruction("constant 11"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@70 // 8068
D=A // 8069
@SP // 8070
AM=M+1 // 8071
A=A-1 // 8072
M=D // 8073
@63 // 8074
D=A // 8075
@SP // 8076
AM=M+1 // 8077
A=A-1 // 8078
M=D // 8079
@51 // 8080
D=A // 8081
@SP // 8082
AM=M+1 // 8083
A=A-1 // 8084
M=D // 8085
@35 // 8086
D=A // 8087
@SP // 8088
AM=M+1 // 8089
A=A-1 // 8090
M=D // 8091
@11 // 8092
D=A // 8093
@SP // 8094
AM=M+1 // 8095
A=A-1 // 8096
M=D // 8097
@15 // 8098
D=A // 8099
@SP // 8100
AM=M+1 // 8101
A=A-1 // 8102
M=D // 8103
@11 // 8104
D=A // 8105
@SP // 8106
AM=M+1 // 8107
A=A-1 // 8108
M=D // 8109
@3 // 8110
D=A // 8111
@SP // 8112
AM=M+1 // 8113
A=A-1 // 8114
M=D // 8115
@3 // 8116
D=A // 8117
@SP // 8118
AM=M+1 // 8119
A=A-1 // 8120
M=D // 8121
@3 // 8122
D=A // 8123
@SP // 8124
AM=M+1 // 8125
A=A-1 // 8126
M=D // 8127
@SP // 8128
AM=M+1 // 8129
A=A-1 // 8130
M=0 // 8131
@SP // 8132
AM=M+1 // 8133
A=A-1 // 8134
M=0 // 8135
// call Output.create
@17 // 8136
D=A // 8137
@14 // 8138
M=D // 8139
@Output.create // 8140
D=A // 8141
@13 // 8142
M=D // 8143
@Output.init.ret.40 // 8144
D=A // 8145
@CALL // 8146
0;JMP // 8147
(Output.init.ret.40)
@SP // 8148
M=M-1 // 8149

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 71"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 35"), PushInstruction("constant 3"), PushInstruction("constant 59"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 54"), PushInstruction("constant 44"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@71 // 8150
D=A // 8151
@SP // 8152
AM=M+1 // 8153
A=A-1 // 8154
M=D // 8155
@28 // 8156
D=A // 8157
@SP // 8158
AM=M+1 // 8159
A=A-1 // 8160
M=D // 8161
@54 // 8162
D=A // 8163
@SP // 8164
AM=M+1 // 8165
A=A-1 // 8166
M=D // 8167
@35 // 8168
D=A // 8169
@SP // 8170
AM=M+1 // 8171
A=A-1 // 8172
M=D // 8173
@3 // 8174
D=A // 8175
@SP // 8176
AM=M+1 // 8177
A=A-1 // 8178
M=D // 8179
@59 // 8180
D=A // 8181
@SP // 8182
AM=M+1 // 8183
A=A-1 // 8184
M=D // 8185
@51 // 8186
D=A // 8187
@SP // 8188
AM=M+1 // 8189
A=A-1 // 8190
M=D // 8191
@51 // 8192
D=A // 8193
@SP // 8194
AM=M+1 // 8195
A=A-1 // 8196
M=D // 8197
@54 // 8198
D=A // 8199
@SP // 8200
AM=M+1 // 8201
A=A-1 // 8202
M=D // 8203
@44 // 8204
D=A // 8205
@SP // 8206
AM=M+1 // 8207
A=A-1 // 8208
M=D // 8209
@SP // 8210
AM=M+1 // 8211
A=A-1 // 8212
M=0 // 8213
@SP // 8214
AM=M+1 // 8215
A=A-1 // 8216
M=0 // 8217
// call Output.create
@17 // 8218
D=A // 8219
@14 // 8220
M=D // 8221
@Output.create // 8222
D=A // 8223
@13 // 8224
M=D // 8225
@Output.init.ret.41 // 8226
D=A // 8227
@CALL // 8228
0;JMP // 8229
(Output.init.ret.41)
@SP // 8230
M=M-1 // 8231

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 72"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@72 // 8232
D=A // 8233
@SP // 8234
AM=M+1 // 8235
A=A-1 // 8236
M=D // 8237
@51 // 8238
D=A // 8239
@SP // 8240
AM=M+1 // 8241
A=A-1 // 8242
M=D // 8243
@51 // 8244
D=A // 8245
@SP // 8246
AM=M+1 // 8247
A=A-1 // 8248
M=D // 8249
@51 // 8250
D=A // 8251
@SP // 8252
AM=M+1 // 8253
A=A-1 // 8254
M=D // 8255
@51 // 8256
D=A // 8257
@SP // 8258
AM=M+1 // 8259
A=A-1 // 8260
M=D // 8261
@63 // 8262
D=A // 8263
@SP // 8264
AM=M+1 // 8265
A=A-1 // 8266
M=D // 8267
@51 // 8268
D=A // 8269
@SP // 8270
AM=M+1 // 8271
A=A-1 // 8272
M=D // 8273
@51 // 8274
D=A // 8275
@SP // 8276
AM=M+1 // 8277
A=A-1 // 8278
M=D // 8279
@51 // 8280
D=A // 8281
@SP // 8282
AM=M+1 // 8283
A=A-1 // 8284
M=D // 8285
@51 // 8286
D=A // 8287
@SP // 8288
AM=M+1 // 8289
A=A-1 // 8290
M=D // 8291
@SP // 8292
AM=M+1 // 8293
A=A-1 // 8294
M=0 // 8295
@SP // 8296
AM=M+1 // 8297
A=A-1 // 8298
M=0 // 8299
// call Output.create
@17 // 8300
D=A // 8301
@14 // 8302
M=D // 8303
@Output.create // 8304
D=A // 8305
@13 // 8306
M=D // 8307
@Output.init.ret.42 // 8308
D=A // 8309
@CALL // 8310
0;JMP // 8311
(Output.init.ret.42)
@SP // 8312
M=M-1 // 8313

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 73"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@73 // 8314
D=A // 8315
@SP // 8316
AM=M+1 // 8317
A=A-1 // 8318
M=D // 8319
@30 // 8320
D=A // 8321
@SP // 8322
AM=M+1 // 8323
A=A-1 // 8324
M=D // 8325
@12 // 8326
D=A // 8327
@SP // 8328
AM=M+1 // 8329
A=A-1 // 8330
M=D // 8331
@12 // 8332
D=A // 8333
@SP // 8334
AM=M+1 // 8335
A=A-1 // 8336
M=D // 8337
@12 // 8338
D=A // 8339
@SP // 8340
AM=M+1 // 8341
A=A-1 // 8342
M=D // 8343
@12 // 8344
D=A // 8345
@SP // 8346
AM=M+1 // 8347
A=A-1 // 8348
M=D // 8349
@12 // 8350
D=A // 8351
@SP // 8352
AM=M+1 // 8353
A=A-1 // 8354
M=D // 8355
@12 // 8356
D=A // 8357
@SP // 8358
AM=M+1 // 8359
A=A-1 // 8360
M=D // 8361
@12 // 8362
D=A // 8363
@SP // 8364
AM=M+1 // 8365
A=A-1 // 8366
M=D // 8367
@30 // 8368
D=A // 8369
@SP // 8370
AM=M+1 // 8371
A=A-1 // 8372
M=D // 8373
@SP // 8374
AM=M+1 // 8375
A=A-1 // 8376
M=0 // 8377
@SP // 8378
AM=M+1 // 8379
A=A-1 // 8380
M=0 // 8381
// call Output.create
@17 // 8382
D=A // 8383
@14 // 8384
M=D // 8385
@Output.create // 8386
D=A // 8387
@13 // 8388
M=D // 8389
@Output.init.ret.43 // 8390
D=A // 8391
@CALL // 8392
0;JMP // 8393
(Output.init.ret.43)
@SP // 8394
M=M-1 // 8395

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 74"), PushInstruction("constant 60"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 14"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@74 // 8396
D=A // 8397
@SP // 8398
AM=M+1 // 8399
A=A-1 // 8400
M=D // 8401
@60 // 8402
D=A // 8403
@SP // 8404
AM=M+1 // 8405
A=A-1 // 8406
M=D // 8407
@24 // 8408
D=A // 8409
@SP // 8410
AM=M+1 // 8411
A=A-1 // 8412
M=D // 8413
@24 // 8414
D=A // 8415
@SP // 8416
AM=M+1 // 8417
A=A-1 // 8418
M=D // 8419
@24 // 8420
D=A // 8421
@SP // 8422
AM=M+1 // 8423
A=A-1 // 8424
M=D // 8425
@24 // 8426
D=A // 8427
@SP // 8428
AM=M+1 // 8429
A=A-1 // 8430
M=D // 8431
@24 // 8432
D=A // 8433
@SP // 8434
AM=M+1 // 8435
A=A-1 // 8436
M=D // 8437
@27 // 8438
D=A // 8439
@SP // 8440
AM=M+1 // 8441
A=A-1 // 8442
M=D // 8443
@27 // 8444
D=A // 8445
@SP // 8446
AM=M+1 // 8447
A=A-1 // 8448
M=D // 8449
@14 // 8450
D=A // 8451
@SP // 8452
AM=M+1 // 8453
A=A-1 // 8454
M=D // 8455
@SP // 8456
AM=M+1 // 8457
A=A-1 // 8458
M=0 // 8459
@SP // 8460
AM=M+1 // 8461
A=A-1 // 8462
M=0 // 8463
// call Output.create
@17 // 8464
D=A // 8465
@14 // 8466
M=D // 8467
@Output.create // 8468
D=A // 8469
@13 // 8470
M=D // 8471
@Output.init.ret.44 // 8472
D=A // 8473
@CALL // 8474
0;JMP // 8475
(Output.init.ret.44)
@SP // 8476
M=M-1 // 8477

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 75"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@75 // 8478
D=A // 8479
@SP // 8480
AM=M+1 // 8481
A=A-1 // 8482
M=D // 8483
@51 // 8484
D=A // 8485
@SP // 8486
AM=M+1 // 8487
A=A-1 // 8488
M=D // 8489
@51 // 8490
D=A // 8491
@SP // 8492
AM=M+1 // 8493
A=A-1 // 8494
M=D // 8495
@51 // 8496
D=A // 8497
@SP // 8498
AM=M+1 // 8499
A=A-1 // 8500
M=D // 8501
@27 // 8502
D=A // 8503
@SP // 8504
AM=M+1 // 8505
A=A-1 // 8506
M=D // 8507
@15 // 8508
D=A // 8509
@SP // 8510
AM=M+1 // 8511
A=A-1 // 8512
M=D // 8513
@27 // 8514
D=A // 8515
@SP // 8516
AM=M+1 // 8517
A=A-1 // 8518
M=D // 8519
@51 // 8520
D=A // 8521
@SP // 8522
AM=M+1 // 8523
A=A-1 // 8524
M=D // 8525
@51 // 8526
D=A // 8527
@SP // 8528
AM=M+1 // 8529
A=A-1 // 8530
M=D // 8531
@51 // 8532
D=A // 8533
@SP // 8534
AM=M+1 // 8535
A=A-1 // 8536
M=D // 8537
@SP // 8538
AM=M+1 // 8539
A=A-1 // 8540
M=0 // 8541
@SP // 8542
AM=M+1 // 8543
A=A-1 // 8544
M=0 // 8545
// call Output.create
@17 // 8546
D=A // 8547
@14 // 8548
M=D // 8549
@Output.create // 8550
D=A // 8551
@13 // 8552
M=D // 8553
@Output.init.ret.45 // 8554
D=A // 8555
@CALL // 8556
0;JMP // 8557
(Output.init.ret.45)
@SP // 8558
M=M-1 // 8559

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 76"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@76 // 8560
D=A // 8561
@SP // 8562
AM=M+1 // 8563
A=A-1 // 8564
M=D // 8565
@3 // 8566
D=A // 8567
@SP // 8568
AM=M+1 // 8569
A=A-1 // 8570
M=D // 8571
@3 // 8572
D=A // 8573
@SP // 8574
AM=M+1 // 8575
A=A-1 // 8576
M=D // 8577
@3 // 8578
D=A // 8579
@SP // 8580
AM=M+1 // 8581
A=A-1 // 8582
M=D // 8583
@3 // 8584
D=A // 8585
@SP // 8586
AM=M+1 // 8587
A=A-1 // 8588
M=D // 8589
@3 // 8590
D=A // 8591
@SP // 8592
AM=M+1 // 8593
A=A-1 // 8594
M=D // 8595
@3 // 8596
D=A // 8597
@SP // 8598
AM=M+1 // 8599
A=A-1 // 8600
M=D // 8601
@35 // 8602
D=A // 8603
@SP // 8604
AM=M+1 // 8605
A=A-1 // 8606
M=D // 8607
@51 // 8608
D=A // 8609
@SP // 8610
AM=M+1 // 8611
A=A-1 // 8612
M=D // 8613
@63 // 8614
D=A // 8615
@SP // 8616
AM=M+1 // 8617
A=A-1 // 8618
M=D // 8619
@SP // 8620
AM=M+1 // 8621
A=A-1 // 8622
M=0 // 8623
@SP // 8624
AM=M+1 // 8625
A=A-1 // 8626
M=0 // 8627
// call Output.create
@17 // 8628
D=A // 8629
@14 // 8630
M=D // 8631
@Output.create // 8632
D=A // 8633
@13 // 8634
M=D // 8635
@Output.init.ret.46 // 8636
D=A // 8637
@CALL // 8638
0;JMP // 8639
(Output.init.ret.46)
@SP // 8640
M=M-1 // 8641

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 77"), PushInstruction("constant 33"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@77 // 8642
D=A // 8643
@SP // 8644
AM=M+1 // 8645
A=A-1 // 8646
M=D // 8647
@33 // 8648
D=A // 8649
@SP // 8650
AM=M+1 // 8651
A=A-1 // 8652
M=D // 8653
@51 // 8654
D=A // 8655
@SP // 8656
AM=M+1 // 8657
A=A-1 // 8658
M=D // 8659
@63 // 8660
D=A // 8661
@SP // 8662
AM=M+1 // 8663
A=A-1 // 8664
M=D // 8665
@63 // 8666
D=A // 8667
@SP // 8668
AM=M+1 // 8669
A=A-1 // 8670
M=D // 8671
@51 // 8672
D=A // 8673
@SP // 8674
AM=M+1 // 8675
A=A-1 // 8676
M=D // 8677
@51 // 8678
D=A // 8679
@SP // 8680
AM=M+1 // 8681
A=A-1 // 8682
M=D // 8683
@51 // 8684
D=A // 8685
@SP // 8686
AM=M+1 // 8687
A=A-1 // 8688
M=D // 8689
@51 // 8690
D=A // 8691
@SP // 8692
AM=M+1 // 8693
A=A-1 // 8694
M=D // 8695
@51 // 8696
D=A // 8697
@SP // 8698
AM=M+1 // 8699
A=A-1 // 8700
M=D // 8701
@SP // 8702
AM=M+1 // 8703
A=A-1 // 8704
M=0 // 8705
@SP // 8706
AM=M+1 // 8707
A=A-1 // 8708
M=0 // 8709
// call Output.create
@17 // 8710
D=A // 8711
@14 // 8712
M=D // 8713
@Output.create // 8714
D=A // 8715
@13 // 8716
M=D // 8717
@Output.init.ret.47 // 8718
D=A // 8719
@CALL // 8720
0;JMP // 8721
(Output.init.ret.47)
@SP // 8722
M=M-1 // 8723

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 78"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 55"), PushInstruction("constant 55"), PushInstruction("constant 63"), PushInstruction("constant 59"), PushInstruction("constant 59"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@78 // 8724
D=A // 8725
@SP // 8726
AM=M+1 // 8727
A=A-1 // 8728
M=D // 8729
@51 // 8730
D=A // 8731
@SP // 8732
AM=M+1 // 8733
A=A-1 // 8734
M=D // 8735
@51 // 8736
D=A // 8737
@SP // 8738
AM=M+1 // 8739
A=A-1 // 8740
M=D // 8741
@55 // 8742
D=A // 8743
@SP // 8744
AM=M+1 // 8745
A=A-1 // 8746
M=D // 8747
@55 // 8748
D=A // 8749
@SP // 8750
AM=M+1 // 8751
A=A-1 // 8752
M=D // 8753
@63 // 8754
D=A // 8755
@SP // 8756
AM=M+1 // 8757
A=A-1 // 8758
M=D // 8759
@59 // 8760
D=A // 8761
@SP // 8762
AM=M+1 // 8763
A=A-1 // 8764
M=D // 8765
@59 // 8766
D=A // 8767
@SP // 8768
AM=M+1 // 8769
A=A-1 // 8770
M=D // 8771
@51 // 8772
D=A // 8773
@SP // 8774
AM=M+1 // 8775
A=A-1 // 8776
M=D // 8777
@51 // 8778
D=A // 8779
@SP // 8780
AM=M+1 // 8781
A=A-1 // 8782
M=D // 8783
@SP // 8784
AM=M+1 // 8785
A=A-1 // 8786
M=0 // 8787
@SP // 8788
AM=M+1 // 8789
A=A-1 // 8790
M=0 // 8791
// call Output.create
@17 // 8792
D=A // 8793
@14 // 8794
M=D // 8795
@Output.create // 8796
D=A // 8797
@13 // 8798
M=D // 8799
@Output.init.ret.48 // 8800
D=A // 8801
@CALL // 8802
0;JMP // 8803
(Output.init.ret.48)
@SP // 8804
M=M-1 // 8805

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 79"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@79 // 8806
D=A // 8807
@SP // 8808
AM=M+1 // 8809
A=A-1 // 8810
M=D // 8811
@30 // 8812
D=A // 8813
@SP // 8814
AM=M+1 // 8815
A=A-1 // 8816
M=D // 8817
@51 // 8818
D=A // 8819
@SP // 8820
AM=M+1 // 8821
A=A-1 // 8822
M=D // 8823
@51 // 8824
D=A // 8825
@SP // 8826
AM=M+1 // 8827
A=A-1 // 8828
M=D // 8829
@51 // 8830
D=A // 8831
@SP // 8832
AM=M+1 // 8833
A=A-1 // 8834
M=D // 8835
@51 // 8836
D=A // 8837
@SP // 8838
AM=M+1 // 8839
A=A-1 // 8840
M=D // 8841
@51 // 8842
D=A // 8843
@SP // 8844
AM=M+1 // 8845
A=A-1 // 8846
M=D // 8847
@51 // 8848
D=A // 8849
@SP // 8850
AM=M+1 // 8851
A=A-1 // 8852
M=D // 8853
@51 // 8854
D=A // 8855
@SP // 8856
AM=M+1 // 8857
A=A-1 // 8858
M=D // 8859
@30 // 8860
D=A // 8861
@SP // 8862
AM=M+1 // 8863
A=A-1 // 8864
M=D // 8865
@SP // 8866
AM=M+1 // 8867
A=A-1 // 8868
M=0 // 8869
@SP // 8870
AM=M+1 // 8871
A=A-1 // 8872
M=0 // 8873
// call Output.create
@17 // 8874
D=A // 8875
@14 // 8876
M=D // 8877
@Output.create // 8878
D=A // 8879
@13 // 8880
M=D // 8881
@Output.init.ret.49 // 8882
D=A // 8883
@CALL // 8884
0;JMP // 8885
(Output.init.ret.49)
@SP // 8886
M=M-1 // 8887

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 80"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@80 // 8888
D=A // 8889
@SP // 8890
AM=M+1 // 8891
A=A-1 // 8892
M=D // 8893
@31 // 8894
D=A // 8895
@SP // 8896
AM=M+1 // 8897
A=A-1 // 8898
M=D // 8899
@51 // 8900
D=A // 8901
@SP // 8902
AM=M+1 // 8903
A=A-1 // 8904
M=D // 8905
@51 // 8906
D=A // 8907
@SP // 8908
AM=M+1 // 8909
A=A-1 // 8910
M=D // 8911
@51 // 8912
D=A // 8913
@SP // 8914
AM=M+1 // 8915
A=A-1 // 8916
M=D // 8917
@31 // 8918
D=A // 8919
@SP // 8920
AM=M+1 // 8921
A=A-1 // 8922
M=D // 8923
@3 // 8924
D=A // 8925
@SP // 8926
AM=M+1 // 8927
A=A-1 // 8928
M=D // 8929
@3 // 8930
D=A // 8931
@SP // 8932
AM=M+1 // 8933
A=A-1 // 8934
M=D // 8935
@3 // 8936
D=A // 8937
@SP // 8938
AM=M+1 // 8939
A=A-1 // 8940
M=D // 8941
@3 // 8942
D=A // 8943
@SP // 8944
AM=M+1 // 8945
A=A-1 // 8946
M=D // 8947
@SP // 8948
AM=M+1 // 8949
A=A-1 // 8950
M=0 // 8951
@SP // 8952
AM=M+1 // 8953
A=A-1 // 8954
M=0 // 8955
// call Output.create
@17 // 8956
D=A // 8957
@14 // 8958
M=D // 8959
@Output.create // 8960
D=A // 8961
@13 // 8962
M=D // 8963
@Output.init.ret.50 // 8964
D=A // 8965
@CALL // 8966
0;JMP // 8967
(Output.init.ret.50)
@SP // 8968
M=M-1 // 8969

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 81"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 59"), PushInstruction("constant 30"), PushInstruction("constant 48"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@81 // 8970
D=A // 8971
@SP // 8972
AM=M+1 // 8973
A=A-1 // 8974
M=D // 8975
@30 // 8976
D=A // 8977
@SP // 8978
AM=M+1 // 8979
A=A-1 // 8980
M=D // 8981
@51 // 8982
D=A // 8983
@SP // 8984
AM=M+1 // 8985
A=A-1 // 8986
M=D // 8987
@51 // 8988
D=A // 8989
@SP // 8990
AM=M+1 // 8991
A=A-1 // 8992
M=D // 8993
@51 // 8994
D=A // 8995
@SP // 8996
AM=M+1 // 8997
A=A-1 // 8998
M=D // 8999
@51 // 9000
D=A // 9001
@SP // 9002
AM=M+1 // 9003
A=A-1 // 9004
M=D // 9005
@51 // 9006
D=A // 9007
@SP // 9008
AM=M+1 // 9009
A=A-1 // 9010
M=D // 9011
@63 // 9012
D=A // 9013
@SP // 9014
AM=M+1 // 9015
A=A-1 // 9016
M=D // 9017
@59 // 9018
D=A // 9019
@SP // 9020
AM=M+1 // 9021
A=A-1 // 9022
M=D // 9023
@30 // 9024
D=A // 9025
@SP // 9026
AM=M+1 // 9027
A=A-1 // 9028
M=D // 9029
@48 // 9030
D=A // 9031
@SP // 9032
AM=M+1 // 9033
A=A-1 // 9034
M=D // 9035
@SP // 9036
AM=M+1 // 9037
A=A-1 // 9038
M=0 // 9039
// call Output.create
@17 // 9040
D=A // 9041
@14 // 9042
M=D // 9043
@Output.create // 9044
D=A // 9045
@13 // 9046
M=D // 9047
@Output.init.ret.51 // 9048
D=A // 9049
@CALL // 9050
0;JMP // 9051
(Output.init.ret.51)
@SP // 9052
M=M-1 // 9053

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 82"), PushInstruction("constant 31"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@82 // 9054
D=A // 9055
@SP // 9056
AM=M+1 // 9057
A=A-1 // 9058
M=D // 9059
@31 // 9060
D=A // 9061
@SP // 9062
AM=M+1 // 9063
A=A-1 // 9064
M=D // 9065
@51 // 9066
D=A // 9067
@SP // 9068
AM=M+1 // 9069
A=A-1 // 9070
M=D // 9071
@51 // 9072
D=A // 9073
@SP // 9074
AM=M+1 // 9075
A=A-1 // 9076
M=D // 9077
@51 // 9078
D=A // 9079
@SP // 9080
AM=M+1 // 9081
A=A-1 // 9082
M=D // 9083
@31 // 9084
D=A // 9085
@SP // 9086
AM=M+1 // 9087
A=A-1 // 9088
M=D // 9089
@27 // 9090
D=A // 9091
@SP // 9092
AM=M+1 // 9093
A=A-1 // 9094
M=D // 9095
@51 // 9096
D=A // 9097
@SP // 9098
AM=M+1 // 9099
A=A-1 // 9100
M=D // 9101
@51 // 9102
D=A // 9103
@SP // 9104
AM=M+1 // 9105
A=A-1 // 9106
M=D // 9107
@51 // 9108
D=A // 9109
@SP // 9110
AM=M+1 // 9111
A=A-1 // 9112
M=D // 9113
@SP // 9114
AM=M+1 // 9115
A=A-1 // 9116
M=0 // 9117
@SP // 9118
AM=M+1 // 9119
A=A-1 // 9120
M=0 // 9121
// call Output.create
@17 // 9122
D=A // 9123
@14 // 9124
M=D // 9125
@Output.create // 9126
D=A // 9127
@13 // 9128
M=D // 9129
@Output.init.ret.52 // 9130
D=A // 9131
@CALL // 9132
0;JMP // 9133
(Output.init.ret.52)
@SP // 9134
M=M-1 // 9135

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 83"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 6"), PushInstruction("constant 28"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@83 // 9136
D=A // 9137
@SP // 9138
AM=M+1 // 9139
A=A-1 // 9140
M=D // 9141
@30 // 9142
D=A // 9143
@SP // 9144
AM=M+1 // 9145
A=A-1 // 9146
M=D // 9147
@51 // 9148
D=A // 9149
@SP // 9150
AM=M+1 // 9151
A=A-1 // 9152
M=D // 9153
@51 // 9154
D=A // 9155
@SP // 9156
AM=M+1 // 9157
A=A-1 // 9158
M=D // 9159
@6 // 9160
D=A // 9161
@SP // 9162
AM=M+1 // 9163
A=A-1 // 9164
M=D // 9165
@28 // 9166
D=A // 9167
@SP // 9168
AM=M+1 // 9169
A=A-1 // 9170
M=D // 9171
@48 // 9172
D=A // 9173
@SP // 9174
AM=M+1 // 9175
A=A-1 // 9176
M=D // 9177
@51 // 9178
D=A // 9179
@SP // 9180
AM=M+1 // 9181
A=A-1 // 9182
M=D // 9183
@51 // 9184
D=A // 9185
@SP // 9186
AM=M+1 // 9187
A=A-1 // 9188
M=D // 9189
@30 // 9190
D=A // 9191
@SP // 9192
AM=M+1 // 9193
A=A-1 // 9194
M=D // 9195
@SP // 9196
AM=M+1 // 9197
A=A-1 // 9198
M=0 // 9199
@SP // 9200
AM=M+1 // 9201
A=A-1 // 9202
M=0 // 9203
// call Output.create
@17 // 9204
D=A // 9205
@14 // 9206
M=D // 9207
@Output.create // 9208
D=A // 9209
@13 // 9210
M=D // 9211
@Output.init.ret.53 // 9212
D=A // 9213
@CALL // 9214
0;JMP // 9215
(Output.init.ret.53)
@SP // 9216
M=M-1 // 9217

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 84"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 45"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@84 // 9218
D=A // 9219
@SP // 9220
AM=M+1 // 9221
A=A-1 // 9222
M=D // 9223
@63 // 9224
D=A // 9225
@SP // 9226
AM=M+1 // 9227
A=A-1 // 9228
M=D // 9229
@63 // 9230
D=A // 9231
@SP // 9232
AM=M+1 // 9233
A=A-1 // 9234
M=D // 9235
@45 // 9236
D=A // 9237
@SP // 9238
AM=M+1 // 9239
A=A-1 // 9240
M=D // 9241
@12 // 9242
D=A // 9243
@SP // 9244
AM=M+1 // 9245
A=A-1 // 9246
M=D // 9247
@12 // 9248
D=A // 9249
@SP // 9250
AM=M+1 // 9251
A=A-1 // 9252
M=D // 9253
@12 // 9254
D=A // 9255
@SP // 9256
AM=M+1 // 9257
A=A-1 // 9258
M=D // 9259
@12 // 9260
D=A // 9261
@SP // 9262
AM=M+1 // 9263
A=A-1 // 9264
M=D // 9265
@12 // 9266
D=A // 9267
@SP // 9268
AM=M+1 // 9269
A=A-1 // 9270
M=D // 9271
@30 // 9272
D=A // 9273
@SP // 9274
AM=M+1 // 9275
A=A-1 // 9276
M=D // 9277
@SP // 9278
AM=M+1 // 9279
A=A-1 // 9280
M=0 // 9281
@SP // 9282
AM=M+1 // 9283
A=A-1 // 9284
M=0 // 9285
// call Output.create
@17 // 9286
D=A // 9287
@14 // 9288
M=D // 9289
@Output.create // 9290
D=A // 9291
@13 // 9292
M=D // 9293
@Output.init.ret.54 // 9294
D=A // 9295
@CALL // 9296
0;JMP // 9297
(Output.init.ret.54)
@SP // 9298
M=M-1 // 9299

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 85"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@85 // 9300
D=A // 9301
@SP // 9302
AM=M+1 // 9303
A=A-1 // 9304
M=D // 9305
@51 // 9306
D=A // 9307
@SP // 9308
AM=M+1 // 9309
A=A-1 // 9310
M=D // 9311
@51 // 9312
D=A // 9313
@SP // 9314
AM=M+1 // 9315
A=A-1 // 9316
M=D // 9317
@51 // 9318
D=A // 9319
@SP // 9320
AM=M+1 // 9321
A=A-1 // 9322
M=D // 9323
@51 // 9324
D=A // 9325
@SP // 9326
AM=M+1 // 9327
A=A-1 // 9328
M=D // 9329
@51 // 9330
D=A // 9331
@SP // 9332
AM=M+1 // 9333
A=A-1 // 9334
M=D // 9335
@51 // 9336
D=A // 9337
@SP // 9338
AM=M+1 // 9339
A=A-1 // 9340
M=D // 9341
@51 // 9342
D=A // 9343
@SP // 9344
AM=M+1 // 9345
A=A-1 // 9346
M=D // 9347
@51 // 9348
D=A // 9349
@SP // 9350
AM=M+1 // 9351
A=A-1 // 9352
M=D // 9353
@30 // 9354
D=A // 9355
@SP // 9356
AM=M+1 // 9357
A=A-1 // 9358
M=D // 9359
@SP // 9360
AM=M+1 // 9361
A=A-1 // 9362
M=0 // 9363
@SP // 9364
AM=M+1 // 9365
A=A-1 // 9366
M=0 // 9367
// call Output.create
@17 // 9368
D=A // 9369
@14 // 9370
M=D // 9371
@Output.create // 9372
D=A // 9373
@13 // 9374
M=D // 9375
@Output.init.ret.55 // 9376
D=A // 9377
@CALL // 9378
0;JMP // 9379
(Output.init.ret.55)
@SP // 9380
M=M-1 // 9381

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 86"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@86 // 9382
D=A // 9383
@SP // 9384
AM=M+1 // 9385
A=A-1 // 9386
M=D // 9387
@51 // 9388
D=A // 9389
@SP // 9390
AM=M+1 // 9391
A=A-1 // 9392
M=D // 9393
@51 // 9394
D=A // 9395
@SP // 9396
AM=M+1 // 9397
A=A-1 // 9398
M=D // 9399
@51 // 9400
D=A // 9401
@SP // 9402
AM=M+1 // 9403
A=A-1 // 9404
M=D // 9405
@51 // 9406
D=A // 9407
@SP // 9408
AM=M+1 // 9409
A=A-1 // 9410
M=D // 9411
@51 // 9412
D=A // 9413
@SP // 9414
AM=M+1 // 9415
A=A-1 // 9416
M=D // 9417
@30 // 9418
D=A // 9419
@SP // 9420
AM=M+1 // 9421
A=A-1 // 9422
M=D // 9423
@30 // 9424
D=A // 9425
@SP // 9426
AM=M+1 // 9427
A=A-1 // 9428
M=D // 9429
@12 // 9430
D=A // 9431
@SP // 9432
AM=M+1 // 9433
A=A-1 // 9434
M=D // 9435
@12 // 9436
D=A // 9437
@SP // 9438
AM=M+1 // 9439
A=A-1 // 9440
M=D // 9441
@SP // 9442
AM=M+1 // 9443
A=A-1 // 9444
M=0 // 9445
@SP // 9446
AM=M+1 // 9447
A=A-1 // 9448
M=0 // 9449
// call Output.create
@17 // 9450
D=A // 9451
@14 // 9452
M=D // 9453
@Output.create // 9454
D=A // 9455
@13 // 9456
M=D // 9457
@Output.init.ret.56 // 9458
D=A // 9459
@CALL // 9460
0;JMP // 9461
(Output.init.ret.56)
@SP // 9462
M=M-1 // 9463

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 87"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@87 // 9464
D=A // 9465
@SP // 9466
AM=M+1 // 9467
A=A-1 // 9468
M=D // 9469
@51 // 9470
D=A // 9471
@SP // 9472
AM=M+1 // 9473
A=A-1 // 9474
M=D // 9475
@51 // 9476
D=A // 9477
@SP // 9478
AM=M+1 // 9479
A=A-1 // 9480
M=D // 9481
@51 // 9482
D=A // 9483
@SP // 9484
AM=M+1 // 9485
A=A-1 // 9486
M=D // 9487
@51 // 9488
D=A // 9489
@SP // 9490
AM=M+1 // 9491
A=A-1 // 9492
M=D // 9493
@51 // 9494
D=A // 9495
@SP // 9496
AM=M+1 // 9497
A=A-1 // 9498
M=D // 9499
@63 // 9500
D=A // 9501
@SP // 9502
AM=M+1 // 9503
A=A-1 // 9504
M=D // 9505
@63 // 9506
D=A // 9507
@SP // 9508
AM=M+1 // 9509
A=A-1 // 9510
M=D // 9511
@63 // 9512
D=A // 9513
@SP // 9514
AM=M+1 // 9515
A=A-1 // 9516
M=D // 9517
@18 // 9518
D=A // 9519
@SP // 9520
AM=M+1 // 9521
A=A-1 // 9522
M=D // 9523
@SP // 9524
AM=M+1 // 9525
A=A-1 // 9526
M=0 // 9527
@SP // 9528
AM=M+1 // 9529
A=A-1 // 9530
M=0 // 9531
// call Output.create
@17 // 9532
D=A // 9533
@14 // 9534
M=D // 9535
@Output.create // 9536
D=A // 9537
@13 // 9538
M=D // 9539
@Output.init.ret.57 // 9540
D=A // 9541
@CALL // 9542
0;JMP // 9543
(Output.init.ret.57)
@SP // 9544
M=M-1 // 9545

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 88"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@88 // 9546
D=A // 9547
@SP // 9548
AM=M+1 // 9549
A=A-1 // 9550
M=D // 9551
@51 // 9552
D=A // 9553
@SP // 9554
AM=M+1 // 9555
A=A-1 // 9556
M=D // 9557
@51 // 9558
D=A // 9559
@SP // 9560
AM=M+1 // 9561
A=A-1 // 9562
M=D // 9563
@30 // 9564
D=A // 9565
@SP // 9566
AM=M+1 // 9567
A=A-1 // 9568
M=D // 9569
@30 // 9570
D=A // 9571
@SP // 9572
AM=M+1 // 9573
A=A-1 // 9574
M=D // 9575
@12 // 9576
D=A // 9577
@SP // 9578
AM=M+1 // 9579
A=A-1 // 9580
M=D // 9581
@30 // 9582
D=A // 9583
@SP // 9584
AM=M+1 // 9585
A=A-1 // 9586
M=D // 9587
@30 // 9588
D=A // 9589
@SP // 9590
AM=M+1 // 9591
A=A-1 // 9592
M=D // 9593
@51 // 9594
D=A // 9595
@SP // 9596
AM=M+1 // 9597
A=A-1 // 9598
M=D // 9599
@51 // 9600
D=A // 9601
@SP // 9602
AM=M+1 // 9603
A=A-1 // 9604
M=D // 9605
@SP // 9606
AM=M+1 // 9607
A=A-1 // 9608
M=0 // 9609
@SP // 9610
AM=M+1 // 9611
A=A-1 // 9612
M=0 // 9613
// call Output.create
@17 // 9614
D=A // 9615
@14 // 9616
M=D // 9617
@Output.create // 9618
D=A // 9619
@13 // 9620
M=D // 9621
@Output.init.ret.58 // 9622
D=A // 9623
@CALL // 9624
0;JMP // 9625
(Output.init.ret.58)
@SP // 9626
M=M-1 // 9627

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 89"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@89 // 9628
D=A // 9629
@SP // 9630
AM=M+1 // 9631
A=A-1 // 9632
M=D // 9633
@51 // 9634
D=A // 9635
@SP // 9636
AM=M+1 // 9637
A=A-1 // 9638
M=D // 9639
@51 // 9640
D=A // 9641
@SP // 9642
AM=M+1 // 9643
A=A-1 // 9644
M=D // 9645
@51 // 9646
D=A // 9647
@SP // 9648
AM=M+1 // 9649
A=A-1 // 9650
M=D // 9651
@51 // 9652
D=A // 9653
@SP // 9654
AM=M+1 // 9655
A=A-1 // 9656
M=D // 9657
@30 // 9658
D=A // 9659
@SP // 9660
AM=M+1 // 9661
A=A-1 // 9662
M=D // 9663
@12 // 9664
D=A // 9665
@SP // 9666
AM=M+1 // 9667
A=A-1 // 9668
M=D // 9669
@12 // 9670
D=A // 9671
@SP // 9672
AM=M+1 // 9673
A=A-1 // 9674
M=D // 9675
@12 // 9676
D=A // 9677
@SP // 9678
AM=M+1 // 9679
A=A-1 // 9680
M=D // 9681
@30 // 9682
D=A // 9683
@SP // 9684
AM=M+1 // 9685
A=A-1 // 9686
M=D // 9687
@SP // 9688
AM=M+1 // 9689
A=A-1 // 9690
M=0 // 9691
@SP // 9692
AM=M+1 // 9693
A=A-1 // 9694
M=0 // 9695
// call Output.create
@17 // 9696
D=A // 9697
@14 // 9698
M=D // 9699
@Output.create // 9700
D=A // 9701
@13 // 9702
M=D // 9703
@Output.init.ret.59 // 9704
D=A // 9705
@CALL // 9706
0;JMP // 9707
(Output.init.ret.59)
@SP // 9708
M=M-1 // 9709

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 90"), PushInstruction("constant 63"), PushInstruction("constant 51"), PushInstruction("constant 49"), PushInstruction("constant 24"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 35"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@90 // 9710
D=A // 9711
@SP // 9712
AM=M+1 // 9713
A=A-1 // 9714
M=D // 9715
@63 // 9716
D=A // 9717
@SP // 9718
AM=M+1 // 9719
A=A-1 // 9720
M=D // 9721
@51 // 9722
D=A // 9723
@SP // 9724
AM=M+1 // 9725
A=A-1 // 9726
M=D // 9727
@49 // 9728
D=A // 9729
@SP // 9730
AM=M+1 // 9731
A=A-1 // 9732
M=D // 9733
@24 // 9734
D=A // 9735
@SP // 9736
AM=M+1 // 9737
A=A-1 // 9738
M=D // 9739
@12 // 9740
D=A // 9741
@SP // 9742
AM=M+1 // 9743
A=A-1 // 9744
M=D // 9745
@6 // 9746
D=A // 9747
@SP // 9748
AM=M+1 // 9749
A=A-1 // 9750
M=D // 9751
@35 // 9752
D=A // 9753
@SP // 9754
AM=M+1 // 9755
A=A-1 // 9756
M=D // 9757
@51 // 9758
D=A // 9759
@SP // 9760
AM=M+1 // 9761
A=A-1 // 9762
M=D // 9763
@63 // 9764
D=A // 9765
@SP // 9766
AM=M+1 // 9767
A=A-1 // 9768
M=D // 9769
@SP // 9770
AM=M+1 // 9771
A=A-1 // 9772
M=0 // 9773
@SP // 9774
AM=M+1 // 9775
A=A-1 // 9776
M=0 // 9777
// call Output.create
@17 // 9778
D=A // 9779
@14 // 9780
M=D // 9781
@Output.create // 9782
D=A // 9783
@13 // 9784
M=D // 9785
@Output.init.ret.60 // 9786
D=A // 9787
@CALL // 9788
0;JMP // 9789
(Output.init.ret.60)
@SP // 9790
M=M-1 // 9791

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 91"), PushInstruction("constant 30"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@91 // 9792
D=A // 9793
@SP // 9794
AM=M+1 // 9795
A=A-1 // 9796
M=D // 9797
@30 // 9798
D=A // 9799
@SP // 9800
AM=M+1 // 9801
A=A-1 // 9802
M=D // 9803
@6 // 9804
D=A // 9805
@SP // 9806
AM=M+1 // 9807
A=A-1 // 9808
M=D // 9809
@6 // 9810
D=A // 9811
@SP // 9812
AM=M+1 // 9813
A=A-1 // 9814
M=D // 9815
@6 // 9816
D=A // 9817
@SP // 9818
AM=M+1 // 9819
A=A-1 // 9820
M=D // 9821
@6 // 9822
D=A // 9823
@SP // 9824
AM=M+1 // 9825
A=A-1 // 9826
M=D // 9827
@6 // 9828
D=A // 9829
@SP // 9830
AM=M+1 // 9831
A=A-1 // 9832
M=D // 9833
@6 // 9834
D=A // 9835
@SP // 9836
AM=M+1 // 9837
A=A-1 // 9838
M=D // 9839
@6 // 9840
D=A // 9841
@SP // 9842
AM=M+1 // 9843
A=A-1 // 9844
M=D // 9845
@30 // 9846
D=A // 9847
@SP // 9848
AM=M+1 // 9849
A=A-1 // 9850
M=D // 9851
@SP // 9852
AM=M+1 // 9853
A=A-1 // 9854
M=0 // 9855
@SP // 9856
AM=M+1 // 9857
A=A-1 // 9858
M=0 // 9859
// call Output.create
@17 // 9860
D=A // 9861
@14 // 9862
M=D // 9863
@Output.create // 9864
D=A // 9865
@13 // 9866
M=D // 9867
@Output.init.ret.61 // 9868
D=A // 9869
@CALL // 9870
0;JMP // 9871
(Output.init.ret.61)
@SP // 9872
M=M-1 // 9873

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 92"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 1"), PushInstruction("constant 3"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 48"), PushInstruction("constant 32"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 9874
D=A // 9875
@SP // 9876
M=D+M // 9877
@92 // 9878
D=A // 9879
@SP // 9880
A=M-1 // 9881
M=1 // 9882
A=A-1 // 9883
M=0 // 9884
A=A-1 // 9885
M=0 // 9886
A=A-1 // 9887
M=D // 9888
A=A-1 // 9889
@3 // 9890
D=A // 9891
@SP // 9892
AM=M+1 // 9893
A=A-1 // 9894
M=D // 9895
@6 // 9896
D=A // 9897
@SP // 9898
AM=M+1 // 9899
A=A-1 // 9900
M=D // 9901
@12 // 9902
D=A // 9903
@SP // 9904
AM=M+1 // 9905
A=A-1 // 9906
M=D // 9907
@24 // 9908
D=A // 9909
@SP // 9910
AM=M+1 // 9911
A=A-1 // 9912
M=D // 9913
@48 // 9914
D=A // 9915
@SP // 9916
AM=M+1 // 9917
A=A-1 // 9918
M=D // 9919
@32 // 9920
D=A // 9921
@SP // 9922
AM=M+1 // 9923
A=A-1 // 9924
M=D // 9925
@SP // 9926
AM=M+1 // 9927
A=A-1 // 9928
M=0 // 9929
@SP // 9930
AM=M+1 // 9931
A=A-1 // 9932
M=0 // 9933
// call Output.create
@17 // 9934
D=A // 9935
@14 // 9936
M=D // 9937
@Output.create // 9938
D=A // 9939
@13 // 9940
M=D // 9941
@Output.init.ret.62 // 9942
D=A // 9943
@CALL // 9944
0;JMP // 9945
(Output.init.ret.62)
@SP // 9946
M=M-1 // 9947

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 93"), PushInstruction("constant 30"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 24"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@93 // 9948
D=A // 9949
@SP // 9950
AM=M+1 // 9951
A=A-1 // 9952
M=D // 9953
@30 // 9954
D=A // 9955
@SP // 9956
AM=M+1 // 9957
A=A-1 // 9958
M=D // 9959
@24 // 9960
D=A // 9961
@SP // 9962
AM=M+1 // 9963
A=A-1 // 9964
M=D // 9965
@24 // 9966
D=A // 9967
@SP // 9968
AM=M+1 // 9969
A=A-1 // 9970
M=D // 9971
@24 // 9972
D=A // 9973
@SP // 9974
AM=M+1 // 9975
A=A-1 // 9976
M=D // 9977
@24 // 9978
D=A // 9979
@SP // 9980
AM=M+1 // 9981
A=A-1 // 9982
M=D // 9983
@24 // 9984
D=A // 9985
@SP // 9986
AM=M+1 // 9987
A=A-1 // 9988
M=D // 9989
@24 // 9990
D=A // 9991
@SP // 9992
AM=M+1 // 9993
A=A-1 // 9994
M=D // 9995
@24 // 9996
D=A // 9997
@SP // 9998
AM=M+1 // 9999
A=A-1 // 10000
M=D // 10001
@30 // 10002
D=A // 10003
@SP // 10004
AM=M+1 // 10005
A=A-1 // 10006
M=D // 10007
@SP // 10008
AM=M+1 // 10009
A=A-1 // 10010
M=0 // 10011
@SP // 10012
AM=M+1 // 10013
A=A-1 // 10014
M=0 // 10015
// call Output.create
@17 // 10016
D=A // 10017
@14 // 10018
M=D // 10019
@Output.create // 10020
D=A // 10021
@13 // 10022
M=D // 10023
@Output.init.ret.63 // 10024
D=A // 10025
@CALL // 10026
0;JMP // 10027
(Output.init.ret.63)
@SP // 10028
M=M-1 // 10029

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 94"), PushInstruction("constant 8"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@94 // 10030
D=A // 10031
@SP // 10032
AM=M+1 // 10033
A=A-1 // 10034
M=D // 10035
@8 // 10036
D=A // 10037
@SP // 10038
AM=M+1 // 10039
A=A-1 // 10040
M=D // 10041
@28 // 10042
D=A // 10043
@SP // 10044
AM=M+1 // 10045
A=A-1 // 10046
M=D // 10047
@54 // 10048
D=A // 10049
@SP // 10050
AM=M+1 // 10051
A=A-1 // 10052
M=D // 10053
@SP // 10054
AM=M+1 // 10055
A=A-1 // 10056
M=0 // 10057
@SP // 10058
AM=M+1 // 10059
A=A-1 // 10060
M=0 // 10061
@SP // 10062
AM=M+1 // 10063
A=A-1 // 10064
M=0 // 10065
@SP // 10066
AM=M+1 // 10067
A=A-1 // 10068
M=0 // 10069
@SP // 10070
AM=M+1 // 10071
A=A-1 // 10072
M=0 // 10073
@SP // 10074
AM=M+1 // 10075
A=A-1 // 10076
M=0 // 10077
@SP // 10078
AM=M+1 // 10079
A=A-1 // 10080
M=0 // 10081
@SP // 10082
AM=M+1 // 10083
A=A-1 // 10084
M=0 // 10085
// call Output.create
@17 // 10086
D=A // 10087
@14 // 10088
M=D // 10089
@Output.create // 10090
D=A // 10091
@13 // 10092
M=D // 10093
@Output.init.ret.64 // 10094
D=A // 10095
@CALL // 10096
0;JMP // 10097
(Output.init.ret.64)
@SP // 10098
M=M-1 // 10099

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 95"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@10 // 10100
D=A // 10101
@SP // 10102
M=D+M // 10103
@95 // 10104
D=A // 10105
@SP // 10106
A=M-1 // 10107
M=0 // 10108
A=A-1 // 10109
M=0 // 10110
A=A-1 // 10111
M=0 // 10112
A=A-1 // 10113
M=0 // 10114
A=A-1 // 10115
M=0 // 10116
A=A-1 // 10117
M=0 // 10118
A=A-1 // 10119
M=0 // 10120
A=A-1 // 10121
M=0 // 10122
A=A-1 // 10123
M=0 // 10124
A=A-1 // 10125
M=D // 10126
A=A-1 // 10127
@2 // 10128
D=A // 10129
@SP // 10130
M=D+M // 10131
@63 // 10132
D=A // 10133
@SP // 10134
A=M-1 // 10135
M=0 // 10136
A=A-1 // 10137
M=D // 10138
A=A-1 // 10139
// call Output.create
@17 // 10140
D=A // 10141
@14 // 10142
M=D // 10143
@Output.create // 10144
D=A // 10145
@13 // 10146
M=D // 10147
@Output.init.ret.65 // 10148
D=A // 10149
@CALL // 10150
0;JMP // 10151
(Output.init.ret.65)
@SP // 10152
M=M-1 // 10153

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 96"), PushInstruction("constant 6"), PushInstruction("constant 12"), PushInstruction("constant 24"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@96 // 10154
D=A // 10155
@SP // 10156
AM=M+1 // 10157
A=A-1 // 10158
M=D // 10159
@6 // 10160
D=A // 10161
@SP // 10162
AM=M+1 // 10163
A=A-1 // 10164
M=D // 10165
@12 // 10166
D=A // 10167
@SP // 10168
AM=M+1 // 10169
A=A-1 // 10170
M=D // 10171
@24 // 10172
D=A // 10173
@SP // 10174
AM=M+1 // 10175
A=A-1 // 10176
M=D // 10177
@SP // 10178
AM=M+1 // 10179
A=A-1 // 10180
M=0 // 10181
@SP // 10182
AM=M+1 // 10183
A=A-1 // 10184
M=0 // 10185
@SP // 10186
AM=M+1 // 10187
A=A-1 // 10188
M=0 // 10189
@SP // 10190
AM=M+1 // 10191
A=A-1 // 10192
M=0 // 10193
@SP // 10194
AM=M+1 // 10195
A=A-1 // 10196
M=0 // 10197
@SP // 10198
AM=M+1 // 10199
A=A-1 // 10200
M=0 // 10201
@SP // 10202
AM=M+1 // 10203
A=A-1 // 10204
M=0 // 10205
@SP // 10206
AM=M+1 // 10207
A=A-1 // 10208
M=0 // 10209
// call Output.create
@17 // 10210
D=A // 10211
@14 // 10212
M=D // 10213
@Output.create // 10214
D=A // 10215
@13 // 10216
M=D // 10217
@Output.init.ret.66 // 10218
D=A // 10219
@CALL // 10220
0;JMP // 10221
(Output.init.ret.66)
@SP // 10222
M=M-1 // 10223

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 97"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 14"), PushInstruction("constant 24"), PushInstruction("constant 30"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 10224
D=A // 10225
@SP // 10226
M=D+M // 10227
@97 // 10228
D=A // 10229
@SP // 10230
A=M-1 // 10231
M=0 // 10232
A=A-1 // 10233
M=0 // 10234
A=A-1 // 10235
M=0 // 10236
A=A-1 // 10237
M=D // 10238
A=A-1 // 10239
@14 // 10240
D=A // 10241
@SP // 10242
AM=M+1 // 10243
A=A-1 // 10244
M=D // 10245
@24 // 10246
D=A // 10247
@SP // 10248
AM=M+1 // 10249
A=A-1 // 10250
M=D // 10251
@30 // 10252
D=A // 10253
@SP // 10254
AM=M+1 // 10255
A=A-1 // 10256
M=D // 10257
@27 // 10258
D=A // 10259
@SP // 10260
AM=M+1 // 10261
A=A-1 // 10262
M=D // 10263
@27 // 10264
D=A // 10265
@SP // 10266
AM=M+1 // 10267
A=A-1 // 10268
M=D // 10269
@54 // 10270
D=A // 10271
@SP // 10272
AM=M+1 // 10273
A=A-1 // 10274
M=D // 10275
@SP // 10276
AM=M+1 // 10277
A=A-1 // 10278
M=0 // 10279
@SP // 10280
AM=M+1 // 10281
A=A-1 // 10282
M=0 // 10283
// call Output.create
@17 // 10284
D=A // 10285
@14 // 10286
M=D // 10287
@Output.create // 10288
D=A // 10289
@13 // 10290
M=D // 10291
@Output.init.ret.67 // 10292
D=A // 10293
@CALL // 10294
0;JMP // 10295
(Output.init.ret.67)
@SP // 10296
M=M-1 // 10297

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 98"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@98 // 10298
D=A // 10299
@SP // 10300
AM=M+1 // 10301
A=A-1 // 10302
M=D // 10303
@3 // 10304
D=A // 10305
@SP // 10306
AM=M+1 // 10307
A=A-1 // 10308
M=D // 10309
@3 // 10310
D=A // 10311
@SP // 10312
AM=M+1 // 10313
A=A-1 // 10314
M=D // 10315
@3 // 10316
D=A // 10317
@SP // 10318
AM=M+1 // 10319
A=A-1 // 10320
M=D // 10321
@15 // 10322
D=A // 10323
@SP // 10324
AM=M+1 // 10325
A=A-1 // 10326
M=D // 10327
@27 // 10328
D=A // 10329
@SP // 10330
AM=M+1 // 10331
A=A-1 // 10332
M=D // 10333
@51 // 10334
D=A // 10335
@SP // 10336
AM=M+1 // 10337
A=A-1 // 10338
M=D // 10339
@51 // 10340
D=A // 10341
@SP // 10342
AM=M+1 // 10343
A=A-1 // 10344
M=D // 10345
@51 // 10346
D=A // 10347
@SP // 10348
AM=M+1 // 10349
A=A-1 // 10350
M=D // 10351
@30 // 10352
D=A // 10353
@SP // 10354
AM=M+1 // 10355
A=A-1 // 10356
M=D // 10357
@SP // 10358
AM=M+1 // 10359
A=A-1 // 10360
M=0 // 10361
@SP // 10362
AM=M+1 // 10363
A=A-1 // 10364
M=0 // 10365
// call Output.create
@17 // 10366
D=A // 10367
@14 // 10368
M=D // 10369
@Output.create // 10370
D=A // 10371
@13 // 10372
M=D // 10373
@Output.init.ret.68 // 10374
D=A // 10375
@CALL // 10376
0;JMP // 10377
(Output.init.ret.68)
@SP // 10378
M=M-1 // 10379

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 99"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 10380
D=A // 10381
@SP // 10382
M=D+M // 10383
@99 // 10384
D=A // 10385
@SP // 10386
A=M-1 // 10387
M=0 // 10388
A=A-1 // 10389
M=0 // 10390
A=A-1 // 10391
M=0 // 10392
A=A-1 // 10393
M=D // 10394
A=A-1 // 10395
@30 // 10396
D=A // 10397
@SP // 10398
AM=M+1 // 10399
A=A-1 // 10400
M=D // 10401
@51 // 10402
D=A // 10403
@SP // 10404
AM=M+1 // 10405
A=A-1 // 10406
M=D // 10407
@3 // 10408
D=A // 10409
@SP // 10410
AM=M+1 // 10411
A=A-1 // 10412
M=D // 10413
@3 // 10414
D=A // 10415
@SP // 10416
AM=M+1 // 10417
A=A-1 // 10418
M=D // 10419
@51 // 10420
D=A // 10421
@SP // 10422
AM=M+1 // 10423
A=A-1 // 10424
M=D // 10425
@30 // 10426
D=A // 10427
@SP // 10428
AM=M+1 // 10429
A=A-1 // 10430
M=D // 10431
@SP // 10432
AM=M+1 // 10433
A=A-1 // 10434
M=0 // 10435
@SP // 10436
AM=M+1 // 10437
A=A-1 // 10438
M=0 // 10439
// call Output.create
@17 // 10440
D=A // 10441
@14 // 10442
M=D // 10443
@Output.create // 10444
D=A // 10445
@13 // 10446
M=D // 10447
@Output.init.ret.69 // 10448
D=A // 10449
@CALL // 10450
0;JMP // 10451
(Output.init.ret.69)
@SP // 10452
M=M-1 // 10453

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 100"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 60"), PushInstruction("constant 54"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@100 // 10454
D=A // 10455
@SP // 10456
AM=M+1 // 10457
A=A-1 // 10458
M=D // 10459
@48 // 10460
D=A // 10461
@SP // 10462
AM=M+1 // 10463
A=A-1 // 10464
M=D // 10465
@48 // 10466
D=A // 10467
@SP // 10468
AM=M+1 // 10469
A=A-1 // 10470
M=D // 10471
@48 // 10472
D=A // 10473
@SP // 10474
AM=M+1 // 10475
A=A-1 // 10476
M=D // 10477
@60 // 10478
D=A // 10479
@SP // 10480
AM=M+1 // 10481
A=A-1 // 10482
M=D // 10483
@54 // 10484
D=A // 10485
@SP // 10486
AM=M+1 // 10487
A=A-1 // 10488
M=D // 10489
@51 // 10490
D=A // 10491
@SP // 10492
AM=M+1 // 10493
A=A-1 // 10494
M=D // 10495
@51 // 10496
D=A // 10497
@SP // 10498
AM=M+1 // 10499
A=A-1 // 10500
M=D // 10501
@51 // 10502
D=A // 10503
@SP // 10504
AM=M+1 // 10505
A=A-1 // 10506
M=D // 10507
@30 // 10508
D=A // 10509
@SP // 10510
AM=M+1 // 10511
A=A-1 // 10512
M=D // 10513
@SP // 10514
AM=M+1 // 10515
A=A-1 // 10516
M=0 // 10517
@SP // 10518
AM=M+1 // 10519
A=A-1 // 10520
M=0 // 10521
// call Output.create
@17 // 10522
D=A // 10523
@14 // 10524
M=D // 10525
@Output.create // 10526
D=A // 10527
@13 // 10528
M=D // 10529
@Output.init.ret.70 // 10530
D=A // 10531
@CALL // 10532
0;JMP // 10533
(Output.init.ret.70)
@SP // 10534
M=M-1 // 10535

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 101"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 10536
D=A // 10537
@SP // 10538
M=D+M // 10539
@101 // 10540
D=A // 10541
@SP // 10542
A=M-1 // 10543
M=0 // 10544
A=A-1 // 10545
M=0 // 10546
A=A-1 // 10547
M=0 // 10548
A=A-1 // 10549
M=D // 10550
A=A-1 // 10551
@30 // 10552
D=A // 10553
@SP // 10554
AM=M+1 // 10555
A=A-1 // 10556
M=D // 10557
@51 // 10558
D=A // 10559
@SP // 10560
AM=M+1 // 10561
A=A-1 // 10562
M=D // 10563
@63 // 10564
D=A // 10565
@SP // 10566
AM=M+1 // 10567
A=A-1 // 10568
M=D // 10569
@3 // 10570
D=A // 10571
@SP // 10572
AM=M+1 // 10573
A=A-1 // 10574
M=D // 10575
@51 // 10576
D=A // 10577
@SP // 10578
AM=M+1 // 10579
A=A-1 // 10580
M=D // 10581
@30 // 10582
D=A // 10583
@SP // 10584
AM=M+1 // 10585
A=A-1 // 10586
M=D // 10587
@SP // 10588
AM=M+1 // 10589
A=A-1 // 10590
M=0 // 10591
@SP // 10592
AM=M+1 // 10593
A=A-1 // 10594
M=0 // 10595
// call Output.create
@17 // 10596
D=A // 10597
@14 // 10598
M=D // 10599
@Output.create // 10600
D=A // 10601
@13 // 10602
M=D // 10603
@Output.init.ret.71 // 10604
D=A // 10605
@CALL // 10606
0;JMP // 10607
(Output.init.ret.71)
@SP // 10608
M=M-1 // 10609

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 102"), PushInstruction("constant 28"), PushInstruction("constant 54"), PushInstruction("constant 38"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@102 // 10610
D=A // 10611
@SP // 10612
AM=M+1 // 10613
A=A-1 // 10614
M=D // 10615
@28 // 10616
D=A // 10617
@SP // 10618
AM=M+1 // 10619
A=A-1 // 10620
M=D // 10621
@54 // 10622
D=A // 10623
@SP // 10624
AM=M+1 // 10625
A=A-1 // 10626
M=D // 10627
@38 // 10628
D=A // 10629
@SP // 10630
AM=M+1 // 10631
A=A-1 // 10632
M=D // 10633
@6 // 10634
D=A // 10635
@SP // 10636
AM=M+1 // 10637
A=A-1 // 10638
M=D // 10639
@15 // 10640
D=A // 10641
@SP // 10642
AM=M+1 // 10643
A=A-1 // 10644
M=D // 10645
@6 // 10646
D=A // 10647
@SP // 10648
AM=M+1 // 10649
A=A-1 // 10650
M=D // 10651
@6 // 10652
D=A // 10653
@SP // 10654
AM=M+1 // 10655
A=A-1 // 10656
M=D // 10657
@6 // 10658
D=A // 10659
@SP // 10660
AM=M+1 // 10661
A=A-1 // 10662
M=D // 10663
@15 // 10664
D=A // 10665
@SP // 10666
AM=M+1 // 10667
A=A-1 // 10668
M=D // 10669
@SP // 10670
AM=M+1 // 10671
A=A-1 // 10672
M=0 // 10673
@SP // 10674
AM=M+1 // 10675
A=A-1 // 10676
M=0 // 10677
// call Output.create
@17 // 10678
D=A // 10679
@14 // 10680
M=D // 10681
@Output.create // 10682
D=A // 10683
@13 // 10684
M=D // 10685
@Output.init.ret.72 // 10686
D=A // 10687
@CALL // 10688
0;JMP // 10689
(Output.init.ret.72)
@SP // 10690
M=M-1 // 10691

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 103"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 10692
D=A // 10693
@SP // 10694
M=D+M // 10695
@103 // 10696
D=A // 10697
@SP // 10698
A=M-1 // 10699
M=0 // 10700
A=A-1 // 10701
M=0 // 10702
A=A-1 // 10703
M=D // 10704
A=A-1 // 10705
@30 // 10706
D=A // 10707
@SP // 10708
AM=M+1 // 10709
A=A-1 // 10710
M=D // 10711
@51 // 10712
D=A // 10713
@SP // 10714
AM=M+1 // 10715
A=A-1 // 10716
M=D // 10717
@51 // 10718
D=A // 10719
@SP // 10720
AM=M+1 // 10721
A=A-1 // 10722
M=D // 10723
@51 // 10724
D=A // 10725
@SP // 10726
AM=M+1 // 10727
A=A-1 // 10728
M=D // 10729
@62 // 10730
D=A // 10731
@SP // 10732
AM=M+1 // 10733
A=A-1 // 10734
M=D // 10735
@48 // 10736
D=A // 10737
@SP // 10738
AM=M+1 // 10739
A=A-1 // 10740
M=D // 10741
@51 // 10742
D=A // 10743
@SP // 10744
AM=M+1 // 10745
A=A-1 // 10746
M=D // 10747
@30 // 10748
D=A // 10749
@SP // 10750
AM=M+1 // 10751
A=A-1 // 10752
M=D // 10753
@SP // 10754
AM=M+1 // 10755
A=A-1 // 10756
M=0 // 10757
// call Output.create
@17 // 10758
D=A // 10759
@14 // 10760
M=D // 10761
@Output.create // 10762
D=A // 10763
@13 // 10764
M=D // 10765
@Output.init.ret.73 // 10766
D=A // 10767
@CALL // 10768
0;JMP // 10769
(Output.init.ret.73)
@SP // 10770
M=M-1 // 10771

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 104"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 27"), PushInstruction("constant 55"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@104 // 10772
D=A // 10773
@SP // 10774
AM=M+1 // 10775
A=A-1 // 10776
M=D // 10777
@3 // 10778
D=A // 10779
@SP // 10780
AM=M+1 // 10781
A=A-1 // 10782
M=D // 10783
@3 // 10784
D=A // 10785
@SP // 10786
AM=M+1 // 10787
A=A-1 // 10788
M=D // 10789
@3 // 10790
D=A // 10791
@SP // 10792
AM=M+1 // 10793
A=A-1 // 10794
M=D // 10795
@27 // 10796
D=A // 10797
@SP // 10798
AM=M+1 // 10799
A=A-1 // 10800
M=D // 10801
@55 // 10802
D=A // 10803
@SP // 10804
AM=M+1 // 10805
A=A-1 // 10806
M=D // 10807
@51 // 10808
D=A // 10809
@SP // 10810
AM=M+1 // 10811
A=A-1 // 10812
M=D // 10813
@51 // 10814
D=A // 10815
@SP // 10816
AM=M+1 // 10817
A=A-1 // 10818
M=D // 10819
@51 // 10820
D=A // 10821
@SP // 10822
AM=M+1 // 10823
A=A-1 // 10824
M=D // 10825
@51 // 10826
D=A // 10827
@SP // 10828
AM=M+1 // 10829
A=A-1 // 10830
M=D // 10831
@SP // 10832
AM=M+1 // 10833
A=A-1 // 10834
M=0 // 10835
@SP // 10836
AM=M+1 // 10837
A=A-1 // 10838
M=0 // 10839
// call Output.create
@17 // 10840
D=A // 10841
@14 // 10842
M=D // 10843
@Output.create // 10844
D=A // 10845
@13 // 10846
M=D // 10847
@Output.init.ret.74 // 10848
D=A // 10849
@CALL // 10850
0;JMP // 10851
(Output.init.ret.74)
@SP // 10852
M=M-1 // 10853

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 105"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 14"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@105 // 10854
D=A // 10855
@SP // 10856
AM=M+1 // 10857
A=A-1 // 10858
M=D // 10859
@12 // 10860
D=A // 10861
@SP // 10862
AM=M+1 // 10863
A=A-1 // 10864
M=D // 10865
@12 // 10866
D=A // 10867
@SP // 10868
AM=M+1 // 10869
A=A-1 // 10870
M=D // 10871
@SP // 10872
AM=M+1 // 10873
A=A-1 // 10874
M=0 // 10875
@14 // 10876
D=A // 10877
@SP // 10878
AM=M+1 // 10879
A=A-1 // 10880
M=D // 10881
@12 // 10882
D=A // 10883
@SP // 10884
AM=M+1 // 10885
A=A-1 // 10886
M=D // 10887
@12 // 10888
D=A // 10889
@SP // 10890
AM=M+1 // 10891
A=A-1 // 10892
M=D // 10893
@12 // 10894
D=A // 10895
@SP // 10896
AM=M+1 // 10897
A=A-1 // 10898
M=D // 10899
@12 // 10900
D=A // 10901
@SP // 10902
AM=M+1 // 10903
A=A-1 // 10904
M=D // 10905
@30 // 10906
D=A // 10907
@SP // 10908
AM=M+1 // 10909
A=A-1 // 10910
M=D // 10911
@SP // 10912
AM=M+1 // 10913
A=A-1 // 10914
M=0 // 10915
@SP // 10916
AM=M+1 // 10917
A=A-1 // 10918
M=0 // 10919
// call Output.create
@17 // 10920
D=A // 10921
@14 // 10922
M=D // 10923
@Output.create // 10924
D=A // 10925
@13 // 10926
M=D // 10927
@Output.init.ret.75 // 10928
D=A // 10929
@CALL // 10930
0;JMP // 10931
(Output.init.ret.75)
@SP // 10932
M=M-1 // 10933

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 106"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 0"), PushInstruction("constant 56"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@106 // 10934
D=A // 10935
@SP // 10936
AM=M+1 // 10937
A=A-1 // 10938
M=D // 10939
@48 // 10940
D=A // 10941
@SP // 10942
AM=M+1 // 10943
A=A-1 // 10944
M=D // 10945
@48 // 10946
D=A // 10947
@SP // 10948
AM=M+1 // 10949
A=A-1 // 10950
M=D // 10951
@SP // 10952
AM=M+1 // 10953
A=A-1 // 10954
M=0 // 10955
@56 // 10956
D=A // 10957
@SP // 10958
AM=M+1 // 10959
A=A-1 // 10960
M=D // 10961
@48 // 10962
D=A // 10963
@SP // 10964
AM=M+1 // 10965
A=A-1 // 10966
M=D // 10967
@48 // 10968
D=A // 10969
@SP // 10970
AM=M+1 // 10971
A=A-1 // 10972
M=D // 10973
@48 // 10974
D=A // 10975
@SP // 10976
AM=M+1 // 10977
A=A-1 // 10978
M=D // 10979
@48 // 10980
D=A // 10981
@SP // 10982
AM=M+1 // 10983
A=A-1 // 10984
M=D // 10985
@51 // 10986
D=A // 10987
@SP // 10988
AM=M+1 // 10989
A=A-1 // 10990
M=D // 10991
@30 // 10992
D=A // 10993
@SP // 10994
AM=M+1 // 10995
A=A-1 // 10996
M=D // 10997
@SP // 10998
AM=M+1 // 10999
A=A-1 // 11000
M=0 // 11001
// call Output.create
@17 // 11002
D=A // 11003
@14 // 11004
M=D // 11005
@Output.create // 11006
D=A // 11007
@13 // 11008
M=D // 11009
@Output.init.ret.76 // 11010
D=A // 11011
@CALL // 11012
0;JMP // 11013
(Output.init.ret.76)
@SP // 11014
M=M-1 // 11015

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 107"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 51"), PushInstruction("constant 27"), PushInstruction("constant 15"), PushInstruction("constant 15"), PushInstruction("constant 27"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@107 // 11016
D=A // 11017
@SP // 11018
AM=M+1 // 11019
A=A-1 // 11020
M=D // 11021
@3 // 11022
D=A // 11023
@SP // 11024
AM=M+1 // 11025
A=A-1 // 11026
M=D // 11027
@3 // 11028
D=A // 11029
@SP // 11030
AM=M+1 // 11031
A=A-1 // 11032
M=D // 11033
@3 // 11034
D=A // 11035
@SP // 11036
AM=M+1 // 11037
A=A-1 // 11038
M=D // 11039
@51 // 11040
D=A // 11041
@SP // 11042
AM=M+1 // 11043
A=A-1 // 11044
M=D // 11045
@27 // 11046
D=A // 11047
@SP // 11048
AM=M+1 // 11049
A=A-1 // 11050
M=D // 11051
@15 // 11052
D=A // 11053
@SP // 11054
AM=M+1 // 11055
A=A-1 // 11056
M=D // 11057
@15 // 11058
D=A // 11059
@SP // 11060
AM=M+1 // 11061
A=A-1 // 11062
M=D // 11063
@27 // 11064
D=A // 11065
@SP // 11066
AM=M+1 // 11067
A=A-1 // 11068
M=D // 11069
@51 // 11070
D=A // 11071
@SP // 11072
AM=M+1 // 11073
A=A-1 // 11074
M=D // 11075
@SP // 11076
AM=M+1 // 11077
A=A-1 // 11078
M=0 // 11079
@SP // 11080
AM=M+1 // 11081
A=A-1 // 11082
M=0 // 11083
// call Output.create
@17 // 11084
D=A // 11085
@14 // 11086
M=D // 11087
@Output.create // 11088
D=A // 11089
@13 // 11090
M=D // 11091
@Output.init.ret.77 // 11092
D=A // 11093
@CALL // 11094
0;JMP // 11095
(Output.init.ret.77)
@SP // 11096
M=M-1 // 11097

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 108"), PushInstruction("constant 14"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@108 // 11098
D=A // 11099
@SP // 11100
AM=M+1 // 11101
A=A-1 // 11102
M=D // 11103
@14 // 11104
D=A // 11105
@SP // 11106
AM=M+1 // 11107
A=A-1 // 11108
M=D // 11109
@12 // 11110
D=A // 11111
@SP // 11112
AM=M+1 // 11113
A=A-1 // 11114
M=D // 11115
@12 // 11116
D=A // 11117
@SP // 11118
AM=M+1 // 11119
A=A-1 // 11120
M=D // 11121
@12 // 11122
D=A // 11123
@SP // 11124
AM=M+1 // 11125
A=A-1 // 11126
M=D // 11127
@12 // 11128
D=A // 11129
@SP // 11130
AM=M+1 // 11131
A=A-1 // 11132
M=D // 11133
@12 // 11134
D=A // 11135
@SP // 11136
AM=M+1 // 11137
A=A-1 // 11138
M=D // 11139
@12 // 11140
D=A // 11141
@SP // 11142
AM=M+1 // 11143
A=A-1 // 11144
M=D // 11145
@12 // 11146
D=A // 11147
@SP // 11148
AM=M+1 // 11149
A=A-1 // 11150
M=D // 11151
@30 // 11152
D=A // 11153
@SP // 11154
AM=M+1 // 11155
A=A-1 // 11156
M=D // 11157
@SP // 11158
AM=M+1 // 11159
A=A-1 // 11160
M=0 // 11161
@SP // 11162
AM=M+1 // 11163
A=A-1 // 11164
M=0 // 11165
// call Output.create
@17 // 11166
D=A // 11167
@14 // 11168
M=D // 11169
@Output.create // 11170
D=A // 11171
@13 // 11172
M=D // 11173
@Output.init.ret.78 // 11174
D=A // 11175
@CALL // 11176
0;JMP // 11177
(Output.init.ret.78)
@SP // 11178
M=M-1 // 11179

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 109"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 63"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 43"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11180
D=A // 11181
@SP // 11182
M=D+M // 11183
@109 // 11184
D=A // 11185
@SP // 11186
A=M-1 // 11187
M=0 // 11188
A=A-1 // 11189
M=0 // 11190
A=A-1 // 11191
M=0 // 11192
A=A-1 // 11193
M=D // 11194
A=A-1 // 11195
@29 // 11196
D=A // 11197
@SP // 11198
AM=M+1 // 11199
A=A-1 // 11200
M=D // 11201
@63 // 11202
D=A // 11203
@SP // 11204
AM=M+1 // 11205
A=A-1 // 11206
M=D // 11207
@43 // 11208
D=A // 11209
@SP // 11210
AM=M+1 // 11211
A=A-1 // 11212
M=D // 11213
@43 // 11214
D=A // 11215
@SP // 11216
AM=M+1 // 11217
A=A-1 // 11218
M=D // 11219
@43 // 11220
D=A // 11221
@SP // 11222
AM=M+1 // 11223
A=A-1 // 11224
M=D // 11225
@43 // 11226
D=A // 11227
@SP // 11228
AM=M+1 // 11229
A=A-1 // 11230
M=D // 11231
@SP // 11232
AM=M+1 // 11233
A=A-1 // 11234
M=0 // 11235
@SP // 11236
AM=M+1 // 11237
A=A-1 // 11238
M=0 // 11239
// call Output.create
@17 // 11240
D=A // 11241
@14 // 11242
M=D // 11243
@Output.create // 11244
D=A // 11245
@13 // 11246
M=D // 11247
@Output.init.ret.79 // 11248
D=A // 11249
@CALL // 11250
0;JMP // 11251
(Output.init.ret.79)
@SP // 11252
M=M-1 // 11253

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 110"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11254
D=A // 11255
@SP // 11256
M=D+M // 11257
@110 // 11258
D=A // 11259
@SP // 11260
A=M-1 // 11261
M=0 // 11262
A=A-1 // 11263
M=0 // 11264
A=A-1 // 11265
M=0 // 11266
A=A-1 // 11267
M=D // 11268
A=A-1 // 11269
@29 // 11270
D=A // 11271
@SP // 11272
AM=M+1 // 11273
A=A-1 // 11274
M=D // 11275
@51 // 11276
D=A // 11277
@SP // 11278
AM=M+1 // 11279
A=A-1 // 11280
M=D // 11281
@51 // 11282
D=A // 11283
@SP // 11284
AM=M+1 // 11285
A=A-1 // 11286
M=D // 11287
@51 // 11288
D=A // 11289
@SP // 11290
AM=M+1 // 11291
A=A-1 // 11292
M=D // 11293
@51 // 11294
D=A // 11295
@SP // 11296
AM=M+1 // 11297
A=A-1 // 11298
M=D // 11299
@51 // 11300
D=A // 11301
@SP // 11302
AM=M+1 // 11303
A=A-1 // 11304
M=D // 11305
@SP // 11306
AM=M+1 // 11307
A=A-1 // 11308
M=0 // 11309
@SP // 11310
AM=M+1 // 11311
A=A-1 // 11312
M=0 // 11313
// call Output.create
@17 // 11314
D=A // 11315
@14 // 11316
M=D // 11317
@Output.create // 11318
D=A // 11319
@13 // 11320
M=D // 11321
@Output.init.ret.80 // 11322
D=A // 11323
@CALL // 11324
0;JMP // 11325
(Output.init.ret.80)
@SP // 11326
M=M-1 // 11327

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 111"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11328
D=A // 11329
@SP // 11330
M=D+M // 11331
@111 // 11332
D=A // 11333
@SP // 11334
A=M-1 // 11335
M=0 // 11336
A=A-1 // 11337
M=0 // 11338
A=A-1 // 11339
M=0 // 11340
A=A-1 // 11341
M=D // 11342
A=A-1 // 11343
@30 // 11344
D=A // 11345
@SP // 11346
AM=M+1 // 11347
A=A-1 // 11348
M=D // 11349
@51 // 11350
D=A // 11351
@SP // 11352
AM=M+1 // 11353
A=A-1 // 11354
M=D // 11355
@51 // 11356
D=A // 11357
@SP // 11358
AM=M+1 // 11359
A=A-1 // 11360
M=D // 11361
@51 // 11362
D=A // 11363
@SP // 11364
AM=M+1 // 11365
A=A-1 // 11366
M=D // 11367
@51 // 11368
D=A // 11369
@SP // 11370
AM=M+1 // 11371
A=A-1 // 11372
M=D // 11373
@30 // 11374
D=A // 11375
@SP // 11376
AM=M+1 // 11377
A=A-1 // 11378
M=D // 11379
@SP // 11380
AM=M+1 // 11381
A=A-1 // 11382
M=0 // 11383
@SP // 11384
AM=M+1 // 11385
A=A-1 // 11386
M=0 // 11387
// call Output.create
@17 // 11388
D=A // 11389
@14 // 11390
M=D // 11391
@Output.create // 11392
D=A // 11393
@13 // 11394
M=D // 11395
@Output.init.ret.81 // 11396
D=A // 11397
@CALL // 11398
0;JMP // 11399
(Output.init.ret.81)
@SP // 11400
M=M-1 // 11401

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 112"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 31"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11402
D=A // 11403
@SP // 11404
M=D+M // 11405
@112 // 11406
D=A // 11407
@SP // 11408
A=M-1 // 11409
M=0 // 11410
A=A-1 // 11411
M=0 // 11412
A=A-1 // 11413
M=0 // 11414
A=A-1 // 11415
M=D // 11416
A=A-1 // 11417
@30 // 11418
D=A // 11419
@SP // 11420
AM=M+1 // 11421
A=A-1 // 11422
M=D // 11423
@51 // 11424
D=A // 11425
@SP // 11426
AM=M+1 // 11427
A=A-1 // 11428
M=D // 11429
@51 // 11430
D=A // 11431
@SP // 11432
AM=M+1 // 11433
A=A-1 // 11434
M=D // 11435
@51 // 11436
D=A // 11437
@SP // 11438
AM=M+1 // 11439
A=A-1 // 11440
M=D // 11441
@31 // 11442
D=A // 11443
@SP // 11444
AM=M+1 // 11445
A=A-1 // 11446
M=D // 11447
@3 // 11448
D=A // 11449
@SP // 11450
AM=M+1 // 11451
A=A-1 // 11452
M=D // 11453
@3 // 11454
D=A // 11455
@SP // 11456
AM=M+1 // 11457
A=A-1 // 11458
M=D // 11459
@SP // 11460
AM=M+1 // 11461
A=A-1 // 11462
M=0 // 11463
// call Output.create
@17 // 11464
D=A // 11465
@14 // 11466
M=D // 11467
@Output.create // 11468
D=A // 11469
@13 // 11470
M=D // 11471
@Output.init.ret.82 // 11472
D=A // 11473
@CALL // 11474
0;JMP // 11475
(Output.init.ret.82)
@SP // 11476
M=M-1 // 11477

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 113"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 48"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11478
D=A // 11479
@SP // 11480
M=D+M // 11481
@113 // 11482
D=A // 11483
@SP // 11484
A=M-1 // 11485
M=0 // 11486
A=A-1 // 11487
M=0 // 11488
A=A-1 // 11489
M=0 // 11490
A=A-1 // 11491
M=D // 11492
A=A-1 // 11493
@30 // 11494
D=A // 11495
@SP // 11496
AM=M+1 // 11497
A=A-1 // 11498
M=D // 11499
@51 // 11500
D=A // 11501
@SP // 11502
AM=M+1 // 11503
A=A-1 // 11504
M=D // 11505
@51 // 11506
D=A // 11507
@SP // 11508
AM=M+1 // 11509
A=A-1 // 11510
M=D // 11511
@51 // 11512
D=A // 11513
@SP // 11514
AM=M+1 // 11515
A=A-1 // 11516
M=D // 11517
@62 // 11518
D=A // 11519
@SP // 11520
AM=M+1 // 11521
A=A-1 // 11522
M=D // 11523
@48 // 11524
D=A // 11525
@SP // 11526
AM=M+1 // 11527
A=A-1 // 11528
M=D // 11529
@48 // 11530
D=A // 11531
@SP // 11532
AM=M+1 // 11533
A=A-1 // 11534
M=D // 11535
@SP // 11536
AM=M+1 // 11537
A=A-1 // 11538
M=0 // 11539
// call Output.create
@17 // 11540
D=A // 11541
@14 // 11542
M=D // 11543
@Output.create // 11544
D=A // 11545
@13 // 11546
M=D // 11547
@Output.init.ret.83 // 11548
D=A // 11549
@CALL // 11550
0;JMP // 11551
(Output.init.ret.83)
@SP // 11552
M=M-1 // 11553

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 114"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 29"), PushInstruction("constant 55"), PushInstruction("constant 51"), PushInstruction("constant 3"), PushInstruction("constant 3"), PushInstruction("constant 7"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11554
D=A // 11555
@SP // 11556
M=D+M // 11557
@114 // 11558
D=A // 11559
@SP // 11560
A=M-1 // 11561
M=0 // 11562
A=A-1 // 11563
M=0 // 11564
A=A-1 // 11565
M=0 // 11566
A=A-1 // 11567
M=D // 11568
A=A-1 // 11569
@29 // 11570
D=A // 11571
@SP // 11572
AM=M+1 // 11573
A=A-1 // 11574
M=D // 11575
@55 // 11576
D=A // 11577
@SP // 11578
AM=M+1 // 11579
A=A-1 // 11580
M=D // 11581
@51 // 11582
D=A // 11583
@SP // 11584
AM=M+1 // 11585
A=A-1 // 11586
M=D // 11587
@3 // 11588
D=A // 11589
@SP // 11590
AM=M+1 // 11591
A=A-1 // 11592
M=D // 11593
@3 // 11594
D=A // 11595
@SP // 11596
AM=M+1 // 11597
A=A-1 // 11598
M=D // 11599
@7 // 11600
D=A // 11601
@SP // 11602
AM=M+1 // 11603
A=A-1 // 11604
M=D // 11605
@SP // 11606
AM=M+1 // 11607
A=A-1 // 11608
M=0 // 11609
@SP // 11610
AM=M+1 // 11611
A=A-1 // 11612
M=0 // 11613
// call Output.create
@17 // 11614
D=A // 11615
@14 // 11616
M=D // 11617
@Output.create // 11618
D=A // 11619
@13 // 11620
M=D // 11621
@Output.init.ret.84 // 11622
D=A // 11623
@CALL // 11624
0;JMP // 11625
(Output.init.ret.84)
@SP // 11626
M=M-1 // 11627

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 115"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 6"), PushInstruction("constant 24"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11628
D=A // 11629
@SP // 11630
M=D+M // 11631
@115 // 11632
D=A // 11633
@SP // 11634
A=M-1 // 11635
M=0 // 11636
A=A-1 // 11637
M=0 // 11638
A=A-1 // 11639
M=0 // 11640
A=A-1 // 11641
M=D // 11642
A=A-1 // 11643
@30 // 11644
D=A // 11645
@SP // 11646
AM=M+1 // 11647
A=A-1 // 11648
M=D // 11649
@51 // 11650
D=A // 11651
@SP // 11652
AM=M+1 // 11653
A=A-1 // 11654
M=D // 11655
@6 // 11656
D=A // 11657
@SP // 11658
AM=M+1 // 11659
A=A-1 // 11660
M=D // 11661
@24 // 11662
D=A // 11663
@SP // 11664
AM=M+1 // 11665
A=A-1 // 11666
M=D // 11667
@51 // 11668
D=A // 11669
@SP // 11670
AM=M+1 // 11671
A=A-1 // 11672
M=D // 11673
@30 // 11674
D=A // 11675
@SP // 11676
AM=M+1 // 11677
A=A-1 // 11678
M=D // 11679
@SP // 11680
AM=M+1 // 11681
A=A-1 // 11682
M=0 // 11683
@SP // 11684
AM=M+1 // 11685
A=A-1 // 11686
M=0 // 11687
// call Output.create
@17 // 11688
D=A // 11689
@14 // 11690
M=D // 11691
@Output.create // 11692
D=A // 11693
@13 // 11694
M=D // 11695
@Output.init.ret.85 // 11696
D=A // 11697
@CALL // 11698
0;JMP // 11699
(Output.init.ret.85)
@SP // 11700
M=M-1 // 11701

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 116"), PushInstruction("constant 4"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 15"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 6"), PushInstruction("constant 54"), PushInstruction("constant 28"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@116 // 11702
D=A // 11703
@SP // 11704
AM=M+1 // 11705
A=A-1 // 11706
M=D // 11707
@4 // 11708
D=A // 11709
@SP // 11710
AM=M+1 // 11711
A=A-1 // 11712
M=D // 11713
@6 // 11714
D=A // 11715
@SP // 11716
AM=M+1 // 11717
A=A-1 // 11718
M=D // 11719
@6 // 11720
D=A // 11721
@SP // 11722
AM=M+1 // 11723
A=A-1 // 11724
M=D // 11725
@15 // 11726
D=A // 11727
@SP // 11728
AM=M+1 // 11729
A=A-1 // 11730
M=D // 11731
@6 // 11732
D=A // 11733
@SP // 11734
AM=M+1 // 11735
A=A-1 // 11736
M=D // 11737
@6 // 11738
D=A // 11739
@SP // 11740
AM=M+1 // 11741
A=A-1 // 11742
M=D // 11743
@6 // 11744
D=A // 11745
@SP // 11746
AM=M+1 // 11747
A=A-1 // 11748
M=D // 11749
@54 // 11750
D=A // 11751
@SP // 11752
AM=M+1 // 11753
A=A-1 // 11754
M=D // 11755
@28 // 11756
D=A // 11757
@SP // 11758
AM=M+1 // 11759
A=A-1 // 11760
M=D // 11761
@SP // 11762
AM=M+1 // 11763
A=A-1 // 11764
M=0 // 11765
@SP // 11766
AM=M+1 // 11767
A=A-1 // 11768
M=0 // 11769
// call Output.create
@17 // 11770
D=A // 11771
@14 // 11772
M=D // 11773
@Output.create // 11774
D=A // 11775
@13 // 11776
M=D // 11777
@Output.init.ret.86 // 11778
D=A // 11779
@CALL // 11780
0;JMP // 11781
(Output.init.ret.86)
@SP // 11782
M=M-1 // 11783

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 117"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 27"), PushInstruction("constant 54"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11784
D=A // 11785
@SP // 11786
M=D+M // 11787
@117 // 11788
D=A // 11789
@SP // 11790
A=M-1 // 11791
M=0 // 11792
A=A-1 // 11793
M=0 // 11794
A=A-1 // 11795
M=0 // 11796
A=A-1 // 11797
M=D // 11798
A=A-1 // 11799
@27 // 11800
D=A // 11801
@SP // 11802
AM=M+1 // 11803
A=A-1 // 11804
M=D // 11805
@27 // 11806
D=A // 11807
@SP // 11808
AM=M+1 // 11809
A=A-1 // 11810
M=D // 11811
@27 // 11812
D=A // 11813
@SP // 11814
AM=M+1 // 11815
A=A-1 // 11816
M=D // 11817
@27 // 11818
D=A // 11819
@SP // 11820
AM=M+1 // 11821
A=A-1 // 11822
M=D // 11823
@27 // 11824
D=A // 11825
@SP // 11826
AM=M+1 // 11827
A=A-1 // 11828
M=D // 11829
@54 // 11830
D=A // 11831
@SP // 11832
AM=M+1 // 11833
A=A-1 // 11834
M=D // 11835
@SP // 11836
AM=M+1 // 11837
A=A-1 // 11838
M=0 // 11839
@SP // 11840
AM=M+1 // 11841
A=A-1 // 11842
M=0 // 11843
// call Output.create
@17 // 11844
D=A // 11845
@14 // 11846
M=D // 11847
@Output.create // 11848
D=A // 11849
@13 // 11850
M=D // 11851
@Output.init.ret.87 // 11852
D=A // 11853
@CALL // 11854
0;JMP // 11855
(Output.init.ret.87)
@SP // 11856
M=M-1 // 11857

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 118"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11858
D=A // 11859
@SP // 11860
M=D+M // 11861
@118 // 11862
D=A // 11863
@SP // 11864
A=M-1 // 11865
M=0 // 11866
A=A-1 // 11867
M=0 // 11868
A=A-1 // 11869
M=0 // 11870
A=A-1 // 11871
M=D // 11872
A=A-1 // 11873
@51 // 11874
D=A // 11875
@SP // 11876
AM=M+1 // 11877
A=A-1 // 11878
M=D // 11879
@51 // 11880
D=A // 11881
@SP // 11882
AM=M+1 // 11883
A=A-1 // 11884
M=D // 11885
@51 // 11886
D=A // 11887
@SP // 11888
AM=M+1 // 11889
A=A-1 // 11890
M=D // 11891
@51 // 11892
D=A // 11893
@SP // 11894
AM=M+1 // 11895
A=A-1 // 11896
M=D // 11897
@30 // 11898
D=A // 11899
@SP // 11900
AM=M+1 // 11901
A=A-1 // 11902
M=D // 11903
@12 // 11904
D=A // 11905
@SP // 11906
AM=M+1 // 11907
A=A-1 // 11908
M=D // 11909
@SP // 11910
AM=M+1 // 11911
A=A-1 // 11912
M=0 // 11913
@SP // 11914
AM=M+1 // 11915
A=A-1 // 11916
M=0 // 11917
// call Output.create
@17 // 11918
D=A // 11919
@14 // 11920
M=D // 11921
@Output.create // 11922
D=A // 11923
@13 // 11924
M=D // 11925
@Output.init.ret.88 // 11926
D=A // 11927
@CALL // 11928
0;JMP // 11929
(Output.init.ret.88)
@SP // 11930
M=M-1 // 11931

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 119"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 63"), PushInstruction("constant 18"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 11932
D=A // 11933
@SP // 11934
M=D+M // 11935
@119 // 11936
D=A // 11937
@SP // 11938
A=M-1 // 11939
M=0 // 11940
A=A-1 // 11941
M=0 // 11942
A=A-1 // 11943
M=0 // 11944
A=A-1 // 11945
M=D // 11946
A=A-1 // 11947
@51 // 11948
D=A // 11949
@SP // 11950
AM=M+1 // 11951
A=A-1 // 11952
M=D // 11953
@51 // 11954
D=A // 11955
@SP // 11956
AM=M+1 // 11957
A=A-1 // 11958
M=D // 11959
@51 // 11960
D=A // 11961
@SP // 11962
AM=M+1 // 11963
A=A-1 // 11964
M=D // 11965
@63 // 11966
D=A // 11967
@SP // 11968
AM=M+1 // 11969
A=A-1 // 11970
M=D // 11971
@63 // 11972
D=A // 11973
@SP // 11974
AM=M+1 // 11975
A=A-1 // 11976
M=D // 11977
@18 // 11978
D=A // 11979
@SP // 11980
AM=M+1 // 11981
A=A-1 // 11982
M=D // 11983
@SP // 11984
AM=M+1 // 11985
A=A-1 // 11986
M=0 // 11987
@SP // 11988
AM=M+1 // 11989
A=A-1 // 11990
M=0 // 11991
// call Output.create
@17 // 11992
D=A // 11993
@14 // 11994
M=D // 11995
@Output.create // 11996
D=A // 11997
@13 // 11998
M=D // 11999
@Output.init.ret.89 // 12000
D=A // 12001
@CALL // 12002
0;JMP // 12003
(Output.init.ret.89)
@SP // 12004
M=M-1 // 12005

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 120"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 30"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 30"), PushInstruction("constant 51"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12006
D=A // 12007
@SP // 12008
M=D+M // 12009
@120 // 12010
D=A // 12011
@SP // 12012
A=M-1 // 12013
M=0 // 12014
A=A-1 // 12015
M=0 // 12016
A=A-1 // 12017
M=0 // 12018
A=A-1 // 12019
M=D // 12020
A=A-1 // 12021
@51 // 12022
D=A // 12023
@SP // 12024
AM=M+1 // 12025
A=A-1 // 12026
M=D // 12027
@30 // 12028
D=A // 12029
@SP // 12030
AM=M+1 // 12031
A=A-1 // 12032
M=D // 12033
@12 // 12034
D=A // 12035
@SP // 12036
AM=M+1 // 12037
A=A-1 // 12038
M=D // 12039
@12 // 12040
D=A // 12041
@SP // 12042
AM=M+1 // 12043
A=A-1 // 12044
M=D // 12045
@30 // 12046
D=A // 12047
@SP // 12048
AM=M+1 // 12049
A=A-1 // 12050
M=D // 12051
@51 // 12052
D=A // 12053
@SP // 12054
AM=M+1 // 12055
A=A-1 // 12056
M=D // 12057
@SP // 12058
AM=M+1 // 12059
A=A-1 // 12060
M=0 // 12061
@SP // 12062
AM=M+1 // 12063
A=A-1 // 12064
M=0 // 12065
// call Output.create
@17 // 12066
D=A // 12067
@14 // 12068
M=D // 12069
@Output.create // 12070
D=A // 12071
@13 // 12072
M=D // 12073
@Output.init.ret.90 // 12074
D=A // 12075
@CALL // 12076
0;JMP // 12077
(Output.init.ret.90)
@SP // 12078
M=M-1 // 12079

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 121"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 51"), PushInstruction("constant 62"), PushInstruction("constant 48"), PushInstruction("constant 24"), PushInstruction("constant 15"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12080
D=A // 12081
@SP // 12082
M=D+M // 12083
@121 // 12084
D=A // 12085
@SP // 12086
A=M-1 // 12087
M=0 // 12088
A=A-1 // 12089
M=0 // 12090
A=A-1 // 12091
M=0 // 12092
A=A-1 // 12093
M=D // 12094
A=A-1 // 12095
@51 // 12096
D=A // 12097
@SP // 12098
AM=M+1 // 12099
A=A-1 // 12100
M=D // 12101
@51 // 12102
D=A // 12103
@SP // 12104
AM=M+1 // 12105
A=A-1 // 12106
M=D // 12107
@51 // 12108
D=A // 12109
@SP // 12110
AM=M+1 // 12111
A=A-1 // 12112
M=D // 12113
@62 // 12114
D=A // 12115
@SP // 12116
AM=M+1 // 12117
A=A-1 // 12118
M=D // 12119
@48 // 12120
D=A // 12121
@SP // 12122
AM=M+1 // 12123
A=A-1 // 12124
M=D // 12125
@24 // 12126
D=A // 12127
@SP // 12128
AM=M+1 // 12129
A=A-1 // 12130
M=D // 12131
@15 // 12132
D=A // 12133
@SP // 12134
AM=M+1 // 12135
A=A-1 // 12136
M=D // 12137
@SP // 12138
AM=M+1 // 12139
A=A-1 // 12140
M=0 // 12141
// call Output.create
@17 // 12142
D=A // 12143
@14 // 12144
M=D // 12145
@Output.create // 12146
D=A // 12147
@13 // 12148
M=D // 12149
@Output.init.ret.91 // 12150
D=A // 12151
@CALL // 12152
0;JMP // 12153
(Output.init.ret.91)
@SP // 12154
M=M-1 // 12155

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 122"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 63"), PushInstruction("constant 27"), PushInstruction("constant 12"), PushInstruction("constant 6"), PushInstruction("constant 51"), PushInstruction("constant 63"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@4 // 12156
D=A // 12157
@SP // 12158
M=D+M // 12159
@122 // 12160
D=A // 12161
@SP // 12162
A=M-1 // 12163
M=0 // 12164
A=A-1 // 12165
M=0 // 12166
A=A-1 // 12167
M=0 // 12168
A=A-1 // 12169
M=D // 12170
A=A-1 // 12171
@63 // 12172
D=A // 12173
@SP // 12174
AM=M+1 // 12175
A=A-1 // 12176
M=D // 12177
@27 // 12178
D=A // 12179
@SP // 12180
AM=M+1 // 12181
A=A-1 // 12182
M=D // 12183
@12 // 12184
D=A // 12185
@SP // 12186
AM=M+1 // 12187
A=A-1 // 12188
M=D // 12189
@6 // 12190
D=A // 12191
@SP // 12192
AM=M+1 // 12193
A=A-1 // 12194
M=D // 12195
@51 // 12196
D=A // 12197
@SP // 12198
AM=M+1 // 12199
A=A-1 // 12200
M=D // 12201
@63 // 12202
D=A // 12203
@SP // 12204
AM=M+1 // 12205
A=A-1 // 12206
M=D // 12207
@SP // 12208
AM=M+1 // 12209
A=A-1 // 12210
M=0 // 12211
@SP // 12212
AM=M+1 // 12213
A=A-1 // 12214
M=0 // 12215
// call Output.create
@17 // 12216
D=A // 12217
@14 // 12218
M=D // 12219
@Output.create // 12220
D=A // 12221
@13 // 12222
M=D // 12223
@Output.init.ret.92 // 12224
D=A // 12225
@CALL // 12226
0;JMP // 12227
(Output.init.ret.92)
@SP // 12228
M=M-1 // 12229

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 123"), PushInstruction("constant 56"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 7"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 56"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@123 // 12230
D=A // 12231
@SP // 12232
AM=M+1 // 12233
A=A-1 // 12234
M=D // 12235
@56 // 12236
D=A // 12237
@SP // 12238
AM=M+1 // 12239
A=A-1 // 12240
M=D // 12241
@12 // 12242
D=A // 12243
@SP // 12244
AM=M+1 // 12245
A=A-1 // 12246
M=D // 12247
@12 // 12248
D=A // 12249
@SP // 12250
AM=M+1 // 12251
A=A-1 // 12252
M=D // 12253
@12 // 12254
D=A // 12255
@SP // 12256
AM=M+1 // 12257
A=A-1 // 12258
M=D // 12259
@7 // 12260
D=A // 12261
@SP // 12262
AM=M+1 // 12263
A=A-1 // 12264
M=D // 12265
@12 // 12266
D=A // 12267
@SP // 12268
AM=M+1 // 12269
A=A-1 // 12270
M=D // 12271
@12 // 12272
D=A // 12273
@SP // 12274
AM=M+1 // 12275
A=A-1 // 12276
M=D // 12277
@12 // 12278
D=A // 12279
@SP // 12280
AM=M+1 // 12281
A=A-1 // 12282
M=D // 12283
@56 // 12284
D=A // 12285
@SP // 12286
AM=M+1 // 12287
A=A-1 // 12288
M=D // 12289
@SP // 12290
AM=M+1 // 12291
A=A-1 // 12292
M=0 // 12293
@SP // 12294
AM=M+1 // 12295
A=A-1 // 12296
M=0 // 12297
// call Output.create
@17 // 12298
D=A // 12299
@14 // 12300
M=D // 12301
@Output.create // 12302
D=A // 12303
@13 // 12304
M=D // 12305
@Output.init.ret.93 // 12306
D=A // 12307
@CALL // 12308
0;JMP // 12309
(Output.init.ret.93)
@SP // 12310
M=M-1 // 12311

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 124"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@124 // 12312
D=A // 12313
@SP // 12314
AM=M+1 // 12315
A=A-1 // 12316
M=D // 12317
@12 // 12318
D=A // 12319
@SP // 12320
AM=M+1 // 12321
A=A-1 // 12322
M=D // 12323
@12 // 12324
D=A // 12325
@SP // 12326
AM=M+1 // 12327
A=A-1 // 12328
M=D // 12329
@12 // 12330
D=A // 12331
@SP // 12332
AM=M+1 // 12333
A=A-1 // 12334
M=D // 12335
@12 // 12336
D=A // 12337
@SP // 12338
AM=M+1 // 12339
A=A-1 // 12340
M=D // 12341
@12 // 12342
D=A // 12343
@SP // 12344
AM=M+1 // 12345
A=A-1 // 12346
M=D // 12347
@12 // 12348
D=A // 12349
@SP // 12350
AM=M+1 // 12351
A=A-1 // 12352
M=D // 12353
@12 // 12354
D=A // 12355
@SP // 12356
AM=M+1 // 12357
A=A-1 // 12358
M=D // 12359
@12 // 12360
D=A // 12361
@SP // 12362
AM=M+1 // 12363
A=A-1 // 12364
M=D // 12365
@12 // 12366
D=A // 12367
@SP // 12368
AM=M+1 // 12369
A=A-1 // 12370
M=D // 12371
@SP // 12372
AM=M+1 // 12373
A=A-1 // 12374
M=0 // 12375
@SP // 12376
AM=M+1 // 12377
A=A-1 // 12378
M=0 // 12379
// call Output.create
@17 // 12380
D=A // 12381
@14 // 12382
M=D // 12383
@Output.create // 12384
D=A // 12385
@13 // 12386
M=D // 12387
@Output.init.ret.94 // 12388
D=A // 12389
@CALL // 12390
0;JMP // 12391
(Output.init.ret.94)
@SP // 12392
M=M-1 // 12393

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 125"), PushInstruction("constant 7"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 56"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 12"), PushInstruction("constant 7"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@125 // 12394
D=A // 12395
@SP // 12396
AM=M+1 // 12397
A=A-1 // 12398
M=D // 12399
@7 // 12400
D=A // 12401
@SP // 12402
AM=M+1 // 12403
A=A-1 // 12404
M=D // 12405
@12 // 12406
D=A // 12407
@SP // 12408
AM=M+1 // 12409
A=A-1 // 12410
M=D // 12411
@12 // 12412
D=A // 12413
@SP // 12414
AM=M+1 // 12415
A=A-1 // 12416
M=D // 12417
@12 // 12418
D=A // 12419
@SP // 12420
AM=M+1 // 12421
A=A-1 // 12422
M=D // 12423
@56 // 12424
D=A // 12425
@SP // 12426
AM=M+1 // 12427
A=A-1 // 12428
M=D // 12429
@12 // 12430
D=A // 12431
@SP // 12432
AM=M+1 // 12433
A=A-1 // 12434
M=D // 12435
@12 // 12436
D=A // 12437
@SP // 12438
AM=M+1 // 12439
A=A-1 // 12440
M=D // 12441
@12 // 12442
D=A // 12443
@SP // 12444
AM=M+1 // 12445
A=A-1 // 12446
M=D // 12447
@7 // 12448
D=A // 12449
@SP // 12450
AM=M+1 // 12451
A=A-1 // 12452
M=D // 12453
@SP // 12454
AM=M+1 // 12455
A=A-1 // 12456
M=0 // 12457
@SP // 12458
AM=M+1 // 12459
A=A-1 // 12460
M=0 // 12461
// call Output.create
@17 // 12462
D=A // 12463
@14 // 12464
M=D // 12465
@Output.create // 12466
D=A // 12467
@13 // 12468
M=D // 12469
@Output.init.ret.95 // 12470
D=A // 12471
@CALL // 12472
0;JMP // 12473
(Output.init.ret.95)
@SP // 12474
M=M-1 // 12475

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 126"), PushInstruction("constant 38"), PushInstruction("constant 45"), PushInstruction("constant 25"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0"), PushInstruction("constant 0")], call=CallInstruction{Output.create}}
//  pop:  PopInstruction{address=temp 0}
//}

@126 // 12476
D=A // 12477
@SP // 12478
AM=M+1 // 12479
A=A-1 // 12480
M=D // 12481
@38 // 12482
D=A // 12483
@SP // 12484
AM=M+1 // 12485
A=A-1 // 12486
M=D // 12487
@45 // 12488
D=A // 12489
@SP // 12490
AM=M+1 // 12491
A=A-1 // 12492
M=D // 12493
@25 // 12494
D=A // 12495
@SP // 12496
AM=M+1 // 12497
A=A-1 // 12498
M=D // 12499
@SP // 12500
AM=M+1 // 12501
A=A-1 // 12502
M=0 // 12503
@SP // 12504
AM=M+1 // 12505
A=A-1 // 12506
M=0 // 12507
@SP // 12508
AM=M+1 // 12509
A=A-1 // 12510
M=0 // 12511
@SP // 12512
AM=M+1 // 12513
A=A-1 // 12514
M=0 // 12515
@SP // 12516
AM=M+1 // 12517
A=A-1 // 12518
M=0 // 12519
@SP // 12520
AM=M+1 // 12521
A=A-1 // 12522
M=0 // 12523
@SP // 12524
AM=M+1 // 12525
A=A-1 // 12526
M=0 // 12527
@SP // 12528
AM=M+1 // 12529
A=A-1 // 12530
M=0 // 12531
// call Output.create
@17 // 12532
D=A // 12533
@14 // 12534
M=D // 12535
@Output.create // 12536
D=A // 12537
@13 // 12538
M=D // 12539
@Output.init.ret.96 // 12540
D=A // 12541
@CALL // 12542
0;JMP // 12543
(Output.init.ret.96)
@SP // 12544
M=M-1 // 12545

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 12546
M=0 // 12547

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=static 2}
//}

@Output.2 // 12548
M=0 // 12549

////PushInstruction("constant 0")
@SP // 12550
AM=M+1 // 12551
A=A-1 // 12552
M=0 // 12553
@RETURN // 12554
0;JMP // 12555

////FunctionInstruction{functionName='Number.do_add', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_neg=1}}
// function Number.do_add with 0
(Number.do_add)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 12556
A=M // 12557
D=M // 12558
@3 // 12559
M=D // 12560

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 12561
A=M // 12562
D=M // 12563
@SP // 12564
AM=M+1 // 12565
A=A-1 // 12566
M=D // 12567
@ARG // 12568
A=M+1 // 12569
D=M // 12570
@SP // 12571
AM=M+1 // 12572
A=A-1 // 12573
M=D // 12574
// call Number.getV
@6 // 12575
D=A // 12576
@14 // 12577
M=D // 12578
@Number.getV // 12579
D=A // 12580
@13 // 12581
M=D // 12582
@Number.do_add.ret.0 // 12583
D=A // 12584
@CALL // 12585
0;JMP // 12586
(Number.do_add.ret.0)
// call Int32.do_add
@7 // 12587
D=A // 12588
@14 // 12589
M=D // 12590
@Int32.do_add // 12591
D=A // 12592
@13 // 12593
M=D // 12594
@Number.do_add.ret.1 // 12595
D=A // 12596
@CALL // 12597
0;JMP // 12598
(Number.do_add.ret.1)
@SP // 12599
M=M-1 // 12600

////PushInstruction("constant 0")
@SP // 12601
AM=M+1 // 12602
A=A-1 // 12603
M=0 // 12604
@RETURN // 12605
0;JMP // 12606

////FunctionInstruction{functionName='Main.getFourFifths', numLocals=2, funcMapping={Main.getThreeTenths=4, Main.getOneTwentieth=4}}
// function Main.getFourFifths with 2
(Main.getFourFifths)
@SP // 12607
M=M+1 // 12608
AM=M+1 // 12609
A=A-1 // 12610
M=0 // 12611
A=A-1 // 12612
M=0 // 12613

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@4 // 12614
D=A // 12615
@SP // 12616
AM=M+1 // 12617
A=A-1 // 12618
M=D // 12619
// call Number.new
@6 // 12620
D=A // 12621
@14 // 12622
M=D // 12623
@Number.new // 12624
D=A // 12625
@13 // 12626
M=D // 12627
@Main.getFourFifths.ret.0 // 12628
D=A // 12629
@CALL // 12630
0;JMP // 12631
(Main.getFourFifths.ret.0)
@SP // 12632
AM=M-1 // 12633
D=M // 12634
@LCL // 12635
A=M // 12636
M=D // 12637

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@5 // 12638
D=A // 12639
@SP // 12640
AM=M+1 // 12641
A=A-1 // 12642
M=D // 12643
// call Number.new
@6 // 12644
D=A // 12645
@14 // 12646
M=D // 12647
@Number.new // 12648
D=A // 12649
@13 // 12650
M=D // 12651
@Main.getFourFifths.ret.1 // 12652
D=A // 12653
@CALL // 12654
0;JMP // 12655
(Main.getFourFifths.ret.1)
@SP // 12656
AM=M-1 // 12657
D=M // 12658
@LCL // 12659
A=M+1 // 12660
M=D // 12661

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 12662
A=M // 12663
D=M // 12664
@SP // 12665
AM=M+1 // 12666
A=A-1 // 12667
M=D // 12668
@LCL // 12669
A=M+1 // 12670
D=M // 12671
@SP // 12672
AM=M+1 // 12673
A=A-1 // 12674
M=D // 12675
// call Number.do_div
@7 // 12676
D=A // 12677
@14 // 12678
M=D // 12679
@Number.do_div // 12680
D=A // 12681
@13 // 12682
M=D // 12683
@Main.getFourFifths.ret.2 // 12684
D=A // 12685
@CALL // 12686
0;JMP // 12687
(Main.getFourFifths.ret.2)
@SP // 12688
M=M-1 // 12689

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 12690
A=M+1 // 12691
D=M // 12692
@SP // 12693
AM=M+1 // 12694
A=A-1 // 12695
M=D // 12696
// call Number.dispose
@6 // 12697
D=A // 12698
@14 // 12699
M=D // 12700
@Number.dispose // 12701
D=A // 12702
@13 // 12703
M=D // 12704
@Main.getFourFifths.ret.3 // 12705
D=A // 12706
@CALL // 12707
0;JMP // 12708
(Main.getFourFifths.ret.3)
@SP // 12709
M=M-1 // 12710

////PushInstruction("local 0")
@LCL // 12711
A=M // 12712
D=M // 12713
@SP // 12714
AM=M+1 // 12715
A=A-1 // 12716
M=D // 12717
@RETURN // 12718
0;JMP // 12719

////FunctionInstruction{functionName='Int32.leftshift', numLocals=2, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.clone=2}}
// function Int32.leftshift with 2
(Int32.leftshift)
@SP // 12720
M=M+1 // 12721
AM=M+1 // 12722
A=A-1 // 12723
M=0 // 12724
A=A-1 // 12725
M=0 // 12726

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 12727
A=M // 12728
D=M // 12729
@LCL // 12730
A=M // 12731
M=D // 12732

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 12733
A=M+1 // 12734
M=0 // 12735

////LabelInstruction{label='Int32.leftshift_WHILE_EXP1}
// label Int32.leftshift_WHILE_EXP1
(Int32.leftshift_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.leftshift_WHILE_END1}}
@Int32.leftshift.LT.25 // 12736
D=A // 12737
@SP // 12738
AM=M+1 // 12739
A=A-1 // 12740
M=D // 12741
@LCL // 12742
A=M+1 // 12743
D=M // 12744
@SP // 12745
AM=M+1 // 12746
A=A-1 // 12747
M=D // 12748
@ARG // 12749
A=M+1 // 12750
D=M // 12751
@SP // 12752
AM=M-1 // 12753
D=M-D // 12754
@DO_LT // 12755
0;JMP // 12756
(Int32.leftshift.LT.25)
D=!D // 12757
@Int32.leftshift_WHILE_END1 // 12758
D;JNE // 12759

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 12760
A=M // 12761
D=M // 12762
@LCL // 12763
A=M // 12764
M=D+M // 12765

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 12766
A=M+1 // 12767
M=M+1 // 12768

////GotoInstruction{label='Int32.leftshift_WHILE_EXP1}
// goto Int32.leftshift_WHILE_EXP1
@Int32.leftshift_WHILE_EXP1 // 12769
0;JMP // 12770

////LabelInstruction{label='Int32.leftshift_WHILE_END1}
// label Int32.leftshift_WHILE_END1
(Int32.leftshift_WHILE_END1)

////PushInstruction("local 0")
@LCL // 12771
A=M // 12772
D=M // 12773
@SP // 12774
AM=M+1 // 12775
A=A-1 // 12776
M=D // 12777
@RETURN // 12778
0;JMP // 12779

////FunctionInstruction{functionName='Vec3.new', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.clone=4}}
// function Vec3.new with 0
(Vec3.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 12780
D=A // 12781
@SP // 12782
AM=M+1 // 12783
A=A-1 // 12784
M=D // 12785
// call Memory.alloc
@6 // 12786
D=A // 12787
@14 // 12788
M=D // 12789
@Memory.alloc // 12790
D=A // 12791
@13 // 12792
M=D // 12793
@Vec3.new.ret.0 // 12794
D=A // 12795
@CALL // 12796
0;JMP // 12797
(Vec3.new.ret.0)
@SP // 12798
AM=M-1 // 12799
D=M // 12800
@3 // 12801
M=D // 12802

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Vec3.0 // 12803
M=M+1 // 12804

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 12805
A=M // 12806
D=M // 12807
@THIS // 12808
A=M // 12809
M=D // 12810

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 12811
A=M+1 // 12812
D=M // 12813
@THIS // 12814
A=M+1 // 12815
M=D // 12816

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 12817
A=M+1 // 12818
A=A+1 // 12819
D=M // 12820
@THIS // 12821
A=M+1 // 12822
A=A+1 // 12823
M=D // 12824

////PushInstruction("pointer 0")
@3 // 12825
D=M // 12826
@SP // 12827
AM=M+1 // 12828
A=A-1 // 12829
M=D // 12830
@RETURN // 12831
0;JMP // 12832

////FunctionInstruction{functionName='Int32.initialize', numLocals=3, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.clone=2, Int32.leftshift=0}}
// function Int32.initialize with 3
(Int32.initialize)
@3 // 12833
D=A // 12834
@SP // 12835
AM=D+M // 12836
A=A-1 // 12837
M=0 // 12838
A=A-1 // 12839
M=0 // 12840
A=A-1 // 12841
M=0 // 12842

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 15")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=static 1}
//}

@15 // 12843
D=A // 12844
@SP // 12845
AM=M+1 // 12846
A=A-1 // 12847
M=D // 12848
// call Memory.alloc
@6 // 12849
D=A // 12850
@14 // 12851
M=D // 12852
@Memory.alloc // 12853
D=A // 12854
@13 // 12855
M=D // 12856
@Int32.initialize.ret.0 // 12857
D=A // 12858
@CALL // 12859
0;JMP // 12860
(Int32.initialize.ret.0)
@SP // 12861
AM=M-1 // 12862
D=M // 12863
@Int32.1 // 12864
M=D // 12865

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 12866
A=M+1 // 12867
M=0 // 12868

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 12869
A=M+1 // 12870
A=A+1 // 12871
M=1 // 12872

////LabelInstruction{label='Int32.initialize_WHILE_EXP1}
// label Int32.initialize_WHILE_EXP1
(Int32.initialize_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 15"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.initialize_WHILE_END1}}
@Int32.initialize.LT.26 // 12873
D=A // 12874
@SP // 12875
AM=M+1 // 12876
A=A-1 // 12877
M=D // 12878
@LCL // 12879
A=M+1 // 12880
D=M // 12881
@15 // 12882
D=D-A // 12883
@DO_LT // 12884
0;JMP // 12885
(Int32.initialize.LT.26)
D=!D // 12886
@Int32.initialize_WHILE_END1 // 12887
D;JNE // 12888

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@Int32.1 // 12889
D=M // 12890
@SP // 12891
AM=M+1 // 12892
A=A-1 // 12893
M=D // 12894
@LCL // 12895
A=M+1 // 12896
D=M // 12897
@SP // 12898
AM=M-1 // 12899
D=D+M // 12900
@SP // 12901
AM=M+1 // 12902
A=A-1 // 12903
M=D // 12904
@LCL // 12905
A=M+1 // 12906
A=A+1 // 12907
D=M // 12908
@SP // 12909
AM=M-1 // 12910
A=M // 12911
M=D // 12912

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 12913
A=M+1 // 12914
A=A+1 // 12915
D=M // 12916
@LCL // 12917
A=M+1 // 12918
A=A+1 // 12919
M=D+M // 12920

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 12921
A=M+1 // 12922
M=M+1 // 12923

////GotoInstruction{label='Int32.initialize_WHILE_EXP1}
// goto Int32.initialize_WHILE_EXP1
@Int32.initialize_WHILE_EXP1 // 12924
0;JMP // 12925

////LabelInstruction{label='Int32.initialize_WHILE_END1}
// label Int32.initialize_WHILE_END1
(Int32.initialize_WHILE_END1)

////PushInstruction("constant 0")
@SP // 12926
AM=M+1 // 12927
A=A-1 // 12928
M=0 // 12929
@RETURN // 12930
0;JMP // 12931

////FunctionInstruction{functionName='Int32.do_div', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_div with 0
(Int32.do_div)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 12932
A=M // 12933
D=M // 12934
@3 // 12935
M=D // 12936

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 0"), PushInstruction("argument 1")], call=CallInstruction{Int32.do_left_shift_bytes_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 12937
D=A // 12938
@SP // 12939
M=D+M // 12940
@3 // 12941
D=M // 12942
@SP // 12943
A=M-1 // 12944
M=0 // 12945
A=A-1 // 12946
M=D // 12947
A=A-1 // 12948
@1 // 12949
D=A // 12950
@SP // 12951
M=D+M // 12952
@ARG // 12953
A=M+1 // 12954
D=M // 12955
@SP // 12956
A=M-1 // 12957
M=D // 12958
A=A-1 // 12959
// call Int32.do_left_shift_bytes_div
@8 // 12960
D=A // 12961
@14 // 12962
M=D // 12963
@Int32.do_left_shift_bytes_div // 12964
D=A // 12965
@13 // 12966
M=D // 12967
@Int32.do_div.ret.0 // 12968
D=A // 12969
@CALL // 12970
0;JMP // 12971
(Int32.do_div.ret.0)
@SP // 12972
M=M-1 // 12973

////PushInstruction("constant 0")
@SP // 12974
AM=M+1 // 12975
A=A-1 // 12976
M=0 // 12977
@RETURN // 12978
0;JMP // 12979

////FunctionInstruction{functionName='Int32.do_neg', numLocals=0, funcMapping={Int32.is_positive=1, Int32.do_div=1, Int32.do_sub=4, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_neg with 0
(Int32.do_neg)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 12980
A=M // 12981
D=M // 12982
@3 // 12983
M=D // 12984

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                UnaryPushGroup(                    Dereference(
//                        base:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("this 0"),
//                                right:
//                                    PushInstruction("constant 0"),
//                                binaryOp: "ADD"
//                            )
//                    ),
//NOT),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 12985
A=M // 12986
D=M // 12987
@SP // 12988
AM=M+1 // 12989
A=A-1 // 12990
M=D // 12991
@THIS // 12992
A=M // 12993
D=M // 12994
@0 // 12995
A=D+A // 12996
D=M // 12997
D=!D // 12998
D=D+1 // 12999
@255 // 13000
D=D&A // 13001
@SP // 13002
AM=M-1 // 13003
A=M // 13004
M=D // 13005

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 1"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 13006
A=M // 13007
D=M // 13008
@SP // 13009
AM=M+1 // 13010
A=A-1 // 13011
M=D+1 // 13012
@THIS // 13013
A=M // 13014
D=M // 13015
A=D+1 // 13016
D=M // 13017
D=!D // 13018
@255 // 13019
D=D&A // 13020
@SP // 13021
AM=M-1 // 13022
A=M // 13023
M=D // 13024

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 2"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 13025
A=M // 13026
D=M // 13027
@2 // 13028
D=D+A // 13029
@SP // 13030
AM=M+1 // 13031
A=A-1 // 13032
M=D // 13033
@THIS // 13034
A=M // 13035
D=M // 13036
@2 // 13037
A=D+A // 13038
D=M // 13039
D=!D // 13040
@255 // 13041
D=D&A // 13042
@SP // 13043
AM=M-1 // 13044
A=M // 13045
M=D // 13046

////PushWriter{source=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 3"),
//                        binaryOp: "ADD"
//                    )
//            ),
//NOT),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 13047
A=M // 13048
D=M // 13049
@3 // 13050
D=D+A // 13051
@SP // 13052
AM=M+1 // 13053
A=A-1 // 13054
M=D // 13055
@THIS // 13056
A=M // 13057
D=M // 13058
@3 // 13059
A=D+A // 13060
D=M // 13061
D=!D // 13062
@255 // 13063
D=D&A // 13064
@SP // 13065
AM=M-1 // 13066
A=M // 13067
M=D // 13068

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE1}}
@Int32.do_neg.EQ.27 // 13069
D=A // 13070
@SP // 13071
AM=M+1 // 13072
A=A-1 // 13073
M=D // 13074
@THIS // 13075
A=M // 13076
D=M // 13077
@0 // 13078
A=D+A // 13079
D=M // 13080
@DO_EQ // 13081
0;JMP // 13082
(Int32.do_neg.EQ.27)
@Int32.do_neg$IF_TRUE1 // 13083
D;JNE // 13084

////GotoInstruction{label='Int32.do_neg$IF_END1}
// goto Int32.do_neg$IF_END1
@Int32.do_neg$IF_END1 // 13085
0;JMP // 13086

////LabelInstruction{label='Int32.do_neg$IF_TRUE1}
// label Int32.do_neg$IF_TRUE1
(Int32.do_neg$IF_TRUE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 13087
A=M // 13088
D=M // 13089
@SP // 13090
AM=M+1 // 13091
A=A-1 // 13092
M=D+1 // 13093
@THIS // 13094
A=M // 13095
D=M // 13096
A=D+1 // 13097
D=M // 13098
D=D+1 // 13099
@SP // 13100
AM=M-1 // 13101
A=M // 13102
M=D // 13103

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE2}}
@Int32.do_neg.EQ.28 // 13104
D=A // 13105
@SP // 13106
AM=M+1 // 13107
A=A-1 // 13108
M=D // 13109
@THIS // 13110
A=M // 13111
D=M // 13112
A=D+1 // 13113
D=M // 13114
@256 // 13115
D=D-A // 13116
@DO_EQ // 13117
0;JMP // 13118
(Int32.do_neg.EQ.28)
@Int32.do_neg$IF_TRUE2 // 13119
D;JNE // 13120

////GotoInstruction{label='Int32.do_neg$IF_END2}
// goto Int32.do_neg$IF_END2
@Int32.do_neg$IF_END2 // 13121
0;JMP // 13122

////LabelInstruction{label='Int32.do_neg$IF_TRUE2}
// label Int32.do_neg$IF_TRUE2
(Int32.do_neg$IF_TRUE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 13123
A=M // 13124
D=M // 13125
@SP // 13126
AM=M+1 // 13127
A=A-1 // 13128
M=D+1 // 13129
D=0 // 13130
@SP // 13131
AM=M-1 // 13132
A=M // 13133
M=D // 13134

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 13135
A=M // 13136
D=M // 13137
@2 // 13138
D=D+A // 13139
@SP // 13140
AM=M+1 // 13141
A=A-1 // 13142
M=D // 13143
@THIS // 13144
A=M // 13145
D=M // 13146
@2 // 13147
A=D+A // 13148
D=M // 13149
D=D+1 // 13150
@SP // 13151
AM=M-1 // 13152
A=M // 13153
M=D // 13154

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE3}}
@Int32.do_neg.EQ.29 // 13155
D=A // 13156
@SP // 13157
AM=M+1 // 13158
A=A-1 // 13159
M=D // 13160
@THIS // 13161
A=M // 13162
D=M // 13163
@2 // 13164
A=D+A // 13165
D=M // 13166
@256 // 13167
D=D-A // 13168
@DO_EQ // 13169
0;JMP // 13170
(Int32.do_neg.EQ.29)
@Int32.do_neg$IF_TRUE3 // 13171
D;JNE // 13172

////GotoInstruction{label='Int32.do_neg$IF_END3}
// goto Int32.do_neg$IF_END3
@Int32.do_neg$IF_END3 // 13173
0;JMP // 13174

////LabelInstruction{label='Int32.do_neg$IF_TRUE3}
// label Int32.do_neg$IF_TRUE3
(Int32.do_neg$IF_TRUE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 13175
A=M // 13176
D=M // 13177
@2 // 13178
D=D+A // 13179
@SP // 13180
AM=M+1 // 13181
A=A-1 // 13182
M=D // 13183
D=0 // 13184
@SP // 13185
AM=M-1 // 13186
A=M // 13187
M=D // 13188

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 13189
A=M // 13190
D=M // 13191
@3 // 13192
D=D+A // 13193
@SP // 13194
AM=M+1 // 13195
A=A-1 // 13196
M=D // 13197
@THIS // 13198
A=M // 13199
D=M // 13200
@3 // 13201
A=D+A // 13202
D=M // 13203
D=D+1 // 13204
@SP // 13205
AM=M-1 // 13206
A=M // 13207
M=D // 13208

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.do_neg$IF_TRUE4}}
@Int32.do_neg.EQ.30 // 13209
D=A // 13210
@SP // 13211
AM=M+1 // 13212
A=A-1 // 13213
M=D // 13214
@THIS // 13215
A=M // 13216
D=M // 13217
@3 // 13218
A=D+A // 13219
D=M // 13220
@256 // 13221
D=D-A // 13222
@DO_EQ // 13223
0;JMP // 13224
(Int32.do_neg.EQ.30)
@Int32.do_neg$IF_TRUE4 // 13225
D;JNE // 13226

////GotoInstruction{label='Int32.do_neg$IF_END4}
// goto Int32.do_neg$IF_END4
@Int32.do_neg$IF_END4 // 13227
0;JMP // 13228

////LabelInstruction{label='Int32.do_neg$IF_TRUE4}
// label Int32.do_neg$IF_TRUE4
(Int32.do_neg$IF_TRUE4)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 13229
A=M // 13230
D=M // 13231
@3 // 13232
D=D+A // 13233
@SP // 13234
AM=M+1 // 13235
A=A-1 // 13236
M=D // 13237
D=0 // 13238
@SP // 13239
AM=M-1 // 13240
A=M // 13241
M=D // 13242

////LabelInstruction{label='Int32.do_neg$IF_END4}
// label Int32.do_neg$IF_END4
(Int32.do_neg$IF_END4)

////LabelInstruction{label='Int32.do_neg$IF_END3}
// label Int32.do_neg$IF_END3
(Int32.do_neg$IF_END3)

////LabelInstruction{label='Int32.do_neg$IF_END2}
// label Int32.do_neg$IF_END2
(Int32.do_neg$IF_END2)

////LabelInstruction{label='Int32.do_neg$IF_END1}
// label Int32.do_neg$IF_END1
(Int32.do_neg$IF_END1)

////PushInstruction("constant 0")
@SP // 13243
AM=M+1 // 13244
A=A-1 // 13245
M=0 // 13246
@RETURN // 13247
0;JMP // 13248

////FunctionInstruction{functionName='Int32.do_sqrt', numLocals=6, funcMapping={Int32.is_positive=1, Int32.do_div=1, Int32.do_sub=4, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_sqrt with 6
(Int32.do_sqrt)
@6 // 13249
D=A // 13250
@SP // 13251
AM=D+M // 13252
A=A-1 // 13253
M=0 // 13254
A=A-1 // 13255
M=0 // 13256
A=A-1 // 13257
M=0 // 13258
A=A-1 // 13259
M=0 // 13260
A=A-1 // 13261
M=0 // 13262
A=A-1 // 13263
M=0 // 13264

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 13265
A=M // 13266
D=M // 13267
@3 // 13268
M=D // 13269

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_zero}}, ifGoto=IfGotoInstruction{label='Int32.do_sqrt$IF_TRUE1}}
@3 // 13270
D=M // 13271
@SP // 13272
AM=M+1 // 13273
A=A-1 // 13274
M=D // 13275
// call Int32.is_zero
@6 // 13276
D=A // 13277
@14 // 13278
M=D // 13279
@Int32.is_zero // 13280
D=A // 13281
@13 // 13282
M=D // 13283
@Int32.do_sqrt.ret.0 // 13284
D=A // 13285
@CALL // 13286
0;JMP // 13287
(Int32.do_sqrt.ret.0)
@SP // 13288
AM=M-1 // 13289
D=M // 13290
@Int32.do_sqrt$IF_TRUE1 // 13291
D;JNE // 13292

////GotoInstruction{label='Int32.do_sqrt$IF_END1}
// goto Int32.do_sqrt$IF_END1
@Int32.do_sqrt$IF_END1 // 13293
0;JMP // 13294

////LabelInstruction{label='Int32.do_sqrt$IF_TRUE1}
// label Int32.do_sqrt$IF_TRUE1
(Int32.do_sqrt$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 13295
AM=M+1 // 13296
A=A-1 // 13297
M=0 // 13298
@RETURN // 13299
0;JMP // 13300

////LabelInstruction{label='Int32.do_sqrt$IF_END1}
// label Int32.do_sqrt$IF_END1
(Int32.do_sqrt$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 2}
//}

@2 // 13301
D=A // 13302
@SP // 13303
AM=M+1 // 13304
A=A-1 // 13305
M=D // 13306
// call Int32.new
@6 // 13307
D=A // 13308
@14 // 13309
M=D // 13310
@Int32.new // 13311
D=A // 13312
@13 // 13313
M=D // 13314
@Int32.do_sqrt.ret.1 // 13315
D=A // 13316
@CALL // 13317
0;JMP // 13318
(Int32.do_sqrt.ret.1)
@SP // 13319
AM=M-1 // 13320
D=M // 13321
@LCL // 13322
A=M+1 // 13323
A=A+1 // 13324
M=D // 13325

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 13326
AM=M+1 // 13327
A=A-1 // 13328
M=-1 // 13329
// call Int32.new
@6 // 13330
D=A // 13331
@14 // 13332
M=D // 13333
@Int32.new // 13334
D=A // 13335
@13 // 13336
M=D // 13337
@Int32.do_sqrt.ret.2 // 13338
D=A // 13339
@CALL // 13340
0;JMP // 13341
(Int32.do_sqrt.ret.2)
@SP // 13342
AM=M-1 // 13343
D=M // 13344
@LCL // 13345
A=M // 13346
M=D // 13347

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.initial_sqrt_guess}}
//  pop:  PopInstruction{address=local 1}
//}

@3 // 13348
D=M // 13349
@SP // 13350
AM=M+1 // 13351
A=A-1 // 13352
M=D // 13353
// call Int32.initial_sqrt_guess
@6 // 13354
D=A // 13355
@14 // 13356
M=D // 13357
@Int32.initial_sqrt_guess // 13358
D=A // 13359
@13 // 13360
M=D // 13361
@Int32.do_sqrt.ret.3 // 13362
D=A // 13363
@CALL // 13364
0;JMP // 13365
(Int32.do_sqrt.ret.3)
@SP // 13366
AM=M-1 // 13367
D=M // 13368
@LCL // 13369
A=M+1 // 13370
M=D // 13371

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 13372
D=M // 13373
@4 // 13374
A=D+A // 13375
M=0 // 13376

////LabelInstruction{label='Int32.do_sqrt_WHILE_EXP1}
// label Int32.do_sqrt_WHILE_EXP1
(Int32.do_sqrt_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 4"),
//                right:
//                    PushInstruction("constant 20"),
//                binaryOp: "LT"
//            ),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Int32.cmp}},
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_sqrt_WHILE_END1}}
@Int32.do_sqrt.LT.31 // 13377
D=A // 13378
@SP // 13379
AM=M+1 // 13380
A=A-1 // 13381
M=D // 13382
@LCL // 13383
D=M // 13384
@4 // 13385
A=D+A // 13386
D=M // 13387
@20 // 13388
D=D-A // 13389
@DO_LT // 13390
0;JMP // 13391
(Int32.do_sqrt.LT.31)
@SP // 13392
AM=M+1 // 13393
A=A-1 // 13394
M=D // 13395
@Int32.do_sqrt.EQ.32 // 13396
D=A // 13397
@SP // 13398
AM=M+1 // 13399
A=A-1 // 13400
M=D // 13401
@LCL // 13402
A=M // 13403
D=M // 13404
@SP // 13405
AM=M+1 // 13406
A=A-1 // 13407
M=D // 13408
@LCL // 13409
A=M+1 // 13410
D=M // 13411
@SP // 13412
AM=M+1 // 13413
A=A-1 // 13414
M=D // 13415
// call Int32.cmp
@7 // 13416
D=A // 13417
@14 // 13418
M=D // 13419
@Int32.cmp // 13420
D=A // 13421
@13 // 13422
M=D // 13423
@Int32.do_sqrt.ret.4 // 13424
D=A // 13425
@CALL // 13426
0;JMP // 13427
(Int32.do_sqrt.ret.4)
@SP // 13428
AM=M-1 // 13429
D=M // 13430
@DO_EQ // 13431
0;JMP // 13432
(Int32.do_sqrt.EQ.32)
D=!D // 13433
@SP // 13434
AM=M-1 // 13435
D=D&M // 13436
D=!D // 13437
@Int32.do_sqrt_WHILE_END1 // 13438
D;JNE // 13439

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@3 // 13440
D=M // 13441
@SP // 13442
AM=M+1 // 13443
A=A-1 // 13444
M=D // 13445
// call Int32.clone
@6 // 13446
D=A // 13447
@14 // 13448
M=D // 13449
@Int32.clone // 13450
D=A // 13451
@13 // 13452
M=D // 13453
@Int32.do_sqrt.ret.5 // 13454
D=A // 13455
@CALL // 13456
0;JMP // 13457
(Int32.do_sqrt.ret.5)
@SP // 13458
AM=M-1 // 13459
D=M // 13460
@LCL // 13461
A=M+1 // 13462
A=A+1 // 13463
A=A+1 // 13464
M=D // 13465

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 1")], call=CallInstruction{Int32.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13466
A=M+1 // 13467
A=A+1 // 13468
A=A+1 // 13469
D=M // 13470
@SP // 13471
AM=M+1 // 13472
A=A-1 // 13473
M=D // 13474
@LCL // 13475
A=M+1 // 13476
D=M // 13477
@SP // 13478
AM=M+1 // 13479
A=A-1 // 13480
M=D // 13481
// call Int32.do_div
@7 // 13482
D=A // 13483
@14 // 13484
M=D // 13485
@Int32.do_div // 13486
D=A // 13487
@13 // 13488
M=D // 13489
@Int32.do_sqrt.ret.6 // 13490
D=A // 13491
@CALL // 13492
0;JMP // 13493
(Int32.do_sqrt.ret.6)
@SP // 13494
M=M-1 // 13495

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13496
A=M // 13497
D=M // 13498
@SP // 13499
AM=M+1 // 13500
A=A-1 // 13501
M=D // 13502
// call Int32.dispose
@6 // 13503
D=A // 13504
@14 // 13505
M=D // 13506
@Int32.dispose // 13507
D=A // 13508
@13 // 13509
M=D // 13510
@Int32.do_sqrt.ret.7 // 13511
D=A // 13512
@CALL // 13513
0;JMP // 13514
(Int32.do_sqrt.ret.7)
@SP // 13515
M=M-1 // 13516

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 13517
A=M+1 // 13518
D=M // 13519
@SP // 13520
AM=M+1 // 13521
A=A-1 // 13522
M=D // 13523
// call Int32.clone
@6 // 13524
D=A // 13525
@14 // 13526
M=D // 13527
@Int32.clone // 13528
D=A // 13529
@13 // 13530
M=D // 13531
@Int32.do_sqrt.ret.8 // 13532
D=A // 13533
@CALL // 13534
0;JMP // 13535
(Int32.do_sqrt.ret.8)
@SP // 13536
AM=M-1 // 13537
D=M // 13538
@LCL // 13539
A=M // 13540
M=D // 13541

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 3")], call=CallInstruction{Int32.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13542
A=M+1 // 13543
D=M // 13544
@SP // 13545
AM=M+1 // 13546
A=A-1 // 13547
M=D // 13548
@LCL // 13549
A=M+1 // 13550
A=A+1 // 13551
A=A+1 // 13552
D=M // 13553
@SP // 13554
AM=M+1 // 13555
A=A-1 // 13556
M=D // 13557
// call Int32.do_add
@7 // 13558
D=A // 13559
@14 // 13560
M=D // 13561
@Int32.do_add // 13562
D=A // 13563
@13 // 13564
M=D // 13565
@Int32.do_sqrt.ret.9 // 13566
D=A // 13567
@CALL // 13568
0;JMP // 13569
(Int32.do_sqrt.ret.9)
@SP // 13570
M=M-1 // 13571

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 2")], call=CallInstruction{Int32.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13572
A=M+1 // 13573
D=M // 13574
@SP // 13575
AM=M+1 // 13576
A=A-1 // 13577
M=D // 13578
@LCL // 13579
A=M+1 // 13580
A=A+1 // 13581
D=M // 13582
@SP // 13583
AM=M+1 // 13584
A=A-1 // 13585
M=D // 13586
// call Int32.do_div
@7 // 13587
D=A // 13588
@14 // 13589
M=D // 13590
@Int32.do_div // 13591
D=A // 13592
@13 // 13593
M=D // 13594
@Int32.do_sqrt.ret.10 // 13595
D=A // 13596
@CALL // 13597
0;JMP // 13598
(Int32.do_sqrt.ret.10)
@SP // 13599
M=M-1 // 13600

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13601
A=M+1 // 13602
A=A+1 // 13603
A=A+1 // 13604
D=M // 13605
@SP // 13606
AM=M+1 // 13607
A=A-1 // 13608
M=D // 13609
// call Int32.dispose
@6 // 13610
D=A // 13611
@14 // 13612
M=D // 13613
@Int32.dispose // 13614
D=A // 13615
@13 // 13616
M=D // 13617
@Int32.do_sqrt.ret.11 // 13618
D=A // 13619
@CALL // 13620
0;JMP // 13621
(Int32.do_sqrt.ret.11)
@SP // 13622
M=M-1 // 13623

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 13624
D=M // 13625
@4 // 13626
A=D+A // 13627
M=M+1 // 13628

////GotoInstruction{label='Int32.do_sqrt_WHILE_EXP1}
// goto Int32.do_sqrt_WHILE_EXP1
@Int32.do_sqrt_WHILE_EXP1 // 13629
0;JMP // 13630

////LabelInstruction{label='Int32.do_sqrt_WHILE_END1}
// label Int32.do_sqrt_WHILE_END1
(Int32.do_sqrt_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 13631
A=M+1 // 13632
D=M // 13633
@SP // 13634
AM=M+1 // 13635
A=A-1 // 13636
M=D // 13637
// call Int32.getParts
@6 // 13638
D=A // 13639
@14 // 13640
M=D // 13641
@Int32.getParts // 13642
D=A // 13643
@13 // 13644
M=D // 13645
@Int32.do_sqrt.ret.12 // 13646
D=A // 13647
@CALL // 13648
0;JMP // 13649
(Int32.do_sqrt.ret.12)
@LCL // 13650
D=M // 13651
@5 // 13652
A=D+A // 13653
D=A // 13654
@R13 // 13655
M=D // 13656
@SP // 13657
AM=M-1 // 13658
D=M // 13659
@R13 // 13660
A=M // 13661
M=D // 13662

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 13663
D=M // 13664
@4 // 13665
A=D+A // 13666
M=0 // 13667

////LabelInstruction{label='Int32.do_sqrt_WHILE_EXP2}
// label Int32.do_sqrt_WHILE_EXP2
(Int32.do_sqrt_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 4"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_sqrt_WHILE_END2}}
@Int32.do_sqrt.LT.33 // 13668
D=A // 13669
@SP // 13670
AM=M+1 // 13671
A=A-1 // 13672
M=D // 13673
@LCL // 13674
D=M // 13675
@4 // 13676
A=D+A // 13677
D=M // 13678
@4 // 13679
D=D-A // 13680
@DO_LT // 13681
0;JMP // 13682
(Int32.do_sqrt.LT.33)
D=!D // 13683
@Int32.do_sqrt_WHILE_END2 // 13684
D;JNE // 13685

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("local 4"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 4"),
//    binaryOp: "ADD"
//)}
@THIS // 13686
A=M // 13687
D=M // 13688
@SP // 13689
AM=M+1 // 13690
A=A-1 // 13691
M=D // 13692
@LCL // 13693
D=M // 13694
@4 // 13695
A=D+A // 13696
D=M // 13697
@SP // 13698
AM=M-1 // 13699
D=D+M // 13700
@SP // 13701
AM=M+1 // 13702
A=A-1 // 13703
M=D // 13704
@LCL // 13705
D=M // 13706
@5 // 13707
A=D+A // 13708
D=M // 13709
A=A-1 // 13710
A=D+M // 13711
D=M // 13712
@SP // 13713
AM=M-1 // 13714
A=M // 13715
M=D // 13716

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 13717
D=M // 13718
@4 // 13719
A=D+A // 13720
M=M+1 // 13721

////GotoInstruction{label='Int32.do_sqrt_WHILE_EXP2}
// goto Int32.do_sqrt_WHILE_EXP2
@Int32.do_sqrt_WHILE_EXP2 // 13722
0;JMP // 13723

////LabelInstruction{label='Int32.do_sqrt_WHILE_END2}
// label Int32.do_sqrt_WHILE_END2
(Int32.do_sqrt_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13724
A=M+1 // 13725
A=A+1 // 13726
D=M // 13727
@SP // 13728
AM=M+1 // 13729
A=A-1 // 13730
M=D // 13731
// call Int32.dispose
@6 // 13732
D=A // 13733
@14 // 13734
M=D // 13735
@Int32.dispose // 13736
D=A // 13737
@13 // 13738
M=D // 13739
@Int32.do_sqrt.ret.13 // 13740
D=A // 13741
@CALL // 13742
0;JMP // 13743
(Int32.do_sqrt.ret.13)
@SP // 13744
M=M-1 // 13745

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13746
A=M+1 // 13747
D=M // 13748
@SP // 13749
AM=M+1 // 13750
A=A-1 // 13751
M=D // 13752
// call Int32.dispose
@6 // 13753
D=A // 13754
@14 // 13755
M=D // 13756
@Int32.dispose // 13757
D=A // 13758
@13 // 13759
M=D // 13760
@Int32.do_sqrt.ret.14 // 13761
D=A // 13762
@CALL // 13763
0;JMP // 13764
(Int32.do_sqrt.ret.14)
@SP // 13765
M=M-1 // 13766

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 13767
A=M // 13768
D=M // 13769
@SP // 13770
AM=M+1 // 13771
A=A-1 // 13772
M=D // 13773
// call Int32.dispose
@6 // 13774
D=A // 13775
@14 // 13776
M=D // 13777
@Int32.dispose // 13778
D=A // 13779
@13 // 13780
M=D // 13781
@Int32.do_sqrt.ret.15 // 13782
D=A // 13783
@CALL // 13784
0;JMP // 13785
(Int32.do_sqrt.ret.15)
@SP // 13786
M=M-1 // 13787

////PushInstruction("constant 0")
@SP // 13788
AM=M+1 // 13789
A=A-1 // 13790
M=0 // 13791
@RETURN // 13792
0;JMP // 13793

////FunctionInstruction{functionName='Int32.u4_array_div_u4_array', numLocals=15, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.u4_array_div_u4_array with 15
(Int32.u4_array_div_u4_array)
@15 // 13794
D=A // 13795
@SP // 13796
AM=D+M // 13797
A=A-1 // 13798
M=0 // 13799
A=A-1 // 13800
M=0 // 13801
A=A-1 // 13802
M=0 // 13803
A=A-1 // 13804
M=0 // 13805
A=A-1 // 13806
M=0 // 13807
A=A-1 // 13808
M=0 // 13809
A=A-1 // 13810
M=0 // 13811
A=A-1 // 13812
M=0 // 13813
A=A-1 // 13814
M=0 // 13815
A=A-1 // 13816
M=0 // 13817
A=A-1 // 13818
M=0 // 13819
A=A-1 // 13820
M=0 // 13821
A=A-1 // 13822
M=0 // 13823
A=A-1 // 13824
M=0 // 13825
A=A-1 // 13826
M=0 // 13827

////PushPopPair {
//  push: PushInstruction("constant 16")
//  pop:  PopInstruction{address=local 0}
//}

@16 // 13828
D=A // 13829
@LCL // 13830
A=M // 13831
M=D // 13832

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 6}
//}

@16 // 13833
D=A // 13834
@SP // 13835
AM=M+1 // 13836
A=A-1 // 13837
M=D // 13838
// call Memory.alloc
@6 // 13839
D=A // 13840
@14 // 13841
M=D // 13842
@Memory.alloc // 13843
D=A // 13844
@13 // 13845
M=D // 13846
@Int32.u4_array_div_u4_array.ret.0 // 13847
D=A // 13848
@CALL // 13849
0;JMP // 13850
(Int32.u4_array_div_u4_array.ret.0)
@LCL // 13851
D=M // 13852
@6 // 13853
A=D+A // 13854
D=A // 13855
@R13 // 13856
M=D // 13857
@SP // 13858
AM=M-1 // 13859
D=M // 13860
@R13 // 13861
A=M // 13862
M=D // 13863

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE1}}
@Int32.u4_array_div_u4_array.EQ.34 // 13864
D=A // 13865
@SP // 13866
AM=M+1 // 13867
A=A-1 // 13868
M=D // 13869
@ARG // 13870
A=M+1 // 13871
A=A+1 // 13872
D=M // 13873
D=D-1 // 13874
@DO_EQ // 13875
0;JMP // 13876
(Int32.u4_array_div_u4_array.EQ.34)
@Int32.u4_array_div_u4_array$IF_TRUE1 // 13877
D;JNE // 13878

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_END1}
// goto Int32.u4_array_div_u4_array$IF_END1
@Int32.u4_array_div_u4_array$IF_END1 // 13879
0;JMP // 13880

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE1}
// label Int32.u4_array_div_u4_array$IF_TRUE1
(Int32.u4_array_div_u4_array$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 13881
A=M+1 // 13882
A=A+1 // 13883
A=A+1 // 13884
M=0 // 13885

////PushPopPair {
//  push: PushInstruction("constant 15")
//  pop:  PopInstruction{address=local 2}
//}

@15 // 13886
D=A // 13887
@LCL // 13888
A=M+1 // 13889
A=A+1 // 13890
M=D // 13891

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP1}
// label Int32.u4_array_div_u4_array_WHILE_EXP1
(Int32.u4_array_div_u4_array_WHILE_EXP1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END1}}
@Int32.u4_array_div_u4_array.LT.35 // 13892
D=A // 13893
@SP // 13894
AM=M+1 // 13895
A=A-1 // 13896
M=D // 13897
@LCL // 13898
A=M+1 // 13899
A=A+1 // 13900
D=M // 13901
@DO_LT // 13902
0;JMP // 13903
(Int32.u4_array_div_u4_array.LT.35)
@Int32.u4_array_div_u4_array_WHILE_END1 // 13904
D;JNE // 13905

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 0")], call=CallInstruction{Math.multiply}},
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("local 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 13906
A=M+1 // 13907
A=A+1 // 13908
A=A+1 // 13909
D=M // 13910
@SP // 13911
AM=M+1 // 13912
A=A-1 // 13913
M=D // 13914
@LCL // 13915
A=M // 13916
D=M // 13917
@SP // 13918
AM=M+1 // 13919
A=A-1 // 13920
M=D // 13921
// call Math.multiply
@7 // 13922
D=A // 13923
@14 // 13924
M=D // 13925
@Math.multiply // 13926
D=A // 13927
@13 // 13928
M=D // 13929
@Int32.u4_array_div_u4_array.ret.1 // 13930
D=A // 13931
@CALL // 13932
0;JMP // 13933
(Int32.u4_array_div_u4_array.ret.1)
@ARG // 13934
A=M // 13935
D=M // 13936
@SP // 13937
AM=M+1 // 13938
A=A-1 // 13939
M=D // 13940
@LCL // 13941
A=M+1 // 13942
A=A+1 // 13943
D=M // 13944
@SP // 13945
AM=M-1 // 13946
A=D+M // 13947
D=M // 13948
@SP // 13949
AM=M-1 // 13950
D=D+M // 13951
@SP // 13952
AM=M+1 // 13953
A=A-1 // 13954
M=D // 13955
@LCL // 13956
D=M // 13957
@4 // 13958
A=D+A // 13959
D=A // 13960
@R13 // 13961
M=D // 13962
@SP // 13963
AM=M-1 // 13964
D=M // 13965
@R13 // 13966
A=M // 13967
M=D // 13968

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 4"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 13969
D=M // 13970
@6 // 13971
A=D+A // 13972
D=M // 13973
@SP // 13974
AM=M+1 // 13975
A=A-1 // 13976
M=D // 13977
@LCL // 13978
A=M+1 // 13979
A=A+1 // 13980
D=M // 13981
@SP // 13982
AM=M-1 // 13983
D=D+M // 13984
@SP // 13985
AM=M+1 // 13986
A=A-1 // 13987
M=D // 13988
@LCL // 13989
D=M // 13990
@4 // 13991
A=D+A // 13992
D=M // 13993
@SP // 13994
AM=M+1 // 13995
A=A-1 // 13996
M=D // 13997
@ARG // 13998
A=M+1 // 13999
D=M // 14000
@0 // 14001
A=D+A // 14002
D=M // 14003
@SP // 14004
AM=M+1 // 14005
A=A-1 // 14006
M=D // 14007
// call Math.divide
@7 // 14008
D=A // 14009
@14 // 14010
M=D // 14011
@Math.divide // 14012
D=A // 14013
@13 // 14014
M=D // 14015
@Int32.u4_array_div_u4_array.ret.2 // 14016
D=A // 14017
@CALL // 14018
0;JMP // 14019
(Int32.u4_array_div_u4_array.ret.2)
@SP // 14020
AM=M-1 // 14021
D=M // 14022
@SP // 14023
AM=M-1 // 14024
A=M // 14025
M=D // 14026

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 6"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        )
//), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 14027
D=M // 14028
@4 // 14029
A=D+A // 14030
D=M // 14031
@SP // 14032
AM=M+1 // 14033
A=A-1 // 14034
M=D // 14035
@LCL // 14036
D=M // 14037
@6 // 14038
A=D+A // 14039
D=M // 14040
@SP // 14041
AM=M+1 // 14042
A=A-1 // 14043
M=D // 14044
@LCL // 14045
A=M+1 // 14046
A=A+1 // 14047
D=M // 14048
@SP // 14049
AM=M-1 // 14050
A=D+M // 14051
D=M // 14052
@SP // 14053
AM=M+1 // 14054
A=A-1 // 14055
M=D // 14056
@ARG // 14057
A=M+1 // 14058
D=M // 14059
@0 // 14060
A=D+A // 14061
D=M // 14062
@SP // 14063
AM=M+1 // 14064
A=A-1 // 14065
M=D // 14066
// call Math.multiply
@7 // 14067
D=A // 14068
@14 // 14069
M=D // 14070
@Math.multiply // 14071
D=A // 14072
@13 // 14073
M=D // 14074
@Int32.u4_array_div_u4_array.ret.3 // 14075
D=A // 14076
@CALL // 14077
0;JMP // 14078
(Int32.u4_array_div_u4_array.ret.3)
@SP // 14079
AM=M-1 // 14080
D=M // 14081
@SP // 14082
AM=M-1 // 14083
D=M-D // 14084
@LCL // 14085
A=M+1 // 14086
A=A+1 // 14087
A=A+1 // 14088
M=D // 14089

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 14090
A=M+1 // 14091
A=A+1 // 14092
M=M-1 // 14093

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP1}
// goto Int32.u4_array_div_u4_array_WHILE_EXP1
@Int32.u4_array_div_u4_array_WHILE_EXP1 // 14094
0;JMP // 14095

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END1}
// label Int32.u4_array_div_u4_array_WHILE_END1
(Int32.u4_array_div_u4_array_WHILE_END1)

////PushInstruction("local 6")
@LCL // 14096
D=M // 14097
@6 // 14098
A=D+A // 14099
D=M // 14100
@SP // 14101
AM=M+1 // 14102
A=A-1 // 14103
M=D // 14104
@RETURN // 14105
0;JMP // 14106

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_END1}
// label Int32.u4_array_div_u4_array$IF_END1
(Int32.u4_array_div_u4_array$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Int32.nlz_u4}}
//  pop:  PopInstruction{address=local 5}
//}

@ARG // 14107
A=M+1 // 14108
D=M // 14109
@SP // 14110
AM=M+1 // 14111
A=A-1 // 14112
M=D // 14113
@ARG // 14114
A=M+1 // 14115
A=A+1 // 14116
D=M // 14117
D=D-1 // 14118
@SP // 14119
AM=M-1 // 14120
A=D+M // 14121
D=M // 14122
@SP // 14123
AM=M+1 // 14124
A=A-1 // 14125
M=D // 14126
// call Int32.nlz_u4
@6 // 14127
D=A // 14128
@14 // 14129
M=D // 14130
@Int32.nlz_u4 // 14131
D=A // 14132
@13 // 14133
M=D // 14134
@Int32.u4_array_div_u4_array.ret.4 // 14135
D=A // 14136
@CALL // 14137
0;JMP // 14138
(Int32.u4_array_div_u4_array.ret.4)
@LCL // 14139
D=M // 14140
@5 // 14141
A=D+A // 14142
D=A // 14143
@R13 // 14144
M=D // 14145
@SP // 14146
AM=M-1 // 14147
D=M // 14148
@R13 // 14149
A=M // 14150
M=D // 14151

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 7}
//}

@8 // 14152
D=A // 14153
@SP // 14154
AM=M+1 // 14155
A=A-1 // 14156
M=D // 14157
// call Memory.alloc
@6 // 14158
D=A // 14159
@14 // 14160
M=D // 14161
@Memory.alloc // 14162
D=A // 14163
@13 // 14164
M=D // 14165
@Int32.u4_array_div_u4_array.ret.5 // 14166
D=A // 14167
@CALL // 14168
0;JMP // 14169
(Int32.u4_array_div_u4_array.ret.5)
@LCL // 14170
D=M // 14171
@7 // 14172
A=D+A // 14173
D=A // 14174
@R13 // 14175
M=D // 14176
@SP // 14177
AM=M-1 // 14178
D=M // 14179
@R13 // 14180
A=M // 14181
M=D // 14182

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 14183
A=M+1 // 14184
A=A+1 // 14185
D=M // 14186
D=D-1 // 14187
@LCL // 14188
A=M+1 // 14189
M=D // 14190

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP2}
// label Int32.u4_array_div_u4_array_WHILE_EXP2
(Int32.u4_array_div_u4_array_WHILE_EXP2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END2}}
@Int32.u4_array_div_u4_array.LT.36 // 14191
D=A // 14192
@SP // 14193
AM=M+1 // 14194
A=A-1 // 14195
M=D // 14196
@LCL // 14197
A=M+1 // 14198
D=M // 14199
D=D-1 // 14200
@DO_LT // 14201
0;JMP // 14202
(Int32.u4_array_div_u4_array.LT.36)
@Int32.u4_array_div_u4_array_WHILE_END2 // 14203
D;JNE // 14204

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//            right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}},
//            binaryOp: "OR"
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 14205
D=M // 14206
@7 // 14207
A=D+A // 14208
D=M // 14209
@SP // 14210
AM=M+1 // 14211
A=A-1 // 14212
M=D // 14213
@LCL // 14214
A=M+1 // 14215
D=M // 14216
@SP // 14217
AM=M-1 // 14218
D=D+M // 14219
@SP // 14220
AM=M+1 // 14221
A=A-1 // 14222
M=D // 14223
@ARG // 14224
A=M+1 // 14225
D=M // 14226
@SP // 14227
AM=M+1 // 14228
A=A-1 // 14229
M=D // 14230
@LCL // 14231
A=M+1 // 14232
D=M // 14233
@SP // 14234
AM=M-1 // 14235
A=D+M // 14236
D=M // 14237
@SP // 14238
AM=M+1 // 14239
A=A-1 // 14240
M=D // 14241
@LCL // 14242
D=M // 14243
@5 // 14244
A=D+A // 14245
D=M // 14246
@SP // 14247
AM=M+1 // 14248
A=A-1 // 14249
M=D // 14250
// call Int32.leftshift
@7 // 14251
D=A // 14252
@14 // 14253
M=D // 14254
@Int32.leftshift // 14255
D=A // 14256
@13 // 14257
M=D // 14258
@Int32.u4_array_div_u4_array.ret.6 // 14259
D=A // 14260
@CALL // 14261
0;JMP // 14262
(Int32.u4_array_div_u4_array.ret.6)
@ARG // 14263
A=M+1 // 14264
D=M // 14265
@SP // 14266
AM=M+1 // 14267
A=A-1 // 14268
M=D // 14269
@LCL // 14270
A=M+1 // 14271
D=M // 14272
D=D-1 // 14273
@SP // 14274
AM=M-1 // 14275
A=D+M // 14276
D=M // 14277
@SP // 14278
AM=M+1 // 14279
A=A-1 // 14280
M=D // 14281
@LCL // 14282
D=M // 14283
@5 // 14284
A=D+A // 14285
D=M // 14286
@4 // 14287
D=A-D // 14288
@SP // 14289
AM=M+1 // 14290
A=A-1 // 14291
M=D // 14292
// call Int32.arith_rightshift
@7 // 14293
D=A // 14294
@14 // 14295
M=D // 14296
@Int32.arith_rightshift // 14297
D=A // 14298
@13 // 14299
M=D // 14300
@Int32.u4_array_div_u4_array.ret.7 // 14301
D=A // 14302
@CALL // 14303
0;JMP // 14304
(Int32.u4_array_div_u4_array.ret.7)
@SP // 14305
AM=M-1 // 14306
D=M // 14307
@SP // 14308
AM=M-1 // 14309
D=D|M // 14310
@15 // 14311
D=D&A // 14312
@SP // 14313
AM=M-1 // 14314
A=M // 14315
M=D // 14316

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 14317
A=M+1 // 14318
M=M-1 // 14319

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP2}
// goto Int32.u4_array_div_u4_array_WHILE_EXP2
@Int32.u4_array_div_u4_array_WHILE_EXP2 // 14320
0;JMP // 14321

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END2}
// label Int32.u4_array_div_u4_array_WHILE_END2
(Int32.u4_array_div_u4_array_WHILE_END2)

////PushWriter{source=BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 14322
D=M // 14323
@7 // 14324
A=D+A // 14325
D=M // 14326
@SP // 14327
AM=M+1 // 14328
A=A-1 // 14329
M=D // 14330
@ARG // 14331
A=M+1 // 14332
D=M // 14333
@0 // 14334
A=D+A // 14335
D=M // 14336
@SP // 14337
AM=M+1 // 14338
A=A-1 // 14339
M=D // 14340
@LCL // 14341
D=M // 14342
@5 // 14343
A=D+A // 14344
D=M // 14345
@SP // 14346
AM=M+1 // 14347
A=A-1 // 14348
M=D // 14349
// call Int32.leftshift
@7 // 14350
D=A // 14351
@14 // 14352
M=D // 14353
@Int32.leftshift // 14354
D=A // 14355
@13 // 14356
M=D // 14357
@Int32.u4_array_div_u4_array.ret.8 // 14358
D=A // 14359
@CALL // 14360
0;JMP // 14361
(Int32.u4_array_div_u4_array.ret.8)
@SP // 14362
AM=M-1 // 14363
D=M // 14364
@15 // 14365
D=D&A // 14366
@SP // 14367
AM=M-1 // 14368
A=M // 14369
M=D // 14370

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 17")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 8}
//}

@17 // 14371
D=A // 14372
@SP // 14373
AM=M+1 // 14374
A=A-1 // 14375
M=D // 14376
// call Memory.alloc
@6 // 14377
D=A // 14378
@14 // 14379
M=D // 14380
@Memory.alloc // 14381
D=A // 14382
@13 // 14383
M=D // 14384
@Int32.u4_array_div_u4_array.ret.9 // 14385
D=A // 14386
@CALL // 14387
0;JMP // 14388
(Int32.u4_array_div_u4_array.ret.9)
@LCL // 14389
D=M // 14390
@8 // 14391
A=D+A // 14392
D=A // 14393
@R13 // 14394
M=D // 14395
@SP // 14396
AM=M-1 // 14397
D=M // 14398
@R13 // 14399
A=M // 14400
M=D // 14401

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 15"),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 16"),
//    binaryOp: "ADD"
//)}
@LCL // 14402
D=M // 14403
@8 // 14404
A=D+A // 14405
D=M // 14406
@16 // 14407
D=D+A // 14408
@SP // 14409
AM=M+1 // 14410
A=A-1 // 14411
M=D // 14412
@ARG // 14413
A=M // 14414
D=M // 14415
@15 // 14416
A=D+A // 14417
D=M // 14418
@SP // 14419
AM=M+1 // 14420
A=A-1 // 14421
M=D // 14422
@LCL // 14423
D=M // 14424
@5 // 14425
A=D+A // 14426
D=M // 14427
@4 // 14428
D=A-D // 14429
@SP // 14430
AM=M+1 // 14431
A=A-1 // 14432
M=D // 14433
// call Int32.arith_rightshift
@7 // 14434
D=A // 14435
@14 // 14436
M=D // 14437
@Int32.arith_rightshift // 14438
D=A // 14439
@13 // 14440
M=D // 14441
@Int32.u4_array_div_u4_array.ret.10 // 14442
D=A // 14443
@CALL // 14444
0;JMP // 14445
(Int32.u4_array_div_u4_array.ret.10)
@SP // 14446
AM=M-1 // 14447
D=M // 14448
@SP // 14449
AM=M-1 // 14450
A=M // 14451
M=D // 14452

////PushPopPair {
//  push: PushInstruction("constant 15")
//  pop:  PopInstruction{address=local 1}
//}

@15 // 14453
D=A // 14454
@LCL // 14455
A=M+1 // 14456
M=D // 14457

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP3}
// label Int32.u4_array_div_u4_array_WHILE_EXP3
(Int32.u4_array_div_u4_array_WHILE_EXP3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END3}}
@Int32.u4_array_div_u4_array.LT.37 // 14458
D=A // 14459
@SP // 14460
AM=M+1 // 14461
A=A-1 // 14462
M=D // 14463
@LCL // 14464
A=M+1 // 14465
D=M // 14466
D=D-1 // 14467
@DO_LT // 14468
0;JMP // 14469
(Int32.u4_array_div_u4_array.LT.37)
@Int32.u4_array_div_u4_array_WHILE_END3 // 14470
D;JNE // 14471

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//            right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), BinaryPushGroup(
//    left:
//        PushInstruction("constant 4"),
//    right:
//        PushInstruction("local 5"),
//    binaryOp: "SUB"
//)], call=CallInstruction{Int32.arith_rightshift}},
//            binaryOp: "OR"
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 14472
D=M // 14473
@8 // 14474
A=D+A // 14475
D=M // 14476
@SP // 14477
AM=M+1 // 14478
A=A-1 // 14479
M=D // 14480
@LCL // 14481
A=M+1 // 14482
D=M // 14483
@SP // 14484
AM=M-1 // 14485
D=D+M // 14486
@SP // 14487
AM=M+1 // 14488
A=A-1 // 14489
M=D // 14490
@ARG // 14491
A=M // 14492
D=M // 14493
@SP // 14494
AM=M+1 // 14495
A=A-1 // 14496
M=D // 14497
@LCL // 14498
A=M+1 // 14499
D=M // 14500
@SP // 14501
AM=M-1 // 14502
A=D+M // 14503
D=M // 14504
@SP // 14505
AM=M+1 // 14506
A=A-1 // 14507
M=D // 14508
@LCL // 14509
D=M // 14510
@5 // 14511
A=D+A // 14512
D=M // 14513
@SP // 14514
AM=M+1 // 14515
A=A-1 // 14516
M=D // 14517
// call Int32.leftshift
@7 // 14518
D=A // 14519
@14 // 14520
M=D // 14521
@Int32.leftshift // 14522
D=A // 14523
@13 // 14524
M=D // 14525
@Int32.u4_array_div_u4_array.ret.11 // 14526
D=A // 14527
@CALL // 14528
0;JMP // 14529
(Int32.u4_array_div_u4_array.ret.11)
@ARG // 14530
A=M // 14531
D=M // 14532
@SP // 14533
AM=M+1 // 14534
A=A-1 // 14535
M=D // 14536
@LCL // 14537
A=M+1 // 14538
D=M // 14539
D=D-1 // 14540
@SP // 14541
AM=M-1 // 14542
A=D+M // 14543
D=M // 14544
@SP // 14545
AM=M+1 // 14546
A=A-1 // 14547
M=D // 14548
@LCL // 14549
D=M // 14550
@5 // 14551
A=D+A // 14552
D=M // 14553
@4 // 14554
D=A-D // 14555
@SP // 14556
AM=M+1 // 14557
A=A-1 // 14558
M=D // 14559
// call Int32.arith_rightshift
@7 // 14560
D=A // 14561
@14 // 14562
M=D // 14563
@Int32.arith_rightshift // 14564
D=A // 14565
@13 // 14566
M=D // 14567
@Int32.u4_array_div_u4_array.ret.12 // 14568
D=A // 14569
@CALL // 14570
0;JMP // 14571
(Int32.u4_array_div_u4_array.ret.12)
@SP // 14572
AM=M-1 // 14573
D=M // 14574
@SP // 14575
AM=M-1 // 14576
D=D|M // 14577
@15 // 14578
D=D&A // 14579
@SP // 14580
AM=M-1 // 14581
A=M // 14582
M=D // 14583

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 14584
A=M+1 // 14585
M=M-1 // 14586

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP3}
// goto Int32.u4_array_div_u4_array_WHILE_EXP3
@Int32.u4_array_div_u4_array_WHILE_EXP3 // 14587
0;JMP // 14588

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END3}
// label Int32.u4_array_div_u4_array_WHILE_END3
(Int32.u4_array_div_u4_array_WHILE_END3)

////PushWriter{source=BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Int32.leftshift}},
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 14589
D=M // 14590
@8 // 14591
A=D+A // 14592
D=M // 14593
@SP // 14594
AM=M+1 // 14595
A=A-1 // 14596
M=D // 14597
@ARG // 14598
A=M // 14599
D=M // 14600
@0 // 14601
A=D+A // 14602
D=M // 14603
@SP // 14604
AM=M+1 // 14605
A=A-1 // 14606
M=D // 14607
@LCL // 14608
D=M // 14609
@5 // 14610
A=D+A // 14611
D=M // 14612
@SP // 14613
AM=M+1 // 14614
A=A-1 // 14615
M=D // 14616
// call Int32.leftshift
@7 // 14617
D=A // 14618
@14 // 14619
M=D // 14620
@Int32.leftshift // 14621
D=A // 14622
@13 // 14623
M=D // 14624
@Int32.u4_array_div_u4_array.ret.13 // 14625
D=A // 14626
@CALL // 14627
0;JMP // 14628
(Int32.u4_array_div_u4_array.ret.13)
@SP // 14629
AM=M-1 // 14630
D=M // 14631
@15 // 14632
D=D&A // 14633
@SP // 14634
AM=M-1 // 14635
A=M // 14636
M=D // 14637

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 16"),
//    right:
//        PushInstruction("argument 2"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 14638
A=M+1 // 14639
A=A+1 // 14640
D=M // 14641
@16 // 14642
D=A-D // 14643
@LCL // 14644
A=M+1 // 14645
A=A+1 // 14646
M=D // 14647

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP4}
// label Int32.u4_array_div_u4_array_WHILE_EXP4
(Int32.u4_array_div_u4_array_WHILE_EXP4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END4}}
@Int32.u4_array_div_u4_array.LT.38 // 14648
D=A // 14649
@SP // 14650
AM=M+1 // 14651
A=A-1 // 14652
M=D // 14653
@LCL // 14654
A=M+1 // 14655
A=A+1 // 14656
D=M // 14657
@DO_LT // 14658
0;JMP // 14659
(Int32.u4_array_div_u4_array.LT.38)
@Int32.u4_array_div_u4_array_WHILE_END4 // 14660
D;JNE // 14661

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 8"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("argument 2"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 0")], call=CallInstruction{Math.multiply}},
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 2"),
//                                    right:
//                                        PushInstruction("argument 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 14662
D=M // 14663
@8 // 14664
A=D+A // 14665
D=M // 14666
@SP // 14667
AM=M+1 // 14668
A=A-1 // 14669
M=D // 14670
@LCL // 14671
A=M+1 // 14672
A=A+1 // 14673
D=M // 14674
@SP // 14675
AM=M+1 // 14676
A=A-1 // 14677
M=D // 14678
@ARG // 14679
A=M+1 // 14680
A=A+1 // 14681
D=M // 14682
@SP // 14683
AM=M-1 // 14684
D=D+M // 14685
@SP // 14686
AM=M-1 // 14687
A=D+M // 14688
D=M // 14689
@SP // 14690
AM=M+1 // 14691
A=A-1 // 14692
M=D // 14693
@LCL // 14694
A=M // 14695
D=M // 14696
@SP // 14697
AM=M+1 // 14698
A=A-1 // 14699
M=D // 14700
// call Math.multiply
@7 // 14701
D=A // 14702
@14 // 14703
M=D // 14704
@Math.multiply // 14705
D=A // 14706
@13 // 14707
M=D // 14708
@Int32.u4_array_div_u4_array.ret.14 // 14709
D=A // 14710
@CALL // 14711
0;JMP // 14712
(Int32.u4_array_div_u4_array.ret.14)
@LCL // 14713
D=M // 14714
@8 // 14715
A=D+A // 14716
D=M // 14717
@SP // 14718
AM=M+1 // 14719
A=A-1 // 14720
M=D // 14721
@LCL // 14722
A=M+1 // 14723
A=A+1 // 14724
D=M // 14725
@SP // 14726
AM=M+1 // 14727
A=A-1 // 14728
M=D // 14729
@ARG // 14730
A=M+1 // 14731
A=A+1 // 14732
D=M // 14733
@SP // 14734
AM=M-1 // 14735
D=D+M // 14736
D=D-1 // 14737
@SP // 14738
AM=M-1 // 14739
A=D+M // 14740
D=M // 14741
@SP // 14742
AM=M-1 // 14743
D=D+M // 14744
@SP // 14745
AM=M+1 // 14746
A=A-1 // 14747
M=D // 14748
@LCL // 14749
D=M // 14750
@4 // 14751
A=D+A // 14752
D=A // 14753
@R13 // 14754
M=D // 14755
@SP // 14756
AM=M-1 // 14757
D=M // 14758
@R13 // 14759
A=M // 14760
M=D // 14761

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 14762
D=M // 14763
@4 // 14764
A=D+A // 14765
D=M // 14766
@SP // 14767
AM=M+1 // 14768
A=A-1 // 14769
M=D // 14770
@LCL // 14771
D=M // 14772
@7 // 14773
A=D+A // 14774
D=M // 14775
@SP // 14776
AM=M+1 // 14777
A=A-1 // 14778
M=D // 14779
@ARG // 14780
A=M+1 // 14781
A=A+1 // 14782
D=M // 14783
D=D-1 // 14784
@SP // 14785
AM=M-1 // 14786
A=D+M // 14787
D=M // 14788
@SP // 14789
AM=M+1 // 14790
A=A-1 // 14791
M=D // 14792
// call Math.divide
@7 // 14793
D=A // 14794
@14 // 14795
M=D // 14796
@Math.divide // 14797
D=A // 14798
@13 // 14799
M=D // 14800
@Int32.u4_array_div_u4_array.ret.15 // 14801
D=A // 14802
@CALL // 14803
0;JMP // 14804
(Int32.u4_array_div_u4_array.ret.15)
@LCL // 14805
D=M // 14806
@9 // 14807
A=D+A // 14808
D=A // 14809
@R13 // 14810
M=D // 14811
@SP // 14812
AM=M-1 // 14813
D=M // 14814
@R13 // 14815
A=M // 14816
M=D // 14817

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 14818
D=M // 14819
@4 // 14820
A=D+A // 14821
D=M // 14822
@SP // 14823
AM=M+1 // 14824
A=A-1 // 14825
M=D // 14826
@LCL // 14827
D=M // 14828
@9 // 14829
A=D+A // 14830
D=M // 14831
@SP // 14832
AM=M+1 // 14833
A=A-1 // 14834
M=D // 14835
@LCL // 14836
D=M // 14837
@7 // 14838
A=D+A // 14839
D=M // 14840
@SP // 14841
AM=M+1 // 14842
A=A-1 // 14843
M=D // 14844
@ARG // 14845
A=M+1 // 14846
A=A+1 // 14847
D=M // 14848
D=D-1 // 14849
@SP // 14850
AM=M-1 // 14851
A=D+M // 14852
D=M // 14853
@SP // 14854
AM=M+1 // 14855
A=A-1 // 14856
M=D // 14857
// call Math.multiply
@7 // 14858
D=A // 14859
@14 // 14860
M=D // 14861
@Math.multiply // 14862
D=A // 14863
@13 // 14864
M=D // 14865
@Int32.u4_array_div_u4_array.ret.16 // 14866
D=A // 14867
@CALL // 14868
0;JMP // 14869
(Int32.u4_array_div_u4_array.ret.16)
@SP // 14870
AM=M-1 // 14871
D=M // 14872
@SP // 14873
AM=M-1 // 14874
D=M-D // 14875
@SP // 14876
AM=M+1 // 14877
A=A-1 // 14878
M=D // 14879
@LCL // 14880
D=M // 14881
@10 // 14882
A=D+A // 14883
D=A // 14884
@R13 // 14885
M=D // 14886
@SP // 14887
AM=M-1 // 14888
D=M // 14889
@R13 // 14890
A=M // 14891
M=D // 14892

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 14893
D=M // 14894
@11 // 14895
A=D+A // 14896
M=0 // 14897

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP5}
// label Int32.u4_array_div_u4_array_WHILE_EXP5
(Int32.u4_array_div_u4_array_WHILE_EXP5)

////ConditionalGroup{push=PushInstruction("local 11"), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END5}}
@LCL // 14898
D=M // 14899
@11 // 14900
A=D+A // 14901
D=M // 14902
@Int32.u4_array_div_u4_array_WHILE_END5 // 14903
D;JNE // 14904

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 14905
D=M // 14906
@11 // 14907
A=D+A // 14908
M=-1 // 14909

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        UnaryPushGroup(            BinaryPushGroup(
//                left:
//                    PushInstruction("local 9"),
//                right:
//                    PushInstruction("local 0"),
//                binaryOp: "LT"
//            ),
//NOT),
//    right:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 2"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}},
//            right:
//                BinaryPushGroup(
//                    left:
//CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 10")], call=CallInstruction{Math.multiply}},
//                    right:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 8"),
//                                    right:
//                                        BinaryPushGroup(
//                                            left:
//                                                BinaryPushGroup(
//                                                    left:
//                                                        PushInstruction("local 2"),
//                                                    right:
//                                                        PushInstruction("argument 2"),
//                                                    binaryOp: "ADD"
//                                                ),
//                                            right:
//                                                PushInstruction("constant 2"),
//                                            binaryOp: "SUB"
//                                        ),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "GT"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE2}}
@Int32.u4_array_div_u4_array.LT.39 // 14910
D=A // 14911
@SP // 14912
AM=M+1 // 14913
A=A-1 // 14914
M=D // 14915
@LCL // 14916
D=M // 14917
@9 // 14918
A=D+A // 14919
D=M // 14920
@SP // 14921
AM=M+1 // 14922
A=A-1 // 14923
M=D // 14924
@LCL // 14925
A=M // 14926
D=M // 14927
@SP // 14928
AM=M-1 // 14929
D=M-D // 14930
@DO_LT // 14931
0;JMP // 14932
(Int32.u4_array_div_u4_array.LT.39)
@SP // 14933
AM=M+1 // 14934
A=A-1 // 14935
M=D // 14936
@SP // 14937
A=M-1 // 14938
M=!D // 14939
@Int32.u4_array_div_u4_array.GT.40 // 14940
D=A // 14941
@SP // 14942
AM=M+1 // 14943
A=A-1 // 14944
M=D // 14945
@LCL // 14946
D=M // 14947
@9 // 14948
A=D+A // 14949
D=M // 14950
@SP // 14951
AM=M+1 // 14952
A=A-1 // 14953
M=D // 14954
@LCL // 14955
D=M // 14956
@7 // 14957
A=D+A // 14958
D=M // 14959
@SP // 14960
AM=M+1 // 14961
A=A-1 // 14962
M=D // 14963
@ARG // 14964
A=M+1 // 14965
A=A+1 // 14966
D=M // 14967
@2 // 14968
D=D-A // 14969
@SP // 14970
AM=M-1 // 14971
A=D+M // 14972
D=M // 14973
@SP // 14974
AM=M+1 // 14975
A=A-1 // 14976
M=D // 14977
// call Math.multiply
@7 // 14978
D=A // 14979
@14 // 14980
M=D // 14981
@Math.multiply // 14982
D=A // 14983
@13 // 14984
M=D // 14985
@Int32.u4_array_div_u4_array.ret.17 // 14986
D=A // 14987
@CALL // 14988
0;JMP // 14989
(Int32.u4_array_div_u4_array.ret.17)
@LCL // 14990
A=M // 14991
D=M // 14992
@SP // 14993
AM=M+1 // 14994
A=A-1 // 14995
M=D // 14996
@LCL // 14997
D=M // 14998
@10 // 14999
A=D+A // 15000
D=M // 15001
@SP // 15002
AM=M+1 // 15003
A=A-1 // 15004
M=D // 15005
// call Math.multiply
@7 // 15006
D=A // 15007
@14 // 15008
M=D // 15009
@Math.multiply // 15010
D=A // 15011
@13 // 15012
M=D // 15013
@Int32.u4_array_div_u4_array.ret.18 // 15014
D=A // 15015
@CALL // 15016
0;JMP // 15017
(Int32.u4_array_div_u4_array.ret.18)
@LCL // 15018
D=M // 15019
@8 // 15020
A=D+A // 15021
D=M // 15022
@SP // 15023
AM=M+1 // 15024
A=A-1 // 15025
M=D // 15026
@LCL // 15027
A=M+1 // 15028
A=A+1 // 15029
D=M // 15030
@SP // 15031
AM=M+1 // 15032
A=A-1 // 15033
M=D // 15034
@ARG // 15035
A=M+1 // 15036
A=A+1 // 15037
D=M // 15038
@SP // 15039
AM=M-1 // 15040
D=D+M // 15041
@2 // 15042
D=D-A // 15043
@SP // 15044
AM=M-1 // 15045
A=D+M // 15046
D=M // 15047
@SP // 15048
AM=M-1 // 15049
D=D+M // 15050
@SP // 15051
AM=M-1 // 15052
D=M-D // 15053
@DO_GT // 15054
0;JMP // 15055
(Int32.u4_array_div_u4_array.GT.40)
@SP // 15056
AM=M-1 // 15057
D=D|M // 15058
@Int32.u4_array_div_u4_array$IF_TRUE2 // 15059
D;JNE // 15060

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_END2}
// goto Int32.u4_array_div_u4_array$IF_END2
@Int32.u4_array_div_u4_array$IF_END2 // 15061
0;JMP // 15062

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE2}
// label Int32.u4_array_div_u4_array$IF_TRUE2
(Int32.u4_array_div_u4_array$IF_TRUE2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 15063
D=M // 15064
@9 // 15065
A=D+A // 15066
M=M-1 // 15067

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("argument 2"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 15068
D=M // 15069
@10 // 15070
A=D+A // 15071
D=M // 15072
@SP // 15073
AM=M+1 // 15074
A=A-1 // 15075
M=D // 15076
@LCL // 15077
D=M // 15078
@7 // 15079
A=D+A // 15080
D=M // 15081
@SP // 15082
AM=M+1 // 15083
A=A-1 // 15084
M=D // 15085
@ARG // 15086
A=M+1 // 15087
A=A+1 // 15088
D=M // 15089
D=D-1 // 15090
@SP // 15091
AM=M-1 // 15092
A=D+M // 15093
D=M // 15094
@SP // 15095
AM=M-1 // 15096
D=D+M // 15097
@SP // 15098
AM=M+1 // 15099
A=A-1 // 15100
M=D // 15101
@LCL // 15102
D=M // 15103
@10 // 15104
A=D+A // 15105
D=A // 15106
@R13 // 15107
M=D // 15108
@SP // 15109
AM=M-1 // 15110
D=M // 15111
@R13 // 15112
A=M // 15113
M=D // 15114

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE3}}
@Int32.u4_array_div_u4_array.LT.41 // 15115
D=A // 15116
@SP // 15117
AM=M+1 // 15118
A=A-1 // 15119
M=D // 15120
@LCL // 15121
D=M // 15122
@10 // 15123
A=D+A // 15124
D=M // 15125
@SP // 15126
AM=M+1 // 15127
A=A-1 // 15128
M=D // 15129
@LCL // 15130
A=M // 15131
D=M // 15132
@SP // 15133
AM=M-1 // 15134
D=M-D // 15135
@DO_LT // 15136
0;JMP // 15137
(Int32.u4_array_div_u4_array.LT.41)
@Int32.u4_array_div_u4_array$IF_TRUE3 // 15138
D;JNE // 15139

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_END3}
// goto Int32.u4_array_div_u4_array$IF_END3
@Int32.u4_array_div_u4_array$IF_END3 // 15140
0;JMP // 15141

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE3}
// label Int32.u4_array_div_u4_array$IF_TRUE3
(Int32.u4_array_div_u4_array$IF_TRUE3)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 15142
D=M // 15143
@11 // 15144
A=D+A // 15145
M=0 // 15146

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_END3}
// label Int32.u4_array_div_u4_array$IF_END3
(Int32.u4_array_div_u4_array$IF_END3)

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_END2}
// label Int32.u4_array_div_u4_array$IF_END2
(Int32.u4_array_div_u4_array$IF_END2)

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP5}
// goto Int32.u4_array_div_u4_array_WHILE_EXP5
@Int32.u4_array_div_u4_array_WHILE_EXP5 // 15147
0;JMP // 15148

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END5}
// label Int32.u4_array_div_u4_array_WHILE_END5
(Int32.u4_array_div_u4_array_WHILE_END5)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 15149
D=M // 15150
@12 // 15151
A=D+A // 15152
M=0 // 15153

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15154
A=M+1 // 15155
M=0 // 15156

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP6}
// label Int32.u4_array_div_u4_array_WHILE_EXP6
(Int32.u4_array_div_u4_array_WHILE_EXP6)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END6}}
@Int32.u4_array_div_u4_array.LT.42 // 15157
D=A // 15158
@SP // 15159
AM=M+1 // 15160
A=A-1 // 15161
M=D // 15162
@LCL // 15163
A=M+1 // 15164
D=M // 15165
@SP // 15166
AM=M+1 // 15167
A=A-1 // 15168
M=D // 15169
@ARG // 15170
A=M+1 // 15171
A=A+1 // 15172
D=M // 15173
@SP // 15174
AM=M-1 // 15175
D=M-D // 15176
@DO_LT // 15177
0;JMP // 15178
(Int32.u4_array_div_u4_array.LT.42)
D=!D // 15179
@Int32.u4_array_div_u4_array_WHILE_END6 // 15180
D;JNE // 15181

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 9"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 7"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 15182
D=M // 15183
@9 // 15184
A=D+A // 15185
D=M // 15186
@SP // 15187
AM=M+1 // 15188
A=A-1 // 15189
M=D // 15190
@LCL // 15191
D=M // 15192
@7 // 15193
A=D+A // 15194
D=M // 15195
@SP // 15196
AM=M+1 // 15197
A=A-1 // 15198
M=D // 15199
@LCL // 15200
A=M+1 // 15201
D=M // 15202
@SP // 15203
AM=M-1 // 15204
A=D+M // 15205
D=M // 15206
@SP // 15207
AM=M+1 // 15208
A=A-1 // 15209
M=D // 15210
// call Math.multiply
@7 // 15211
D=A // 15212
@14 // 15213
M=D // 15214
@Math.multiply // 15215
D=A // 15216
@13 // 15217
M=D // 15218
@Int32.u4_array_div_u4_array.ret.19 // 15219
D=A // 15220
@CALL // 15221
0;JMP // 15222
(Int32.u4_array_div_u4_array.ret.19)
@LCL // 15223
D=M // 15224
@13 // 15225
A=D+A // 15226
D=A // 15227
@R13 // 15228
M=D // 15229
@SP // 15230
AM=M-1 // 15231
D=M // 15232
@R13 // 15233
A=M // 15234
M=D // 15235

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 1"),
//                                    right:
//                                        PushInstruction("local 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("local 12"),
//            binaryOp: "SUB"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 13"),
//            right:
//                PushInstruction("constant 15"),
//            binaryOp: "AND"
//        ),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 15236
D=M // 15237
@8 // 15238
A=D+A // 15239
D=M // 15240
@SP // 15241
AM=M+1 // 15242
A=A-1 // 15243
M=D // 15244
@LCL // 15245
A=M+1 // 15246
A=A+1 // 15247
D=M // 15248
A=A-1 // 15249
D=D+M // 15250
@SP // 15251
AM=M-1 // 15252
A=D+M // 15253
D=M // 15254
@SP // 15255
AM=M+1 // 15256
A=A-1 // 15257
M=D // 15258
@LCL // 15259
D=M // 15260
@12 // 15261
A=D+A // 15262
D=M // 15263
@SP // 15264
AM=M-1 // 15265
D=M-D // 15266
@SP // 15267
AM=M+1 // 15268
A=A-1 // 15269
M=D // 15270
@LCL // 15271
D=M // 15272
@13 // 15273
A=D+A // 15274
D=M // 15275
@15 // 15276
D=D&A // 15277
@SP // 15278
AM=M-1 // 15279
D=M-D // 15280
@SP // 15281
AM=M+1 // 15282
A=A-1 // 15283
M=D // 15284
@LCL // 15285
D=M // 15286
@14 // 15287
A=D+A // 15288
D=A // 15289
@R13 // 15290
M=D // 15291
@SP // 15292
AM=M-1 // 15293
D=M // 15294
@R13 // 15295
A=M // 15296
M=D // 15297

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 15298
D=M // 15299
@8 // 15300
A=D+A // 15301
D=M // 15302
@SP // 15303
AM=M+1 // 15304
A=A-1 // 15305
M=D // 15306
@LCL // 15307
A=M+1 // 15308
A=A+1 // 15309
D=M // 15310
A=A-1 // 15311
D=D+M // 15312
@SP // 15313
AM=M-1 // 15314
D=D+M // 15315
@SP // 15316
AM=M+1 // 15317
A=A-1 // 15318
M=D // 15319
@LCL // 15320
D=M // 15321
@14 // 15322
A=D+A // 15323
D=M // 15324
@15 // 15325
D=D&A // 15326
@SP // 15327
AM=M-1 // 15328
A=M // 15329
M=D // 15330

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//CallGroup{pushes=[PushInstruction("local 14"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 15331
D=M // 15332
@13 // 15333
A=D+A // 15334
D=M // 15335
@SP // 15336
AM=M+1 // 15337
A=A-1 // 15338
M=D // 15339
@4 // 15340
D=A // 15341
@SP // 15342
AM=M+1 // 15343
A=A-1 // 15344
M=D // 15345
// call Int32.arith_rightshift
@7 // 15346
D=A // 15347
@14 // 15348
M=D // 15349
@Int32.arith_rightshift // 15350
D=A // 15351
@13 // 15352
M=D // 15353
@Int32.u4_array_div_u4_array.ret.20 // 15354
D=A // 15355
@CALL // 15356
0;JMP // 15357
(Int32.u4_array_div_u4_array.ret.20)
@LCL // 15358
D=M // 15359
@14 // 15360
A=D+A // 15361
D=M // 15362
@SP // 15363
AM=M+1 // 15364
A=A-1 // 15365
M=D // 15366
@4 // 15367
D=A // 15368
@SP // 15369
AM=M+1 // 15370
A=A-1 // 15371
M=D // 15372
// call Int32.arith_rightshift
@7 // 15373
D=A // 15374
@14 // 15375
M=D // 15376
@Int32.arith_rightshift // 15377
D=A // 15378
@13 // 15379
M=D // 15380
@Int32.u4_array_div_u4_array.ret.21 // 15381
D=A // 15382
@CALL // 15383
0;JMP // 15384
(Int32.u4_array_div_u4_array.ret.21)
@SP // 15385
AM=M-1 // 15386
D=M // 15387
@SP // 15388
AM=M-1 // 15389
D=M-D // 15390
@SP // 15391
AM=M+1 // 15392
A=A-1 // 15393
M=D // 15394
@LCL // 15395
D=M // 15396
@12 // 15397
A=D+A // 15398
D=A // 15399
@R13 // 15400
M=D // 15401
@SP // 15402
AM=M-1 // 15403
D=M // 15404
@R13 // 15405
A=M // 15406
M=D // 15407

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15408
A=M+1 // 15409
M=M+1 // 15410

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP6}
// goto Int32.u4_array_div_u4_array_WHILE_EXP6
@Int32.u4_array_div_u4_array_WHILE_EXP6 // 15411
0;JMP // 15412

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END6}
// label Int32.u4_array_div_u4_array_WHILE_END6
(Int32.u4_array_div_u4_array_WHILE_END6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("argument 2"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 15413
D=M // 15414
@8 // 15415
A=D+A // 15416
D=M // 15417
@SP // 15418
AM=M+1 // 15419
A=A-1 // 15420
M=D // 15421
@LCL // 15422
A=M+1 // 15423
A=A+1 // 15424
D=M // 15425
@SP // 15426
AM=M+1 // 15427
A=A-1 // 15428
M=D // 15429
@ARG // 15430
A=M+1 // 15431
A=A+1 // 15432
D=M // 15433
@SP // 15434
AM=M-1 // 15435
D=D+M // 15436
@SP // 15437
AM=M-1 // 15438
A=D+M // 15439
D=M // 15440
@SP // 15441
AM=M+1 // 15442
A=A-1 // 15443
M=D // 15444
@LCL // 15445
D=M // 15446
@12 // 15447
A=D+A // 15448
D=M // 15449
@SP // 15450
AM=M-1 // 15451
D=M-D // 15452
@SP // 15453
AM=M+1 // 15454
A=A-1 // 15455
M=D // 15456
@LCL // 15457
D=M // 15458
@14 // 15459
A=D+A // 15460
D=A // 15461
@R13 // 15462
M=D // 15463
@SP // 15464
AM=M-1 // 15465
D=M // 15466
@R13 // 15467
A=M // 15468
M=D // 15469

////PushWriter{source=PushInstruction("local 14"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 15470
D=M // 15471
@8 // 15472
A=D+A // 15473
D=M // 15474
@SP // 15475
AM=M+1 // 15476
A=A-1 // 15477
M=D // 15478
@LCL // 15479
A=M+1 // 15480
A=A+1 // 15481
D=M // 15482
@SP // 15483
AM=M+1 // 15484
A=A-1 // 15485
M=D // 15486
@ARG // 15487
A=M+1 // 15488
A=A+1 // 15489
D=M // 15490
@SP // 15491
AM=M-1 // 15492
D=D+M // 15493
@SP // 15494
AM=M-1 // 15495
D=D+M // 15496
@SP // 15497
AM=M+1 // 15498
A=A-1 // 15499
M=D // 15500
@LCL // 15501
D=M // 15502
@14 // 15503
A=D+A // 15504
D=M // 15505
@SP // 15506
AM=M-1 // 15507
A=M // 15508
M=D // 15509

////PushWriter{source=PushInstruction("local 9"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 15510
D=M // 15511
@6 // 15512
A=D+A // 15513
D=M // 15514
@SP // 15515
AM=M+1 // 15516
A=A-1 // 15517
M=D // 15518
@LCL // 15519
A=M+1 // 15520
A=A+1 // 15521
D=M // 15522
@SP // 15523
AM=M-1 // 15524
D=D+M // 15525
@SP // 15526
AM=M+1 // 15527
A=A-1 // 15528
M=D // 15529
@LCL // 15530
D=M // 15531
@9 // 15532
A=D+A // 15533
D=M // 15534
@SP // 15535
AM=M-1 // 15536
A=M // 15537
M=D // 15538

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE4}}
@Int32.u4_array_div_u4_array.LT.43 // 15539
D=A // 15540
@SP // 15541
AM=M+1 // 15542
A=A-1 // 15543
M=D // 15544
@LCL // 15545
D=M // 15546
@14 // 15547
A=D+A // 15548
D=M // 15549
@DO_LT // 15550
0;JMP // 15551
(Int32.u4_array_div_u4_array.LT.43)
@Int32.u4_array_div_u4_array$IF_TRUE4 // 15552
D;JNE // 15553

////GotoInstruction{label='Int32.u4_array_div_u4_array$IF_END4}
// goto Int32.u4_array_div_u4_array$IF_END4
@Int32.u4_array_div_u4_array$IF_END4 // 15554
0;JMP // 15555

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_TRUE4}
// label Int32.u4_array_div_u4_array$IF_TRUE4
(Int32.u4_array_div_u4_array$IF_TRUE4)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 15556
D=M // 15557
@12 // 15558
A=D+A // 15559
M=0 // 15560

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 6"),
//                    right:
//                        PushInstruction("local 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)}
@LCL // 15561
D=M // 15562
@6 // 15563
A=D+A // 15564
D=M // 15565
@SP // 15566
AM=M+1 // 15567
A=A-1 // 15568
M=D // 15569
@LCL // 15570
A=M+1 // 15571
A=A+1 // 15572
D=M // 15573
@SP // 15574
AM=M-1 // 15575
D=D+M // 15576
@SP // 15577
AM=M+1 // 15578
A=A-1 // 15579
M=D // 15580
@LCL // 15581
D=M // 15582
@6 // 15583
A=D+A // 15584
D=M // 15585
@SP // 15586
AM=M+1 // 15587
A=A-1 // 15588
M=D // 15589
@LCL // 15590
A=M+1 // 15591
A=A+1 // 15592
D=M // 15593
@SP // 15594
AM=M-1 // 15595
A=D+M // 15596
D=M // 15597
D=D-1 // 15598
@SP // 15599
AM=M-1 // 15600
A=M // 15601
M=D // 15602

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15603
A=M+1 // 15604
M=0 // 15605

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP7}
// label Int32.u4_array_div_u4_array_WHILE_EXP7
(Int32.u4_array_div_u4_array_WHILE_EXP7)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_END7}}
@Int32.u4_array_div_u4_array.LT.44 // 15606
D=A // 15607
@SP // 15608
AM=M+1 // 15609
A=A-1 // 15610
M=D // 15611
@LCL // 15612
A=M+1 // 15613
D=M // 15614
@SP // 15615
AM=M+1 // 15616
A=A-1 // 15617
M=D // 15618
@ARG // 15619
A=M+1 // 15620
A=A+1 // 15621
D=M // 15622
@SP // 15623
AM=M-1 // 15624
D=M-D // 15625
@DO_LT // 15626
0;JMP // 15627
(Int32.u4_array_div_u4_array.LT.44)
D=!D // 15628
@Int32.u4_array_div_u4_array_WHILE_END7 // 15629
D;JNE // 15630

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 8"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 1"),
//                                    right:
//                                        PushInstruction("local 2"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 7"),
//                            right:
//                                PushInstruction("local 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 15631
D=M // 15632
@8 // 15633
A=D+A // 15634
D=M // 15635
@SP // 15636
AM=M+1 // 15637
A=A-1 // 15638
M=D // 15639
@LCL // 15640
A=M+1 // 15641
A=A+1 // 15642
D=M // 15643
A=A-1 // 15644
D=D+M // 15645
@SP // 15646
AM=M-1 // 15647
A=D+M // 15648
D=M // 15649
@SP // 15650
AM=M+1 // 15651
A=A-1 // 15652
M=D // 15653
@LCL // 15654
D=M // 15655
@7 // 15656
A=D+A // 15657
D=M // 15658
@SP // 15659
AM=M+1 // 15660
A=A-1 // 15661
M=D // 15662
@LCL // 15663
A=M+1 // 15664
D=M // 15665
@SP // 15666
AM=M-1 // 15667
A=D+M // 15668
D=M // 15669
@SP // 15670
AM=M-1 // 15671
D=D+M // 15672
@SP // 15673
AM=M+1 // 15674
A=A-1 // 15675
M=D // 15676
@LCL // 15677
D=M // 15678
@12 // 15679
A=D+A // 15680
D=M // 15681
@SP // 15682
AM=M-1 // 15683
D=D+M // 15684
@SP // 15685
AM=M+1 // 15686
A=A-1 // 15687
M=D // 15688
@LCL // 15689
D=M // 15690
@14 // 15691
A=D+A // 15692
D=A // 15693
@R13 // 15694
M=D // 15695
@SP // 15696
AM=M-1 // 15697
D=M // 15698
@R13 // 15699
A=M // 15700
M=D // 15701

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 15702
D=M // 15703
@8 // 15704
A=D+A // 15705
D=M // 15706
@SP // 15707
AM=M+1 // 15708
A=A-1 // 15709
M=D // 15710
@LCL // 15711
A=M+1 // 15712
A=A+1 // 15713
D=M // 15714
A=A-1 // 15715
D=D+M // 15716
@SP // 15717
AM=M-1 // 15718
D=D+M // 15719
@SP // 15720
AM=M+1 // 15721
A=A-1 // 15722
M=D // 15723
@LCL // 15724
D=M // 15725
@14 // 15726
A=D+A // 15727
D=M // 15728
@15 // 15729
D=D&A // 15730
@SP // 15731
AM=M-1 // 15732
A=M // 15733
M=D // 15734

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 14"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 15735
D=M // 15736
@14 // 15737
A=D+A // 15738
D=M // 15739
@SP // 15740
AM=M+1 // 15741
A=A-1 // 15742
M=D // 15743
@4 // 15744
D=A // 15745
@SP // 15746
AM=M+1 // 15747
A=A-1 // 15748
M=D // 15749
// call Int32.arith_rightshift
@7 // 15750
D=A // 15751
@14 // 15752
M=D // 15753
@Int32.arith_rightshift // 15754
D=A // 15755
@13 // 15756
M=D // 15757
@Int32.u4_array_div_u4_array.ret.22 // 15758
D=A // 15759
@CALL // 15760
0;JMP // 15761
(Int32.u4_array_div_u4_array.ret.22)
@LCL // 15762
D=M // 15763
@12 // 15764
A=D+A // 15765
D=A // 15766
@R13 // 15767
M=D // 15768
@SP // 15769
AM=M-1 // 15770
D=M // 15771
@R13 // 15772
A=M // 15773
M=D // 15774

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 15775
A=M+1 // 15776
M=M+1 // 15777

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP7}
// goto Int32.u4_array_div_u4_array_WHILE_EXP7
@Int32.u4_array_div_u4_array_WHILE_EXP7 // 15778
0;JMP // 15779

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END7}
// label Int32.u4_array_div_u4_array_WHILE_END7
(Int32.u4_array_div_u4_array_WHILE_END7)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("argument 2"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 12"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 2"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 15780
D=M // 15781
@8 // 15782
A=D+A // 15783
D=M // 15784
@SP // 15785
AM=M+1 // 15786
A=A-1 // 15787
M=D // 15788
@LCL // 15789
A=M+1 // 15790
A=A+1 // 15791
D=M // 15792
@SP // 15793
AM=M+1 // 15794
A=A-1 // 15795
M=D // 15796
@ARG // 15797
A=M+1 // 15798
A=A+1 // 15799
D=M // 15800
@SP // 15801
AM=M-1 // 15802
D=D+M // 15803
@SP // 15804
AM=M-1 // 15805
D=D+M // 15806
@SP // 15807
AM=M+1 // 15808
A=A-1 // 15809
M=D // 15810
@LCL // 15811
D=M // 15812
@8 // 15813
A=D+A // 15814
D=M // 15815
@SP // 15816
AM=M+1 // 15817
A=A-1 // 15818
M=D // 15819
@LCL // 15820
A=M+1 // 15821
A=A+1 // 15822
D=M // 15823
@SP // 15824
AM=M+1 // 15825
A=A-1 // 15826
M=D // 15827
@ARG // 15828
A=M+1 // 15829
A=A+1 // 15830
D=M // 15831
@SP // 15832
AM=M-1 // 15833
D=D+M // 15834
@SP // 15835
AM=M-1 // 15836
A=D+M // 15837
D=M // 15838
@SP // 15839
AM=M+1 // 15840
A=A-1 // 15841
M=D // 15842
@LCL // 15843
D=M // 15844
@12 // 15845
A=D+A // 15846
D=M // 15847
@SP // 15848
AM=M-1 // 15849
D=D+M // 15850
@SP // 15851
AM=M-1 // 15852
A=M // 15853
M=D // 15854

////LabelInstruction{label='Int32.u4_array_div_u4_array$IF_END4}
// label Int32.u4_array_div_u4_array$IF_END4
(Int32.u4_array_div_u4_array$IF_END4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 15855
A=M+1 // 15856
A=A+1 // 15857
M=M-1 // 15858

////GotoInstruction{label='Int32.u4_array_div_u4_array_WHILE_EXP4}
// goto Int32.u4_array_div_u4_array_WHILE_EXP4
@Int32.u4_array_div_u4_array_WHILE_EXP4 // 15859
0;JMP // 15860

////LabelInstruction{label='Int32.u4_array_div_u4_array_WHILE_END4}
// label Int32.u4_array_div_u4_array_WHILE_END4
(Int32.u4_array_div_u4_array_WHILE_END4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 15861
D=M // 15862
@7 // 15863
A=D+A // 15864
D=M // 15865
@SP // 15866
AM=M+1 // 15867
A=A-1 // 15868
M=D // 15869
// call Memory.deAlloc
@6 // 15870
D=A // 15871
@14 // 15872
M=D // 15873
@Memory.deAlloc // 15874
D=A // 15875
@13 // 15876
M=D // 15877
@Int32.u4_array_div_u4_array.ret.23 // 15878
D=A // 15879
@CALL // 15880
0;JMP // 15881
(Int32.u4_array_div_u4_array.ret.23)
@SP // 15882
M=M-1 // 15883

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 8")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 15884
D=M // 15885
@8 // 15886
A=D+A // 15887
D=M // 15888
@SP // 15889
AM=M+1 // 15890
A=A-1 // 15891
M=D // 15892
// call Memory.deAlloc
@6 // 15893
D=A // 15894
@14 // 15895
M=D // 15896
@Memory.deAlloc // 15897
D=A // 15898
@13 // 15899
M=D // 15900
@Int32.u4_array_div_u4_array.ret.24 // 15901
D=A // 15902
@CALL // 15903
0;JMP // 15904
(Int32.u4_array_div_u4_array.ret.24)
@SP // 15905
M=M-1 // 15906

////PushInstruction("local 6")
@LCL // 15907
D=M // 15908
@6 // 15909
A=D+A // 15910
D=M // 15911
@SP // 15912
AM=M+1 // 15913
A=A-1 // 15914
M=D // 15915
@RETURN // 15916
0;JMP // 15917

////FunctionInstruction{functionName='String.appendChar', numLocals=1, funcMapping={String.dispose=1, String.length=0}}
// function String.appendChar with 1
(String.appendChar)
@SP // 15918
AM=M+1 // 15919
A=A-1 // 15920
M=0 // 15921

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 15922
A=M // 15923
D=M // 15924
@3 // 15925
M=D // 15926

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("this 1"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.appendChar$IF_TRUE1}}
@String.appendChar.EQ.45 // 15927
D=A // 15928
@SP // 15929
AM=M+1 // 15930
A=A-1 // 15931
M=D // 15932
@THIS // 15933
A=M+1 // 15934
A=A+1 // 15935
D=M // 15936
A=A-1 // 15937
D=M-D // 15938
@DO_EQ // 15939
0;JMP // 15940
(String.appendChar.EQ.45)
@String.appendChar$IF_TRUE1 // 15941
D;JNE // 15942

////GotoInstruction{label='String.appendChar$IF_END1}
// goto String.appendChar$IF_END1
@String.appendChar$IF_END1 // 15943
0;JMP // 15944

////LabelInstruction{label='String.appendChar$IF_TRUE1}
// label String.appendChar$IF_TRUE1
(String.appendChar$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("this 2"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "ADD"
//)], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 15945
A=M+1 // 15946
A=A+1 // 15947
D=M // 15948
D=D+M // 15949
@SP // 15950
AM=M+1 // 15951
A=A-1 // 15952
M=D // 15953
// call Memory.alloc
@6 // 15954
D=A // 15955
@14 // 15956
M=D // 15957
@Memory.alloc // 15958
D=A // 15959
@13 // 15960
M=D // 15961
@String.appendChar.ret.0 // 15962
D=A // 15963
@CALL // 15964
0;JMP // 15965
(String.appendChar.ret.0)
@SP // 15966
AM=M-1 // 15967
D=M // 15968
@LCL // 15969
A=M // 15970
M=D // 15971

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("local 0"), PushInstruction("this 1")], call=CallInstruction{Memory.copy}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 15972
A=M // 15973
D=M // 15974
@SP // 15975
AM=M+1 // 15976
A=A-1 // 15977
M=D // 15978
@LCL // 15979
A=M // 15980
D=M // 15981
@SP // 15982
AM=M+1 // 15983
A=A-1 // 15984
M=D // 15985
@THIS // 15986
A=M+1 // 15987
D=M // 15988
@SP // 15989
AM=M+1 // 15990
A=A-1 // 15991
M=D // 15992
// call Memory.copy
@8 // 15993
D=A // 15994
@14 // 15995
M=D // 15996
@Memory.copy // 15997
D=A // 15998
@13 // 15999
M=D // 16000
@String.appendChar.ret.1 // 16001
D=A // 16002
@CALL // 16003
0;JMP // 16004
(String.appendChar.ret.1)
@SP // 16005
M=M-1 // 16006

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 16007
A=M // 16008
D=M // 16009
@SP // 16010
AM=M+1 // 16011
A=A-1 // 16012
M=D // 16013
// call Memory.deAlloc
@6 // 16014
D=A // 16015
@14 // 16016
M=D // 16017
@Memory.deAlloc // 16018
D=A // 16019
@13 // 16020
M=D // 16021
@String.appendChar.ret.2 // 16022
D=A // 16023
@CALL // 16024
0;JMP // 16025
(String.appendChar.ret.2)
@SP // 16026
M=M-1 // 16027

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("this 2"),
//    right:
//        PushInstruction("this 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 16028
A=M+1 // 16029
A=A+1 // 16030
D=M // 16031
@THIS // 16032
A=M+1 // 16033
A=A+1 // 16034
M=D+M // 16035

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=this 0}
//}

@LCL // 16036
A=M // 16037
D=M // 16038
@THIS // 16039
A=M // 16040
M=D // 16041

////LabelInstruction{label='String.appendChar$IF_END1}
// label String.appendChar$IF_END1
(String.appendChar$IF_END1)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("this 1"),
//    binaryOp: "ADD"
//)}
@THIS // 16042
A=M+1 // 16043
D=M // 16044
A=A-1 // 16045
D=D+M // 16046
@SP // 16047
AM=M+1 // 16048
A=A-1 // 16049
M=D // 16050
@ARG // 16051
A=M+1 // 16052
D=M // 16053
@SP // 16054
AM=M-1 // 16055
A=M // 16056
M=D // 16057

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("this 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 16058
A=M+1 // 16059
M=M+1 // 16060

////PushInstruction("pointer 0")
@3 // 16061
D=M // 16062
@SP // 16063
AM=M+1 // 16064
A=A-1 // 16065
M=D // 16066
@RETURN // 16067
0;JMP // 16068

////FunctionInstruction{functionName='Main.render', numLocals=28, funcMapping={Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.getFourFifths=4}}
// function Main.render with 28
(Main.render)
@28 // 16069
D=A // 16070
@SP // 16071
AM=D+M // 16072
A=A-1 // 16073
M=0 // 16074
A=A-1 // 16075
M=0 // 16076
A=A-1 // 16077
M=0 // 16078
A=A-1 // 16079
M=0 // 16080
A=A-1 // 16081
M=0 // 16082
A=A-1 // 16083
M=0 // 16084
A=A-1 // 16085
M=0 // 16086
A=A-1 // 16087
M=0 // 16088
A=A-1 // 16089
M=0 // 16090
A=A-1 // 16091
M=0 // 16092
A=A-1 // 16093
M=0 // 16094
A=A-1 // 16095
M=0 // 16096
A=A-1 // 16097
M=0 // 16098
A=A-1 // 16099
M=0 // 16100
A=A-1 // 16101
M=0 // 16102
A=A-1 // 16103
M=0 // 16104
A=A-1 // 16105
M=0 // 16106
A=A-1 // 16107
M=0 // 16108
A=A-1 // 16109
M=0 // 16110
A=A-1 // 16111
M=0 // 16112
A=A-1 // 16113
M=0 // 16114
A=A-1 // 16115
M=0 // 16116
A=A-1 // 16117
M=0 // 16118
A=A-1 // 16119
M=0 // 16120
A=A-1 // 16121
M=0 // 16122
A=A-1 // 16123
M=0 // 16124
A=A-1 // 16125
M=0 // 16126
A=A-1 // 16127
M=0 // 16128

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}}], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 12}
//}

@ARG // 16129
A=M // 16130
D=M // 16131
@SP // 16132
AM=M+1 // 16133
A=A-1 // 16134
M=D // 16135
// call Scene.getWidth
@6 // 16136
D=A // 16137
@14 // 16138
M=D // 16139
@Scene.getWidth // 16140
D=A // 16141
@13 // 16142
M=D // 16143
@Main.render.ret.0 // 16144
D=A // 16145
@CALL // 16146
0;JMP // 16147
(Main.render.ret.0)
// call Memory.alloc
@6 // 16148
D=A // 16149
@14 // 16150
M=D // 16151
@Memory.alloc // 16152
D=A // 16153
@13 // 16154
M=D // 16155
@Main.render.ret.1 // 16156
D=A // 16157
@CALL // 16158
0;JMP // 16159
(Main.render.ret.1)
@LCL // 16160
D=M // 16161
@12 // 16162
A=D+A // 16163
D=A // 16164
@R13 // 16165
M=D // 16166
@SP // 16167
AM=M-1 // 16168
D=M // 16169
@R13 // 16170
A=M // 16171
M=D // 16172

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}}], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 13}
//}

@ARG // 16173
A=M // 16174
D=M // 16175
@SP // 16176
AM=M+1 // 16177
A=A-1 // 16178
M=D // 16179
// call Scene.getWidth
@6 // 16180
D=A // 16181
@14 // 16182
M=D // 16183
@Scene.getWidth // 16184
D=A // 16185
@13 // 16186
M=D // 16187
@Main.render.ret.2 // 16188
D=A // 16189
@CALL // 16190
0;JMP // 16191
(Main.render.ret.2)
// call Memory.alloc
@6 // 16192
D=A // 16193
@14 // 16194
M=D // 16195
@Memory.alloc // 16196
D=A // 16197
@13 // 16198
M=D // 16199
@Main.render.ret.3 // 16200
D=A // 16201
@CALL // 16202
0;JMP // 16203
(Main.render.ret.3)
@LCL // 16204
D=M // 16205
@13 // 16206
A=D+A // 16207
D=A // 16208
@R13 // 16209
M=D // 16210
@SP // 16211
AM=M-1 // 16212
D=M // 16213
@R13 // 16214
A=M // 16215
M=D // 16216

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 16217
D=M // 16218
@15 // 16219
A=D+A // 16220
M=0 // 16221

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 16222
D=M // 16223
@11 // 16224
A=D+A // 16225
M=0 // 16226

////LabelInstruction{label='Main.render_WHILE_EXP1}
// label Main.render_WHILE_EXP1
(Main.render_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 11"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END1}}
@Main.render.LT.46 // 16227
D=A // 16228
@SP // 16229
AM=M+1 // 16230
A=A-1 // 16231
M=D // 16232
@LCL // 16233
D=M // 16234
@11 // 16235
A=D+A // 16236
D=M // 16237
@SP // 16238
AM=M+1 // 16239
A=A-1 // 16240
M=D // 16241
@ARG // 16242
A=M // 16243
D=M // 16244
@SP // 16245
AM=M+1 // 16246
A=A-1 // 16247
M=D // 16248
// call Scene.getWidth
@6 // 16249
D=A // 16250
@14 // 16251
M=D // 16252
@Scene.getWidth // 16253
D=A // 16254
@13 // 16255
M=D // 16256
@Main.render.ret.4 // 16257
D=A // 16258
@CALL // 16259
0;JMP // 16260
(Main.render.ret.4)
@SP // 16261
AM=M-1 // 16262
D=M // 16263
@SP // 16264
AM=M-1 // 16265
D=M-D // 16266
@DO_LT // 16267
0;JMP // 16268
(Main.render.LT.46)
D=!D // 16269
@Main.render_WHILE_END1 // 16270
D;JNE // 16271

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 12"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 16272
D=M // 16273
@12 // 16274
A=D+A // 16275
D=M // 16276
A=A-1 // 16277
D=D+M // 16278
@SP // 16279
AM=M+1 // 16280
A=A-1 // 16281
M=D // 16282
D=0 // 16283
@SP // 16284
AM=M-1 // 16285
A=M // 16286
M=D // 16287

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 16288
D=M // 16289
@13 // 16290
A=D+A // 16291
D=M // 16292
A=A-1 // 16293
A=A-1 // 16294
D=D+M // 16295
@SP // 16296
AM=M+1 // 16297
A=A-1 // 16298
M=D // 16299
D=0 // 16300
@SP // 16301
AM=M-1 // 16302
A=M // 16303
M=D // 16304

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 11"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 16305
D=M // 16306
@11 // 16307
A=D+A // 16308
M=M+1 // 16309

////GotoInstruction{label='Main.render_WHILE_EXP1}
// goto Main.render_WHILE_EXP1
@Main.render_WHILE_EXP1 // 16310
0;JMP // 16311

////LabelInstruction{label='Main.render_WHILE_END1}
// label Main.render_WHILE_END1
(Main.render_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.getOneHalf}}
//  pop:  PopInstruction{address=local 0}
//}

// call Main.getOneHalf
@5 // 16312
D=A // 16313
@14 // 16314
M=D // 16315
@Main.getOneHalf // 16316
D=A // 16317
@13 // 16318
M=D // 16319
@Main.render.ret.5 // 16320
D=A // 16321
@CALL // 16322
0;JMP // 16323
(Main.render.ret.5)
@SP // 16324
AM=M-1 // 16325
D=M // 16326
@LCL // 16327
A=M // 16328
M=D // 16329

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@SP // 16330
AM=M+1 // 16331
A=A-1 // 16332
M=0 // 16333
// call Number.new
@6 // 16334
D=A // 16335
@14 // 16336
M=D // 16337
@Number.new // 16338
D=A // 16339
@13 // 16340
M=D // 16341
@Main.render.ret.6 // 16342
D=A // 16343
@CALL // 16344
0;JMP // 16345
(Main.render.ret.6)
@SP // 16346
AM=M-1 // 16347
D=M // 16348
@LCL // 16349
A=M+1 // 16350
M=D // 16351

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 2}
//}

@SP // 16352
AM=M+1 // 16353
A=A-1 // 16354
M=1 // 16355
// call Number.new
@6 // 16356
D=A // 16357
@14 // 16358
M=D // 16359
@Number.new // 16360
D=A // 16361
@13 // 16362
M=D // 16363
@Main.render.ret.7 // 16364
D=A // 16365
@CALL // 16366
0;JMP // 16367
(Main.render.ret.7)
@SP // 16368
AM=M-1 // 16369
D=M // 16370
@LCL // 16371
A=M+1 // 16372
A=A+1 // 16373
M=D // 16374

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 3}
//}

@2 // 16375
D=A // 16376
@SP // 16377
AM=M+1 // 16378
A=A-1 // 16379
M=D // 16380
// call Number.new
@6 // 16381
D=A // 16382
@14 // 16383
M=D // 16384
@Number.new // 16385
D=A // 16386
@13 // 16387
M=D // 16388
@Main.render.ret.8 // 16389
D=A // 16390
@CALL // 16391
0;JMP // 16392
(Main.render.ret.8)
@SP // 16393
AM=M-1 // 16394
D=M // 16395
@LCL // 16396
A=M+1 // 16397
A=A+1 // 16398
A=A+1 // 16399
M=D // 16400

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 4}
//}

@3 // 16401
D=A // 16402
@SP // 16403
AM=M+1 // 16404
A=A-1 // 16405
M=D // 16406
// call Number.new
@6 // 16407
D=A // 16408
@14 // 16409
M=D // 16410
@Number.new // 16411
D=A // 16412
@13 // 16413
M=D // 16414
@Main.render.ret.9 // 16415
D=A // 16416
@CALL // 16417
0;JMP // 16418
(Main.render.ret.9)
@LCL // 16419
D=M // 16420
@4 // 16421
A=D+A // 16422
D=A // 16423
@R13 // 16424
M=D // 16425
@SP // 16426
AM=M-1 // 16427
D=M // 16428
@R13 // 16429
A=M // 16430
M=D // 16431

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 5}
//}

@5 // 16432
D=A // 16433
@SP // 16434
AM=M+1 // 16435
A=A-1 // 16436
M=D // 16437
// call Number.new
@6 // 16438
D=A // 16439
@14 // 16440
M=D // 16441
@Number.new // 16442
D=A // 16443
@13 // 16444
M=D // 16445
@Main.render.ret.10 // 16446
D=A // 16447
@CALL // 16448
0;JMP // 16449
(Main.render.ret.10)
@LCL // 16450
D=M // 16451
@5 // 16452
A=D+A // 16453
D=A // 16454
@R13 // 16455
M=D // 16456
@SP // 16457
AM=M-1 // 16458
D=M // 16459
@R13 // 16460
A=M // 16461
M=D // 16462

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 7")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 6}
//}

@7 // 16463
D=A // 16464
@SP // 16465
AM=M+1 // 16466
A=A-1 // 16467
M=D // 16468
// call Number.new
@6 // 16469
D=A // 16470
@14 // 16471
M=D // 16472
@Number.new // 16473
D=A // 16474
@13 // 16475
M=D // 16476
@Main.render.ret.11 // 16477
D=A // 16478
@CALL // 16479
0;JMP // 16480
(Main.render.ret.11)
@LCL // 16481
D=M // 16482
@6 // 16483
A=D+A // 16484
D=A // 16485
@R13 // 16486
M=D // 16487
@SP // 16488
AM=M-1 // 16489
D=M // 16490
@R13 // 16491
A=M // 16492
M=D // 16493

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 7}
//}

@16 // 16494
D=A // 16495
@SP // 16496
AM=M+1 // 16497
A=A-1 // 16498
M=D // 16499
// call Number.new
@6 // 16500
D=A // 16501
@14 // 16502
M=D // 16503
@Number.new // 16504
D=A // 16505
@13 // 16506
M=D // 16507
@Main.render.ret.12 // 16508
D=A // 16509
@CALL // 16510
0;JMP // 16511
(Main.render.ret.12)
@LCL // 16512
D=M // 16513
@7 // 16514
A=D+A // 16515
D=A // 16516
@R13 // 16517
M=D // 16518
@SP // 16519
AM=M-1 // 16520
D=M // 16521
@R13 // 16522
A=M // 16523
M=D // 16524

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 8}
//}

@SP // 16525
AM=M+1 // 16526
A=A-1 // 16527
M=-1 // 16528
// call Number.new
@6 // 16529
D=A // 16530
@14 // 16531
M=D // 16532
@Number.new // 16533
D=A // 16534
@13 // 16535
M=D // 16536
@Main.render.ret.13 // 16537
D=A // 16538
@CALL // 16539
0;JMP // 16540
(Main.render.ret.13)
@LCL // 16541
D=M // 16542
@8 // 16543
A=D+A // 16544
D=A // 16545
@R13 // 16546
M=D // 16547
@SP // 16548
AM=M-1 // 16549
D=M // 16550
@R13 // 16551
A=M // 16552
M=D // 16553

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 16554
D=M // 16555
@9 // 16556
A=D+A // 16557
M=0 // 16558

////LabelInstruction{label='Main.render_WHILE_EXP2}
// label Main.render_WHILE_EXP2
(Main.render_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 9"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getHeight}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END2}}
@Main.render.LT.47 // 16559
D=A // 16560
@SP // 16561
AM=M+1 // 16562
A=A-1 // 16563
M=D // 16564
@LCL // 16565
D=M // 16566
@9 // 16567
A=D+A // 16568
D=M // 16569
@SP // 16570
AM=M+1 // 16571
A=A-1 // 16572
M=D // 16573
@ARG // 16574
A=M // 16575
D=M // 16576
@SP // 16577
AM=M+1 // 16578
A=A-1 // 16579
M=D // 16580
// call Scene.getHeight
@6 // 16581
D=A // 16582
@14 // 16583
M=D // 16584
@Scene.getHeight // 16585
D=A // 16586
@13 // 16587
M=D // 16588
@Main.render.ret.14 // 16589
D=A // 16590
@CALL // 16591
0;JMP // 16592
(Main.render.ret.14)
@SP // 16593
AM=M-1 // 16594
D=M // 16595
@SP // 16596
AM=M-1 // 16597
D=M-D // 16598
@DO_LT // 16599
0;JMP // 16600
(Main.render.LT.47)
D=!D // 16601
@Main.render_WHILE_END2 // 16602
D;JNE // 16603

////PushPopPair {
//  push: UnaryPushGroup(    BinaryPushGroup(
//        left:
//CallGroup{pushes=[CallGroup{pushes=[PushInstruction("local 9"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}}, PushInstruction("constant 2")], call=CallInstruction{Math.multiply}},
//        right:
//            PushInstruction("local 9"),
//        binaryOp: "EQ"
//    ),
//NOT)
//  pop:  PopInstruction{address=local 26}
//}

@Main.render.EQ.48 // 16604
D=A // 16605
@SP // 16606
AM=M+1 // 16607
A=A-1 // 16608
M=D // 16609
@LCL // 16610
D=M // 16611
@9 // 16612
A=D+A // 16613
D=M // 16614
@SP // 16615
AM=M+1 // 16616
A=A-1 // 16617
M=D // 16618
@2 // 16619
D=A // 16620
@SP // 16621
AM=M+1 // 16622
A=A-1 // 16623
M=D // 16624
// call Math.divide
@7 // 16625
D=A // 16626
@14 // 16627
M=D // 16628
@Math.divide // 16629
D=A // 16630
@13 // 16631
M=D // 16632
@Main.render.ret.15 // 16633
D=A // 16634
@CALL // 16635
0;JMP // 16636
(Main.render.ret.15)
@2 // 16637
D=A // 16638
@SP // 16639
AM=M+1 // 16640
A=A-1 // 16641
M=D // 16642
// call Math.multiply
@7 // 16643
D=A // 16644
@14 // 16645
M=D // 16646
@Math.multiply // 16647
D=A // 16648
@13 // 16649
M=D // 16650
@Main.render.ret.16 // 16651
D=A // 16652
@CALL // 16653
0;JMP // 16654
(Main.render.ret.16)
@LCL // 16655
D=M // 16656
@9 // 16657
A=D+A // 16658
D=M // 16659
@SP // 16660
AM=M-1 // 16661
D=M-D // 16662
@DO_EQ // 16663
0;JMP // 16664
(Main.render.EQ.48)
@SP // 16665
AM=M+1 // 16666
A=A-1 // 16667
M=D // 16668
@SP // 16669
A=M-1 // 16670
M=!D // 16671
@LCL // 16672
D=M // 16673
@26 // 16674
A=D+A // 16675
D=A // 16676
@R13 // 16677
M=D // 16678
@SP // 16679
AM=M-1 // 16680
D=M // 16681
@R13 // 16682
A=M // 16683
M=D // 16684

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)
//  pop:  PopInstruction{address=local 27}
//}

@LCL // 16685
D=M // 16686
@27 // 16687
A=D+A // 16688
M=-1 // 16689

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE1}}
@LCL // 16690
D=M // 16691
@26 // 16692
A=D+A // 16693
D=M // 16694
@Main.render$IF_TRUE1 // 16695
D;JNE // 16696

////GotoInstruction{label='Main.render$IF_FALSE1}
// goto Main.render$IF_FALSE1
@Main.render$IF_FALSE1 // 16697
0;JMP // 16698

////LabelInstruction{label='Main.render$IF_TRUE1}
// label Main.render$IF_TRUE1
(Main.render$IF_TRUE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@ARG // 16699
A=M // 16700
D=M // 16701
@SP // 16702
AM=M+1 // 16703
A=A-1 // 16704
M=D // 16705
// call Scene.getWidth
@6 // 16706
D=A // 16707
@14 // 16708
M=D // 16709
@Scene.getWidth // 16710
D=A // 16711
@13 // 16712
M=D // 16713
@Main.render.ret.17 // 16714
D=A // 16715
@CALL // 16716
0;JMP // 16717
(Main.render.ret.17)
@SP // 16718
AM=M-1 // 16719
D=M // 16720
D=D-1 // 16721
@SP // 16722
AM=M+1 // 16723
A=A-1 // 16724
M=D // 16725
@LCL // 16726
D=M // 16727
@10 // 16728
A=D+A // 16729
D=A // 16730
@R13 // 16731
M=D // 16732
@SP // 16733
AM=M-1 // 16734
D=M // 16735
@R13 // 16736
A=M // 16737
M=D // 16738

////GotoInstruction{label='Main.render$IF_END1}
// goto Main.render$IF_END1
@Main.render$IF_END1 // 16739
0;JMP // 16740

////LabelInstruction{label='Main.render$IF_FALSE1}
// label Main.render$IF_FALSE1
(Main.render$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 16741
D=M // 16742
@10 // 16743
A=D+A // 16744
M=0 // 16745

////LabelInstruction{label='Main.render$IF_END1}
// label Main.render$IF_END1
(Main.render$IF_END1)

////LabelInstruction{label='Main.render_WHILE_EXP3}
// label Main.render_WHILE_EXP3
(Main.render_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    PushInstruction("local 27"),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END3}}
@LCL // 16746
D=M // 16747
@27 // 16748
A=D+A // 16749
D=!M // 16750
@Main.render_WHILE_END3 // 16751
D;JNE // 16752

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 10"), PushInstruction("local 9"), PushInstruction("local 8"), PushInstruction("local 2"), PushInstruction("local 3"), PushInstruction("local 0")], call=CallInstruction{Main.getRawPixelColor}}
//  pop:  PopInstruction{address=local 24}
//}

@ARG // 16753
A=M // 16754
D=M // 16755
@SP // 16756
AM=M+1 // 16757
A=A-1 // 16758
M=D // 16759
@LCL // 16760
D=M // 16761
@10 // 16762
A=D+A // 16763
D=M // 16764
@SP // 16765
AM=M+1 // 16766
A=A-1 // 16767
M=D // 16768
@LCL // 16769
D=M // 16770
@9 // 16771
A=D+A // 16772
D=M // 16773
@SP // 16774
AM=M+1 // 16775
A=A-1 // 16776
M=D // 16777
@LCL // 16778
D=M // 16779
@8 // 16780
A=D+A // 16781
D=M // 16782
@SP // 16783
AM=M+1 // 16784
A=A-1 // 16785
M=D // 16786
@LCL // 16787
A=M+1 // 16788
A=A+1 // 16789
D=M // 16790
@SP // 16791
AM=M+1 // 16792
A=A-1 // 16793
M=D // 16794
@LCL // 16795
A=M+1 // 16796
A=A+1 // 16797
A=A+1 // 16798
D=M // 16799
@SP // 16800
AM=M+1 // 16801
A=A-1 // 16802
M=D // 16803
@LCL // 16804
A=M // 16805
D=M // 16806
@SP // 16807
AM=M+1 // 16808
A=A-1 // 16809
M=D // 16810
// call Main.getRawPixelColor
@12 // 16811
D=A // 16812
@14 // 16813
M=D // 16814
@Main.getRawPixelColor // 16815
D=A // 16816
@13 // 16817
M=D // 16818
@Main.render.ret.18 // 16819
D=A // 16820
@CALL // 16821
0;JMP // 16822
(Main.render.ret.18)
@LCL // 16823
D=M // 16824
@24 // 16825
A=D+A // 16826
D=A // 16827
@R13 // 16828
M=D // 16829
@SP // 16830
AM=M-1 // 16831
D=M // 16832
@R13 // 16833
A=M // 16834
M=D // 16835

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16836
D=M // 16837
@24 // 16838
A=D+A // 16839
D=M // 16840
@SP // 16841
AM=M+1 // 16842
A=A-1 // 16843
M=D // 16844
// call Number.do_sqrt
@6 // 16845
D=A // 16846
@14 // 16847
M=D // 16848
@Number.do_sqrt // 16849
D=A // 16850
@13 // 16851
M=D // 16852
@Main.render.ret.19 // 16853
D=A // 16854
@CALL // 16855
0;JMP // 16856
(Main.render.ret.19)
@SP // 16857
M=M-1 // 16858

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.new_from_int_frac}}
//  pop:  PopInstruction{address=local 25}
//}

@LCL // 16859
D=M // 16860
@15 // 16861
A=D+A // 16862
D=M // 16863
@SP // 16864
AM=M+1 // 16865
A=A-1 // 16866
M=D // 16867
// call Number.new_from_int_frac
@6 // 16868
D=A // 16869
@14 // 16870
M=D // 16871
@Number.new_from_int_frac // 16872
D=A // 16873
@13 // 16874
M=D // 16875
@Main.render.ret.20 // 16876
D=A // 16877
@CALL // 16878
0;JMP // 16879
(Main.render.ret.20)
@LCL // 16880
D=M // 16881
@25 // 16882
A=D+A // 16883
D=A // 16884
@R13 // 16885
M=D // 16886
@SP // 16887
AM=M-1 // 16888
D=M // 16889
@R13 // 16890
A=M // 16891
M=D // 16892

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 25")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16893
D=M // 16894
@24 // 16895
A=D+A // 16896
D=M // 16897
@SP // 16898
AM=M+1 // 16899
A=A-1 // 16900
M=D // 16901
@LCL // 16902
D=M // 16903
@25 // 16904
A=D+A // 16905
D=M // 16906
@SP // 16907
AM=M+1 // 16908
A=A-1 // 16909
M=D // 16910
// call Number.do_add
@7 // 16911
D=A // 16912
@14 // 16913
M=D // 16914
@Number.do_add // 16915
D=A // 16916
@13 // 16917
M=D // 16918
@Main.render.ret.21 // 16919
D=A // 16920
@CALL // 16921
0;JMP // 16922
(Main.render.ret.21)
@SP // 16923
M=M-1 // 16924

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 25")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16925
D=M // 16926
@25 // 16927
A=D+A // 16928
D=M // 16929
@SP // 16930
AM=M+1 // 16931
A=A-1 // 16932
M=D // 16933
// call Number.dispose
@6 // 16934
D=A // 16935
@14 // 16936
M=D // 16937
@Number.dispose // 16938
D=A // 16939
@13 // 16940
M=D // 16941
@Main.render.ret.22 // 16942
D=A // 16943
@CALL // 16944
0;JMP // 16945
(Main.render.ret.22)
@SP // 16946
M=M-1 // 16947

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 12"),
//            right:
//                PushInstruction("local 10"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Number.new_from_int_frac}}
//  pop:  PopInstruction{address=local 25}
//}

@LCL // 16948
D=M // 16949
@12 // 16950
A=D+A // 16951
D=M // 16952
A=A-1 // 16953
A=A-1 // 16954
A=D+M // 16955
D=M // 16956
@SP // 16957
AM=M+1 // 16958
A=A-1 // 16959
M=D // 16960
// call Number.new_from_int_frac
@6 // 16961
D=A // 16962
@14 // 16963
M=D // 16964
@Number.new_from_int_frac // 16965
D=A // 16966
@13 // 16967
M=D // 16968
@Main.render.ret.23 // 16969
D=A // 16970
@CALL // 16971
0;JMP // 16972
(Main.render.ret.23)
@LCL // 16973
D=M // 16974
@25 // 16975
A=D+A // 16976
D=A // 16977
@R13 // 16978
M=D // 16979
@SP // 16980
AM=M-1 // 16981
D=M // 16982
@R13 // 16983
A=M // 16984
M=D // 16985

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 25")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 16986
D=M // 16987
@24 // 16988
A=D+A // 16989
D=M // 16990
@SP // 16991
AM=M+1 // 16992
A=A-1 // 16993
M=D // 16994
@LCL // 16995
D=M // 16996
@25 // 16997
A=D+A // 16998
D=M // 16999
@SP // 17000
AM=M+1 // 17001
A=A-1 // 17002
M=D // 17003
// call Number.do_add
@7 // 17004
D=A // 17005
@14 // 17006
M=D // 17007
@Number.do_add // 17008
D=A // 17009
@13 // 17010
M=D // 17011
@Main.render.ret.24 // 17012
D=A // 17013
@CALL // 17014
0;JMP // 17015
(Main.render.ret.24)
@SP // 17016
M=M-1 // 17017

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 25")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17018
D=M // 17019
@25 // 17020
A=D+A // 17021
D=M // 17022
@SP // 17023
AM=M+1 // 17024
A=A-1 // 17025
M=D // 17026
// call Number.dispose
@6 // 17027
D=A // 17028
@14 // 17029
M=D // 17030
@Number.dispose // 17031
D=A // 17032
@13 // 17033
M=D // 17034
@Main.render.ret.25 // 17035
D=A // 17036
@CALL // 17037
0;JMP // 17038
(Main.render.ret.25)
@SP // 17039
M=M-1 // 17040

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24"), PushInstruction("local 0")], call=CallInstruction{Number.cmp}}
//  pop:  PopInstruction{address=local 17}
//}

@LCL // 17041
D=M // 17042
@24 // 17043
A=D+A // 17044
D=M // 17045
@SP // 17046
AM=M+1 // 17047
A=A-1 // 17048
M=D // 17049
@LCL // 17050
A=M // 17051
D=M // 17052
@SP // 17053
AM=M+1 // 17054
A=A-1 // 17055
M=D // 17056
// call Number.cmp
@7 // 17057
D=A // 17058
@14 // 17059
M=D // 17060
@Number.cmp // 17061
D=A // 17062
@13 // 17063
M=D // 17064
@Main.render.ret.26 // 17065
D=A // 17066
@CALL // 17067
0;JMP // 17068
(Main.render.ret.26)
@LCL // 17069
D=M // 17070
@17 // 17071
A=D+A // 17072
D=A // 17073
@R13 // 17074
M=D // 17075
@SP // 17076
AM=M-1 // 17077
D=M // 17078
@R13 // 17079
A=M // 17080
M=D // 17081

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 17"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "GT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 17"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//)
//  pop:  PopInstruction{address=local 23}
//}

@Main.render.GT.49 // 17082
D=A // 17083
@SP // 17084
AM=M+1 // 17085
A=A-1 // 17086
M=D // 17087
@LCL // 17088
D=M // 17089
@17 // 17090
A=D+A // 17091
D=M // 17092
@DO_GT // 17093
0;JMP // 17094
(Main.render.GT.49)
@SP // 17095
AM=M+1 // 17096
A=A-1 // 17097
M=D // 17098
@Main.render.EQ.50 // 17099
D=A // 17100
@SP // 17101
AM=M+1 // 17102
A=A-1 // 17103
M=D // 17104
@LCL // 17105
D=M // 17106
@17 // 17107
A=D+A // 17108
D=M // 17109
@DO_EQ // 17110
0;JMP // 17111
(Main.render.EQ.50)
@SP // 17112
AM=M-1 // 17113
D=D|M // 17114
@SP // 17115
AM=M+1 // 17116
A=A-1 // 17117
M=D // 17118
@LCL // 17119
D=M // 17120
@23 // 17121
A=D+A // 17122
D=A // 17123
@R13 // 17124
M=D // 17125
@SP // 17126
AM=M-1 // 17127
D=M // 17128
@R13 // 17129
A=M // 17130
M=D // 17131

////ConditionalGroup{push=PushInstruction("local 23"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE2}}
@LCL // 17132
D=M // 17133
@23 // 17134
A=D+A // 17135
D=M // 17136
@Main.render$IF_TRUE2 // 17137
D;JNE // 17138

////GotoInstruction{label='Main.render$IF_FALSE2}
// goto Main.render$IF_FALSE2
@Main.render$IF_FALSE2 // 17139
0;JMP // 17140

////LabelInstruction{label='Main.render$IF_TRUE2}
// label Main.render$IF_TRUE2
(Main.render$IF_TRUE2)

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=local 16}
//}

@LCL // 17141
A=M+1 // 17142
A=A+1 // 17143
D=M // 17144
@SP // 17145
AM=M+1 // 17146
A=A-1 // 17147
M=D // 17148
@LCL // 17149
D=M // 17150
@16 // 17151
A=D+A // 17152
D=A // 17153
@R13 // 17154
M=D // 17155
@SP // 17156
AM=M-1 // 17157
D=M // 17158
@R13 // 17159
A=M // 17160
M=D // 17161

////GotoInstruction{label='Main.render$IF_END2}
// goto Main.render$IF_END2
@Main.render$IF_END2 // 17162
0;JMP // 17163

////LabelInstruction{label='Main.render$IF_FALSE2}
// label Main.render$IF_FALSE2
(Main.render$IF_FALSE2)

////PushPopPair {
//  push: PushInstruction("local 1")
//  pop:  PopInstruction{address=local 16}
//}

@LCL // 17164
A=M+1 // 17165
D=M // 17166
@SP // 17167
AM=M+1 // 17168
A=A-1 // 17169
M=D // 17170
@LCL // 17171
D=M // 17172
@16 // 17173
A=D+A // 17174
D=A // 17175
@R13 // 17176
M=D // 17177
@SP // 17178
AM=M-1 // 17179
D=M // 17180
@R13 // 17181
A=M // 17182
M=D // 17183

////LabelInstruction{label='Main.render$IF_END2}
// label Main.render$IF_END2
(Main.render$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 18}
//}

@LCL // 17184
D=M // 17185
@24 // 17186
A=D+A // 17187
D=M // 17188
@SP // 17189
AM=M+1 // 17190
A=A-1 // 17191
M=D // 17192
// call Number.clone
@6 // 17193
D=A // 17194
@14 // 17195
M=D // 17196
@Number.clone // 17197
D=A // 17198
@13 // 17199
M=D // 17200
@Main.render.ret.27 // 17201
D=A // 17202
@CALL // 17203
0;JMP // 17204
(Main.render.ret.27)
@LCL // 17205
D=M // 17206
@18 // 17207
A=D+A // 17208
D=A // 17209
@R13 // 17210
M=D // 17211
@SP // 17212
AM=M-1 // 17213
D=M // 17214
@R13 // 17215
A=M // 17216
M=D // 17217

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18"), PushInstruction("local 16")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17218
D=M // 17219
@18 // 17220
A=D+A // 17221
D=M // 17222
@SP // 17223
AM=M+1 // 17224
A=A-1 // 17225
M=D // 17226
@LCL // 17227
D=M // 17228
@16 // 17229
A=D+A // 17230
D=M // 17231
@SP // 17232
AM=M+1 // 17233
A=A-1 // 17234
M=D // 17235
// call Number.do_sub
@7 // 17236
D=A // 17237
@14 // 17238
M=D // 17239
@Number.do_sub // 17240
D=A // 17241
@13 // 17242
M=D // 17243
@Main.render.ret.28 // 17244
D=A // 17245
@CALL // 17246
0;JMP // 17247
(Main.render.ret.28)
@SP // 17248
M=M-1 // 17249

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18"), PushInstruction("local 7")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17250
D=M // 17251
@18 // 17252
A=D+A // 17253
D=M // 17254
@SP // 17255
AM=M+1 // 17256
A=A-1 // 17257
M=D // 17258
@LCL // 17259
D=M // 17260
@7 // 17261
A=D+A // 17262
D=M // 17263
@SP // 17264
AM=M+1 // 17265
A=A-1 // 17266
M=D // 17267
// call Number.do_div
@7 // 17268
D=A // 17269
@14 // 17270
M=D // 17271
@Number.do_div // 17272
D=A // 17273
@13 // 17274
M=D // 17275
@Main.render.ret.29 // 17276
D=A // 17277
@CALL // 17278
0;JMP // 17279
(Main.render.ret.29)
@SP // 17280
M=M-1 // 17281

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE3}}
@Main.render.LT.51 // 17282
D=A // 17283
@SP // 17284
AM=M+1 // 17285
A=A-1 // 17286
M=D // 17287
@LCL // 17288
D=M // 17289
@10 // 17290
A=D+A // 17291
D=M // 17292
@SP // 17293
AM=M+1 // 17294
A=A-1 // 17295
M=D+1 // 17296
@ARG // 17297
A=M // 17298
D=M // 17299
@SP // 17300
AM=M+1 // 17301
A=A-1 // 17302
M=D // 17303
// call Scene.getWidth
@6 // 17304
D=A // 17305
@14 // 17306
M=D // 17307
@Scene.getWidth // 17308
D=A // 17309
@13 // 17310
M=D // 17311
@Main.render.ret.30 // 17312
D=A // 17313
@CALL // 17314
0;JMP // 17315
(Main.render.ret.30)
@SP // 17316
AM=M-1 // 17317
D=M // 17318
@SP // 17319
AM=M-1 // 17320
D=M-D // 17321
@DO_LT // 17322
0;JMP // 17323
(Main.render.LT.51)
@Main.render$IF_TRUE3 // 17324
D;JNE // 17325

////GotoInstruction{label='Main.render$IF_END3}
// goto Main.render$IF_END3
@Main.render$IF_END3 // 17326
0;JMP // 17327

////LabelInstruction{label='Main.render$IF_TRUE3}
// label Main.render$IF_TRUE3
(Main.render$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 20}
//}

@LCL // 17328
D=M // 17329
@18 // 17330
A=D+A // 17331
D=M // 17332
@SP // 17333
AM=M+1 // 17334
A=A-1 // 17335
M=D // 17336
// call Number.clone
@6 // 17337
D=A // 17338
@14 // 17339
M=D // 17340
@Number.clone // 17341
D=A // 17342
@13 // 17343
M=D // 17344
@Main.render.ret.31 // 17345
D=A // 17346
@CALL // 17347
0;JMP // 17348
(Main.render.ret.31)
@LCL // 17349
D=M // 17350
@20 // 17351
A=D+A // 17352
D=A // 17353
@R13 // 17354
M=D // 17355
@SP // 17356
AM=M-1 // 17357
D=M // 17358
@R13 // 17359
A=M // 17360
M=D // 17361

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20"), PushInstruction("local 6")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17362
D=M // 17363
@20 // 17364
A=D+A // 17365
D=M // 17366
@SP // 17367
AM=M+1 // 17368
A=A-1 // 17369
M=D // 17370
@LCL // 17371
D=M // 17372
@6 // 17373
A=D+A // 17374
D=M // 17375
@SP // 17376
AM=M+1 // 17377
A=A-1 // 17378
M=D // 17379
// call Number.do_mul
@7 // 17380
D=A // 17381
@14 // 17382
M=D // 17383
@Number.do_mul // 17384
D=A // 17385
@13 // 17386
M=D // 17387
@Main.render.ret.32 // 17388
D=A // 17389
@CALL // 17390
0;JMP // 17391
(Main.render.ret.32)
@SP // 17392
M=M-1 // 17393

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20")], call=CallInstruction{Number.frac_to_i16}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 17394
D=M // 17395
@20 // 17396
A=D+A // 17397
D=M // 17398
@SP // 17399
AM=M+1 // 17400
A=A-1 // 17401
M=D // 17402
// call Number.frac_to_i16
@6 // 17403
D=A // 17404
@14 // 17405
M=D // 17406
@Number.frac_to_i16 // 17407
D=A // 17408
@13 // 17409
M=D // 17410
@Main.render.ret.33 // 17411
D=A // 17412
@CALL // 17413
0;JMP // 17414
(Main.render.ret.33)
@LCL // 17415
D=M // 17416
@15 // 17417
A=D+A // 17418
D=A // 17419
@R13 // 17420
M=D // 17421
@SP // 17422
AM=M-1 // 17423
D=M // 17424
@R13 // 17425
A=M // 17426
M=D // 17427

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 20")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17428
D=M // 17429
@20 // 17430
A=D+A // 17431
D=M // 17432
@SP // 17433
AM=M+1 // 17434
A=A-1 // 17435
M=D // 17436
// call Number.dispose
@6 // 17437
D=A // 17438
@14 // 17439
M=D // 17440
@Number.dispose // 17441
D=A // 17442
@13 // 17443
M=D // 17444
@Main.render.ret.34 // 17445
D=A // 17446
@CALL // 17447
0;JMP // 17448
(Main.render.ret.34)
@SP // 17449
M=M-1 // 17450

////LabelInstruction{label='Main.render$IF_END3}
// label Main.render$IF_END3
(Main.render$IF_END3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 9"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getHeight}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE4}}
@Main.render.LT.52 // 17451
D=A // 17452
@SP // 17453
AM=M+1 // 17454
A=A-1 // 17455
M=D // 17456
@LCL // 17457
D=M // 17458
@9 // 17459
A=D+A // 17460
D=M // 17461
@SP // 17462
AM=M+1 // 17463
A=A-1 // 17464
M=D+1 // 17465
@ARG // 17466
A=M // 17467
D=M // 17468
@SP // 17469
AM=M+1 // 17470
A=A-1 // 17471
M=D // 17472
// call Scene.getHeight
@6 // 17473
D=A // 17474
@14 // 17475
M=D // 17476
@Scene.getHeight // 17477
D=A // 17478
@13 // 17479
M=D // 17480
@Main.render.ret.35 // 17481
D=A // 17482
@CALL // 17483
0;JMP // 17484
(Main.render.ret.35)
@SP // 17485
AM=M-1 // 17486
D=M // 17487
@SP // 17488
AM=M-1 // 17489
D=M-D // 17490
@DO_LT // 17491
0;JMP // 17492
(Main.render.LT.52)
@Main.render$IF_TRUE4 // 17493
D;JNE // 17494

////GotoInstruction{label='Main.render$IF_END4}
// goto Main.render$IF_END4
@Main.render$IF_END4 // 17495
0;JMP // 17496

////LabelInstruction{label='Main.render$IF_TRUE4}
// label Main.render$IF_TRUE4
(Main.render$IF_TRUE4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE5}}
@Main.render.GT.53 // 17497
D=A // 17498
@SP // 17499
AM=M+1 // 17500
A=A-1 // 17501
M=D // 17502
@LCL // 17503
D=M // 17504
@10 // 17505
A=D+A // 17506
D=M // 17507
@DO_GT // 17508
0;JMP // 17509
(Main.render.GT.53)
@Main.render$IF_TRUE5 // 17510
D;JNE // 17511

////GotoInstruction{label='Main.render$IF_END5}
// goto Main.render$IF_END5
@Main.render$IF_END5 // 17512
0;JMP // 17513

////LabelInstruction{label='Main.render$IF_TRUE5}
// label Main.render$IF_TRUE5
(Main.render$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 21}
//}

@LCL // 17514
D=M // 17515
@18 // 17516
A=D+A // 17517
D=M // 17518
@SP // 17519
AM=M+1 // 17520
A=A-1 // 17521
M=D // 17522
// call Number.clone
@6 // 17523
D=A // 17524
@14 // 17525
M=D // 17526
@Number.clone // 17527
D=A // 17528
@13 // 17529
M=D // 17530
@Main.render.ret.36 // 17531
D=A // 17532
@CALL // 17533
0;JMP // 17534
(Main.render.ret.36)
@LCL // 17535
D=M // 17536
@21 // 17537
A=D+A // 17538
D=A // 17539
@R13 // 17540
M=D // 17541
@SP // 17542
AM=M-1 // 17543
D=M // 17544
@R13 // 17545
A=M // 17546
M=D // 17547

////ConditionalGroup{push=UnaryPushGroup(    PushInstruction("local 26"),
//NOT), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE6}}
@LCL // 17548
D=M // 17549
@26 // 17550
A=D+A // 17551
D=!M // 17552
@Main.render$IF_TRUE6 // 17553
D;JNE // 17554

////GotoInstruction{label='Main.render$IF_END6}
// goto Main.render$IF_END6
@Main.render$IF_END6 // 17555
0;JMP // 17556

////LabelInstruction{label='Main.render$IF_TRUE6}
// label Main.render$IF_TRUE6
(Main.render$IF_TRUE6)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 21"), PushInstruction("local 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17557
D=M // 17558
@21 // 17559
A=D+A // 17560
D=M // 17561
@SP // 17562
AM=M+1 // 17563
A=A-1 // 17564
M=D // 17565
@LCL // 17566
D=M // 17567
@4 // 17568
A=D+A // 17569
D=M // 17570
@SP // 17571
AM=M+1 // 17572
A=A-1 // 17573
M=D // 17574
// call Number.do_mul
@7 // 17575
D=A // 17576
@14 // 17577
M=D // 17578
@Number.do_mul // 17579
D=A // 17580
@13 // 17581
M=D // 17582
@Main.render.ret.37 // 17583
D=A // 17584
@CALL // 17585
0;JMP // 17586
(Main.render.ret.37)
@SP // 17587
M=M-1 // 17588

////LabelInstruction{label='Main.render$IF_END6}
// label Main.render$IF_END6
(Main.render$IF_END6)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "SUB"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 21")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "SUB"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 17589
D=M // 17590
@13 // 17591
A=D+A // 17592
D=M // 17593
@SP // 17594
AM=M+1 // 17595
A=A-1 // 17596
M=D // 17597
@LCL // 17598
D=M // 17599
@10 // 17600
A=D+A // 17601
D=M // 17602
D=D-1 // 17603
@SP // 17604
AM=M-1 // 17605
D=D+M // 17606
@SP // 17607
AM=M+1 // 17608
A=A-1 // 17609
M=D // 17610
@LCL // 17611
D=M // 17612
@13 // 17613
A=D+A // 17614
D=M // 17615
@SP // 17616
AM=M+1 // 17617
A=A-1 // 17618
M=D // 17619
@LCL // 17620
D=M // 17621
@10 // 17622
A=D+A // 17623
D=M // 17624
D=D-1 // 17625
@SP // 17626
AM=M-1 // 17627
A=D+M // 17628
D=M // 17629
@SP // 17630
AM=M+1 // 17631
A=A-1 // 17632
M=D // 17633
@LCL // 17634
D=M // 17635
@21 // 17636
A=D+A // 17637
D=M // 17638
@SP // 17639
AM=M+1 // 17640
A=A-1 // 17641
M=D // 17642
// call Number.frac_to_i16
@6 // 17643
D=A // 17644
@14 // 17645
M=D // 17646
@Number.frac_to_i16 // 17647
D=A // 17648
@13 // 17649
M=D // 17650
@Main.render.ret.38 // 17651
D=A // 17652
@CALL // 17653
0;JMP // 17654
(Main.render.ret.38)
@SP // 17655
AM=M-1 // 17656
D=M // 17657
@SP // 17658
AM=M-1 // 17659
D=D+M // 17660
@SP // 17661
AM=M-1 // 17662
A=M // 17663
M=D // 17664

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 21")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17665
D=M // 17666
@21 // 17667
A=D+A // 17668
D=M // 17669
@SP // 17670
AM=M+1 // 17671
A=A-1 // 17672
M=D // 17673
// call Number.dispose
@6 // 17674
D=A // 17675
@14 // 17676
M=D // 17677
@Number.dispose // 17678
D=A // 17679
@13 // 17680
M=D // 17681
@Main.render.ret.39 // 17682
D=A // 17683
@CALL // 17684
0;JMP // 17685
(Main.render.ret.39)
@SP // 17686
M=M-1 // 17687

////LabelInstruction{label='Main.render$IF_END5}
// label Main.render$IF_END5
(Main.render$IF_END5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 19}
//}

@LCL // 17688
D=M // 17689
@18 // 17690
A=D+A // 17691
D=M // 17692
@SP // 17693
AM=M+1 // 17694
A=A-1 // 17695
M=D // 17696
// call Number.clone
@6 // 17697
D=A // 17698
@14 // 17699
M=D // 17700
@Number.clone // 17701
D=A // 17702
@13 // 17703
M=D // 17704
@Main.render.ret.40 // 17705
D=A // 17706
@CALL // 17707
0;JMP // 17708
(Main.render.ret.40)
@LCL // 17709
D=M // 17710
@19 // 17711
A=D+A // 17712
D=A // 17713
@R13 // 17714
M=D // 17715
@SP // 17716
AM=M-1 // 17717
D=M // 17718
@R13 // 17719
A=M // 17720
M=D // 17721

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 19"), PushInstruction("local 5")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17722
D=M // 17723
@19 // 17724
A=D+A // 17725
D=M // 17726
@SP // 17727
AM=M+1 // 17728
A=A-1 // 17729
M=D // 17730
@LCL // 17731
D=M // 17732
@5 // 17733
A=D+A // 17734
D=M // 17735
@SP // 17736
AM=M+1 // 17737
A=A-1 // 17738
M=D // 17739
// call Number.do_mul
@7 // 17740
D=A // 17741
@14 // 17742
M=D // 17743
@Number.do_mul // 17744
D=A // 17745
@13 // 17746
M=D // 17747
@Main.render.ret.41 // 17748
D=A // 17749
@CALL // 17750
0;JMP // 17751
(Main.render.ret.41)
@SP // 17752
M=M-1 // 17753

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 19")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 10"),
//    binaryOp: "ADD"
//)}
@LCL // 17754
D=M // 17755
@13 // 17756
A=D+A // 17757
D=M // 17758
A=A-1 // 17759
A=A-1 // 17760
A=A-1 // 17761
D=D+M // 17762
@SP // 17763
AM=M+1 // 17764
A=A-1 // 17765
M=D // 17766
@LCL // 17767
D=M // 17768
@13 // 17769
A=D+A // 17770
D=M // 17771
A=A-1 // 17772
A=A-1 // 17773
A=A-1 // 17774
A=D+M // 17775
D=M // 17776
@SP // 17777
AM=M+1 // 17778
A=A-1 // 17779
M=D // 17780
@LCL // 17781
D=M // 17782
@19 // 17783
A=D+A // 17784
D=M // 17785
@SP // 17786
AM=M+1 // 17787
A=A-1 // 17788
M=D // 17789
// call Number.frac_to_i16
@6 // 17790
D=A // 17791
@14 // 17792
M=D // 17793
@Number.frac_to_i16 // 17794
D=A // 17795
@13 // 17796
M=D // 17797
@Main.render.ret.42 // 17798
D=A // 17799
@CALL // 17800
0;JMP // 17801
(Main.render.ret.42)
@SP // 17802
AM=M-1 // 17803
D=M // 17804
@SP // 17805
AM=M-1 // 17806
D=D+M // 17807
@SP // 17808
AM=M-1 // 17809
A=M // 17810
M=D // 17811

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 19")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17812
D=M // 17813
@19 // 17814
A=D+A // 17815
D=M // 17816
@SP // 17817
AM=M+1 // 17818
A=A-1 // 17819
M=D // 17820
// call Number.dispose
@6 // 17821
D=A // 17822
@14 // 17823
M=D // 17824
@Number.dispose // 17825
D=A // 17826
@13 // 17827
M=D // 17828
@Main.render.ret.43 // 17829
D=A // 17830
@CALL // 17831
0;JMP // 17832
(Main.render.ret.43)
@SP // 17833
M=M-1 // 17834

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE7}}
@Main.render.LT.54 // 17835
D=A // 17836
@SP // 17837
AM=M+1 // 17838
A=A-1 // 17839
M=D // 17840
@LCL // 17841
D=M // 17842
@10 // 17843
A=D+A // 17844
D=M // 17845
@SP // 17846
AM=M+1 // 17847
A=A-1 // 17848
M=D+1 // 17849
@ARG // 17850
A=M // 17851
D=M // 17852
@SP // 17853
AM=M+1 // 17854
A=A-1 // 17855
M=D // 17856
// call Scene.getWidth
@6 // 17857
D=A // 17858
@14 // 17859
M=D // 17860
@Scene.getWidth // 17861
D=A // 17862
@13 // 17863
M=D // 17864
@Main.render.ret.44 // 17865
D=A // 17866
@CALL // 17867
0;JMP // 17868
(Main.render.ret.44)
@SP // 17869
AM=M-1 // 17870
D=M // 17871
@SP // 17872
AM=M-1 // 17873
D=M-D // 17874
@DO_LT // 17875
0;JMP // 17876
(Main.render.LT.54)
@Main.render$IF_TRUE7 // 17877
D;JNE // 17878

////GotoInstruction{label='Main.render$IF_END7}
// goto Main.render$IF_END7
@Main.render$IF_END7 // 17879
0;JMP // 17880

////LabelInstruction{label='Main.render$IF_TRUE7}
// label Main.render$IF_TRUE7
(Main.render$IF_TRUE7)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 22}
//}

@LCL // 17881
D=M // 17882
@18 // 17883
A=D+A // 17884
D=M // 17885
@SP // 17886
AM=M+1 // 17887
A=A-1 // 17888
M=D // 17889
// call Number.clone
@6 // 17890
D=A // 17891
@14 // 17892
M=D // 17893
@Number.clone // 17894
D=A // 17895
@13 // 17896
M=D // 17897
@Main.render.ret.45 // 17898
D=A // 17899
@CALL // 17900
0;JMP // 17901
(Main.render.ret.45)
@LCL // 17902
D=M // 17903
@22 // 17904
A=D+A // 17905
D=A // 17906
@R13 // 17907
M=D // 17908
@SP // 17909
AM=M-1 // 17910
D=M // 17911
@R13 // 17912
A=M // 17913
M=D // 17914

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE8}}
@LCL // 17915
D=M // 17916
@26 // 17917
A=D+A // 17918
D=M // 17919
@Main.render$IF_TRUE8 // 17920
D;JNE // 17921

////GotoInstruction{label='Main.render$IF_END8}
// goto Main.render$IF_END8
@Main.render$IF_END8 // 17922
0;JMP // 17923

////LabelInstruction{label='Main.render$IF_TRUE8}
// label Main.render$IF_TRUE8
(Main.render$IF_TRUE8)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 22"), PushInstruction("local 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 17924
D=M // 17925
@22 // 17926
A=D+A // 17927
D=M // 17928
@SP // 17929
AM=M+1 // 17930
A=A-1 // 17931
M=D // 17932
@LCL // 17933
D=M // 17934
@4 // 17935
A=D+A // 17936
D=M // 17937
@SP // 17938
AM=M+1 // 17939
A=A-1 // 17940
M=D // 17941
// call Number.do_mul
@7 // 17942
D=A // 17943
@14 // 17944
M=D // 17945
@Number.do_mul // 17946
D=A // 17947
@13 // 17948
M=D // 17949
@Main.render.ret.46 // 17950
D=A // 17951
@CALL // 17952
0;JMP // 17953
(Main.render.ret.46)
@SP // 17954
M=M-1 // 17955

////LabelInstruction{label='Main.render$IF_END8}
// label Main.render$IF_END8
(Main.render$IF_END8)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 13"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 22")], call=CallInstruction{Number.frac_to_i16}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 17956
D=M // 17957
@13 // 17958
A=D+A // 17959
D=M // 17960
@SP // 17961
AM=M+1 // 17962
A=A-1 // 17963
M=D // 17964
@LCL // 17965
D=M // 17966
@10 // 17967
A=D+A // 17968
D=M // 17969
D=D+1 // 17970
@SP // 17971
AM=M-1 // 17972
D=D+M // 17973
@SP // 17974
AM=M+1 // 17975
A=A-1 // 17976
M=D // 17977
@LCL // 17978
D=M // 17979
@13 // 17980
A=D+A // 17981
D=M // 17982
@SP // 17983
AM=M+1 // 17984
A=A-1 // 17985
M=D // 17986
@LCL // 17987
D=M // 17988
@10 // 17989
A=D+A // 17990
D=M // 17991
D=D+1 // 17992
@SP // 17993
AM=M-1 // 17994
A=D+M // 17995
D=M // 17996
@SP // 17997
AM=M+1 // 17998
A=A-1 // 17999
M=D // 18000
@LCL // 18001
D=M // 18002
@22 // 18003
A=D+A // 18004
D=M // 18005
@SP // 18006
AM=M+1 // 18007
A=A-1 // 18008
M=D // 18009
// call Number.frac_to_i16
@6 // 18010
D=A // 18011
@14 // 18012
M=D // 18013
@Number.frac_to_i16 // 18014
D=A // 18015
@13 // 18016
M=D // 18017
@Main.render.ret.47 // 18018
D=A // 18019
@CALL // 18020
0;JMP // 18021
(Main.render.ret.47)
@SP // 18022
AM=M-1 // 18023
D=M // 18024
@SP // 18025
AM=M-1 // 18026
D=D+M // 18027
@SP // 18028
AM=M-1 // 18029
A=M // 18030
M=D // 18031

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 22")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18032
D=M // 18033
@22 // 18034
A=D+A // 18035
D=M // 18036
@SP // 18037
AM=M+1 // 18038
A=A-1 // 18039
M=D // 18040
// call Number.dispose
@6 // 18041
D=A // 18042
@14 // 18043
M=D // 18044
@Number.dispose // 18045
D=A // 18046
@13 // 18047
M=D // 18048
@Main.render.ret.48 // 18049
D=A // 18050
@CALL // 18051
0;JMP // 18052
(Main.render.ret.48)
@SP // 18053
M=M-1 // 18054

////LabelInstruction{label='Main.render$IF_END7}
// label Main.render$IF_END7
(Main.render$IF_END7)

////LabelInstruction{label='Main.render$IF_END4}
// label Main.render$IF_END4
(Main.render$IF_END4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 18")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18055
D=M // 18056
@18 // 18057
A=D+A // 18058
D=M // 18059
@SP // 18060
AM=M+1 // 18061
A=A-1 // 18062
M=D // 18063
// call Number.dispose
@6 // 18064
D=A // 18065
@14 // 18066
M=D // 18067
@Number.dispose // 18068
D=A // 18069
@13 // 18070
M=D // 18071
@Main.render.ret.49 // 18072
D=A // 18073
@CALL // 18074
0;JMP // 18075
(Main.render.ret.49)
@SP // 18076
M=M-1 // 18077

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("local 23"),
//NOT)], call=CallInstruction{Screen.setColor}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18078
D=M // 18079
@23 // 18080
A=D+A // 18081
D=M // 18082
@SP // 18083
AM=M+1 // 18084
A=A-1 // 18085
M=D // 18086
@SP // 18087
A=M-1 // 18088
M=!D // 18089
// call Screen.setColor
@6 // 18090
D=A // 18091
@14 // 18092
M=D // 18093
@Screen.setColor // 18094
D=A // 18095
@13 // 18096
M=D // 18097
@Main.render.ret.50 // 18098
D=A // 18099
@CALL // 18100
0;JMP // 18101
(Main.render.ret.50)
@SP // 18102
M=M-1 // 18103

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 10"), PushInstruction("local 9")], call=CallInstruction{Screen.drawPixel}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18104
D=M // 18105
@10 // 18106
A=D+A // 18107
D=M // 18108
@SP // 18109
AM=M+1 // 18110
A=A-1 // 18111
M=D // 18112
@LCL // 18113
D=M // 18114
@9 // 18115
A=D+A // 18116
D=M // 18117
@SP // 18118
AM=M+1 // 18119
A=A-1 // 18120
M=D // 18121
// call Screen.drawPixel
@7 // 18122
D=A // 18123
@14 // 18124
M=D // 18125
@Screen.drawPixel // 18126
D=A // 18127
@13 // 18128
M=D // 18129
@Main.render.ret.51 // 18130
D=A // 18131
@CALL // 18132
0;JMP // 18133
(Main.render.ret.51)
@SP // 18134
M=M-1 // 18135

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 24")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18136
D=M // 18137
@24 // 18138
A=D+A // 18139
D=M // 18140
@SP // 18141
AM=M+1 // 18142
A=A-1 // 18143
M=D // 18144
// call Number.dispose
@6 // 18145
D=A // 18146
@14 // 18147
M=D // 18148
@Number.dispose // 18149
D=A // 18150
@13 // 18151
M=D // 18152
@Main.render.ret.52 // 18153
D=A // 18154
@CALL // 18155
0;JMP // 18156
(Main.render.ret.52)
@SP // 18157
M=M-1 // 18158

////ConditionalGroup{push=PushInstruction("local 26"), ifGoto=IfGotoInstruction{label='Main.render$IF_TRUE9}}
@LCL // 18159
D=M // 18160
@26 // 18161
A=D+A // 18162
D=M // 18163
@Main.render$IF_TRUE9 // 18164
D;JNE // 18165

////GotoInstruction{label='Main.render$IF_FALSE9}
// goto Main.render$IF_FALSE9
@Main.render$IF_FALSE9 // 18166
0;JMP // 18167

////LabelInstruction{label='Main.render$IF_TRUE9}
// label Main.render$IF_TRUE9
(Main.render$IF_TRUE9)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 18168
D=M // 18169
@10 // 18170
A=D+A // 18171
M=M-1 // 18172

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        UnaryPushGroup(            PushInstruction("constant 1"),
//NEG),
//    binaryOp: "GT"
//)
//  pop:  PopInstruction{address=local 27}
//}

@Main.render.GT.55 // 18173
D=A // 18174
@SP // 18175
AM=M+1 // 18176
A=A-1 // 18177
M=D // 18178
@LCL // 18179
D=M // 18180
@10 // 18181
A=D+A // 18182
D=M // 18183
D=D+1 // 18184
@DO_GT // 18185
0;JMP // 18186
(Main.render.GT.55)
@SP // 18187
AM=M+1 // 18188
A=A-1 // 18189
M=D // 18190
@LCL // 18191
D=M // 18192
@27 // 18193
A=D+A // 18194
D=A // 18195
@R13 // 18196
M=D // 18197
@SP // 18198
AM=M-1 // 18199
D=M // 18200
@R13 // 18201
A=M // 18202
M=D // 18203

////GotoInstruction{label='Main.render$IF_END9}
// goto Main.render$IF_END9
@Main.render$IF_END9 // 18204
0;JMP // 18205

////LabelInstruction{label='Main.render$IF_FALSE9}
// label Main.render$IF_FALSE9
(Main.render$IF_FALSE9)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 18206
D=M // 18207
@10 // 18208
A=D+A // 18209
M=M+1 // 18210

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//    binaryOp: "LT"
//)
//  pop:  PopInstruction{address=local 27}
//}

@Main.render.LT.56 // 18211
D=A // 18212
@SP // 18213
AM=M+1 // 18214
A=A-1 // 18215
M=D // 18216
@LCL // 18217
D=M // 18218
@10 // 18219
A=D+A // 18220
D=M // 18221
@SP // 18222
AM=M+1 // 18223
A=A-1 // 18224
M=D // 18225
@ARG // 18226
A=M // 18227
D=M // 18228
@SP // 18229
AM=M+1 // 18230
A=A-1 // 18231
M=D // 18232
// call Scene.getWidth
@6 // 18233
D=A // 18234
@14 // 18235
M=D // 18236
@Scene.getWidth // 18237
D=A // 18238
@13 // 18239
M=D // 18240
@Main.render.ret.53 // 18241
D=A // 18242
@CALL // 18243
0;JMP // 18244
(Main.render.ret.53)
@SP // 18245
AM=M-1 // 18246
D=M // 18247
@SP // 18248
AM=M-1 // 18249
D=M-D // 18250
@DO_LT // 18251
0;JMP // 18252
(Main.render.LT.56)
@SP // 18253
AM=M+1 // 18254
A=A-1 // 18255
M=D // 18256
@LCL // 18257
D=M // 18258
@27 // 18259
A=D+A // 18260
D=A // 18261
@R13 // 18262
M=D // 18263
@SP // 18264
AM=M-1 // 18265
D=M // 18266
@R13 // 18267
A=M // 18268
M=D // 18269

////LabelInstruction{label='Main.render$IF_END9}
// label Main.render$IF_END9
(Main.render$IF_END9)

////GotoInstruction{label='Main.render_WHILE_EXP3}
// goto Main.render_WHILE_EXP3
@Main.render_WHILE_EXP3 // 18270
0;JMP // 18271

////LabelInstruction{label='Main.render_WHILE_END3}
// label Main.render_WHILE_END3
(Main.render_WHILE_END3)

////PushPopPair {
//  push: PushInstruction("local 12")
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 18272
D=M // 18273
@12 // 18274
A=D+A // 18275
D=M // 18276
@SP // 18277
AM=M+1 // 18278
A=A-1 // 18279
M=D // 18280
@LCL // 18281
D=M // 18282
@14 // 18283
A=D+A // 18284
D=A // 18285
@R13 // 18286
M=D // 18287
@SP // 18288
AM=M-1 // 18289
D=M // 18290
@R13 // 18291
A=M // 18292
M=D // 18293

////PushPopPair {
//  push: PushInstruction("local 13")
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 18294
D=M // 18295
@13 // 18296
A=D+A // 18297
D=M // 18298
@SP // 18299
AM=M+1 // 18300
A=A-1 // 18301
M=D // 18302
@LCL // 18303
D=M // 18304
@12 // 18305
A=D+A // 18306
D=A // 18307
@R13 // 18308
M=D // 18309
@SP // 18310
AM=M-1 // 18311
D=M // 18312
@R13 // 18313
A=M // 18314
M=D // 18315

////PushPopPair {
//  push: PushInstruction("local 14")
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 18316
D=M // 18317
@14 // 18318
A=D+A // 18319
D=M // 18320
@SP // 18321
AM=M+1 // 18322
A=A-1 // 18323
M=D // 18324
@LCL // 18325
D=M // 18326
@13 // 18327
A=D+A // 18328
D=A // 18329
@R13 // 18330
M=D // 18331
@SP // 18332
AM=M-1 // 18333
D=M // 18334
@R13 // 18335
A=M // 18336
M=D // 18337

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 18338
D=M // 18339
@11 // 18340
A=D+A // 18341
M=0 // 18342

////LabelInstruction{label='Main.render_WHILE_EXP4}
// label Main.render_WHILE_EXP4
(Main.render_WHILE_EXP4)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 11"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getWidth}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.render_WHILE_END4}}
@Main.render.LT.57 // 18343
D=A // 18344
@SP // 18345
AM=M+1 // 18346
A=A-1 // 18347
M=D // 18348
@LCL // 18349
D=M // 18350
@11 // 18351
A=D+A // 18352
D=M // 18353
@SP // 18354
AM=M+1 // 18355
A=A-1 // 18356
M=D // 18357
@ARG // 18358
A=M // 18359
D=M // 18360
@SP // 18361
AM=M+1 // 18362
A=A-1 // 18363
M=D // 18364
// call Scene.getWidth
@6 // 18365
D=A // 18366
@14 // 18367
M=D // 18368
@Scene.getWidth // 18369
D=A // 18370
@13 // 18371
M=D // 18372
@Main.render.ret.54 // 18373
D=A // 18374
@CALL // 18375
0;JMP // 18376
(Main.render.ret.54)
@SP // 18377
AM=M-1 // 18378
D=M // 18379
@SP // 18380
AM=M-1 // 18381
D=M-D // 18382
@DO_LT // 18383
0;JMP // 18384
(Main.render.LT.57)
D=!D // 18385
@Main.render_WHILE_END4 // 18386
D;JNE // 18387

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 13"),
//    right:
//        PushInstruction("local 11"),
//    binaryOp: "ADD"
//)}
@LCL // 18388
D=M // 18389
@13 // 18390
A=D+A // 18391
D=M // 18392
A=A-1 // 18393
A=A-1 // 18394
D=D+M // 18395
@SP // 18396
AM=M+1 // 18397
A=A-1 // 18398
M=D // 18399
D=0 // 18400
@SP // 18401
AM=M-1 // 18402
A=M // 18403
M=D // 18404

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 11"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 18405
D=M // 18406
@11 // 18407
A=D+A // 18408
M=M+1 // 18409

////GotoInstruction{label='Main.render_WHILE_EXP4}
// goto Main.render_WHILE_EXP4
@Main.render_WHILE_EXP4 // 18410
0;JMP // 18411

////LabelInstruction{label='Main.render_WHILE_END4}
// label Main.render_WHILE_END4
(Main.render_WHILE_END4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 9"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 18412
D=M // 18413
@9 // 18414
A=D+A // 18415
M=M+1 // 18416

////GotoInstruction{label='Main.render_WHILE_EXP2}
// goto Main.render_WHILE_EXP2
@Main.render_WHILE_EXP2 // 18417
0;JMP // 18418

////LabelInstruction{label='Main.render_WHILE_END2}
// label Main.render_WHILE_END2
(Main.render_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18419
A=M // 18420
D=M // 18421
@SP // 18422
AM=M+1 // 18423
A=A-1 // 18424
M=D // 18425
// call Number.dispose
@6 // 18426
D=A // 18427
@14 // 18428
M=D // 18429
@Number.dispose // 18430
D=A // 18431
@13 // 18432
M=D // 18433
@Main.render.ret.55 // 18434
D=A // 18435
@CALL // 18436
0;JMP // 18437
(Main.render.ret.55)
@SP // 18438
M=M-1 // 18439

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18440
A=M+1 // 18441
D=M // 18442
@SP // 18443
AM=M+1 // 18444
A=A-1 // 18445
M=D // 18446
// call Number.dispose
@6 // 18447
D=A // 18448
@14 // 18449
M=D // 18450
@Number.dispose // 18451
D=A // 18452
@13 // 18453
M=D // 18454
@Main.render.ret.56 // 18455
D=A // 18456
@CALL // 18457
0;JMP // 18458
(Main.render.ret.56)
@SP // 18459
M=M-1 // 18460

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18461
A=M+1 // 18462
A=A+1 // 18463
D=M // 18464
@SP // 18465
AM=M+1 // 18466
A=A-1 // 18467
M=D // 18468
// call Number.dispose
@6 // 18469
D=A // 18470
@14 // 18471
M=D // 18472
@Number.dispose // 18473
D=A // 18474
@13 // 18475
M=D // 18476
@Main.render.ret.57 // 18477
D=A // 18478
@CALL // 18479
0;JMP // 18480
(Main.render.ret.57)
@SP // 18481
M=M-1 // 18482

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18483
D=M // 18484
@4 // 18485
A=D+A // 18486
D=M // 18487
@SP // 18488
AM=M+1 // 18489
A=A-1 // 18490
M=D // 18491
// call Number.dispose
@6 // 18492
D=A // 18493
@14 // 18494
M=D // 18495
@Number.dispose // 18496
D=A // 18497
@13 // 18498
M=D // 18499
@Main.render.ret.58 // 18500
D=A // 18501
@CALL // 18502
0;JMP // 18503
(Main.render.ret.58)
@SP // 18504
M=M-1 // 18505

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18506
D=M // 18507
@5 // 18508
A=D+A // 18509
D=M // 18510
@SP // 18511
AM=M+1 // 18512
A=A-1 // 18513
M=D // 18514
// call Number.dispose
@6 // 18515
D=A // 18516
@14 // 18517
M=D // 18518
@Number.dispose // 18519
D=A // 18520
@13 // 18521
M=D // 18522
@Main.render.ret.59 // 18523
D=A // 18524
@CALL // 18525
0;JMP // 18526
(Main.render.ret.59)
@SP // 18527
M=M-1 // 18528

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18529
D=M // 18530
@6 // 18531
A=D+A // 18532
D=M // 18533
@SP // 18534
AM=M+1 // 18535
A=A-1 // 18536
M=D // 18537
// call Number.dispose
@6 // 18538
D=A // 18539
@14 // 18540
M=D // 18541
@Number.dispose // 18542
D=A // 18543
@13 // 18544
M=D // 18545
@Main.render.ret.60 // 18546
D=A // 18547
@CALL // 18548
0;JMP // 18549
(Main.render.ret.60)
@SP // 18550
M=M-1 // 18551

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18552
D=M // 18553
@7 // 18554
A=D+A // 18555
D=M // 18556
@SP // 18557
AM=M+1 // 18558
A=A-1 // 18559
M=D // 18560
// call Number.dispose
@6 // 18561
D=A // 18562
@14 // 18563
M=D // 18564
@Number.dispose // 18565
D=A // 18566
@13 // 18567
M=D // 18568
@Main.render.ret.61 // 18569
D=A // 18570
@CALL // 18571
0;JMP // 18572
(Main.render.ret.61)
@SP // 18573
M=M-1 // 18574

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18575
D=M // 18576
@12 // 18577
A=D+A // 18578
D=M // 18579
@SP // 18580
AM=M+1 // 18581
A=A-1 // 18582
M=D // 18583
// call Memory.deAlloc
@6 // 18584
D=A // 18585
@14 // 18586
M=D // 18587
@Memory.deAlloc // 18588
D=A // 18589
@13 // 18590
M=D // 18591
@Main.render.ret.62 // 18592
D=A // 18593
@CALL // 18594
0;JMP // 18595
(Main.render.ret.62)
@SP // 18596
M=M-1 // 18597

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18598
D=M // 18599
@13 // 18600
A=D+A // 18601
D=M // 18602
@SP // 18603
AM=M+1 // 18604
A=A-1 // 18605
M=D // 18606
// call Memory.deAlloc
@6 // 18607
D=A // 18608
@14 // 18609
M=D // 18610
@Memory.deAlloc // 18611
D=A // 18612
@13 // 18613
M=D // 18614
@Main.render.ret.63 // 18615
D=A // 18616
@CALL // 18617
0;JMP // 18618
(Main.render.ret.63)
@SP // 18619
M=M-1 // 18620

////PushInstruction("constant 0")
@SP // 18621
AM=M+1 // 18622
A=A-1 // 18623
M=0 // 18624
@RETURN // 18625
0;JMP // 18626

////FunctionInstruction{functionName='Int32.is_even', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.is_even with 0
(Int32.is_even)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 18627
A=M // 18628
D=M // 18629
@3 // 18630
M=D // 18631

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//)
@Int32.is_even.EQ.58 // 18632
D=A // 18633
@SP // 18634
AM=M+1 // 18635
A=A-1 // 18636
M=D // 18637
@THIS // 18638
A=M // 18639
D=M // 18640
@0 // 18641
A=D+A // 18642
D=M // 18643
@1 // 18644
D=D&A // 18645
@DO_EQ // 18646
0;JMP // 18647
(Int32.is_even.EQ.58)
@SP // 18648
AM=M+1 // 18649
A=A-1 // 18650
M=D // 18651
@RETURN // 18652
0;JMP // 18653

////FunctionInstruction{functionName='Element.surface_normal', numLocals=0, funcMapping={Element.color=2}}
// function Element.surface_normal with 0
(Element.surface_normal)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 18654
A=M // 18655
D=M // 18656
@3 // 18657
M=D // 18658

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.surface_normal$IF_TRUE1}}
@Element.surface_normal.EQ.59 // 18659
D=A // 18660
@SP // 18661
AM=M+1 // 18662
A=A-1 // 18663
M=D // 18664
@THIS // 18665
A=M // 18666
D=M // 18667
@DO_EQ // 18668
0;JMP // 18669
(Element.surface_normal.EQ.59)
D=!D // 18670
@Element.surface_normal$IF_TRUE1 // 18671
D;JNE // 18672

////GotoInstruction{label='Element.surface_normal$IF_END1}
// goto Element.surface_normal$IF_END1
@Element.surface_normal$IF_END1 // 18673
0;JMP // 18674

////LabelInstruction{label='Element.surface_normal$IF_TRUE1}
// label Element.surface_normal$IF_TRUE1
(Element.surface_normal$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Plane.surface_normal}}
@THIS // 18675
A=M // 18676
D=M // 18677
@SP // 18678
AM=M+1 // 18679
A=A-1 // 18680
M=D // 18681
// call Plane.surface_normal
@6 // 18682
D=A // 18683
@14 // 18684
M=D // 18685
@Plane.surface_normal // 18686
D=A // 18687
@13 // 18688
M=D // 18689
@Element.surface_normal.ret.0 // 18690
D=A // 18691
@CALL // 18692
0;JMP // 18693
(Element.surface_normal.ret.0)
@RETURN // 18694
0;JMP // 18695

////LabelInstruction{label='Element.surface_normal$IF_END1}
// label Element.surface_normal$IF_END1
(Element.surface_normal$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.surface_normal$IF_TRUE2}}
@Element.surface_normal.EQ.60 // 18696
D=A // 18697
@SP // 18698
AM=M+1 // 18699
A=A-1 // 18700
M=D // 18701
@THIS // 18702
A=M+1 // 18703
D=M // 18704
@DO_EQ // 18705
0;JMP // 18706
(Element.surface_normal.EQ.60)
D=!D // 18707
@Element.surface_normal$IF_TRUE2 // 18708
D;JNE // 18709

////GotoInstruction{label='Element.surface_normal$IF_END2}
// goto Element.surface_normal$IF_END2
@Element.surface_normal$IF_END2 // 18710
0;JMP // 18711

////LabelInstruction{label='Element.surface_normal$IF_TRUE2}
// label Element.surface_normal$IF_TRUE2
(Element.surface_normal$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Sphere.surface_normal}}
@THIS // 18712
A=M+1 // 18713
D=M // 18714
@SP // 18715
AM=M+1 // 18716
A=A-1 // 18717
M=D // 18718
@ARG // 18719
A=M+1 // 18720
D=M // 18721
@SP // 18722
AM=M+1 // 18723
A=A-1 // 18724
M=D // 18725
// call Sphere.surface_normal
@7 // 18726
D=A // 18727
@14 // 18728
M=D // 18729
@Sphere.surface_normal // 18730
D=A // 18731
@13 // 18732
M=D // 18733
@Element.surface_normal.ret.1 // 18734
D=A // 18735
@CALL // 18736
0;JMP // 18737
(Element.surface_normal.ret.1)
@RETURN // 18738
0;JMP // 18739

////LabelInstruction{label='Element.surface_normal$IF_END2}
// label Element.surface_normal$IF_END2
(Element.surface_normal$IF_END2)

////PushInstruction("constant 0")
@SP // 18740
AM=M+1 // 18741
A=A-1 // 18742
M=0 // 18743
@RETURN // 18744
0;JMP // 18745

////FunctionInstruction{functionName='Vec3.dot', numLocals=3, funcMapping={Vec3.do_add=6, Vec3.clone=4, Vec3.new=1}}
// function Vec3.dot with 3
(Vec3.dot)
@3 // 18746
D=A // 18747
@SP // 18748
AM=D+M // 18749
A=A-1 // 18750
M=0 // 18751
A=A-1 // 18752
M=0 // 18753
A=A-1 // 18754
M=0 // 18755

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 18756
A=M // 18757
D=M // 18758
@3 // 18759
M=D // 18760

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 18761
A=M // 18762
D=M // 18763
@SP // 18764
AM=M+1 // 18765
A=A-1 // 18766
M=D // 18767
// call Number.clone
@6 // 18768
D=A // 18769
@14 // 18770
M=D // 18771
@Number.clone // 18772
D=A // 18773
@13 // 18774
M=D // 18775
@Vec3.dot.ret.0 // 18776
D=A // 18777
@CALL // 18778
0;JMP // 18779
(Vec3.dot.ret.0)
@SP // 18780
AM=M-1 // 18781
D=M // 18782
@LCL // 18783
A=M // 18784
M=D // 18785

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18786
A=M // 18787
D=M // 18788
@SP // 18789
AM=M+1 // 18790
A=A-1 // 18791
M=D // 18792
@ARG // 18793
A=M+1 // 18794
D=M // 18795
@SP // 18796
AM=M+1 // 18797
A=A-1 // 18798
M=D // 18799
// call Vec3.getX
@6 // 18800
D=A // 18801
@14 // 18802
M=D // 18803
@Vec3.getX // 18804
D=A // 18805
@13 // 18806
M=D // 18807
@Vec3.dot.ret.1 // 18808
D=A // 18809
@CALL // 18810
0;JMP // 18811
(Vec3.dot.ret.1)
// call Number.do_mul
@7 // 18812
D=A // 18813
@14 // 18814
M=D // 18815
@Number.do_mul // 18816
D=A // 18817
@13 // 18818
M=D // 18819
@Vec3.dot.ret.2 // 18820
D=A // 18821
@CALL // 18822
0;JMP // 18823
(Vec3.dot.ret.2)
@SP // 18824
M=M-1 // 18825

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 18826
A=M+1 // 18827
D=M // 18828
@SP // 18829
AM=M+1 // 18830
A=A-1 // 18831
M=D // 18832
// call Number.clone
@6 // 18833
D=A // 18834
@14 // 18835
M=D // 18836
@Number.clone // 18837
D=A // 18838
@13 // 18839
M=D // 18840
@Vec3.dot.ret.3 // 18841
D=A // 18842
@CALL // 18843
0;JMP // 18844
(Vec3.dot.ret.3)
@SP // 18845
AM=M-1 // 18846
D=M // 18847
@LCL // 18848
A=M+1 // 18849
M=D // 18850

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18851
A=M+1 // 18852
D=M // 18853
@SP // 18854
AM=M+1 // 18855
A=A-1 // 18856
M=D // 18857
@ARG // 18858
A=M+1 // 18859
D=M // 18860
@SP // 18861
AM=M+1 // 18862
A=A-1 // 18863
M=D // 18864
// call Vec3.getY
@6 // 18865
D=A // 18866
@14 // 18867
M=D // 18868
@Vec3.getY // 18869
D=A // 18870
@13 // 18871
M=D // 18872
@Vec3.dot.ret.4 // 18873
D=A // 18874
@CALL // 18875
0;JMP // 18876
(Vec3.dot.ret.4)
// call Number.do_mul
@7 // 18877
D=A // 18878
@14 // 18879
M=D // 18880
@Number.do_mul // 18881
D=A // 18882
@13 // 18883
M=D // 18884
@Vec3.dot.ret.5 // 18885
D=A // 18886
@CALL // 18887
0;JMP // 18888
(Vec3.dot.ret.5)
@SP // 18889
M=M-1 // 18890

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 18891
A=M+1 // 18892
A=A+1 // 18893
D=M // 18894
@SP // 18895
AM=M+1 // 18896
A=A-1 // 18897
M=D // 18898
// call Number.clone
@6 // 18899
D=A // 18900
@14 // 18901
M=D // 18902
@Number.clone // 18903
D=A // 18904
@13 // 18905
M=D // 18906
@Vec3.dot.ret.6 // 18907
D=A // 18908
@CALL // 18909
0;JMP // 18910
(Vec3.dot.ret.6)
@SP // 18911
AM=M-1 // 18912
D=M // 18913
@LCL // 18914
A=M+1 // 18915
A=A+1 // 18916
M=D // 18917

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18918
A=M+1 // 18919
A=A+1 // 18920
D=M // 18921
@SP // 18922
AM=M+1 // 18923
A=A-1 // 18924
M=D // 18925
@ARG // 18926
A=M+1 // 18927
D=M // 18928
@SP // 18929
AM=M+1 // 18930
A=A-1 // 18931
M=D // 18932
// call Vec3.getZ
@6 // 18933
D=A // 18934
@14 // 18935
M=D // 18936
@Vec3.getZ // 18937
D=A // 18938
@13 // 18939
M=D // 18940
@Vec3.dot.ret.7 // 18941
D=A // 18942
@CALL // 18943
0;JMP // 18944
(Vec3.dot.ret.7)
// call Number.do_mul
@7 // 18945
D=A // 18946
@14 // 18947
M=D // 18948
@Number.do_mul // 18949
D=A // 18950
@13 // 18951
M=D // 18952
@Vec3.dot.ret.8 // 18953
D=A // 18954
@CALL // 18955
0;JMP // 18956
(Vec3.dot.ret.8)
@SP // 18957
M=M-1 // 18958

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18959
A=M // 18960
D=M // 18961
@SP // 18962
AM=M+1 // 18963
A=A-1 // 18964
M=D // 18965
@LCL // 18966
A=M+1 // 18967
D=M // 18968
@SP // 18969
AM=M+1 // 18970
A=A-1 // 18971
M=D // 18972
// call Number.do_add
@7 // 18973
D=A // 18974
@14 // 18975
M=D // 18976
@Number.do_add // 18977
D=A // 18978
@13 // 18979
M=D // 18980
@Vec3.dot.ret.9 // 18981
D=A // 18982
@CALL // 18983
0;JMP // 18984
(Vec3.dot.ret.9)
@SP // 18985
M=M-1 // 18986

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 18987
A=M // 18988
D=M // 18989
@SP // 18990
AM=M+1 // 18991
A=A-1 // 18992
M=D // 18993
@LCL // 18994
A=M+1 // 18995
A=A+1 // 18996
D=M // 18997
@SP // 18998
AM=M+1 // 18999
A=A-1 // 19000
M=D // 19001
// call Number.do_add
@7 // 19002
D=A // 19003
@14 // 19004
M=D // 19005
@Number.do_add // 19006
D=A // 19007
@13 // 19008
M=D // 19009
@Vec3.dot.ret.10 // 19010
D=A // 19011
@CALL // 19012
0;JMP // 19013
(Vec3.dot.ret.10)
@SP // 19014
M=M-1 // 19015

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19016
A=M+1 // 19017
D=M // 19018
@SP // 19019
AM=M+1 // 19020
A=A-1 // 19021
M=D // 19022
// call Number.dispose
@6 // 19023
D=A // 19024
@14 // 19025
M=D // 19026
@Number.dispose // 19027
D=A // 19028
@13 // 19029
M=D // 19030
@Vec3.dot.ret.11 // 19031
D=A // 19032
@CALL // 19033
0;JMP // 19034
(Vec3.dot.ret.11)
@SP // 19035
M=M-1 // 19036

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19037
A=M+1 // 19038
A=A+1 // 19039
D=M // 19040
@SP // 19041
AM=M+1 // 19042
A=A-1 // 19043
M=D // 19044
// call Number.dispose
@6 // 19045
D=A // 19046
@14 // 19047
M=D // 19048
@Number.dispose // 19049
D=A // 19050
@13 // 19051
M=D // 19052
@Vec3.dot.ret.12 // 19053
D=A // 19054
@CALL // 19055
0;JMP // 19056
(Vec3.dot.ret.12)
@SP // 19057
M=M-1 // 19058

////PushInstruction("local 0")
@LCL // 19059
A=M // 19060
D=M // 19061
@SP // 19062
AM=M+1 // 19063
A=A-1 // 19064
M=D // 19065
@RETURN // 19066
0;JMP // 19067

////FunctionInstruction{functionName='Int32.new', numLocals=3, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.new with 3
(Int32.new)
@3 // 19068
D=A // 19069
@SP // 19070
AM=D+M // 19071
A=A-1 // 19072
M=0 // 19073
A=A-1 // 19074
M=0 // 19075
A=A-1 // 19076
M=0 // 19077

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 19078
AM=M+1 // 19079
A=A-1 // 19080
M=1 // 19081
// call Memory.alloc
@6 // 19082
D=A // 19083
@14 // 19084
M=D // 19085
@Memory.alloc // 19086
D=A // 19087
@13 // 19088
M=D // 19089
@Int32.new.ret.0 // 19090
D=A // 19091
@CALL // 19092
0;JMP // 19093
(Int32.new.ret.0)
@SP // 19094
AM=M-1 // 19095
D=M // 19096
@3 // 19097
M=D // 19098

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 19099
M=M+1 // 19100

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 19101
A=M // 19102
D=M // 19103
@255 // 19104
D=D&A // 19105
@LCL // 19106
A=M // 19107
M=D // 19108

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("constant 8")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//        PushInstruction("constant 255"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 19109
A=M // 19110
D=M // 19111
@SP // 19112
AM=M+1 // 19113
A=A-1 // 19114
M=D // 19115
@8 // 19116
D=A // 19117
@SP // 19118
AM=M+1 // 19119
A=A-1 // 19120
M=D // 19121
// call Int32.arith_rightshift
@7 // 19122
D=A // 19123
@14 // 19124
M=D // 19125
@Int32.arith_rightshift // 19126
D=A // 19127
@13 // 19128
M=D // 19129
@Int32.new.ret.1 // 19130
D=A // 19131
@CALL // 19132
0;JMP // 19133
(Int32.new.ret.1)
@SP // 19134
AM=M-1 // 19135
D=M // 19136
@255 // 19137
D=D&A // 19138
@LCL // 19139
A=M+1 // 19140
M=D // 19141

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.new$IF_TRUE1}}
@Int32.new.LT.61 // 19142
D=A // 19143
@SP // 19144
AM=M+1 // 19145
A=A-1 // 19146
M=D // 19147
@ARG // 19148
A=M // 19149
D=M // 19150
@DO_LT // 19151
0;JMP // 19152
(Int32.new.LT.61)
@Int32.new$IF_TRUE1 // 19153
D;JNE // 19154

////GotoInstruction{label='Int32.new$IF_FALSE1}
// goto Int32.new$IF_FALSE1
@Int32.new$IF_FALSE1 // 19155
0;JMP // 19156

////LabelInstruction{label='Int32.new$IF_TRUE1}
// label Int32.new$IF_TRUE1
(Int32.new$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 255")
//  pop:  PopInstruction{address=local 2}
//}

@255 // 19157
D=A // 19158
@LCL // 19159
A=M+1 // 19160
A=A+1 // 19161
M=D // 19162

////GotoInstruction{label='Int32.new$IF_END1}
// goto Int32.new$IF_END1
@Int32.new$IF_END1 // 19163
0;JMP // 19164

////LabelInstruction{label='Int32.new$IF_FALSE1}
// label Int32.new$IF_FALSE1
(Int32.new$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 19165
A=M+1 // 19166
A=A+1 // 19167
M=0 // 19168

////LabelInstruction{label='Int32.new$IF_END1}
// label Int32.new$IF_END1
(Int32.new$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=this 0}
//}

@4 // 19169
D=A // 19170
@SP // 19171
AM=M+1 // 19172
A=A-1 // 19173
M=D // 19174
// call Memory.alloc
@6 // 19175
D=A // 19176
@14 // 19177
M=D // 19178
@Memory.alloc // 19179
D=A // 19180
@13 // 19181
M=D // 19182
@Int32.new.ret.2 // 19183
D=A // 19184
@CALL // 19185
0;JMP // 19186
(Int32.new.ret.2)
@SP // 19187
AM=M-1 // 19188
D=M // 19189
@THIS // 19190
A=M // 19191
M=D // 19192

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@THIS // 19193
A=M // 19194
D=M // 19195
@SP // 19196
AM=M+1 // 19197
A=A-1 // 19198
M=D // 19199
@LCL // 19200
A=M // 19201
D=M // 19202
@SP // 19203
AM=M-1 // 19204
A=M // 19205
M=D // 19206

////PushWriter{source=PushInstruction("local 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@THIS // 19207
A=M // 19208
D=M // 19209
@SP // 19210
AM=M+1 // 19211
A=A-1 // 19212
M=D+1 // 19213
@LCL // 19214
A=M+1 // 19215
D=M // 19216
@SP // 19217
AM=M-1 // 19218
A=M // 19219
M=D // 19220

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@THIS // 19221
A=M // 19222
D=M // 19223
@2 // 19224
D=D+A // 19225
@SP // 19226
AM=M+1 // 19227
A=A-1 // 19228
M=D // 19229
@LCL // 19230
A=M+1 // 19231
A=A+1 // 19232
D=M // 19233
@SP // 19234
AM=M-1 // 19235
A=M // 19236
M=D // 19237

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@THIS // 19238
A=M // 19239
D=M // 19240
@3 // 19241
D=D+A // 19242
@SP // 19243
AM=M+1 // 19244
A=A-1 // 19245
M=D // 19246
@LCL // 19247
A=M+1 // 19248
A=A+1 // 19249
D=M // 19250
@SP // 19251
AM=M-1 // 19252
A=M // 19253
M=D // 19254

////PushInstruction("pointer 0")
@3 // 19255
D=M // 19256
@SP // 19257
AM=M+1 // 19258
A=A-1 // 19259
M=D // 19260
@RETURN // 19261
0;JMP // 19262

////FunctionInstruction{functionName='Plane.dispose', numLocals=0, funcMapping={Plane.initialize=16, Plane.new=1, Plane.color=29}}
// function Plane.dispose with 0
(Plane.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19263
A=M // 19264
D=M // 19265
@3 // 19266
M=D // 19267

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 19268
A=M // 19269
D=M // 19270
@SP // 19271
AM=M+1 // 19272
A=A-1 // 19273
M=D // 19274
// call Vec3.dispose
@6 // 19275
D=A // 19276
@14 // 19277
M=D // 19278
@Vec3.dispose // 19279
D=A // 19280
@13 // 19281
M=D // 19282
@Plane.dispose.ret.0 // 19283
D=A // 19284
@CALL // 19285
0;JMP // 19286
(Plane.dispose.ret.0)
@SP // 19287
M=M-1 // 19288

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 19289
A=M+1 // 19290
D=M // 19291
@SP // 19292
AM=M+1 // 19293
A=A-1 // 19294
M=D // 19295
// call Vec3.dispose
@6 // 19296
D=A // 19297
@14 // 19298
M=D // 19299
@Vec3.dispose // 19300
D=A // 19301
@13 // 19302
M=D // 19303
@Plane.dispose.ret.1 // 19304
D=A // 19305
@CALL // 19306
0;JMP // 19307
(Plane.dispose.ret.1)
@SP // 19308
M=M-1 // 19309

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 19310
A=M+1 // 19311
A=A+1 // 19312
D=M // 19313
@SP // 19314
AM=M+1 // 19315
A=A-1 // 19316
M=D // 19317
// call Number.dispose
@6 // 19318
D=A // 19319
@14 // 19320
M=D // 19321
@Number.dispose // 19322
D=A // 19323
@13 // 19324
M=D // 19325
@Plane.dispose.ret.2 // 19326
D=A // 19327
@CALL // 19328
0;JMP // 19329
(Plane.dispose.ret.2)
@SP // 19330
M=M-1 // 19331

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 19332
D=M // 19333
@SP // 19334
AM=M+1 // 19335
A=A-1 // 19336
M=D // 19337
// call Memory.deAlloc
@6 // 19338
D=A // 19339
@14 // 19340
M=D // 19341
@Memory.deAlloc // 19342
D=A // 19343
@13 // 19344
M=D // 19345
@Plane.dispose.ret.3 // 19346
D=A // 19347
@CALL // 19348
0;JMP // 19349
(Plane.dispose.ret.3)
@SP // 19350
M=M-1 // 19351

////PushInstruction("constant 0")
@SP // 19352
AM=M+1 // 19353
A=A-1 // 19354
M=0 // 19355
@RETURN // 19356
0;JMP // 19357

////FunctionInstruction{functionName='Output.printString', numLocals=2, funcMapping={Output.init=97, Output.println=0, Output.getMap=0, Output.create=1}}
// function Output.printString with 2
(Output.printString)
@SP // 19358
M=M+1 // 19359
AM=M+1 // 19360
A=A-1 // 19361
M=0 // 19362
A=A-1 // 19363
M=0 // 19364

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 19365
A=M // 19366
M=0 // 19367

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{String.length}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 19368
A=M // 19369
D=M // 19370
@SP // 19371
AM=M+1 // 19372
A=A-1 // 19373
M=D // 19374
// call String.length
@6 // 19375
D=A // 19376
@14 // 19377
M=D // 19378
@String.length // 19379
D=A // 19380
@13 // 19381
M=D // 19382
@Output.printString.ret.0 // 19383
D=A // 19384
@CALL // 19385
0;JMP // 19386
(Output.printString.ret.0)
@SP // 19387
AM=M-1 // 19388
D=M // 19389
@LCL // 19390
A=M+1 // 19391
M=D // 19392

////LabelInstruction{label='Output.printString_WHILE_EXP1}
// label Output.printString_WHILE_EXP1
(Output.printString_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("local 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Output.printString_WHILE_END1}}
@Output.printString.LT.62 // 19393
D=A // 19394
@SP // 19395
AM=M+1 // 19396
A=A-1 // 19397
M=D // 19398
@LCL // 19399
A=M+1 // 19400
D=M // 19401
A=A-1 // 19402
D=M-D // 19403
@DO_LT // 19404
0;JMP // 19405
(Output.printString.LT.62)
D=!D // 19406
@Output.printString_WHILE_END1 // 19407
D;JNE // 19408

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 0")], call=CallInstruction{String.charAt}}], call=CallInstruction{Output.printChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@ARG // 19409
A=M // 19410
D=M // 19411
@SP // 19412
AM=M+1 // 19413
A=A-1 // 19414
M=D // 19415
@LCL // 19416
A=M // 19417
D=M // 19418
@SP // 19419
AM=M+1 // 19420
A=A-1 // 19421
M=D // 19422
// call String.charAt
@7 // 19423
D=A // 19424
@14 // 19425
M=D // 19426
@String.charAt // 19427
D=A // 19428
@13 // 19429
M=D // 19430
@Output.printString.ret.1 // 19431
D=A // 19432
@CALL // 19433
0;JMP // 19434
(Output.printString.ret.1)
// call Output.printChar
@6 // 19435
D=A // 19436
@14 // 19437
M=D // 19438
@Output.printChar // 19439
D=A // 19440
@13 // 19441
M=D // 19442
@Output.printString.ret.2 // 19443
D=A // 19444
@CALL // 19445
0;JMP // 19446
(Output.printString.ret.2)
@SP // 19447
M=M-1 // 19448

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 19449
A=M // 19450
M=M+1 // 19451

////GotoInstruction{label='Output.printString_WHILE_EXP1}
// goto Output.printString_WHILE_EXP1
@Output.printString_WHILE_EXP1 // 19452
0;JMP // 19453

////LabelInstruction{label='Output.printString_WHILE_END1}
// label Output.printString_WHILE_END1
(Output.printString_WHILE_END1)

////PushInstruction("constant 0")
@SP // 19454
AM=M+1 // 19455
A=A-1 // 19456
M=0 // 19457
@RETURN // 19458
0;JMP // 19459

////FunctionInstruction{functionName='Number.is_less_than', numLocals=0, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.do_neg=1}}
// function Number.is_less_than with 0
(Number.is_less_than)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19460
A=M // 19461
D=M // 19462
@3 // 19463
M=D // 19464

////BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.cmp}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//)
@Number.is_less_than.LT.63 // 19465
D=A // 19466
@SP // 19467
AM=M+1 // 19468
A=A-1 // 19469
M=D // 19470
@THIS // 19471
A=M // 19472
D=M // 19473
@SP // 19474
AM=M+1 // 19475
A=A-1 // 19476
M=D // 19477
@ARG // 19478
A=M+1 // 19479
D=M // 19480
@SP // 19481
AM=M+1 // 19482
A=A-1 // 19483
M=D // 19484
// call Number.getV
@6 // 19485
D=A // 19486
@14 // 19487
M=D // 19488
@Number.getV // 19489
D=A // 19490
@13 // 19491
M=D // 19492
@Number.is_less_than.ret.0 // 19493
D=A // 19494
@CALL // 19495
0;JMP // 19496
(Number.is_less_than.ret.0)
// call Int32.cmp
@7 // 19497
D=A // 19498
@14 // 19499
M=D // 19500
@Int32.cmp // 19501
D=A // 19502
@13 // 19503
M=D // 19504
@Number.is_less_than.ret.1 // 19505
D=A // 19506
@CALL // 19507
0;JMP // 19508
(Number.is_less_than.ret.1)
@SP // 19509
AM=M-1 // 19510
D=M // 19511
@DO_LT // 19512
0;JMP // 19513
(Number.is_less_than.LT.63)
@SP // 19514
AM=M+1 // 19515
A=A-1 // 19516
M=D // 19517
@RETURN // 19518
0;JMP // 19519

////FunctionInstruction{functionName='Vec3.do_cross', numLocals=6, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.clone=4, Vec3.new=1}}
// function Vec3.do_cross with 6
(Vec3.do_cross)
@6 // 19520
D=A // 19521
@SP // 19522
AM=D+M // 19523
A=A-1 // 19524
M=0 // 19525
A=A-1 // 19526
M=0 // 19527
A=A-1 // 19528
M=0 // 19529
A=A-1 // 19530
M=0 // 19531
A=A-1 // 19532
M=0 // 19533
A=A-1 // 19534
M=0 // 19535

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 19536
A=M // 19537
D=M // 19538
@3 // 19539
M=D // 19540

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 19541
A=M+1 // 19542
D=M // 19543
@SP // 19544
AM=M+1 // 19545
A=A-1 // 19546
M=D // 19547
// call Number.clone
@6 // 19548
D=A // 19549
@14 // 19550
M=D // 19551
@Number.clone // 19552
D=A // 19553
@13 // 19554
M=D // 19555
@Vec3.do_cross.ret.0 // 19556
D=A // 19557
@CALL // 19558
0;JMP // 19559
(Vec3.do_cross.ret.0)
@SP // 19560
AM=M-1 // 19561
D=M // 19562
@LCL // 19563
A=M // 19564
M=D // 19565

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19566
A=M // 19567
D=M // 19568
@SP // 19569
AM=M+1 // 19570
A=A-1 // 19571
M=D // 19572
@ARG // 19573
A=M+1 // 19574
D=M // 19575
@SP // 19576
AM=M+1 // 19577
A=A-1 // 19578
M=D // 19579
// call Vec3.getZ
@6 // 19580
D=A // 19581
@14 // 19582
M=D // 19583
@Vec3.getZ // 19584
D=A // 19585
@13 // 19586
M=D // 19587
@Vec3.do_cross.ret.1 // 19588
D=A // 19589
@CALL // 19590
0;JMP // 19591
(Vec3.do_cross.ret.1)
// call Number.do_mul
@7 // 19592
D=A // 19593
@14 // 19594
M=D // 19595
@Number.do_mul // 19596
D=A // 19597
@13 // 19598
M=D // 19599
@Vec3.do_cross.ret.2 // 19600
D=A // 19601
@CALL // 19602
0;JMP // 19603
(Vec3.do_cross.ret.2)
@SP // 19604
M=M-1 // 19605

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 19606
A=M+1 // 19607
A=A+1 // 19608
D=M // 19609
@SP // 19610
AM=M+1 // 19611
A=A-1 // 19612
M=D // 19613
// call Number.clone
@6 // 19614
D=A // 19615
@14 // 19616
M=D // 19617
@Number.clone // 19618
D=A // 19619
@13 // 19620
M=D // 19621
@Vec3.do_cross.ret.3 // 19622
D=A // 19623
@CALL // 19624
0;JMP // 19625
(Vec3.do_cross.ret.3)
@SP // 19626
AM=M-1 // 19627
D=M // 19628
@LCL // 19629
A=M+1 // 19630
M=D // 19631

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19632
A=M+1 // 19633
D=M // 19634
@SP // 19635
AM=M+1 // 19636
A=A-1 // 19637
M=D // 19638
@ARG // 19639
A=M+1 // 19640
D=M // 19641
@SP // 19642
AM=M+1 // 19643
A=A-1 // 19644
M=D // 19645
// call Vec3.getY
@6 // 19646
D=A // 19647
@14 // 19648
M=D // 19649
@Vec3.getY // 19650
D=A // 19651
@13 // 19652
M=D // 19653
@Vec3.do_cross.ret.4 // 19654
D=A // 19655
@CALL // 19656
0;JMP // 19657
(Vec3.do_cross.ret.4)
// call Number.do_mul
@7 // 19658
D=A // 19659
@14 // 19660
M=D // 19661
@Number.do_mul // 19662
D=A // 19663
@13 // 19664
M=D // 19665
@Vec3.do_cross.ret.5 // 19666
D=A // 19667
@CALL // 19668
0;JMP // 19669
(Vec3.do_cross.ret.5)
@SP // 19670
M=M-1 // 19671

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19672
A=M // 19673
D=M // 19674
@SP // 19675
AM=M+1 // 19676
A=A-1 // 19677
M=D // 19678
@LCL // 19679
A=M+1 // 19680
D=M // 19681
@SP // 19682
AM=M+1 // 19683
A=A-1 // 19684
M=D // 19685
// call Number.do_sub
@7 // 19686
D=A // 19687
@14 // 19688
M=D // 19689
@Number.do_sub // 19690
D=A // 19691
@13 // 19692
M=D // 19693
@Vec3.do_cross.ret.6 // 19694
D=A // 19695
@CALL // 19696
0;JMP // 19697
(Vec3.do_cross.ret.6)
@SP // 19698
M=M-1 // 19699

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 19700
A=M+1 // 19701
A=A+1 // 19702
D=M // 19703
@SP // 19704
AM=M+1 // 19705
A=A-1 // 19706
M=D // 19707
// call Number.clone
@6 // 19708
D=A // 19709
@14 // 19710
M=D // 19711
@Number.clone // 19712
D=A // 19713
@13 // 19714
M=D // 19715
@Vec3.do_cross.ret.7 // 19716
D=A // 19717
@CALL // 19718
0;JMP // 19719
(Vec3.do_cross.ret.7)
@SP // 19720
AM=M-1 // 19721
D=M // 19722
@LCL // 19723
A=M+1 // 19724
A=A+1 // 19725
M=D // 19726

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19727
A=M+1 // 19728
A=A+1 // 19729
D=M // 19730
@SP // 19731
AM=M+1 // 19732
A=A-1 // 19733
M=D // 19734
@ARG // 19735
A=M+1 // 19736
D=M // 19737
@SP // 19738
AM=M+1 // 19739
A=A-1 // 19740
M=D // 19741
// call Vec3.getX
@6 // 19742
D=A // 19743
@14 // 19744
M=D // 19745
@Vec3.getX // 19746
D=A // 19747
@13 // 19748
M=D // 19749
@Vec3.do_cross.ret.8 // 19750
D=A // 19751
@CALL // 19752
0;JMP // 19753
(Vec3.do_cross.ret.8)
// call Number.do_mul
@7 // 19754
D=A // 19755
@14 // 19756
M=D // 19757
@Number.do_mul // 19758
D=A // 19759
@13 // 19760
M=D // 19761
@Vec3.do_cross.ret.9 // 19762
D=A // 19763
@CALL // 19764
0;JMP // 19765
(Vec3.do_cross.ret.9)
@SP // 19766
M=M-1 // 19767

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@THIS // 19768
A=M // 19769
D=M // 19770
@SP // 19771
AM=M+1 // 19772
A=A-1 // 19773
M=D // 19774
// call Number.clone
@6 // 19775
D=A // 19776
@14 // 19777
M=D // 19778
@Number.clone // 19779
D=A // 19780
@13 // 19781
M=D // 19782
@Vec3.do_cross.ret.10 // 19783
D=A // 19784
@CALL // 19785
0;JMP // 19786
(Vec3.do_cross.ret.10)
@SP // 19787
AM=M-1 // 19788
D=M // 19789
@LCL // 19790
A=M+1 // 19791
A=A+1 // 19792
A=A+1 // 19793
M=D // 19794

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19795
A=M+1 // 19796
A=A+1 // 19797
A=A+1 // 19798
D=M // 19799
@SP // 19800
AM=M+1 // 19801
A=A-1 // 19802
M=D // 19803
@ARG // 19804
A=M+1 // 19805
D=M // 19806
@SP // 19807
AM=M+1 // 19808
A=A-1 // 19809
M=D // 19810
// call Vec3.getZ
@6 // 19811
D=A // 19812
@14 // 19813
M=D // 19814
@Vec3.getZ // 19815
D=A // 19816
@13 // 19817
M=D // 19818
@Vec3.do_cross.ret.11 // 19819
D=A // 19820
@CALL // 19821
0;JMP // 19822
(Vec3.do_cross.ret.11)
// call Number.do_mul
@7 // 19823
D=A // 19824
@14 // 19825
M=D // 19826
@Number.do_mul // 19827
D=A // 19828
@13 // 19829
M=D // 19830
@Vec3.do_cross.ret.12 // 19831
D=A // 19832
@CALL // 19833
0;JMP // 19834
(Vec3.do_cross.ret.12)
@SP // 19835
M=M-1 // 19836

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 3")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19837
A=M+1 // 19838
A=A+1 // 19839
D=M // 19840
@SP // 19841
AM=M+1 // 19842
A=A-1 // 19843
M=D // 19844
@LCL // 19845
A=M+1 // 19846
A=A+1 // 19847
A=A+1 // 19848
D=M // 19849
@SP // 19850
AM=M+1 // 19851
A=A-1 // 19852
M=D // 19853
// call Number.do_sub
@7 // 19854
D=A // 19855
@14 // 19856
M=D // 19857
@Number.do_sub // 19858
D=A // 19859
@13 // 19860
M=D // 19861
@Vec3.do_cross.ret.13 // 19862
D=A // 19863
@CALL // 19864
0;JMP // 19865
(Vec3.do_cross.ret.13)
@SP // 19866
M=M-1 // 19867

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 4}
//}

@THIS // 19868
A=M // 19869
D=M // 19870
@SP // 19871
AM=M+1 // 19872
A=A-1 // 19873
M=D // 19874
// call Number.clone
@6 // 19875
D=A // 19876
@14 // 19877
M=D // 19878
@Number.clone // 19879
D=A // 19880
@13 // 19881
M=D // 19882
@Vec3.do_cross.ret.14 // 19883
D=A // 19884
@CALL // 19885
0;JMP // 19886
(Vec3.do_cross.ret.14)
@LCL // 19887
D=M // 19888
@4 // 19889
A=D+A // 19890
D=A // 19891
@R13 // 19892
M=D // 19893
@SP // 19894
AM=M-1 // 19895
D=M // 19896
@R13 // 19897
A=M // 19898
M=D // 19899

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19900
D=M // 19901
@4 // 19902
A=D+A // 19903
D=M // 19904
@SP // 19905
AM=M+1 // 19906
A=A-1 // 19907
M=D // 19908
@ARG // 19909
A=M+1 // 19910
D=M // 19911
@SP // 19912
AM=M+1 // 19913
A=A-1 // 19914
M=D // 19915
// call Vec3.getY
@6 // 19916
D=A // 19917
@14 // 19918
M=D // 19919
@Vec3.getY // 19920
D=A // 19921
@13 // 19922
M=D // 19923
@Vec3.do_cross.ret.15 // 19924
D=A // 19925
@CALL // 19926
0;JMP // 19927
(Vec3.do_cross.ret.15)
// call Number.do_mul
@7 // 19928
D=A // 19929
@14 // 19930
M=D // 19931
@Number.do_mul // 19932
D=A // 19933
@13 // 19934
M=D // 19935
@Vec3.do_cross.ret.16 // 19936
D=A // 19937
@CALL // 19938
0;JMP // 19939
(Vec3.do_cross.ret.16)
@SP // 19940
M=M-1 // 19941

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 5}
//}

@THIS // 19942
A=M+1 // 19943
D=M // 19944
@SP // 19945
AM=M+1 // 19946
A=A-1 // 19947
M=D // 19948
// call Number.clone
@6 // 19949
D=A // 19950
@14 // 19951
M=D // 19952
@Number.clone // 19953
D=A // 19954
@13 // 19955
M=D // 19956
@Vec3.do_cross.ret.17 // 19957
D=A // 19958
@CALL // 19959
0;JMP // 19960
(Vec3.do_cross.ret.17)
@LCL // 19961
D=M // 19962
@5 // 19963
A=D+A // 19964
D=A // 19965
@R13 // 19966
M=D // 19967
@SP // 19968
AM=M-1 // 19969
D=M // 19970
@R13 // 19971
A=M // 19972
M=D // 19973

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 19974
D=M // 19975
@5 // 19976
A=D+A // 19977
D=M // 19978
@SP // 19979
AM=M+1 // 19980
A=A-1 // 19981
M=D // 19982
@ARG // 19983
A=M+1 // 19984
D=M // 19985
@SP // 19986
AM=M+1 // 19987
A=A-1 // 19988
M=D // 19989
// call Vec3.getX
@6 // 19990
D=A // 19991
@14 // 19992
M=D // 19993
@Vec3.getX // 19994
D=A // 19995
@13 // 19996
M=D // 19997
@Vec3.do_cross.ret.18 // 19998
D=A // 19999
@CALL // 20000
0;JMP // 20001
(Vec3.do_cross.ret.18)
// call Number.do_mul
@7 // 20002
D=A // 20003
@14 // 20004
M=D // 20005
@Number.do_mul // 20006
D=A // 20007
@13 // 20008
M=D // 20009
@Vec3.do_cross.ret.19 // 20010
D=A // 20011
@CALL // 20012
0;JMP // 20013
(Vec3.do_cross.ret.19)
@SP // 20014
M=M-1 // 20015

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 5")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20016
D=M // 20017
@4 // 20018
A=D+A // 20019
D=M // 20020
@SP // 20021
AM=M+1 // 20022
A=A-1 // 20023
M=D // 20024
@LCL // 20025
D=M // 20026
@5 // 20027
A=D+A // 20028
D=M // 20029
@SP // 20030
AM=M+1 // 20031
A=A-1 // 20032
M=D // 20033
// call Number.do_sub
@7 // 20034
D=A // 20035
@14 // 20036
M=D // 20037
@Number.do_sub // 20038
D=A // 20039
@13 // 20040
M=D // 20041
@Vec3.do_cross.ret.20 // 20042
D=A // 20043
@CALL // 20044
0;JMP // 20045
(Vec3.do_cross.ret.20)
@SP // 20046
M=M-1 // 20047

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20048
A=M+1 // 20049
D=M // 20050
@SP // 20051
AM=M+1 // 20052
A=A-1 // 20053
M=D // 20054
// call Number.dispose
@6 // 20055
D=A // 20056
@14 // 20057
M=D // 20058
@Number.dispose // 20059
D=A // 20060
@13 // 20061
M=D // 20062
@Vec3.do_cross.ret.21 // 20063
D=A // 20064
@CALL // 20065
0;JMP // 20066
(Vec3.do_cross.ret.21)
@SP // 20067
M=M-1 // 20068

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20069
A=M+1 // 20070
A=A+1 // 20071
A=A+1 // 20072
D=M // 20073
@SP // 20074
AM=M+1 // 20075
A=A-1 // 20076
M=D // 20077
// call Number.dispose
@6 // 20078
D=A // 20079
@14 // 20080
M=D // 20081
@Number.dispose // 20082
D=A // 20083
@13 // 20084
M=D // 20085
@Vec3.do_cross.ret.22 // 20086
D=A // 20087
@CALL // 20088
0;JMP // 20089
(Vec3.do_cross.ret.22)
@SP // 20090
M=M-1 // 20091

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 20092
D=M // 20093
@5 // 20094
A=D+A // 20095
D=M // 20096
@SP // 20097
AM=M+1 // 20098
A=A-1 // 20099
M=D // 20100
// call Number.dispose
@6 // 20101
D=A // 20102
@14 // 20103
M=D // 20104
@Number.dispose // 20105
D=A // 20106
@13 // 20107
M=D // 20108
@Vec3.do_cross.ret.23 // 20109
D=A // 20110
@CALL // 20111
0;JMP // 20112
(Vec3.do_cross.ret.23)
@SP // 20113
M=M-1 // 20114

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20115
A=M // 20116
D=M // 20117
@SP // 20118
AM=M+1 // 20119
A=A-1 // 20120
M=D // 20121
// call Number.dispose
@6 // 20122
D=A // 20123
@14 // 20124
M=D // 20125
@Number.dispose // 20126
D=A // 20127
@13 // 20128
M=D // 20129
@Vec3.do_cross.ret.24 // 20130
D=A // 20131
@CALL // 20132
0;JMP // 20133
(Vec3.do_cross.ret.24)
@SP // 20134
M=M-1 // 20135

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20136
A=M+1 // 20137
D=M // 20138
@SP // 20139
AM=M+1 // 20140
A=A-1 // 20141
M=D // 20142
// call Number.dispose
@6 // 20143
D=A // 20144
@14 // 20145
M=D // 20146
@Number.dispose // 20147
D=A // 20148
@13 // 20149
M=D // 20150
@Vec3.do_cross.ret.25 // 20151
D=A // 20152
@CALL // 20153
0;JMP // 20154
(Vec3.do_cross.ret.25)
@SP // 20155
M=M-1 // 20156

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 20157
A=M+1 // 20158
A=A+1 // 20159
D=M // 20160
@SP // 20161
AM=M+1 // 20162
A=A-1 // 20163
M=D // 20164
// call Number.dispose
@6 // 20165
D=A // 20166
@14 // 20167
M=D // 20168
@Number.dispose // 20169
D=A // 20170
@13 // 20171
M=D // 20172
@Vec3.do_cross.ret.26 // 20173
D=A // 20174
@CALL // 20175
0;JMP // 20176
(Vec3.do_cross.ret.26)
@SP // 20177
M=M-1 // 20178

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=this 0}
//}

@LCL // 20179
A=M // 20180
D=M // 20181
@THIS // 20182
A=M // 20183
M=D // 20184

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=this 1}
//}

@LCL // 20185
A=M+1 // 20186
A=A+1 // 20187
D=M // 20188
@THIS // 20189
A=M+1 // 20190
M=D // 20191

////PushPopPair {
//  push: PushInstruction("local 4")
//  pop:  PopInstruction{address=this 2}
//}

@LCL // 20192
D=M // 20193
@4 // 20194
A=D+A // 20195
D=M // 20196
@THIS // 20197
A=M+1 // 20198
A=A+1 // 20199
M=D // 20200

////PushInstruction("constant 0")
@SP // 20201
AM=M+1 // 20202
A=A-1 // 20203
M=0 // 20204
@RETURN // 20205
0;JMP // 20206

////FunctionInstruction{functionName='Math.multiply', numLocals=3, funcMapping={Math.max=0}}
// function Math.multiply with 3
(Math.multiply)
@3 // 20207
D=A // 20208
@SP // 20209
AM=D+M // 20210
A=A-1 // 20211
M=0 // 20212
A=A-1 // 20213
M=0 // 20214
A=A-1 // 20215
M=0 // 20216

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE1}}
@Math.multiply.EQ.64 // 20217
D=A // 20218
@SP // 20219
AM=M+1 // 20220
A=A-1 // 20221
M=D // 20222
@ARG // 20223
A=M // 20224
D=M // 20225
@DO_EQ // 20226
0;JMP // 20227
(Math.multiply.EQ.64)
@SP // 20228
AM=M+1 // 20229
A=A-1 // 20230
M=D // 20231
@Math.multiply.EQ.65 // 20232
D=A // 20233
@SP // 20234
AM=M+1 // 20235
A=A-1 // 20236
M=D // 20237
@ARG // 20238
A=M+1 // 20239
D=M // 20240
@DO_EQ // 20241
0;JMP // 20242
(Math.multiply.EQ.65)
@SP // 20243
AM=M-1 // 20244
D=D|M // 20245
@Math.multiply$IF_TRUE1 // 20246
D;JNE // 20247

////GotoInstruction{label='Math.multiply$IF_END1}
// goto Math.multiply$IF_END1
@Math.multiply$IF_END1 // 20248
0;JMP // 20249

////LabelInstruction{label='Math.multiply$IF_TRUE1}
// label Math.multiply$IF_TRUE1
(Math.multiply$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 20250
AM=M+1 // 20251
A=A-1 // 20252
M=0 // 20253
@RETURN // 20254
0;JMP // 20255

////LabelInstruction{label='Math.multiply$IF_END1}
// label Math.multiply$IF_END1
(Math.multiply$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE2}}
@Math.multiply.EQ.66 // 20256
D=A // 20257
@SP // 20258
AM=M+1 // 20259
A=A-1 // 20260
M=D // 20261
@ARG // 20262
A=M // 20263
D=M // 20264
D=D-1 // 20265
@DO_EQ // 20266
0;JMP // 20267
(Math.multiply.EQ.66)
@Math.multiply$IF_TRUE2 // 20268
D;JNE // 20269

////GotoInstruction{label='Math.multiply$IF_END2}
// goto Math.multiply$IF_END2
@Math.multiply$IF_END2 // 20270
0;JMP // 20271

////LabelInstruction{label='Math.multiply$IF_TRUE2}
// label Math.multiply$IF_TRUE2
(Math.multiply$IF_TRUE2)

////PushInstruction("argument 1")
@ARG // 20272
A=M+1 // 20273
D=M // 20274
@SP // 20275
AM=M+1 // 20276
A=A-1 // 20277
M=D // 20278
@RETURN // 20279
0;JMP // 20280

////LabelInstruction{label='Math.multiply$IF_END2}
// label Math.multiply$IF_END2
(Math.multiply$IF_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE3}}
@Math.multiply.EQ.67 // 20281
D=A // 20282
@SP // 20283
AM=M+1 // 20284
A=A-1 // 20285
M=D // 20286
@ARG // 20287
A=M+1 // 20288
D=M // 20289
D=D-1 // 20290
@DO_EQ // 20291
0;JMP // 20292
(Math.multiply.EQ.67)
@Math.multiply$IF_TRUE3 // 20293
D;JNE // 20294

////GotoInstruction{label='Math.multiply$IF_END3}
// goto Math.multiply$IF_END3
@Math.multiply$IF_END3 // 20295
0;JMP // 20296

////LabelInstruction{label='Math.multiply$IF_TRUE3}
// label Math.multiply$IF_TRUE3
(Math.multiply$IF_TRUE3)

////PushInstruction("argument 0")
@ARG // 20297
A=M // 20298
D=M // 20299
@SP // 20300
AM=M+1 // 20301
A=A-1 // 20302
M=D // 20303
@RETURN // 20304
0;JMP // 20305

////LabelInstruction{label='Math.multiply$IF_END3}
// label Math.multiply$IF_END3
(Math.multiply$IF_END3)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE4}}
@Math.multiply.EQ.68 // 20306
D=A // 20307
@SP // 20308
AM=M+1 // 20309
A=A-1 // 20310
M=D // 20311
@ARG // 20312
A=M // 20313
D=M // 20314
@2 // 20315
D=D-A // 20316
@DO_EQ // 20317
0;JMP // 20318
(Math.multiply.EQ.68)
@Math.multiply$IF_TRUE4 // 20319
D;JNE // 20320

////GotoInstruction{label='Math.multiply$IF_END4}
// goto Math.multiply$IF_END4
@Math.multiply$IF_END4 // 20321
0;JMP // 20322

////LabelInstruction{label='Math.multiply$IF_TRUE4}
// label Math.multiply$IF_TRUE4
(Math.multiply$IF_TRUE4)

////BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("argument 1"),
//    binaryOp: "ADD"
//)
@ARG // 20323
A=M+1 // 20324
D=M // 20325
D=D+M // 20326
@SP // 20327
AM=M+1 // 20328
A=A-1 // 20329
M=D // 20330
@RETURN // 20331
0;JMP // 20332

////LabelInstruction{label='Math.multiply$IF_END4}
// label Math.multiply$IF_END4
(Math.multiply$IF_END4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE5}}
@Math.multiply.EQ.69 // 20333
D=A // 20334
@SP // 20335
AM=M+1 // 20336
A=A-1 // 20337
M=D // 20338
@ARG // 20339
A=M+1 // 20340
D=M // 20341
@2 // 20342
D=D-A // 20343
@DO_EQ // 20344
0;JMP // 20345
(Math.multiply.EQ.69)
@Math.multiply$IF_TRUE5 // 20346
D;JNE // 20347

////GotoInstruction{label='Math.multiply$IF_END5}
// goto Math.multiply$IF_END5
@Math.multiply$IF_END5 // 20348
0;JMP // 20349

////LabelInstruction{label='Math.multiply$IF_TRUE5}
// label Math.multiply$IF_TRUE5
(Math.multiply$IF_TRUE5)

////BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
@ARG // 20350
A=M // 20351
D=M // 20352
D=D+M // 20353
@SP // 20354
AM=M+1 // 20355
A=A-1 // 20356
M=D // 20357
@RETURN // 20358
0;JMP // 20359

////LabelInstruction{label='Math.multiply$IF_END5}
// label Math.multiply$IF_END5
(Math.multiply$IF_END5)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 20360
A=M+1 // 20361
A=A+1 // 20362
M=1 // 20363

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 20364
A=M+1 // 20365
M=0 // 20366

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20367
A=M // 20368
M=0 // 20369

////LabelInstruction{label='Math.multiply_WHILE_EXP1}
// label Math.multiply_WHILE_EXP1
(Math.multiply_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.multiply_WHILE_END1}}
@Math.multiply.LT.70 // 20370
D=A // 20371
@SP // 20372
AM=M+1 // 20373
A=A-1 // 20374
M=D // 20375
@LCL // 20376
A=M+1 // 20377
D=M // 20378
@16 // 20379
D=D-A // 20380
@DO_LT // 20381
0;JMP // 20382
(Math.multiply.LT.70)
D=!D // 20383
@Math.multiply_WHILE_END1 // 20384
D;JNE // 20385

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("argument 1"),
//                right:
//                    PushInstruction("local 2"),
//                binaryOp: "AND"
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.multiply$IF_TRUE6}}
@Math.multiply.EQ.71 // 20386
D=A // 20387
@SP // 20388
AM=M+1 // 20389
A=A-1 // 20390
M=D // 20391
@ARG // 20392
A=M+1 // 20393
D=M // 20394
@SP // 20395
AM=M+1 // 20396
A=A-1 // 20397
M=D // 20398
@LCL // 20399
A=M+1 // 20400
A=A+1 // 20401
D=M // 20402
@SP // 20403
AM=M-1 // 20404
D=D&M // 20405
@DO_EQ // 20406
0;JMP // 20407
(Math.multiply.EQ.71)
D=!D // 20408
@Math.multiply$IF_TRUE6 // 20409
D;JNE // 20410

////GotoInstruction{label='Math.multiply$IF_END6}
// goto Math.multiply$IF_END6
@Math.multiply$IF_END6 // 20411
0;JMP // 20412

////LabelInstruction{label='Math.multiply$IF_TRUE6}
// label Math.multiply$IF_TRUE6
(Math.multiply$IF_TRUE6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 20413
A=M // 20414
D=M // 20415
@LCL // 20416
A=M // 20417
M=D+M // 20418

////LabelInstruction{label='Math.multiply$IF_END6}
// label Math.multiply$IF_END6
(Math.multiply$IF_END6)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=argument 0}
//}

@ARG // 20419
A=M // 20420
D=M // 20421
@ARG // 20422
A=M // 20423
M=D+M // 20424

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 20425
A=M+1 // 20426
M=M+1 // 20427

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 20428
A=M+1 // 20429
A=A+1 // 20430
D=M // 20431
@LCL // 20432
A=M+1 // 20433
A=A+1 // 20434
M=D+M // 20435

////GotoInstruction{label='Math.multiply_WHILE_EXP1}
// goto Math.multiply_WHILE_EXP1
@Math.multiply_WHILE_EXP1 // 20436
0;JMP // 20437

////LabelInstruction{label='Math.multiply_WHILE_END1}
// label Math.multiply_WHILE_END1
(Math.multiply_WHILE_END1)

////PushInstruction("local 0")
@LCL // 20438
A=M // 20439
D=M // 20440
@SP // 20441
AM=M+1 // 20442
A=A-1 // 20443
M=D // 20444
@RETURN // 20445
0;JMP // 20446

////FunctionInstruction{functionName='Int32.do_left_shift_bytes', numLocals=1, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_left_shift_bytes with 1
(Int32.do_left_shift_bytes)
@SP // 20447
AM=M+1 // 20448
A=A-1 // 20449
M=0 // 20450

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 20451
A=M // 20452
D=M // 20453
@3 // 20454
M=D // 20455

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes$IF_TRUE1}}
@Int32.do_left_shift_bytes.GT.72 // 20456
D=A // 20457
@SP // 20458
AM=M+1 // 20459
A=A-1 // 20460
M=D // 20461
@ARG // 20462
A=M+1 // 20463
D=M // 20464
@DO_GT // 20465
0;JMP // 20466
(Int32.do_left_shift_bytes.GT.72)
D=!D // 20467
@Int32.do_left_shift_bytes$IF_TRUE1 // 20468
D;JNE // 20469

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_END1}
// goto Int32.do_left_shift_bytes$IF_END1
@Int32.do_left_shift_bytes$IF_END1 // 20470
0;JMP // 20471

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_TRUE1}
// label Int32.do_left_shift_bytes$IF_TRUE1
(Int32.do_left_shift_bytes$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 20472
AM=M+1 // 20473
A=A-1 // 20474
M=0 // 20475
@RETURN // 20476
0;JMP // 20477

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_END1}
// label Int32.do_left_shift_bytes$IF_END1
(Int32.do_left_shift_bytes$IF_END1)

////PushPopPair {
//  push: PushInstruction("constant 3")
//  pop:  PopInstruction{address=local 0}
//}

@3 // 20478
D=A // 20479
@LCL // 20480
A=M // 20481
M=D // 20482

////LabelInstruction{label='Int32.do_left_shift_bytes_WHILE_EXP1}
// label Int32.do_left_shift_bytes_WHILE_EXP1
(Int32.do_left_shift_bytes_WHILE_EXP1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_WHILE_END1}}
@Int32.do_left_shift_bytes.LT.73 // 20483
D=A // 20484
@SP // 20485
AM=M+1 // 20486
A=A-1 // 20487
M=D // 20488
@LCL // 20489
A=M // 20490
D=M // 20491
@DO_LT // 20492
0;JMP // 20493
(Int32.do_left_shift_bytes.LT.73)
@Int32.do_left_shift_bytes_WHILE_END1 // 20494
D;JNE // 20495

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("argument 1"),
//                binaryOp: "SUB"
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes$IF_TRUE2}}
@Int32.do_left_shift_bytes.LT.74 // 20496
D=A // 20497
@SP // 20498
AM=M+1 // 20499
A=A-1 // 20500
M=D // 20501
@LCL // 20502
A=M // 20503
D=M // 20504
@SP // 20505
AM=M+1 // 20506
A=A-1 // 20507
M=D // 20508
@ARG // 20509
A=M+1 // 20510
D=M // 20511
@SP // 20512
AM=M-1 // 20513
D=M-D // 20514
@DO_LT // 20515
0;JMP // 20516
(Int32.do_left_shift_bytes.LT.74)
D=!D // 20517
@Int32.do_left_shift_bytes$IF_TRUE2 // 20518
D;JNE // 20519

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_FALSE2}
// goto Int32.do_left_shift_bytes$IF_FALSE2
@Int32.do_left_shift_bytes$IF_FALSE2 // 20520
0;JMP // 20521

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_TRUE2}
// label Int32.do_left_shift_bytes$IF_TRUE2
(Int32.do_left_shift_bytes$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@THIS // 20522
A=M // 20523
D=M // 20524
@SP // 20525
AM=M+1 // 20526
A=A-1 // 20527
M=D // 20528
@LCL // 20529
A=M // 20530
D=M // 20531
@SP // 20532
AM=M-1 // 20533
D=D+M // 20534
@SP // 20535
AM=M+1 // 20536
A=A-1 // 20537
M=D // 20538
@THIS // 20539
A=M // 20540
D=M // 20541
@SP // 20542
AM=M+1 // 20543
A=A-1 // 20544
M=D // 20545
@LCL // 20546
A=M // 20547
D=M // 20548
@SP // 20549
AM=M+1 // 20550
A=A-1 // 20551
M=D // 20552
@ARG // 20553
A=M+1 // 20554
D=M // 20555
@SP // 20556
AM=M-1 // 20557
D=M-D // 20558
@SP // 20559
AM=M-1 // 20560
A=D+M // 20561
D=M // 20562
@SP // 20563
AM=M-1 // 20564
A=M // 20565
M=D // 20566

////GotoInstruction{label='Int32.do_left_shift_bytes$IF_END2}
// goto Int32.do_left_shift_bytes$IF_END2
@Int32.do_left_shift_bytes$IF_END2 // 20567
0;JMP // 20568

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_FALSE2}
// label Int32.do_left_shift_bytes$IF_FALSE2
(Int32.do_left_shift_bytes$IF_FALSE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@THIS // 20569
A=M // 20570
D=M // 20571
@SP // 20572
AM=M+1 // 20573
A=A-1 // 20574
M=D // 20575
@LCL // 20576
A=M // 20577
D=M // 20578
@SP // 20579
AM=M-1 // 20580
D=D+M // 20581
@SP // 20582
AM=M+1 // 20583
A=A-1 // 20584
M=D // 20585
D=0 // 20586
@SP // 20587
AM=M-1 // 20588
A=M // 20589
M=D // 20590

////LabelInstruction{label='Int32.do_left_shift_bytes$IF_END2}
// label Int32.do_left_shift_bytes$IF_END2
(Int32.do_left_shift_bytes$IF_END2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20591
A=M // 20592
M=M-1 // 20593

////GotoInstruction{label='Int32.do_left_shift_bytes_WHILE_EXP1}
// goto Int32.do_left_shift_bytes_WHILE_EXP1
@Int32.do_left_shift_bytes_WHILE_EXP1 // 20594
0;JMP // 20595

////LabelInstruction{label='Int32.do_left_shift_bytes_WHILE_END1}
// label Int32.do_left_shift_bytes_WHILE_END1
(Int32.do_left_shift_bytes_WHILE_END1)

////PushInstruction("constant 0")
@SP // 20596
AM=M+1 // 20597
A=A-1 // 20598
M=0 // 20599
@RETURN // 20600
0;JMP // 20601

////FunctionInstruction{functionName='Memory.copy', numLocals=1, funcMapping={Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.copy with 1
(Memory.copy)
@SP // 20602
AM=M+1 // 20603
A=A-1 // 20604
M=0 // 20605

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20606
A=M // 20607
M=0 // 20608

////LabelInstruction{label='Memory.copy_WHILE_EXP1}
// label Memory.copy_WHILE_EXP1
(Memory.copy_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("argument 2"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.copy_WHILE_END1}}
@Memory.copy.LT.75 // 20609
D=A // 20610
@SP // 20611
AM=M+1 // 20612
A=A-1 // 20613
M=D // 20614
@LCL // 20615
A=M // 20616
D=M // 20617
@SP // 20618
AM=M+1 // 20619
A=A-1 // 20620
M=D // 20621
@ARG // 20622
A=M+1 // 20623
A=A+1 // 20624
D=M // 20625
@SP // 20626
AM=M-1 // 20627
D=M-D // 20628
@DO_LT // 20629
0;JMP // 20630
(Memory.copy.LT.75)
D=!D // 20631
@Memory.copy_WHILE_END1 // 20632
D;JNE // 20633

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@ARG // 20634
A=M+1 // 20635
D=M // 20636
@SP // 20637
AM=M+1 // 20638
A=A-1 // 20639
M=D // 20640
@LCL // 20641
A=M // 20642
D=M // 20643
@SP // 20644
AM=M-1 // 20645
D=D+M // 20646
@SP // 20647
AM=M+1 // 20648
A=A-1 // 20649
M=D // 20650
@ARG // 20651
A=M // 20652
D=M // 20653
@SP // 20654
AM=M+1 // 20655
A=A-1 // 20656
M=D // 20657
@LCL // 20658
A=M // 20659
D=M // 20660
@SP // 20661
AM=M-1 // 20662
A=D+M // 20663
D=M // 20664
@SP // 20665
AM=M-1 // 20666
A=M // 20667
M=D // 20668

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20669
A=M // 20670
M=M+1 // 20671

////GotoInstruction{label='Memory.copy_WHILE_EXP1}
// goto Memory.copy_WHILE_EXP1
@Memory.copy_WHILE_EXP1 // 20672
0;JMP // 20673

////LabelInstruction{label='Memory.copy_WHILE_END1}
// label Memory.copy_WHILE_END1
(Memory.copy_WHILE_END1)

////PushInstruction("constant 0")
@SP // 20674
AM=M+1 // 20675
A=A-1 // 20676
M=0 // 20677
@RETURN // 20678
0;JMP // 20679

////FunctionInstruction{functionName='Ray.getDirection', numLocals=0, funcMapping={}}
// function Ray.getDirection with 0
(Ray.getDirection)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 20680
A=M // 20681
D=M // 20682
@3 // 20683
M=D // 20684

////PushInstruction("this 1")
@THIS // 20685
A=M+1 // 20686
D=M // 20687
@SP // 20688
AM=M+1 // 20689
A=A-1 // 20690
M=D // 20691
@RETURN // 20692
0;JMP // 20693

////FunctionInstruction{functionName='Int32.arith_rightshift', numLocals=3, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.arith_rightshift with 3
(Int32.arith_rightshift)
@3 // 20694
D=A // 20695
@SP // 20696
AM=D+M // 20697
A=A-1 // 20698
M=0 // 20699
A=A-1 // 20700
M=0 // 20701
A=A-1 // 20702
M=0 // 20703

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE1}}
@Int32.arith_rightshift.EQ.76 // 20704
D=A // 20705
@SP // 20706
AM=M+1 // 20707
A=A-1 // 20708
M=D // 20709
@ARG // 20710
A=M // 20711
D=M // 20712
@DO_EQ // 20713
0;JMP // 20714
(Int32.arith_rightshift.EQ.76)
@Int32.arith_rightshift$IF_TRUE1 // 20715
D;JNE // 20716

////GotoInstruction{label='Int32.arith_rightshift$IF_END1}
// goto Int32.arith_rightshift$IF_END1
@Int32.arith_rightshift$IF_END1 // 20717
0;JMP // 20718

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE1}
// label Int32.arith_rightshift$IF_TRUE1
(Int32.arith_rightshift$IF_TRUE1)

////PushInstruction("constant 0")
@SP // 20719
AM=M+1 // 20720
A=A-1 // 20721
M=0 // 20722
@RETURN // 20723
0;JMP // 20724

////LabelInstruction{label='Int32.arith_rightshift$IF_END1}
// label Int32.arith_rightshift$IF_END1
(Int32.arith_rightshift$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE2}}
@Int32.arith_rightshift.EQ.77 // 20725
D=A // 20726
@SP // 20727
AM=M+1 // 20728
A=A-1 // 20729
M=D // 20730
@ARG // 20731
A=M+1 // 20732
D=M // 20733
@DO_EQ // 20734
0;JMP // 20735
(Int32.arith_rightshift.EQ.77)
@Int32.arith_rightshift$IF_TRUE2 // 20736
D;JNE // 20737

////GotoInstruction{label='Int32.arith_rightshift$IF_END2}
// goto Int32.arith_rightshift$IF_END2
@Int32.arith_rightshift$IF_END2 // 20738
0;JMP // 20739

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE2}
// label Int32.arith_rightshift$IF_TRUE2
(Int32.arith_rightshift$IF_TRUE2)

////PushInstruction("argument 0")
@ARG // 20740
A=M // 20741
D=M // 20742
@SP // 20743
AM=M+1 // 20744
A=A-1 // 20745
M=D // 20746
@RETURN // 20747
0;JMP // 20748

////LabelInstruction{label='Int32.arith_rightshift$IF_END2}
// label Int32.arith_rightshift$IF_END2
(Int32.arith_rightshift$IF_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE3}}
@Int32.arith_rightshift.GT.78 // 20749
D=A // 20750
@SP // 20751
AM=M+1 // 20752
A=A-1 // 20753
M=D // 20754
@ARG // 20755
A=M // 20756
D=M // 20757
@DO_GT // 20758
0;JMP // 20759
(Int32.arith_rightshift.GT.78)
@Int32.arith_rightshift$IF_TRUE3 // 20760
D;JNE // 20761

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE3}
// goto Int32.arith_rightshift$IF_FALSE3
@Int32.arith_rightshift$IF_FALSE3 // 20762
0;JMP // 20763

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE3}
// label Int32.arith_rightshift$IF_TRUE3
(Int32.arith_rightshift$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 1"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 20764
A=M // 20765
D=M // 20766
@SP // 20767
AM=M+1 // 20768
A=A-1 // 20769
M=D // 20770
@Int32.1 // 20771
D=M // 20772
@SP // 20773
AM=M+1 // 20774
A=A-1 // 20775
M=D // 20776
@ARG // 20777
A=M+1 // 20778
D=M // 20779
@SP // 20780
AM=M-1 // 20781
A=D+M // 20782
D=M // 20783
@SP // 20784
AM=M+1 // 20785
A=A-1 // 20786
M=D // 20787
// call Math.divide
@7 // 20788
D=A // 20789
@14 // 20790
M=D // 20791
@Math.divide // 20792
D=A // 20793
@13 // 20794
M=D // 20795
@Int32.arith_rightshift.ret.0 // 20796
D=A // 20797
@CALL // 20798
0;JMP // 20799
(Int32.arith_rightshift.ret.0)
@SP // 20800
AM=M-1 // 20801
D=M // 20802
@LCL // 20803
A=M // 20804
M=D // 20805

////GotoInstruction{label='Int32.arith_rightshift$IF_END3}
// goto Int32.arith_rightshift$IF_END3
@Int32.arith_rightshift$IF_END3 // 20806
0;JMP // 20807

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE3}
// label Int32.arith_rightshift$IF_FALSE3
(Int32.arith_rightshift$IF_FALSE3)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 20808
A=M // 20809
D=M // 20810
@LCL // 20811
A=M // 20812
M=D // 20813

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 20814
A=M+1 // 20815
M=0 // 20816

////LabelInstruction{label='Int32.arith_rightshift_WHILE_EXP1}
// label Int32.arith_rightshift_WHILE_EXP1
(Int32.arith_rightshift_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("argument 1"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift_WHILE_END1}}
@Int32.arith_rightshift.LT.79 // 20817
D=A // 20818
@SP // 20819
AM=M+1 // 20820
A=A-1 // 20821
M=D // 20822
@LCL // 20823
A=M+1 // 20824
D=M // 20825
@SP // 20826
AM=M+1 // 20827
A=A-1 // 20828
M=D // 20829
@ARG // 20830
A=M+1 // 20831
D=M // 20832
@SP // 20833
AM=M-1 // 20834
D=M-D // 20835
@DO_LT // 20836
0;JMP // 20837
(Int32.arith_rightshift.LT.79)
D=!D // 20838
@Int32.arith_rightshift_WHILE_END1 // 20839
D;JNE // 20840

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 20841
A=M // 20842
D=M // 20843
@SP // 20844
AM=M+1 // 20845
A=A-1 // 20846
M=D // 20847
@2 // 20848
D=A // 20849
@SP // 20850
AM=M+1 // 20851
A=A-1 // 20852
M=D // 20853
// call Math.divide
@7 // 20854
D=A // 20855
@14 // 20856
M=D // 20857
@Math.divide // 20858
D=A // 20859
@13 // 20860
M=D // 20861
@Int32.arith_rightshift.ret.1 // 20862
D=A // 20863
@CALL // 20864
0;JMP // 20865
(Int32.arith_rightshift.ret.1)
@SP // 20866
AM=M-1 // 20867
D=M // 20868
@LCL // 20869
A=M+1 // 20870
A=A+1 // 20871
M=D // 20872

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE4}}
@Int32.arith_rightshift.EQ.80 // 20873
D=A // 20874
@SP // 20875
AM=M+1 // 20876
A=A-1 // 20877
M=D // 20878
@LCL // 20879
A=M // 20880
D=M // 20881
@1 // 20882
D=D&A // 20883
@DO_EQ // 20884
0;JMP // 20885
(Int32.arith_rightshift.EQ.80)
@Int32.arith_rightshift$IF_TRUE4 // 20886
D;JNE // 20887

////GotoInstruction{label='Int32.arith_rightshift$IF_FALSE4}
// goto Int32.arith_rightshift$IF_FALSE4
@Int32.arith_rightshift$IF_FALSE4 // 20888
0;JMP // 20889

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE4}
// label Int32.arith_rightshift$IF_TRUE4
(Int32.arith_rightshift$IF_TRUE4)

////PushPopPair {
//  push: PushInstruction("local 2")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20890
A=M+1 // 20891
A=A+1 // 20892
D=M // 20893
@LCL // 20894
A=M // 20895
M=D // 20896

////GotoInstruction{label='Int32.arith_rightshift$IF_END4}
// goto Int32.arith_rightshift$IF_END4
@Int32.arith_rightshift$IF_END4 // 20897
0;JMP // 20898

////LabelInstruction{label='Int32.arith_rightshift$IF_FALSE4}
// label Int32.arith_rightshift$IF_FALSE4
(Int32.arith_rightshift$IF_FALSE4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 20899
A=M+1 // 20900
A=A+1 // 20901
D=M // 20902
D=D-1 // 20903
@LCL // 20904
A=M // 20905
M=D // 20906

////LabelInstruction{label='Int32.arith_rightshift$IF_END4}
// label Int32.arith_rightshift$IF_END4
(Int32.arith_rightshift$IF_END4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        UnaryPushGroup(            PushInstruction("constant 1"),
//NEG),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.arith_rightshift$IF_TRUE5}}
@Int32.arith_rightshift.EQ.81 // 20907
D=A // 20908
@SP // 20909
AM=M+1 // 20910
A=A-1 // 20911
M=D // 20912
@LCL // 20913
A=M // 20914
D=M // 20915
D=D+1 // 20916
@DO_EQ // 20917
0;JMP // 20918
(Int32.arith_rightshift.EQ.81)
@Int32.arith_rightshift$IF_TRUE5 // 20919
D;JNE // 20920

////GotoInstruction{label='Int32.arith_rightshift$IF_END5}
// goto Int32.arith_rightshift$IF_END5
@Int32.arith_rightshift$IF_END5 // 20921
0;JMP // 20922

////LabelInstruction{label='Int32.arith_rightshift$IF_TRUE5}
// label Int32.arith_rightshift$IF_TRUE5
(Int32.arith_rightshift$IF_TRUE5)

////PushInstruction("local 0")
@LCL // 20923
A=M // 20924
D=M // 20925
@SP // 20926
AM=M+1 // 20927
A=A-1 // 20928
M=D // 20929
@RETURN // 20930
0;JMP // 20931

////LabelInstruction{label='Int32.arith_rightshift$IF_END5}
// label Int32.arith_rightshift$IF_END5
(Int32.arith_rightshift$IF_END5)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 20932
A=M+1 // 20933
M=M+1 // 20934

////GotoInstruction{label='Int32.arith_rightshift_WHILE_EXP1}
// goto Int32.arith_rightshift_WHILE_EXP1
@Int32.arith_rightshift_WHILE_EXP1 // 20935
0;JMP // 20936

////LabelInstruction{label='Int32.arith_rightshift_WHILE_END1}
// label Int32.arith_rightshift_WHILE_END1
(Int32.arith_rightshift_WHILE_END1)

////LabelInstruction{label='Int32.arith_rightshift$IF_END3}
// label Int32.arith_rightshift$IF_END3
(Int32.arith_rightshift$IF_END3)

////PushInstruction("local 0")
@LCL // 20937
A=M // 20938
D=M // 20939
@SP // 20940
AM=M+1 // 20941
A=A-1 // 20942
M=D // 20943
@RETURN // 20944
0;JMP // 20945

////FunctionInstruction{functionName='Main.main', numLocals=9, funcMapping={Main.render=64, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.getFourFifths=4}}
// function Main.main with 9
(Main.main)
@9 // 20946
D=A // 20947
@SP // 20948
AM=D+M // 20949
A=A-1 // 20950
M=0 // 20951
A=A-1 // 20952
M=0 // 20953
A=A-1 // 20954
M=0 // 20955
A=A-1 // 20956
M=0 // 20957
A=A-1 // 20958
M=0 // 20959
A=A-1 // 20960
M=0 // 20961
A=A-1 // 20962
M=0 // 20963
A=A-1 // 20964
M=0 // 20965
A=A-1 // 20966
M=0 // 20967

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Int32.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Int32.initialize
@5 // 20968
D=A // 20969
@14 // 20970
M=D // 20971
@Int32.initialize // 20972
D=A // 20973
@13 // 20974
M=D // 20975
@Main.main.ret.0 // 20976
D=A // 20977
@CALL // 20978
0;JMP // 20979
(Main.main.ret.0)
@SP // 20980
M=M-1 // 20981

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Number.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Number.initialize
@5 // 20982
D=A // 20983
@14 // 20984
M=D // 20985
@Number.initialize // 20986
D=A // 20987
@13 // 20988
M=D // 20989
@Main.main.ret.1 // 20990
D=A // 20991
@CALL // 20992
0;JMP // 20993
(Main.main.ret.1)
@SP // 20994
M=M-1 // 20995

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Plane.initialize}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Plane.initialize
@5 // 20996
D=A // 20997
@14 // 20998
M=D // 20999
@Plane.initialize // 21000
D=A // 21001
@13 // 21002
M=D // 21003
@Main.main.ret.2 // 21004
D=A // 21005
@CALL // 21006
0;JMP // 21007
(Main.main.ret.2)
@SP // 21008
M=M-1 // 21009

////PushPopPair {
//  push: PushInstruction("constant 5")
//  pop:  PopInstruction{address=local 1}
//}

@5 // 21010
D=A // 21011
@LCL // 21012
A=M+1 // 21013
M=D // 21014

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 21015
A=M+1 // 21016
D=M // 21017
@SP // 21018
AM=M+1 // 21019
A=A-1 // 21020
M=D // 21021
// call Memory.alloc
@6 // 21022
D=A // 21023
@14 // 21024
M=D // 21025
@Memory.alloc // 21026
D=A // 21027
@13 // 21028
M=D // 21029
@Main.main.ret.3 // 21030
D=A // 21031
@CALL // 21032
0;JMP // 21033
(Main.main.ret.3)
@SP // 21034
AM=M-1 // 21035
D=M // 21036
@LCL // 21037
A=M+1 // 21038
A=A+1 // 21039
M=D // 21040

////PushPopPair {
//  push: PushInstruction("constant 3")
//  pop:  PopInstruction{address=local 3}
//}

@3 // 21041
D=A // 21042
@LCL // 21043
A=M+1 // 21044
A=A+1 // 21045
A=A+1 // 21046
M=D // 21047

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 21048
A=M+1 // 21049
A=A+1 // 21050
A=A+1 // 21051
D=M // 21052
@SP // 21053
AM=M+1 // 21054
A=A-1 // 21055
M=D // 21056
// call Memory.alloc
@6 // 21057
D=A // 21058
@14 // 21059
M=D // 21060
@Memory.alloc // 21061
D=A // 21062
@13 // 21063
M=D // 21064
@Main.main.ret.4 // 21065
D=A // 21066
@CALL // 21067
0;JMP // 21068
(Main.main.ret.4)
@LCL // 21069
D=M // 21070
@4 // 21071
A=D+A // 21072
D=A // 21073
@R13 // 21074
M=D // 21075
@SP // 21076
AM=M-1 // 21077
D=M // 21078
@R13 // 21079
A=M // 21080
M=D // 21081

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 6"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getNegativeOneHalf}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 5"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getThreeHalves}}, CallGroup{pushes=[], call=CallInstruction{Main.getFourFifths}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 21082
A=M+1 // 21083
A=A+1 // 21084
D=M // 21085
@SP // 21086
AM=M+1 // 21087
A=A-1 // 21088
M=D // 21089
@6 // 21090
D=-A // 21091
@SP // 21092
AM=M+1 // 21093
A=A-1 // 21094
M=D // 21095
// call Number.new
@6 // 21096
D=A // 21097
@14 // 21098
M=D // 21099
@Number.new // 21100
D=A // 21101
@13 // 21102
M=D // 21103
@Main.main.ret.5 // 21104
D=A // 21105
@CALL // 21106
0;JMP // 21107
(Main.main.ret.5)
// call Main.getNegativeOneHalf
@5 // 21108
D=A // 21109
@14 // 21110
M=D // 21111
@Main.getNegativeOneHalf // 21112
D=A // 21113
@13 // 21114
M=D // 21115
@Main.main.ret.6 // 21116
D=A // 21117
@CALL // 21118
0;JMP // 21119
(Main.main.ret.6)
@5 // 21120
D=-A // 21121
@SP // 21122
AM=M+1 // 21123
A=A-1 // 21124
M=D // 21125
// call Number.new
@6 // 21126
D=A // 21127
@14 // 21128
M=D // 21129
@Number.new // 21130
D=A // 21131
@13 // 21132
M=D // 21133
@Main.main.ret.7 // 21134
D=A // 21135
@CALL // 21136
0;JMP // 21137
(Main.main.ret.7)
// call Vec3.new
@8 // 21138
D=A // 21139
@14 // 21140
M=D // 21141
@Vec3.new // 21142
D=A // 21143
@13 // 21144
M=D // 21145
@Main.main.ret.8 // 21146
D=A // 21147
@CALL // 21148
0;JMP // 21149
(Main.main.ret.8)
// call Main.getThreeHalves
@5 // 21150
D=A // 21151
@14 // 21152
M=D // 21153
@Main.getThreeHalves // 21154
D=A // 21155
@13 // 21156
M=D // 21157
@Main.main.ret.9 // 21158
D=A // 21159
@CALL // 21160
0;JMP // 21161
(Main.main.ret.9)
// call Main.getFourFifths
@5 // 21162
D=A // 21163
@14 // 21164
M=D // 21165
@Main.getFourFifths // 21166
D=A // 21167
@13 // 21168
M=D // 21169
@Main.main.ret.10 // 21170
D=A // 21171
@CALL // 21172
0;JMP // 21173
(Main.main.ret.10)
// call Sphere.new
@8 // 21174
D=A // 21175
@14 // 21176
M=D // 21177
@Sphere.new // 21178
D=A // 21179
@13 // 21180
M=D // 21181
@Main.main.ret.11 // 21182
D=A // 21183
@CALL // 21184
0;JMP // 21185
(Main.main.ret.11)
// call Element.sphere
@6 // 21186
D=A // 21187
@14 // 21188
M=D // 21189
@Element.sphere // 21190
D=A // 21191
@13 // 21192
M=D // 21193
@Main.main.ret.12 // 21194
D=A // 21195
@CALL // 21196
0;JMP // 21197
(Main.main.ret.12)
@SP // 21198
AM=M-1 // 21199
D=M // 21200
@SP // 21201
AM=M-1 // 21202
A=M // 21203
M=D // 21204

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 5"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, CallGroup{pushes=[], call=CallInstruction{Main.getThreeFifths}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 21205
A=M+1 // 21206
A=A+1 // 21207
D=M // 21208
@SP // 21209
AM=M+1 // 21210
A=A-1 // 21211
M=D+1 // 21212
@SP // 21213
AM=M+1 // 21214
A=A-1 // 21215
M=-1 // 21216
// call Number.new
@6 // 21217
D=A // 21218
@14 // 21219
M=D // 21220
@Number.new // 21221
D=A // 21222
@13 // 21223
M=D // 21224
@Main.main.ret.13 // 21225
D=A // 21226
@CALL // 21227
0;JMP // 21228
(Main.main.ret.13)
@SP // 21229
AM=M+1 // 21230
A=A-1 // 21231
M=-1 // 21232
// call Number.new
@6 // 21233
D=A // 21234
@14 // 21235
M=D // 21236
@Number.new // 21237
D=A // 21238
@13 // 21239
M=D // 21240
@Main.main.ret.14 // 21241
D=A // 21242
@CALL // 21243
0;JMP // 21244
(Main.main.ret.14)
@5 // 21245
D=-A // 21246
@SP // 21247
AM=M+1 // 21248
A=A-1 // 21249
M=D // 21250
// call Number.new
@6 // 21251
D=A // 21252
@14 // 21253
M=D // 21254
@Number.new // 21255
D=A // 21256
@13 // 21257
M=D // 21258
@Main.main.ret.15 // 21259
D=A // 21260
@CALL // 21261
0;JMP // 21262
(Main.main.ret.15)
// call Vec3.new
@8 // 21263
D=A // 21264
@14 // 21265
M=D // 21266
@Vec3.new // 21267
D=A // 21268
@13 // 21269
M=D // 21270
@Main.main.ret.16 // 21271
D=A // 21272
@CALL // 21273
0;JMP // 21274
(Main.main.ret.16)
@SP // 21275
AM=M+1 // 21276
A=A-1 // 21277
M=1 // 21278
// call Number.new
@6 // 21279
D=A // 21280
@14 // 21281
M=D // 21282
@Number.new // 21283
D=A // 21284
@13 // 21285
M=D // 21286
@Main.main.ret.17 // 21287
D=A // 21288
@CALL // 21289
0;JMP // 21290
(Main.main.ret.17)
// call Main.getThreeFifths
@5 // 21291
D=A // 21292
@14 // 21293
M=D // 21294
@Main.getThreeFifths // 21295
D=A // 21296
@13 // 21297
M=D // 21298
@Main.main.ret.18 // 21299
D=A // 21300
@CALL // 21301
0;JMP // 21302
(Main.main.ret.18)
// call Sphere.new
@8 // 21303
D=A // 21304
@14 // 21305
M=D // 21306
@Sphere.new // 21307
D=A // 21308
@13 // 21309
M=D // 21310
@Main.main.ret.19 // 21311
D=A // 21312
@CALL // 21313
0;JMP // 21314
(Main.main.ret.19)
// call Element.sphere
@6 // 21315
D=A // 21316
@14 // 21317
M=D // 21318
@Element.sphere // 21319
D=A // 21320
@13 // 21321
M=D // 21322
@Main.main.ret.20 // 21323
D=A // 21324
@CALL // 21325
0;JMP // 21326
(Main.main.ret.20)
@SP // 21327
AM=M-1 // 21328
D=M // 21329
@SP // 21330
AM=M-1 // 21331
A=M // 21332
M=D // 21333

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 3"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}], call=CallInstruction{Sphere.new}}], call=CallInstruction{Element.sphere}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 21334
A=M+1 // 21335
A=A+1 // 21336
D=M // 21337
@2 // 21338
D=D+A // 21339
@SP // 21340
AM=M+1 // 21341
A=A-1 // 21342
M=D // 21343
@2 // 21344
D=A // 21345
@SP // 21346
AM=M+1 // 21347
A=A-1 // 21348
M=D // 21349
// call Number.new
@6 // 21350
D=A // 21351
@14 // 21352
M=D // 21353
@Number.new // 21354
D=A // 21355
@13 // 21356
M=D // 21357
@Main.main.ret.21 // 21358
D=A // 21359
@CALL // 21360
0;JMP // 21361
(Main.main.ret.21)
@SP // 21362
AM=M+1 // 21363
A=A-1 // 21364
M=0 // 21365
// call Number.new
@6 // 21366
D=A // 21367
@14 // 21368
M=D // 21369
@Number.new // 21370
D=A // 21371
@13 // 21372
M=D // 21373
@Main.main.ret.22 // 21374
D=A // 21375
@CALL // 21376
0;JMP // 21377
(Main.main.ret.22)
@3 // 21378
D=-A // 21379
@SP // 21380
AM=M+1 // 21381
A=A-1 // 21382
M=D // 21383
// call Number.new
@6 // 21384
D=A // 21385
@14 // 21386
M=D // 21387
@Number.new // 21388
D=A // 21389
@13 // 21390
M=D // 21391
@Main.main.ret.23 // 21392
D=A // 21393
@CALL // 21394
0;JMP // 21395
(Main.main.ret.23)
// call Vec3.new
@8 // 21396
D=A // 21397
@14 // 21398
M=D // 21399
@Vec3.new // 21400
D=A // 21401
@13 // 21402
M=D // 21403
@Main.main.ret.24 // 21404
D=A // 21405
@CALL // 21406
0;JMP // 21407
(Main.main.ret.24)
@2 // 21408
D=A // 21409
@SP // 21410
AM=M+1 // 21411
A=A-1 // 21412
M=D // 21413
// call Number.new
@6 // 21414
D=A // 21415
@14 // 21416
M=D // 21417
@Number.new // 21418
D=A // 21419
@13 // 21420
M=D // 21421
@Main.main.ret.25 // 21422
D=A // 21423
@CALL // 21424
0;JMP // 21425
(Main.main.ret.25)
@SP // 21426
AM=M+1 // 21427
A=A-1 // 21428
M=1 // 21429
// call Number.new
@6 // 21430
D=A // 21431
@14 // 21432
M=D // 21433
@Number.new // 21434
D=A // 21435
@13 // 21436
M=D // 21437
@Main.main.ret.26 // 21438
D=A // 21439
@CALL // 21440
0;JMP // 21441
(Main.main.ret.26)
// call Sphere.new
@8 // 21442
D=A // 21443
@14 // 21444
M=D // 21445
@Sphere.new // 21446
D=A // 21447
@13 // 21448
M=D // 21449
@Main.main.ret.27 // 21450
D=A // 21451
@CALL // 21452
0;JMP // 21453
(Main.main.ret.27)
// call Element.sphere
@6 // 21454
D=A // 21455
@14 // 21456
M=D // 21457
@Element.sphere // 21458
D=A // 21459
@13 // 21460
M=D // 21461
@Main.main.ret.28 // 21462
D=A // 21463
@CALL // 21464
0;JMP // 21465
(Main.main.ret.28)
@SP // 21466
AM=M-1 // 21467
D=M // 21468
@SP // 21469
AM=M-1 // 21470
A=M // 21471
M=D // 21472

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 25"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}, PushInstruction("constant 0")], call=CallInstruction{Plane.new}}], call=CallInstruction{Element.plane}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 21473
A=M+1 // 21474
A=A+1 // 21475
D=M // 21476
@3 // 21477
D=D+A // 21478
@SP // 21479
AM=M+1 // 21480
A=A-1 // 21481
M=D // 21482
@SP // 21483
AM=M+1 // 21484
A=A-1 // 21485
M=0 // 21486
// call Number.new
@6 // 21487
D=A // 21488
@14 // 21489
M=D // 21490
@Number.new // 21491
D=A // 21492
@13 // 21493
M=D // 21494
@Main.main.ret.29 // 21495
D=A // 21496
@CALL // 21497
0;JMP // 21498
(Main.main.ret.29)
@SP // 21499
AM=M+1 // 21500
A=A-1 // 21501
M=0 // 21502
// call Number.new
@6 // 21503
D=A // 21504
@14 // 21505
M=D // 21506
@Number.new // 21507
D=A // 21508
@13 // 21509
M=D // 21510
@Main.main.ret.30 // 21511
D=A // 21512
@CALL // 21513
0;JMP // 21514
(Main.main.ret.30)
@25 // 21515
D=-A // 21516
@SP // 21517
AM=M+1 // 21518
A=A-1 // 21519
M=D // 21520
// call Number.new
@6 // 21521
D=A // 21522
@14 // 21523
M=D // 21524
@Number.new // 21525
D=A // 21526
@13 // 21527
M=D // 21528
@Main.main.ret.31 // 21529
D=A // 21530
@CALL // 21531
0;JMP // 21532
(Main.main.ret.31)
// call Vec3.new
@8 // 21533
D=A // 21534
@14 // 21535
M=D // 21536
@Vec3.new // 21537
D=A // 21538
@13 // 21539
M=D // 21540
@Main.main.ret.32 // 21541
D=A // 21542
@CALL // 21543
0;JMP // 21544
(Main.main.ret.32)
@SP // 21545
AM=M+1 // 21546
A=A-1 // 21547
M=0 // 21548
// call Number.new
@6 // 21549
D=A // 21550
@14 // 21551
M=D // 21552
@Number.new // 21553
D=A // 21554
@13 // 21555
M=D // 21556
@Main.main.ret.33 // 21557
D=A // 21558
@CALL // 21559
0;JMP // 21560
(Main.main.ret.33)
@SP // 21561
AM=M+1 // 21562
A=A-1 // 21563
M=0 // 21564
// call Number.new
@6 // 21565
D=A // 21566
@14 // 21567
M=D // 21568
@Number.new // 21569
D=A // 21570
@13 // 21571
M=D // 21572
@Main.main.ret.34 // 21573
D=A // 21574
@CALL // 21575
0;JMP // 21576
(Main.main.ret.34)
@SP // 21577
AM=M+1 // 21578
A=A-1 // 21579
M=-1 // 21580
// call Number.new
@6 // 21581
D=A // 21582
@14 // 21583
M=D // 21584
@Number.new // 21585
D=A // 21586
@13 // 21587
M=D // 21588
@Main.main.ret.35 // 21589
D=A // 21590
@CALL // 21591
0;JMP // 21592
(Main.main.ret.35)
// call Vec3.new
@8 // 21593
D=A // 21594
@14 // 21595
M=D // 21596
@Vec3.new // 21597
D=A // 21598
@13 // 21599
M=D // 21600
@Main.main.ret.36 // 21601
D=A // 21602
@CALL // 21603
0;JMP // 21604
(Main.main.ret.36)
@SP // 21605
AM=M+1 // 21606
A=A-1 // 21607
M=1 // 21608
// call Number.new
@6 // 21609
D=A // 21610
@14 // 21611
M=D // 21612
@Number.new // 21613
D=A // 21614
@13 // 21615
M=D // 21616
@Main.main.ret.37 // 21617
D=A // 21618
@CALL // 21619
0;JMP // 21620
(Main.main.ret.37)
@SP // 21621
AM=M+1 // 21622
A=A-1 // 21623
M=0 // 21624
// call Plane.new
@9 // 21625
D=A // 21626
@14 // 21627
M=D // 21628
@Plane.new // 21629
D=A // 21630
@13 // 21631
M=D // 21632
@Main.main.ret.38 // 21633
D=A // 21634
@CALL // 21635
0;JMP // 21636
(Main.main.ret.38)
// call Element.plane
@6 // 21637
D=A // 21638
@14 // 21639
M=D // 21640
@Element.plane // 21641
D=A // 21642
@13 // 21643
M=D // 21644
@Main.main.ret.39 // 21645
D=A // 21646
@CALL // 21647
0;JMP // 21648
(Main.main.ret.39)
@SP // 21649
AM=M-1 // 21650
D=M // 21651
@SP // 21652
AM=M-1 // 21653
A=M // 21654
M=D // 21655

////PushWriter{source=CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 2"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, UnaryPushGroup(    PushInstruction("constant 0"),
//NOT)], call=CallInstruction{Plane.new}}], call=CallInstruction{Element.plane}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)}
@LCL // 21656
A=M+1 // 21657
A=A+1 // 21658
D=M // 21659
@4 // 21660
D=D+A // 21661
@SP // 21662
AM=M+1 // 21663
A=A-1 // 21664
M=D // 21665
@SP // 21666
AM=M+1 // 21667
A=A-1 // 21668
M=0 // 21669
// call Number.new
@6 // 21670
D=A // 21671
@14 // 21672
M=D // 21673
@Number.new // 21674
D=A // 21675
@13 // 21676
M=D // 21677
@Main.main.ret.40 // 21678
D=A // 21679
@CALL // 21680
0;JMP // 21681
(Main.main.ret.40)
@2 // 21682
D=-A // 21683
@SP // 21684
AM=M+1 // 21685
A=A-1 // 21686
M=D // 21687
// call Number.new
@6 // 21688
D=A // 21689
@14 // 21690
M=D // 21691
@Number.new // 21692
D=A // 21693
@13 // 21694
M=D // 21695
@Main.main.ret.41 // 21696
D=A // 21697
@CALL // 21698
0;JMP // 21699
(Main.main.ret.41)
@SP // 21700
AM=M+1 // 21701
A=A-1 // 21702
M=0 // 21703
// call Number.new
@6 // 21704
D=A // 21705
@14 // 21706
M=D // 21707
@Number.new // 21708
D=A // 21709
@13 // 21710
M=D // 21711
@Main.main.ret.42 // 21712
D=A // 21713
@CALL // 21714
0;JMP // 21715
(Main.main.ret.42)
// call Vec3.new
@8 // 21716
D=A // 21717
@14 // 21718
M=D // 21719
@Vec3.new // 21720
D=A // 21721
@13 // 21722
M=D // 21723
@Main.main.ret.43 // 21724
D=A // 21725
@CALL // 21726
0;JMP // 21727
(Main.main.ret.43)
@SP // 21728
AM=M+1 // 21729
A=A-1 // 21730
M=0 // 21731
// call Number.new
@6 // 21732
D=A // 21733
@14 // 21734
M=D // 21735
@Number.new // 21736
D=A // 21737
@13 // 21738
M=D // 21739
@Main.main.ret.44 // 21740
D=A // 21741
@CALL // 21742
0;JMP // 21743
(Main.main.ret.44)
@SP // 21744
AM=M+1 // 21745
A=A-1 // 21746
M=-1 // 21747
// call Number.new
@6 // 21748
D=A // 21749
@14 // 21750
M=D // 21751
@Number.new // 21752
D=A // 21753
@13 // 21754
M=D // 21755
@Main.main.ret.45 // 21756
D=A // 21757
@CALL // 21758
0;JMP // 21759
(Main.main.ret.45)
@SP // 21760
AM=M+1 // 21761
A=A-1 // 21762
M=0 // 21763
// call Number.new
@6 // 21764
D=A // 21765
@14 // 21766
M=D // 21767
@Number.new // 21768
D=A // 21769
@13 // 21770
M=D // 21771
@Main.main.ret.46 // 21772
D=A // 21773
@CALL // 21774
0;JMP // 21775
(Main.main.ret.46)
// call Vec3.new
@8 // 21776
D=A // 21777
@14 // 21778
M=D // 21779
@Vec3.new // 21780
D=A // 21781
@13 // 21782
M=D // 21783
@Main.main.ret.47 // 21784
D=A // 21785
@CALL // 21786
0;JMP // 21787
(Main.main.ret.47)
@SP // 21788
AM=M+1 // 21789
A=A-1 // 21790
M=-1 // 21791
// call Number.new
@6 // 21792
D=A // 21793
@14 // 21794
M=D // 21795
@Number.new // 21796
D=A // 21797
@13 // 21798
M=D // 21799
@Main.main.ret.48 // 21800
D=A // 21801
@CALL // 21802
0;JMP // 21803
(Main.main.ret.48)
@SP // 21804
AM=M+1 // 21805
A=A-1 // 21806
M=-1 // 21807
// call Plane.new
@9 // 21808
D=A // 21809
@14 // 21810
M=D // 21811
@Plane.new // 21812
D=A // 21813
@13 // 21814
M=D // 21815
@Main.main.ret.49 // 21816
D=A // 21817
@CALL // 21818
0;JMP // 21819
(Main.main.ret.49)
// call Element.plane
@6 // 21820
D=A // 21821
@14 // 21822
M=D // 21823
@Element.plane // 21824
D=A // 21825
@13 // 21826
M=D // 21827
@Main.main.ret.50 // 21828
D=A // 21829
@CALL // 21830
0;JMP // 21831
(Main.main.ret.50)
@SP // 21832
AM=M-1 // 21833
D=M // 21834
@SP // 21835
AM=M-1 // 21836
A=M // 21837
M=D // 21838

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 5}
//}

@SP // 21839
AM=M+1 // 21840
A=A-1 // 21841
M=0 // 21842
// call Number.new
@6 // 21843
D=A // 21844
@14 // 21845
M=D // 21846
@Number.new // 21847
D=A // 21848
@13 // 21849
M=D // 21850
@Main.main.ret.51 // 21851
D=A // 21852
@CALL // 21853
0;JMP // 21854
(Main.main.ret.51)
@SP // 21855
AM=M+1 // 21856
A=A-1 // 21857
M=-1 // 21858
// call Number.new
@6 // 21859
D=A // 21860
@14 // 21861
M=D // 21862
@Number.new // 21863
D=A // 21864
@13 // 21865
M=D // 21866
@Main.main.ret.52 // 21867
D=A // 21868
@CALL // 21869
0;JMP // 21870
(Main.main.ret.52)
@SP // 21871
AM=M+1 // 21872
A=A-1 // 21873
M=-1 // 21874
// call Number.new
@6 // 21875
D=A // 21876
@14 // 21877
M=D // 21878
@Number.new // 21879
D=A // 21880
@13 // 21881
M=D // 21882
@Main.main.ret.53 // 21883
D=A // 21884
@CALL // 21885
0;JMP // 21886
(Main.main.ret.53)
// call Vec3.new
@8 // 21887
D=A // 21888
@14 // 21889
M=D // 21890
@Vec3.new // 21891
D=A // 21892
@13 // 21893
M=D // 21894
@Main.main.ret.54 // 21895
D=A // 21896
@CALL // 21897
0;JMP // 21898
(Main.main.ret.54)
@LCL // 21899
D=M // 21900
@5 // 21901
A=D+A // 21902
D=A // 21903
@R13 // 21904
M=D // 21905
@SP // 21906
AM=M-1 // 21907
D=M // 21908
@R13 // 21909
A=M // 21910
M=D // 21911

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 21912
D=M // 21913
@5 // 21914
A=D+A // 21915
D=M // 21916
@SP // 21917
AM=M+1 // 21918
A=A-1 // 21919
M=D // 21920
// call Vec3.do_normalize
@6 // 21921
D=A // 21922
@14 // 21923
M=D // 21924
@Vec3.do_normalize // 21925
D=A // 21926
@13 // 21927
M=D // 21928
@Main.main.ret.55 // 21929
D=A // 21930
@CALL // 21931
0;JMP // 21932
(Main.main.ret.55)
@SP // 21933
M=M-1 // 21934

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 6}
//}

@SP // 21935
AM=M+1 // 21936
A=A-1 // 21937
M=-1 // 21938
// call Number.new
@6 // 21939
D=A // 21940
@14 // 21941
M=D // 21942
@Number.new // 21943
D=A // 21944
@13 // 21945
M=D // 21946
@Main.main.ret.56 // 21947
D=A // 21948
@CALL // 21949
0;JMP // 21950
(Main.main.ret.56)
@SP // 21951
AM=M+1 // 21952
A=A-1 // 21953
M=-1 // 21954
// call Number.new
@6 // 21955
D=A // 21956
@14 // 21957
M=D // 21958
@Number.new // 21959
D=A // 21960
@13 // 21961
M=D // 21962
@Main.main.ret.57 // 21963
D=A // 21964
@CALL // 21965
0;JMP // 21966
(Main.main.ret.57)
@SP // 21967
AM=M+1 // 21968
A=A-1 // 21969
M=0 // 21970
// call Number.new
@6 // 21971
D=A // 21972
@14 // 21973
M=D // 21974
@Number.new // 21975
D=A // 21976
@13 // 21977
M=D // 21978
@Main.main.ret.58 // 21979
D=A // 21980
@CALL // 21981
0;JMP // 21982
(Main.main.ret.58)
// call Vec3.new
@8 // 21983
D=A // 21984
@14 // 21985
M=D // 21986
@Vec3.new // 21987
D=A // 21988
@13 // 21989
M=D // 21990
@Main.main.ret.59 // 21991
D=A // 21992
@CALL // 21993
0;JMP // 21994
(Main.main.ret.59)
@LCL // 21995
D=M // 21996
@6 // 21997
A=D+A // 21998
D=A // 21999
@R13 // 22000
M=D // 22001
@SP // 22002
AM=M-1 // 22003
D=M // 22004
@R13 // 22005
A=M // 22006
M=D // 22007

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22008
D=M // 22009
@6 // 22010
A=D+A // 22011
D=M // 22012
@SP // 22013
AM=M+1 // 22014
A=A-1 // 22015
M=D // 22016
// call Vec3.do_normalize
@6 // 22017
D=A // 22018
@14 // 22019
M=D // 22020
@Vec3.do_normalize // 22021
D=A // 22022
@13 // 22023
M=D // 22024
@Main.main.ret.60 // 22025
D=A // 22026
@CALL // 22027
0;JMP // 22028
(Main.main.ret.60)
@SP // 22029
M=M-1 // 22030

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[], call=CallInstruction{Main.getOneHalf}}, CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 7}
//}

// call Main.getOneHalf
@5 // 22031
D=A // 22032
@14 // 22033
M=D // 22034
@Main.getOneHalf // 22035
D=A // 22036
@13 // 22037
M=D // 22038
@Main.main.ret.61 // 22039
D=A // 22040
@CALL // 22041
0;JMP // 22042
(Main.main.ret.61)
@SP // 22043
AM=M+1 // 22044
A=A-1 // 22045
M=-1 // 22046
// call Number.new
@6 // 22047
D=A // 22048
@14 // 22049
M=D // 22050
@Number.new // 22051
D=A // 22052
@13 // 22053
M=D // 22054
@Main.main.ret.62 // 22055
D=A // 22056
@CALL // 22057
0;JMP // 22058
(Main.main.ret.62)
@SP // 22059
AM=M+1 // 22060
A=A-1 // 22061
M=0 // 22062
// call Number.new
@6 // 22063
D=A // 22064
@14 // 22065
M=D // 22066
@Number.new // 22067
D=A // 22068
@13 // 22069
M=D // 22070
@Main.main.ret.63 // 22071
D=A // 22072
@CALL // 22073
0;JMP // 22074
(Main.main.ret.63)
// call Vec3.new
@8 // 22075
D=A // 22076
@14 // 22077
M=D // 22078
@Vec3.new // 22079
D=A // 22080
@13 // 22081
M=D // 22082
@Main.main.ret.64 // 22083
D=A // 22084
@CALL // 22085
0;JMP // 22086
(Main.main.ret.64)
@LCL // 22087
D=M // 22088
@7 // 22089
A=D+A // 22090
D=A // 22091
@R13 // 22092
M=D // 22093
@SP // 22094
AM=M-1 // 22095
D=M // 22096
@R13 // 22097
A=M // 22098
M=D // 22099

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22100
D=M // 22101
@7 // 22102
A=D+A // 22103
D=M // 22104
@SP // 22105
AM=M+1 // 22106
A=A-1 // 22107
M=D // 22108
// call Vec3.do_normalize
@6 // 22109
D=A // 22110
@14 // 22111
M=D // 22112
@Vec3.do_normalize // 22113
D=A // 22114
@13 // 22115
M=D // 22116
@Main.main.ret.65 // 22117
D=A // 22118
@CALL // 22119
0;JMP // 22120
(Main.main.ret.65)
@SP // 22121
M=M-1 // 22122

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[], call=CallInstruction{Main.getOneFiftieth}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 22123
D=M // 22124
@4 // 22125
A=D+A // 22126
D=M // 22127
@SP // 22128
AM=M+1 // 22129
A=A-1 // 22130
M=D // 22131
@LCL // 22132
D=M // 22133
@5 // 22134
A=D+A // 22135
D=M // 22136
@SP // 22137
AM=M+1 // 22138
A=A-1 // 22139
M=D // 22140
// call Main.getOneFiftieth
@5 // 22141
D=A // 22142
@14 // 22143
M=D // 22144
@Main.getOneFiftieth // 22145
D=A // 22146
@13 // 22147
M=D // 22148
@Main.main.ret.66 // 22149
D=A // 22150
@CALL // 22151
0;JMP // 22152
(Main.main.ret.66)
// call DirectionalLight.new
@7 // 22153
D=A // 22154
@14 // 22155
M=D // 22156
@DirectionalLight.new // 22157
D=A // 22158
@13 // 22159
M=D // 22160
@Main.main.ret.67 // 22161
D=A // 22162
@CALL // 22163
0;JMP // 22164
(Main.main.ret.67)
@SP // 22165
AM=M-1 // 22166
D=M // 22167
@SP // 22168
AM=M-1 // 22169
A=M // 22170
M=D // 22171

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[], call=CallInstruction{Main.getNineTenths}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 22172
D=M // 22173
@4 // 22174
A=D+A // 22175
D=M // 22176
@SP // 22177
AM=M+1 // 22178
A=A-1 // 22179
M=D+1 // 22180
@LCL // 22181
D=M // 22182
@6 // 22183
A=D+A // 22184
D=M // 22185
@SP // 22186
AM=M+1 // 22187
A=A-1 // 22188
M=D // 22189
// call Main.getNineTenths
@5 // 22190
D=A // 22191
@14 // 22192
M=D // 22193
@Main.getNineTenths // 22194
D=A // 22195
@13 // 22196
M=D // 22197
@Main.main.ret.68 // 22198
D=A // 22199
@CALL // 22200
0;JMP // 22201
(Main.main.ret.68)
// call DirectionalLight.new
@7 // 22202
D=A // 22203
@14 // 22204
M=D // 22205
@DirectionalLight.new // 22206
D=A // 22207
@13 // 22208
M=D // 22209
@Main.main.ret.69 // 22210
D=A // 22211
@CALL // 22212
0;JMP // 22213
(Main.main.ret.69)
@SP // 22214
AM=M-1 // 22215
D=M // 22216
@SP // 22217
AM=M-1 // 22218
A=M // 22219
M=D // 22220

////PushWriter{source=CallGroup{pushes=[PushInstruction("local 7"), CallGroup{pushes=[], call=CallInstruction{Main.getThreeTenths}}], call=CallInstruction{DirectionalLight.new}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 22221
D=M // 22222
@4 // 22223
A=D+A // 22224
D=M // 22225
@2 // 22226
D=D+A // 22227
@SP // 22228
AM=M+1 // 22229
A=A-1 // 22230
M=D // 22231
@LCL // 22232
D=M // 22233
@7 // 22234
A=D+A // 22235
D=M // 22236
@SP // 22237
AM=M+1 // 22238
A=A-1 // 22239
M=D // 22240
// call Main.getThreeTenths
@5 // 22241
D=A // 22242
@14 // 22243
M=D // 22244
@Main.getThreeTenths // 22245
D=A // 22246
@13 // 22247
M=D // 22248
@Main.main.ret.70 // 22249
D=A // 22250
@CALL // 22251
0;JMP // 22252
(Main.main.ret.70)
// call DirectionalLight.new
@7 // 22253
D=A // 22254
@14 // 22255
M=D // 22256
@DirectionalLight.new // 22257
D=A // 22258
@13 // 22259
M=D // 22260
@Main.main.ret.71 // 22261
D=A // 22262
@CALL // 22263
0;JMP // 22264
(Main.main.ret.71)
@SP // 22265
AM=M-1 // 22266
D=M // 22267
@SP // 22268
AM=M-1 // 22269
A=M // 22270
M=D // 22271

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 512"), PushInstruction("constant 256"), PushInstruction("local 2"), PushInstruction("local 1"), PushInstruction("local 4"), PushInstruction("local 3")], call=CallInstruction{Scene.new}}
//  pop:  PopInstruction{address=local 0}
//}

@512 // 22272
D=A // 22273
@SP // 22274
AM=M+1 // 22275
A=A-1 // 22276
M=D // 22277
@256 // 22278
D=A // 22279
@SP // 22280
AM=M+1 // 22281
A=A-1 // 22282
M=D // 22283
@LCL // 22284
A=M+1 // 22285
A=A+1 // 22286
D=M // 22287
@SP // 22288
AM=M+1 // 22289
A=A-1 // 22290
M=D // 22291
@LCL // 22292
A=M+1 // 22293
D=M // 22294
@SP // 22295
AM=M+1 // 22296
A=A-1 // 22297
M=D // 22298
@LCL // 22299
D=M // 22300
@4 // 22301
A=D+A // 22302
D=M // 22303
@SP // 22304
AM=M+1 // 22305
A=A-1 // 22306
M=D // 22307
@LCL // 22308
A=M+1 // 22309
A=A+1 // 22310
A=A+1 // 22311
D=M // 22312
@SP // 22313
AM=M+1 // 22314
A=A-1 // 22315
M=D // 22316
// call Scene.new
@11 // 22317
D=A // 22318
@14 // 22319
M=D // 22320
@Scene.new // 22321
D=A // 22322
@13 // 22323
M=D // 22324
@Main.main.ret.72 // 22325
D=A // 22326
@CALL // 22327
0;JMP // 22328
(Main.main.ret.72)
@SP // 22329
AM=M-1 // 22330
D=M // 22331
@LCL // 22332
A=M // 22333
M=D // 22334

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Main.render}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22335
A=M // 22336
D=M // 22337
@SP // 22338
AM=M+1 // 22339
A=A-1 // 22340
M=D // 22341
// call Main.render
@6 // 22342
D=A // 22343
@14 // 22344
M=D // 22345
@Main.render // 22346
D=A // 22347
@13 // 22348
M=D // 22349
@Main.main.ret.73 // 22350
D=A // 22351
@CALL // 22352
0;JMP // 22353
(Main.main.ret.73)
@SP // 22354
M=M-1 // 22355

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Scene.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22356
A=M // 22357
D=M // 22358
@SP // 22359
AM=M+1 // 22360
A=A-1 // 22361
M=D // 22362
// call Scene.dispose
@6 // 22363
D=A // 22364
@14 // 22365
M=D // 22366
@Scene.dispose // 22367
D=A // 22368
@13 // 22369
M=D // 22370
@Main.main.ret.74 // 22371
D=A // 22372
@CALL // 22373
0;JMP // 22374
(Main.main.ret.74)
@SP // 22375
M=M-1 // 22376

////PushInstruction("constant 0")
@SP // 22377
AM=M+1 // 22378
A=A-1 // 22379
M=0 // 22380
@RETURN // 22381
0;JMP // 22382

////FunctionInstruction{functionName='Plane.intersect', numLocals=3, funcMapping={Plane.initialize=16, Plane.new=1, Plane.dispose=4, Plane.color=29}}
// function Plane.intersect with 3
(Plane.intersect)
@3 // 22383
D=A // 22384
@SP // 22385
AM=D+M // 22386
A=A-1 // 22387
M=0 // 22388
A=A-1 // 22389
M=0 // 22390
A=A-1 // 22391
M=0 // 22392

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 22393
A=M // 22394
D=M // 22395
@3 // 22396
M=D // 22397

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 22398
A=M+1 // 22399
D=M // 22400
@SP // 22401
AM=M+1 // 22402
A=A-1 // 22403
M=D // 22404
@ARG // 22405
A=M+1 // 22406
D=M // 22407
@SP // 22408
AM=M+1 // 22409
A=A-1 // 22410
M=D // 22411
// call Ray.getDirection
@6 // 22412
D=A // 22413
@14 // 22414
M=D // 22415
@Ray.getDirection // 22416
D=A // 22417
@13 // 22418
M=D // 22419
@Plane.intersect.ret.0 // 22420
D=A // 22421
@CALL // 22422
0;JMP // 22423
(Plane.intersect.ret.0)
// call Vec3.dot
@7 // 22424
D=A // 22425
@14 // 22426
M=D // 22427
@Vec3.dot // 22428
D=A // 22429
@13 // 22430
M=D // 22431
@Plane.intersect.ret.1 // 22432
D=A // 22433
@CALL // 22434
0;JMP // 22435
(Plane.intersect.ret.1)
@SP // 22436
AM=M-1 // 22437
D=M // 22438
@LCL // 22439
A=M // 22440
M=D // 22441

////ConditionalGroup{push=UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.is_positive}},
//NOT), ifGoto=IfGotoInstruction{label='Plane.intersect$IF_TRUE1}}
@LCL // 22442
A=M // 22443
D=M // 22444
@SP // 22445
AM=M+1 // 22446
A=A-1 // 22447
M=D // 22448
// call Number.is_positive
@6 // 22449
D=A // 22450
@14 // 22451
M=D // 22452
@Number.is_positive // 22453
D=A // 22454
@13 // 22455
M=D // 22456
@Plane.intersect.ret.2 // 22457
D=A // 22458
@CALL // 22459
0;JMP // 22460
(Plane.intersect.ret.2)
@SP // 22461
AM=M-1 // 22462
D=M // 22463
D=!D // 22464
@Plane.intersect$IF_TRUE1 // 22465
D;JNE // 22466

////GotoInstruction{label='Plane.intersect$IF_END1}
// goto Plane.intersect$IF_END1
@Plane.intersect$IF_END1 // 22467
0;JMP // 22468

////LabelInstruction{label='Plane.intersect$IF_TRUE1}
// label Plane.intersect$IF_TRUE1
(Plane.intersect$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22469
A=M // 22470
D=M // 22471
@SP // 22472
AM=M+1 // 22473
A=A-1 // 22474
M=D // 22475
// call Number.dispose
@6 // 22476
D=A // 22477
@14 // 22478
M=D // 22479
@Number.dispose // 22480
D=A // 22481
@13 // 22482
M=D // 22483
@Plane.intersect.ret.3 // 22484
D=A // 22485
@CALL // 22486
0;JMP // 22487
(Plane.intersect.ret.3)
@SP // 22488
M=M-1 // 22489

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 22490
AM=M+1 // 22491
A=A-1 // 22492
M=-1 // 22493
// call Number.new
@6 // 22494
D=A // 22495
@14 // 22496
M=D // 22497
@Number.new // 22498
D=A // 22499
@13 // 22500
M=D // 22501
@Plane.intersect.ret.4 // 22502
D=A // 22503
@CALL // 22504
0;JMP // 22505
(Plane.intersect.ret.4)
@RETURN // 22506
0;JMP // 22507

////LabelInstruction{label='Plane.intersect$IF_END1}
// label Plane.intersect$IF_END1
(Plane.intersect$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 22508
A=M // 22509
D=M // 22510
@SP // 22511
AM=M+1 // 22512
A=A-1 // 22513
M=D // 22514
// call Vec3.clone
@6 // 22515
D=A // 22516
@14 // 22517
M=D // 22518
@Vec3.clone // 22519
D=A // 22520
@13 // 22521
M=D // 22522
@Plane.intersect.ret.5 // 22523
D=A // 22524
@CALL // 22525
0;JMP // 22526
(Plane.intersect.ret.5)
@SP // 22527
AM=M-1 // 22528
D=M // 22529
@LCL // 22530
A=M+1 // 22531
M=D // 22532

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getOrigin}}], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22533
A=M+1 // 22534
D=M // 22535
@SP // 22536
AM=M+1 // 22537
A=A-1 // 22538
M=D // 22539
@ARG // 22540
A=M+1 // 22541
D=M // 22542
@SP // 22543
AM=M+1 // 22544
A=A-1 // 22545
M=D // 22546
// call Ray.getOrigin
@6 // 22547
D=A // 22548
@14 // 22549
M=D // 22550
@Ray.getOrigin // 22551
D=A // 22552
@13 // 22553
M=D // 22554
@Plane.intersect.ret.6 // 22555
D=A // 22556
@CALL // 22557
0;JMP // 22558
(Plane.intersect.ret.6)
// call Vec3.do_sub
@7 // 22559
D=A // 22560
@14 // 22561
M=D // 22562
@Vec3.do_sub // 22563
D=A // 22564
@13 // 22565
M=D // 22566
@Plane.intersect.ret.7 // 22567
D=A // 22568
@CALL // 22569
0;JMP // 22570
(Plane.intersect.ret.7)
@SP // 22571
M=M-1 // 22572

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 1")], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 22573
A=M+1 // 22574
D=M // 22575
@SP // 22576
AM=M+1 // 22577
A=A-1 // 22578
M=D // 22579
@THIS // 22580
A=M+1 // 22581
D=M // 22582
@SP // 22583
AM=M+1 // 22584
A=A-1 // 22585
M=D // 22586
// call Vec3.dot
@7 // 22587
D=A // 22588
@14 // 22589
M=D // 22590
@Vec3.dot // 22591
D=A // 22592
@13 // 22593
M=D // 22594
@Plane.intersect.ret.8 // 22595
D=A // 22596
@CALL // 22597
0;JMP // 22598
(Plane.intersect.ret.8)
@SP // 22599
AM=M-1 // 22600
D=M // 22601
@LCL // 22602
A=M+1 // 22603
A=A+1 // 22604
M=D // 22605

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22606
A=M+1 // 22607
A=A+1 // 22608
D=M // 22609
@SP // 22610
AM=M+1 // 22611
A=A-1 // 22612
M=D // 22613
@LCL // 22614
A=M // 22615
D=M // 22616
@SP // 22617
AM=M+1 // 22618
A=A-1 // 22619
M=D // 22620
// call Number.do_div
@7 // 22621
D=A // 22622
@14 // 22623
M=D // 22624
@Number.do_div // 22625
D=A // 22626
@13 // 22627
M=D // 22628
@Plane.intersect.ret.9 // 22629
D=A // 22630
@CALL // 22631
0;JMP // 22632
(Plane.intersect.ret.9)
@SP // 22633
M=M-1 // 22634

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22635
A=M // 22636
D=M // 22637
@SP // 22638
AM=M+1 // 22639
A=A-1 // 22640
M=D // 22641
// call Number.dispose
@6 // 22642
D=A // 22643
@14 // 22644
M=D // 22645
@Number.dispose // 22646
D=A // 22647
@13 // 22648
M=D // 22649
@Plane.intersect.ret.10 // 22650
D=A // 22651
@CALL // 22652
0;JMP // 22653
(Plane.intersect.ret.10)
@SP // 22654
M=M-1 // 22655

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22656
A=M+1 // 22657
D=M // 22658
@SP // 22659
AM=M+1 // 22660
A=A-1 // 22661
M=D // 22662
// call Vec3.dispose
@6 // 22663
D=A // 22664
@14 // 22665
M=D // 22666
@Vec3.dispose // 22667
D=A // 22668
@13 // 22669
M=D // 22670
@Plane.intersect.ret.11 // 22671
D=A // 22672
@CALL // 22673
0;JMP // 22674
(Plane.intersect.ret.11)
@SP // 22675
M=M-1 // 22676

////ConditionalGroup{push=UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.is_negative}},
//NOT), ifGoto=IfGotoInstruction{label='Plane.intersect$IF_TRUE2}}
@LCL // 22677
A=M+1 // 22678
A=A+1 // 22679
D=M // 22680
@SP // 22681
AM=M+1 // 22682
A=A-1 // 22683
M=D // 22684
// call Number.is_negative
@6 // 22685
D=A // 22686
@14 // 22687
M=D // 22688
@Number.is_negative // 22689
D=A // 22690
@13 // 22691
M=D // 22692
@Plane.intersect.ret.12 // 22693
D=A // 22694
@CALL // 22695
0;JMP // 22696
(Plane.intersect.ret.12)
@SP // 22697
AM=M-1 // 22698
D=M // 22699
D=!D // 22700
@Plane.intersect$IF_TRUE2 // 22701
D;JNE // 22702

////GotoInstruction{label='Plane.intersect$IF_FALSE2}
// goto Plane.intersect$IF_FALSE2
@Plane.intersect$IF_FALSE2 // 22703
0;JMP // 22704

////LabelInstruction{label='Plane.intersect$IF_TRUE2}
// label Plane.intersect$IF_TRUE2
(Plane.intersect$IF_TRUE2)

////PushInstruction("local 2")
@LCL // 22705
A=M+1 // 22706
A=A+1 // 22707
D=M // 22708
@SP // 22709
AM=M+1 // 22710
A=A-1 // 22711
M=D // 22712
@RETURN // 22713
0;JMP // 22714

////GotoInstruction{label='Plane.intersect$IF_END2}
// goto Plane.intersect$IF_END2
@Plane.intersect$IF_END2 // 22715
0;JMP // 22716

////LabelInstruction{label='Plane.intersect$IF_FALSE2}
// label Plane.intersect$IF_FALSE2
(Plane.intersect$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 22717
A=M+1 // 22718
A=A+1 // 22719
D=M // 22720
@SP // 22721
AM=M+1 // 22722
A=A-1 // 22723
M=D // 22724
// call Number.dispose
@6 // 22725
D=A // 22726
@14 // 22727
M=D // 22728
@Number.dispose // 22729
D=A // 22730
@13 // 22731
M=D // 22732
@Plane.intersect.ret.13 // 22733
D=A // 22734
@CALL // 22735
0;JMP // 22736
(Plane.intersect.ret.13)
@SP // 22737
M=M-1 // 22738

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 22739
AM=M+1 // 22740
A=A-1 // 22741
M=-1 // 22742
// call Number.new
@6 // 22743
D=A // 22744
@14 // 22745
M=D // 22746
@Number.new // 22747
D=A // 22748
@13 // 22749
M=D // 22750
@Plane.intersect.ret.14 // 22751
D=A // 22752
@CALL // 22753
0;JMP // 22754
(Plane.intersect.ret.14)
@RETURN // 22755
0;JMP // 22756

////LabelInstruction{label='Plane.intersect$IF_END2}
// label Plane.intersect$IF_END2
(Plane.intersect$IF_END2)

////FunctionInstruction{functionName='Scene.new', numLocals=0, funcMapping={}}
// function Scene.new with 0
(Scene.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 9")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@9 // 22757
D=A // 22758
@SP // 22759
AM=M+1 // 22760
A=A-1 // 22761
M=D // 22762
// call Memory.alloc
@6 // 22763
D=A // 22764
@14 // 22765
M=D // 22766
@Memory.alloc // 22767
D=A // 22768
@13 // 22769
M=D // 22770
@Scene.new.ret.0 // 22771
D=A // 22772
@CALL // 22773
0;JMP // 22774
(Scene.new.ret.0)
@SP // 22775
AM=M-1 // 22776
D=M // 22777
@3 // 22778
M=D // 22779

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 22780
A=M // 22781
D=M // 22782
@THIS // 22783
A=M // 22784
M=D // 22785

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 22786
A=M+1 // 22787
D=M // 22788
@THIS // 22789
A=M+1 // 22790
M=D // 22791

////PushPopPair {
//  push: PushInstruction("argument 2")
//  pop:  PopInstruction{address=this 5}
//}

@ARG // 22792
A=M+1 // 22793
A=A+1 // 22794
D=M // 22795
@SP // 22796
AM=M+1 // 22797
A=A-1 // 22798
M=D // 22799
@THIS // 22800
D=M // 22801
@5 // 22802
A=D+A // 22803
D=A // 22804
@R13 // 22805
M=D // 22806
@SP // 22807
AM=M-1 // 22808
D=M // 22809
@R13 // 22810
A=M // 22811
M=D // 22812

////PushPopPair {
//  push: PushInstruction("argument 3")
//  pop:  PopInstruction{address=this 6}
//}

@ARG // 22813
A=M+1 // 22814
A=A+1 // 22815
A=A+1 // 22816
D=M // 22817
@SP // 22818
AM=M+1 // 22819
A=A-1 // 22820
M=D // 22821
@THIS // 22822
D=M // 22823
@6 // 22824
A=D+A // 22825
D=A // 22826
@R13 // 22827
M=D // 22828
@SP // 22829
AM=M-1 // 22830
D=M // 22831
@R13 // 22832
A=M // 22833
M=D // 22834

////PushPopPair {
//  push: PushInstruction("argument 4")
//  pop:  PopInstruction{address=this 7}
//}

@ARG // 22835
D=M // 22836
@4 // 22837
A=D+A // 22838
D=M // 22839
@SP // 22840
AM=M+1 // 22841
A=A-1 // 22842
M=D // 22843
@THIS // 22844
D=M // 22845
@7 // 22846
A=D+A // 22847
D=A // 22848
@R13 // 22849
M=D // 22850
@SP // 22851
AM=M-1 // 22852
D=M // 22853
@R13 // 22854
A=M // 22855
M=D // 22856

////PushPopPair {
//  push: PushInstruction("argument 5")
//  pop:  PopInstruction{address=this 8}
//}

@ARG // 22857
D=M // 22858
@5 // 22859
A=D+A // 22860
D=M // 22861
@SP // 22862
AM=M+1 // 22863
A=A-1 // 22864
M=D // 22865
@THIS // 22866
D=M // 22867
@8 // 22868
A=D+A // 22869
D=A // 22870
@R13 // 22871
M=D // 22872
@SP // 22873
AM=M-1 // 22874
D=M // 22875
@R13 // 22876
A=M // 22877
M=D // 22878

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=this 3}
//}

@THIS // 22879
A=M // 22880
D=M // 22881
@SP // 22882
AM=M+1 // 22883
A=A-1 // 22884
M=D // 22885
// call Number.new
@6 // 22886
D=A // 22887
@14 // 22888
M=D // 22889
@Number.new // 22890
D=A // 22891
@13 // 22892
M=D // 22893
@Scene.new.ret.1 // 22894
D=A // 22895
@CALL // 22896
0;JMP // 22897
(Scene.new.ret.1)
@SP // 22898
AM=M-1 // 22899
D=M // 22900
@THIS // 22901
A=M+1 // 22902
A=A+1 // 22903
A=A+1 // 22904
M=D // 22905

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=this 4}
//}

@THIS // 22906
A=M+1 // 22907
D=M // 22908
@SP // 22909
AM=M+1 // 22910
A=A-1 // 22911
M=D // 22912
// call Number.new
@6 // 22913
D=A // 22914
@14 // 22915
M=D // 22916
@Number.new // 22917
D=A // 22918
@13 // 22919
M=D // 22920
@Scene.new.ret.2 // 22921
D=A // 22922
@CALL // 22923
0;JMP // 22924
(Scene.new.ret.2)
@THIS // 22925
D=M // 22926
@4 // 22927
A=D+A // 22928
D=A // 22929
@R13 // 22930
M=D // 22931
@SP // 22932
AM=M-1 // 22933
D=M // 22934
@R13 // 22935
A=M // 22936
M=D // 22937

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 22938
A=M+1 // 22939
A=A+1 // 22940
A=A+1 // 22941
D=M // 22942
@SP // 22943
AM=M+1 // 22944
A=A-1 // 22945
M=D // 22946
// call Number.clone
@6 // 22947
D=A // 22948
@14 // 22949
M=D // 22950
@Number.clone // 22951
D=A // 22952
@13 // 22953
M=D // 22954
@Scene.new.ret.3 // 22955
D=A // 22956
@CALL // 22957
0;JMP // 22958
(Scene.new.ret.3)
@SP // 22959
AM=M-1 // 22960
D=M // 22961
@THIS // 22962
A=M+1 // 22963
A=A+1 // 22964
M=D // 22965

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("this 4")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 22966
A=M+1 // 22967
A=A+1 // 22968
D=M // 22969
@SP // 22970
AM=M+1 // 22971
A=A-1 // 22972
M=D // 22973
@THIS // 22974
D=M // 22975
@4 // 22976
A=D+A // 22977
D=M // 22978
@SP // 22979
AM=M+1 // 22980
A=A-1 // 22981
M=D // 22982
// call Number.do_div
@7 // 22983
D=A // 22984
@14 // 22985
M=D // 22986
@Number.do_div // 22987
D=A // 22988
@13 // 22989
M=D // 22990
@Scene.new.ret.4 // 22991
D=A // 22992
@CALL // 22993
0;JMP // 22994
(Scene.new.ret.4)
@SP // 22995
M=M-1 // 22996

////PushInstruction("pointer 0")
@3 // 22997
D=M // 22998
@SP // 22999
AM=M+1 // 23000
A=A-1 // 23001
M=D // 23002
@RETURN // 23003
0;JMP // 23004

////FunctionInstruction{functionName='Scene.create_prime_ray', numLocals=3, funcMapping={Scene.new=5}}
// function Scene.create_prime_ray with 3
(Scene.create_prime_ray)
@3 // 23005
D=A // 23006
@SP // 23007
AM=D+M // 23008
A=A-1 // 23009
M=0 // 23010
A=A-1 // 23011
M=0 // 23012
A=A-1 // 23013
M=0 // 23014

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 23015
A=M // 23016
D=M // 23017
@3 // 23018
M=D // 23019

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 23020
A=M+1 // 23021
D=M // 23022
@SP // 23023
AM=M+1 // 23024
A=A-1 // 23025
M=D // 23026
// call Number.new
@6 // 23027
D=A // 23028
@14 // 23029
M=D // 23030
@Number.new // 23031
D=A // 23032
@13 // 23033
M=D // 23034
@Scene.create_prime_ray.ret.0 // 23035
D=A // 23036
@CALL // 23037
0;JMP // 23038
(Scene.create_prime_ray.ret.0)
@SP // 23039
AM=M-1 // 23040
D=M // 23041
@LCL // 23042
A=M // 23043
M=D // 23044

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23045
A=M // 23046
D=M // 23047
@SP // 23048
AM=M+1 // 23049
A=A-1 // 23050
M=D // 23051
@ARG // 23052
D=M // 23053
@5 // 23054
A=D+A // 23055
D=M // 23056
@SP // 23057
AM=M+1 // 23058
A=A-1 // 23059
M=D // 23060
// call Number.do_add
@7 // 23061
D=A // 23062
@14 // 23063
M=D // 23064
@Number.do_add // 23065
D=A // 23066
@13 // 23067
M=D // 23068
@Scene.create_prime_ray.ret.1 // 23069
D=A // 23070
@CALL // 23071
0;JMP // 23072
(Scene.create_prime_ray.ret.1)
@SP // 23073
M=M-1 // 23074

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 3")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23075
A=M // 23076
D=M // 23077
@SP // 23078
AM=M+1 // 23079
A=A-1 // 23080
M=D // 23081
@THIS // 23082
A=M+1 // 23083
A=A+1 // 23084
A=A+1 // 23085
D=M // 23086
@SP // 23087
AM=M+1 // 23088
A=A-1 // 23089
M=D // 23090
// call Number.do_div
@7 // 23091
D=A // 23092
@14 // 23093
M=D // 23094
@Number.do_div // 23095
D=A // 23096
@13 // 23097
M=D // 23098
@Scene.create_prime_ray.ret.2 // 23099
D=A // 23100
@CALL // 23101
0;JMP // 23102
(Scene.create_prime_ray.ret.2)
@SP // 23103
M=M-1 // 23104

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23105
A=M // 23106
D=M // 23107
@SP // 23108
AM=M+1 // 23109
A=A-1 // 23110
M=D // 23111
@ARG // 23112
D=M // 23113
@4 // 23114
A=D+A // 23115
D=M // 23116
@SP // 23117
AM=M+1 // 23118
A=A-1 // 23119
M=D // 23120
// call Number.do_mul
@7 // 23121
D=A // 23122
@14 // 23123
M=D // 23124
@Number.do_mul // 23125
D=A // 23126
@13 // 23127
M=D // 23128
@Scene.create_prime_ray.ret.3 // 23129
D=A // 23130
@CALL // 23131
0;JMP // 23132
(Scene.create_prime_ray.ret.3)
@SP // 23133
M=M-1 // 23134

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 3")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23135
A=M // 23136
D=M // 23137
@SP // 23138
AM=M+1 // 23139
A=A-1 // 23140
M=D // 23141
@ARG // 23142
A=M+1 // 23143
A=A+1 // 23144
A=A+1 // 23145
D=M // 23146
@SP // 23147
AM=M+1 // 23148
A=A-1 // 23149
M=D // 23150
// call Number.do_sub
@7 // 23151
D=A // 23152
@14 // 23153
M=D // 23154
@Number.do_sub // 23155
D=A // 23156
@13 // 23157
M=D // 23158
@Scene.create_prime_ray.ret.4 // 23159
D=A // 23160
@CALL // 23161
0;JMP // 23162
(Scene.create_prime_ray.ret.4)
@SP // 23163
M=M-1 // 23164

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 2")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23165
A=M // 23166
D=M // 23167
@SP // 23168
AM=M+1 // 23169
A=A-1 // 23170
M=D // 23171
@THIS // 23172
A=M+1 // 23173
A=A+1 // 23174
D=M // 23175
@SP // 23176
AM=M+1 // 23177
A=A-1 // 23178
M=D // 23179
// call Number.do_mul
@7 // 23180
D=A // 23181
@14 // 23182
M=D // 23183
@Number.do_mul // 23184
D=A // 23185
@13 // 23186
M=D // 23187
@Scene.create_prime_ray.ret.5 // 23188
D=A // 23189
@CALL // 23190
0;JMP // 23191
(Scene.create_prime_ray.ret.5)
@SP // 23192
M=M-1 // 23193

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 23194
A=M+1 // 23195
A=A+1 // 23196
D=M // 23197
@SP // 23198
AM=M+1 // 23199
A=A-1 // 23200
M=D // 23201
// call Number.new
@6 // 23202
D=A // 23203
@14 // 23204
M=D // 23205
@Number.new // 23206
D=A // 23207
@13 // 23208
M=D // 23209
@Scene.create_prime_ray.ret.6 // 23210
D=A // 23211
@CALL // 23212
0;JMP // 23213
(Scene.create_prime_ray.ret.6)
@SP // 23214
AM=M-1 // 23215
D=M // 23216
@LCL // 23217
A=M+1 // 23218
M=D // 23219

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23220
A=M+1 // 23221
D=M // 23222
@SP // 23223
AM=M+1 // 23224
A=A-1 // 23225
M=D // 23226
@ARG // 23227
D=M // 23228
@5 // 23229
A=D+A // 23230
D=M // 23231
@SP // 23232
AM=M+1 // 23233
A=A-1 // 23234
M=D // 23235
// call Number.do_add
@7 // 23236
D=A // 23237
@14 // 23238
M=D // 23239
@Number.do_add // 23240
D=A // 23241
@13 // 23242
M=D // 23243
@Scene.create_prime_ray.ret.7 // 23244
D=A // 23245
@CALL // 23246
0;JMP // 23247
(Scene.create_prime_ray.ret.7)
@SP // 23248
M=M-1 // 23249

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 4")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23250
A=M+1 // 23251
D=M // 23252
@SP // 23253
AM=M+1 // 23254
A=A-1 // 23255
M=D // 23256
@THIS // 23257
D=M // 23258
@4 // 23259
A=D+A // 23260
D=M // 23261
@SP // 23262
AM=M+1 // 23263
A=A-1 // 23264
M=D // 23265
// call Number.do_div
@7 // 23266
D=A // 23267
@14 // 23268
M=D // 23269
@Number.do_div // 23270
D=A // 23271
@13 // 23272
M=D // 23273
@Scene.create_prime_ray.ret.8 // 23274
D=A // 23275
@CALL // 23276
0;JMP // 23277
(Scene.create_prime_ray.ret.8)
@SP // 23278
M=M-1 // 23279

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23280
A=M+1 // 23281
D=M // 23282
@SP // 23283
AM=M+1 // 23284
A=A-1 // 23285
M=D // 23286
// call Number.do_neg
@6 // 23287
D=A // 23288
@14 // 23289
M=D // 23290
@Number.do_neg // 23291
D=A // 23292
@13 // 23293
M=D // 23294
@Scene.create_prime_ray.ret.9 // 23295
D=A // 23296
@CALL // 23297
0;JMP // 23298
(Scene.create_prime_ray.ret.9)
@SP // 23299
M=M-1 // 23300

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 4")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23301
A=M+1 // 23302
D=M // 23303
@SP // 23304
AM=M+1 // 23305
A=A-1 // 23306
M=D // 23307
@ARG // 23308
D=M // 23309
@4 // 23310
A=D+A // 23311
D=M // 23312
@SP // 23313
AM=M+1 // 23314
A=A-1 // 23315
M=D // 23316
// call Number.do_mul
@7 // 23317
D=A // 23318
@14 // 23319
M=D // 23320
@Number.do_mul // 23321
D=A // 23322
@13 // 23323
M=D // 23324
@Scene.create_prime_ray.ret.10 // 23325
D=A // 23326
@CALL // 23327
0;JMP // 23328
(Scene.create_prime_ray.ret.10)
@SP // 23329
M=M-1 // 23330

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 3")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23331
A=M+1 // 23332
D=M // 23333
@SP // 23334
AM=M+1 // 23335
A=A-1 // 23336
M=D // 23337
@ARG // 23338
A=M+1 // 23339
A=A+1 // 23340
A=A+1 // 23341
D=M // 23342
@SP // 23343
AM=M+1 // 23344
A=A-1 // 23345
M=D // 23346
// call Number.do_add
@7 // 23347
D=A // 23348
@14 // 23349
M=D // 23350
@Number.do_add // 23351
D=A // 23352
@13 // 23353
M=D // 23354
@Scene.create_prime_ray.ret.11 // 23355
D=A // 23356
@CALL // 23357
0;JMP // 23358
(Scene.create_prime_ray.ret.11)
@SP // 23359
M=M-1 // 23360

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1"), CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 23361
A=M // 23362
D=M // 23363
@SP // 23364
AM=M+1 // 23365
A=A-1 // 23366
M=D // 23367
@LCL // 23368
A=M+1 // 23369
D=M // 23370
@SP // 23371
AM=M+1 // 23372
A=A-1 // 23373
M=D // 23374
@SP // 23375
AM=M+1 // 23376
A=A-1 // 23377
M=-1 // 23378
// call Number.new
@6 // 23379
D=A // 23380
@14 // 23381
M=D // 23382
@Number.new // 23383
D=A // 23384
@13 // 23385
M=D // 23386
@Scene.create_prime_ray.ret.12 // 23387
D=A // 23388
@CALL // 23389
0;JMP // 23390
(Scene.create_prime_ray.ret.12)
// call Vec3.new
@8 // 23391
D=A // 23392
@14 // 23393
M=D // 23394
@Vec3.new // 23395
D=A // 23396
@13 // 23397
M=D // 23398
@Scene.create_prime_ray.ret.13 // 23399
D=A // 23400
@CALL // 23401
0;JMP // 23402
(Scene.create_prime_ray.ret.13)
@SP // 23403
AM=M-1 // 23404
D=M // 23405
@LCL // 23406
A=M+1 // 23407
A=A+1 // 23408
M=D // 23409

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23410
A=M+1 // 23411
A=A+1 // 23412
D=M // 23413
@SP // 23414
AM=M+1 // 23415
A=A-1 // 23416
M=D // 23417
// call Vec3.do_normalize
@6 // 23418
D=A // 23419
@14 // 23420
M=D // 23421
@Vec3.do_normalize // 23422
D=A // 23423
@13 // 23424
M=D // 23425
@Scene.create_prime_ray.ret.14 // 23426
D=A // 23427
@CALL // 23428
0;JMP // 23429
(Scene.create_prime_ray.ret.14)
@SP // 23430
M=M-1 // 23431

////CallGroup{pushes=[CallGroup{pushes=[CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}, CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}], call=CallInstruction{Vec3.new}}, PushInstruction("local 2")], call=CallInstruction{Ray.new}}
@SP // 23432
AM=M+1 // 23433
A=A-1 // 23434
M=0 // 23435
// call Number.new
@6 // 23436
D=A // 23437
@14 // 23438
M=D // 23439
@Number.new // 23440
D=A // 23441
@13 // 23442
M=D // 23443
@Scene.create_prime_ray.ret.15 // 23444
D=A // 23445
@CALL // 23446
0;JMP // 23447
(Scene.create_prime_ray.ret.15)
@SP // 23448
AM=M+1 // 23449
A=A-1 // 23450
M=0 // 23451
// call Number.new
@6 // 23452
D=A // 23453
@14 // 23454
M=D // 23455
@Number.new // 23456
D=A // 23457
@13 // 23458
M=D // 23459
@Scene.create_prime_ray.ret.16 // 23460
D=A // 23461
@CALL // 23462
0;JMP // 23463
(Scene.create_prime_ray.ret.16)
@SP // 23464
AM=M+1 // 23465
A=A-1 // 23466
M=0 // 23467
// call Number.new
@6 // 23468
D=A // 23469
@14 // 23470
M=D // 23471
@Number.new // 23472
D=A // 23473
@13 // 23474
M=D // 23475
@Scene.create_prime_ray.ret.17 // 23476
D=A // 23477
@CALL // 23478
0;JMP // 23479
(Scene.create_prime_ray.ret.17)
// call Vec3.new
@8 // 23480
D=A // 23481
@14 // 23482
M=D // 23483
@Vec3.new // 23484
D=A // 23485
@13 // 23486
M=D // 23487
@Scene.create_prime_ray.ret.18 // 23488
D=A // 23489
@CALL // 23490
0;JMP // 23491
(Scene.create_prime_ray.ret.18)
@LCL // 23492
A=M+1 // 23493
A=A+1 // 23494
D=M // 23495
@SP // 23496
AM=M+1 // 23497
A=A-1 // 23498
M=D // 23499
// call Ray.new
@7 // 23500
D=A // 23501
@14 // 23502
M=D // 23503
@Ray.new // 23504
D=A // 23505
@13 // 23506
M=D // 23507
@Scene.create_prime_ray.ret.19 // 23508
D=A // 23509
@CALL // 23510
0;JMP // 23511
(Scene.create_prime_ray.ret.19)
@RETURN // 23512
0;JMP // 23513

////FunctionInstruction{functionName='Sphere.dispose', numLocals=0, funcMapping={Sphere.new=1}}
// function Sphere.dispose with 0
(Sphere.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 23514
A=M // 23515
D=M // 23516
@3 // 23517
M=D // 23518

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 23519
A=M // 23520
D=M // 23521
@SP // 23522
AM=M+1 // 23523
A=A-1 // 23524
M=D // 23525
// call Vec3.dispose
@6 // 23526
D=A // 23527
@14 // 23528
M=D // 23529
@Vec3.dispose // 23530
D=A // 23531
@13 // 23532
M=D // 23533
@Sphere.dispose.ret.0 // 23534
D=A // 23535
@CALL // 23536
0;JMP // 23537
(Sphere.dispose.ret.0)
@SP // 23538
M=M-1 // 23539

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 23540
A=M+1 // 23541
D=M // 23542
@SP // 23543
AM=M+1 // 23544
A=A-1 // 23545
M=D // 23546
// call Number.dispose
@6 // 23547
D=A // 23548
@14 // 23549
M=D // 23550
@Number.dispose // 23551
D=A // 23552
@13 // 23553
M=D // 23554
@Sphere.dispose.ret.1 // 23555
D=A // 23556
@CALL // 23557
0;JMP // 23558
(Sphere.dispose.ret.1)
@SP // 23559
M=M-1 // 23560

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 23561
A=M+1 // 23562
A=A+1 // 23563
D=M // 23564
@SP // 23565
AM=M+1 // 23566
A=A-1 // 23567
M=D // 23568
// call Number.dispose
@6 // 23569
D=A // 23570
@14 // 23571
M=D // 23572
@Number.dispose // 23573
D=A // 23574
@13 // 23575
M=D // 23576
@Sphere.dispose.ret.2 // 23577
D=A // 23578
@CALL // 23579
0;JMP // 23580
(Sphere.dispose.ret.2)
@SP // 23581
M=M-1 // 23582

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 23583
D=M // 23584
@SP // 23585
AM=M+1 // 23586
A=A-1 // 23587
M=D // 23588
// call Memory.deAlloc
@6 // 23589
D=A // 23590
@14 // 23591
M=D // 23592
@Memory.deAlloc // 23593
D=A // 23594
@13 // 23595
M=D // 23596
@Sphere.dispose.ret.3 // 23597
D=A // 23598
@CALL // 23599
0;JMP // 23600
(Sphere.dispose.ret.3)
@SP // 23601
M=M-1 // 23602

////PushInstruction("constant 0")
@SP // 23603
AM=M+1 // 23604
A=A-1 // 23605
M=0 // 23606
@RETURN // 23607
0;JMP // 23608

////FunctionInstruction{functionName='Int32.do_add', numLocals=3, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_add with 3
(Int32.do_add)
@3 // 23609
D=A // 23610
@SP // 23611
AM=D+M // 23612
A=A-1 // 23613
M=0 // 23614
A=A-1 // 23615
M=0 // 23616
A=A-1 // 23617
M=0 // 23618

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 23619
A=M // 23620
D=M // 23621
@3 // 23622
M=D // 23623

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 23624
A=M+1 // 23625
D=M // 23626
@SP // 23627
AM=M+1 // 23628
A=A-1 // 23629
M=D // 23630
// call Int32.getParts
@6 // 23631
D=A // 23632
@14 // 23633
M=D // 23634
@Int32.getParts // 23635
D=A // 23636
@13 // 23637
M=D // 23638
@Int32.do_add.ret.0 // 23639
D=A // 23640
@CALL // 23641
0;JMP // 23642
(Int32.do_add.ret.0)
@SP // 23643
AM=M-1 // 23644
D=M // 23645
@LCL // 23646
A=M // 23647
M=D // 23648

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 23649
A=M+1 // 23650
A=A+1 // 23651
M=0 // 23652

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 23653
A=M+1 // 23654
M=0 // 23655

////LabelInstruction{label='Int32.do_add_WHILE_EXP1}
// label Int32.do_add_WHILE_EXP1
(Int32.do_add_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add_WHILE_END1}}
@Int32.do_add.LT.82 // 23656
D=A // 23657
@SP // 23658
AM=M+1 // 23659
A=A-1 // 23660
M=D // 23661
@LCL // 23662
A=M+1 // 23663
D=M // 23664
@4 // 23665
D=D-A // 23666
@DO_LT // 23667
0;JMP // 23668
(Int32.do_add.LT.82)
D=!D // 23669
@Int32.do_add_WHILE_END1 // 23670
D;JNE // 23671

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("local 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("local 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@THIS // 23672
A=M // 23673
D=M // 23674
@SP // 23675
AM=M+1 // 23676
A=A-1 // 23677
M=D // 23678
@LCL // 23679
A=M+1 // 23680
D=M // 23681
@SP // 23682
AM=M-1 // 23683
D=D+M // 23684
@SP // 23685
AM=M+1 // 23686
A=A-1 // 23687
M=D // 23688
@THIS // 23689
A=M // 23690
D=M // 23691
@SP // 23692
AM=M+1 // 23693
A=A-1 // 23694
M=D // 23695
@LCL // 23696
A=M+1 // 23697
D=M // 23698
@SP // 23699
AM=M-1 // 23700
A=D+M // 23701
D=M // 23702
@SP // 23703
AM=M+1 // 23704
A=A-1 // 23705
M=D // 23706
@LCL // 23707
A=M+1 // 23708
D=M // 23709
A=A-1 // 23710
A=D+M // 23711
D=M // 23712
@SP // 23713
AM=M-1 // 23714
D=D+M // 23715
@SP // 23716
AM=M+1 // 23717
A=A-1 // 23718
M=D // 23719
@LCL // 23720
A=M+1 // 23721
A=A+1 // 23722
D=M // 23723
@SP // 23724
AM=M-1 // 23725
D=D+M // 23726
@SP // 23727
AM=M-1 // 23728
A=M // 23729
M=D // 23730

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("local 1"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 256"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_add$IF_TRUE1}}
@Int32.do_add.LT.83 // 23731
D=A // 23732
@SP // 23733
AM=M+1 // 23734
A=A-1 // 23735
M=D // 23736
@THIS // 23737
A=M // 23738
D=M // 23739
@SP // 23740
AM=M+1 // 23741
A=A-1 // 23742
M=D // 23743
@LCL // 23744
A=M+1 // 23745
D=M // 23746
@SP // 23747
AM=M-1 // 23748
A=D+M // 23749
D=M // 23750
@256 // 23751
D=D-A // 23752
@DO_LT // 23753
0;JMP // 23754
(Int32.do_add.LT.83)
D=!D // 23755
@Int32.do_add$IF_TRUE1 // 23756
D;JNE // 23757

////GotoInstruction{label='Int32.do_add$IF_FALSE1}
// goto Int32.do_add$IF_FALSE1
@Int32.do_add$IF_FALSE1 // 23758
0;JMP // 23759

////LabelInstruction{label='Int32.do_add$IF_TRUE1}
// label Int32.do_add$IF_TRUE1
(Int32.do_add$IF_TRUE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("this 0"),
//                    right:
//                        PushInstruction("local 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 256"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@THIS // 23760
A=M // 23761
D=M // 23762
@SP // 23763
AM=M+1 // 23764
A=A-1 // 23765
M=D // 23766
@LCL // 23767
A=M+1 // 23768
D=M // 23769
@SP // 23770
AM=M-1 // 23771
D=D+M // 23772
@SP // 23773
AM=M+1 // 23774
A=A-1 // 23775
M=D // 23776
@THIS // 23777
A=M // 23778
D=M // 23779
@SP // 23780
AM=M+1 // 23781
A=A-1 // 23782
M=D // 23783
@LCL // 23784
A=M+1 // 23785
D=M // 23786
@SP // 23787
AM=M-1 // 23788
A=D+M // 23789
D=M // 23790
@256 // 23791
D=D-A // 23792
@SP // 23793
AM=M-1 // 23794
A=M // 23795
M=D // 23796

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 23797
A=M+1 // 23798
A=A+1 // 23799
M=1 // 23800

////GotoInstruction{label='Int32.do_add$IF_END1}
// goto Int32.do_add$IF_END1
@Int32.do_add$IF_END1 // 23801
0;JMP // 23802

////LabelInstruction{label='Int32.do_add$IF_FALSE1}
// label Int32.do_add$IF_FALSE1
(Int32.do_add$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 23803
A=M+1 // 23804
A=A+1 // 23805
M=0 // 23806

////LabelInstruction{label='Int32.do_add$IF_END1}
// label Int32.do_add$IF_END1
(Int32.do_add$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 23807
A=M+1 // 23808
M=M+1 // 23809

////GotoInstruction{label='Int32.do_add_WHILE_EXP1}
// goto Int32.do_add_WHILE_EXP1
@Int32.do_add_WHILE_EXP1 // 23810
0;JMP // 23811

////LabelInstruction{label='Int32.do_add_WHILE_END1}
// label Int32.do_add_WHILE_END1
(Int32.do_add_WHILE_END1)

////PushInstruction("constant 0")
@SP // 23812
AM=M+1 // 23813
A=A-1 // 23814
M=0 // 23815
@RETURN // 23816
0;JMP // 23817

////FunctionInstruction{functionName='Main.getThreeFifths', numLocals=2, funcMapping={Main.render=64, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getThreeFifths with 2
(Main.getThreeFifths)
@SP // 23818
M=M+1 // 23819
AM=M+1 // 23820
A=A-1 // 23821
M=0 // 23822
A=A-1 // 23823
M=0 // 23824

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 23825
D=A // 23826
@SP // 23827
AM=M+1 // 23828
A=A-1 // 23829
M=D // 23830
// call Number.new
@6 // 23831
D=A // 23832
@14 // 23833
M=D // 23834
@Number.new // 23835
D=A // 23836
@13 // 23837
M=D // 23838
@Main.getThreeFifths.ret.0 // 23839
D=A // 23840
@CALL // 23841
0;JMP // 23842
(Main.getThreeFifths.ret.0)
@SP // 23843
AM=M-1 // 23844
D=M // 23845
@LCL // 23846
A=M // 23847
M=D // 23848

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 5")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@5 // 23849
D=A // 23850
@SP // 23851
AM=M+1 // 23852
A=A-1 // 23853
M=D // 23854
// call Number.new
@6 // 23855
D=A // 23856
@14 // 23857
M=D // 23858
@Number.new // 23859
D=A // 23860
@13 // 23861
M=D // 23862
@Main.getThreeFifths.ret.1 // 23863
D=A // 23864
@CALL // 23865
0;JMP // 23866
(Main.getThreeFifths.ret.1)
@SP // 23867
AM=M-1 // 23868
D=M // 23869
@LCL // 23870
A=M+1 // 23871
M=D // 23872

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23873
A=M // 23874
D=M // 23875
@SP // 23876
AM=M+1 // 23877
A=A-1 // 23878
M=D // 23879
@LCL // 23880
A=M+1 // 23881
D=M // 23882
@SP // 23883
AM=M+1 // 23884
A=A-1 // 23885
M=D // 23886
// call Number.do_div
@7 // 23887
D=A // 23888
@14 // 23889
M=D // 23890
@Number.do_div // 23891
D=A // 23892
@13 // 23893
M=D // 23894
@Main.getThreeFifths.ret.2 // 23895
D=A // 23896
@CALL // 23897
0;JMP // 23898
(Main.getThreeFifths.ret.2)
@SP // 23899
M=M-1 // 23900

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 23901
A=M+1 // 23902
D=M // 23903
@SP // 23904
AM=M+1 // 23905
A=A-1 // 23906
M=D // 23907
// call Number.dispose
@6 // 23908
D=A // 23909
@14 // 23910
M=D // 23911
@Number.dispose // 23912
D=A // 23913
@13 // 23914
M=D // 23915
@Main.getThreeFifths.ret.3 // 23916
D=A // 23917
@CALL // 23918
0;JMP // 23919
(Main.getThreeFifths.ret.3)
@SP // 23920
M=M-1 // 23921

////PushInstruction("local 0")
@LCL // 23922
A=M // 23923
D=M // 23924
@SP // 23925
AM=M+1 // 23926
A=A-1 // 23927
M=D // 23928
@RETURN // 23929
0;JMP // 23930

////FunctionInstruction{functionName='Memory.add_node', numLocals=2, funcMapping={Memory.copy=0, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.add_node with 2
(Memory.add_node)
@SP // 23931
M=M+1 // 23932
AM=M+1 // 23933
A=A-1 // 23934
M=0 // 23935
A=A-1 // 23936
M=0 // 23937

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 23938
A=M+1 // 23939
D=M // 23940
@2 // 23941
D=D+A // 23942
@SP // 23943
AM=M+1 // 23944
A=A-1 // 23945
M=D // 23946
D=0 // 23947
@SP // 23948
AM=M-1 // 23949
A=M // 23950
M=D // 23951

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 23952
A=M+1 // 23953
D=M // 23954
@3 // 23955
D=D+A // 23956
@SP // 23957
AM=M+1 // 23958
A=A-1 // 23959
M=D // 23960
D=0 // 23961
@SP // 23962
AM=M-1 // 23963
A=M // 23964
M=D // 23965

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE1}}
@Memory.add_node.EQ.84 // 23966
D=A // 23967
@SP // 23968
AM=M+1 // 23969
A=A-1 // 23970
M=D // 23971
@ARG // 23972
A=M // 23973
D=M // 23974
@0 // 23975
A=D+A // 23976
D=M // 23977
@DO_EQ // 23978
0;JMP // 23979
(Memory.add_node.EQ.84)
@Memory.add_node$IF_TRUE1 // 23980
D;JNE // 23981

////GotoInstruction{label='Memory.add_node$IF_END1}
// goto Memory.add_node$IF_END1
@Memory.add_node$IF_END1 // 23982
0;JMP // 23983

////LabelInstruction{label='Memory.add_node$IF_TRUE1}
// label Memory.add_node$IF_TRUE1
(Memory.add_node$IF_TRUE1)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 23984
A=M // 23985
D=M // 23986
@SP // 23987
AM=M+1 // 23988
A=A-1 // 23989
M=D // 23990
@ARG // 23991
A=M+1 // 23992
D=M // 23993
@SP // 23994
AM=M-1 // 23995
A=M // 23996
M=D // 23997

////PushInstruction("constant 0")
@SP // 23998
AM=M+1 // 23999
A=A-1 // 24000
M=0 // 24001
@RETURN // 24002
0;JMP // 24003

////LabelInstruction{label='Memory.add_node$IF_END1}
// label Memory.add_node$IF_END1
(Memory.add_node$IF_END1)

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 24004
A=M // 24005
D=M // 24006
@0 // 24007
A=D+A // 24008
D=M // 24009
@LCL // 24010
A=M // 24011
M=D // 24012

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 24013
A=M+1 // 24014
M=0 // 24015

////LabelInstruction{label='Memory.add_node_WHILE_EXP1}
// label Memory.add_node_WHILE_EXP1
(Memory.add_node_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//NOT),
//        right:
//            UnaryPushGroup(                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 0"),
//                                    right:
//                                        PushInstruction("constant 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("argument 1"),
//                                    right:
//                                        PushInstruction("constant 0"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    binaryOp: "GT"
//                ),
//NOT),
//        binaryOp: "AND"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.add_node_WHILE_END1}}
@Memory.add_node.EQ.85 // 24016
D=A // 24017
@SP // 24018
AM=M+1 // 24019
A=A-1 // 24020
M=D // 24021
@LCL // 24022
A=M // 24023
D=M // 24024
@DO_EQ // 24025
0;JMP // 24026
(Memory.add_node.EQ.85)
@SP // 24027
AM=M+1 // 24028
A=A-1 // 24029
M=D // 24030
@SP // 24031
A=M-1 // 24032
M=!D // 24033
@Memory.add_node.GT.86 // 24034
D=A // 24035
@SP // 24036
AM=M+1 // 24037
A=A-1 // 24038
M=D // 24039
@LCL // 24040
A=M // 24041
D=M // 24042
@0 // 24043
A=D+A // 24044
D=M // 24045
@SP // 24046
AM=M+1 // 24047
A=A-1 // 24048
M=D // 24049
@ARG // 24050
A=M+1 // 24051
D=M // 24052
@0 // 24053
A=D+A // 24054
D=M // 24055
@SP // 24056
AM=M-1 // 24057
D=M-D // 24058
@DO_GT // 24059
0;JMP // 24060
(Memory.add_node.GT.86)
D=!D // 24061
@SP // 24062
AM=M-1 // 24063
D=D&M // 24064
D=!D // 24065
@Memory.add_node_WHILE_END1 // 24066
D;JNE // 24067

////PushPopPair {
//  push: PushInstruction("local 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 24068
A=M // 24069
D=M // 24070
@LCL // 24071
A=M+1 // 24072
M=D // 24073

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 24074
A=M // 24075
D=M // 24076
@3 // 24077
A=D+A // 24078
D=M // 24079
@LCL // 24080
A=M // 24081
M=D // 24082

////GotoInstruction{label='Memory.add_node_WHILE_EXP1}
// goto Memory.add_node_WHILE_EXP1
@Memory.add_node_WHILE_EXP1 // 24083
0;JMP // 24084

////LabelInstruction{label='Memory.add_node_WHILE_END1}
// label Memory.add_node_WHILE_END1
(Memory.add_node_WHILE_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE2}}
@Memory.add_node.EQ.87 // 24085
D=A // 24086
@SP // 24087
AM=M+1 // 24088
A=A-1 // 24089
M=D // 24090
@LCL // 24091
A=M+1 // 24092
D=M // 24093
@DO_EQ // 24094
0;JMP // 24095
(Memory.add_node.EQ.87)
@Memory.add_node$IF_TRUE2 // 24096
D;JNE // 24097

////GotoInstruction{label='Memory.add_node$IF_FALSE2}
// goto Memory.add_node$IF_FALSE2
@Memory.add_node$IF_FALSE2 // 24098
0;JMP // 24099

////LabelInstruction{label='Memory.add_node$IF_TRUE2}
// label Memory.add_node$IF_TRUE2
(Memory.add_node$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 24100
A=M+1 // 24101
D=M // 24102
@3 // 24103
D=D+A // 24104
@SP // 24105
AM=M+1 // 24106
A=A-1 // 24107
M=D // 24108
@ARG // 24109
A=M // 24110
D=M // 24111
@0 // 24112
A=D+A // 24113
D=M // 24114
@SP // 24115
AM=M-1 // 24116
A=M // 24117
M=D // 24118

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 24119
A=M // 24120
D=M // 24121
@0 // 24122
A=D+A // 24123
D=M // 24124
@2 // 24125
D=D+A // 24126
@SP // 24127
AM=M+1 // 24128
A=A-1 // 24129
M=D // 24130
@ARG // 24131
A=M+1 // 24132
D=M // 24133
@SP // 24134
AM=M-1 // 24135
A=M // 24136
M=D // 24137

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 24138
A=M // 24139
D=M // 24140
@SP // 24141
AM=M+1 // 24142
A=A-1 // 24143
M=D // 24144
@ARG // 24145
A=M+1 // 24146
D=M // 24147
@SP // 24148
AM=M-1 // 24149
A=M // 24150
M=D // 24151

////GotoInstruction{label='Memory.add_node$IF_END2}
// goto Memory.add_node$IF_END2
@Memory.add_node$IF_END2 // 24152
0;JMP // 24153

////LabelInstruction{label='Memory.add_node$IF_FALSE2}
// label Memory.add_node$IF_FALSE2
(Memory.add_node$IF_FALSE2)

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 24154
A=M+1 // 24155
D=M // 24156
@3 // 24157
D=D+A // 24158
@SP // 24159
AM=M+1 // 24160
A=A-1 // 24161
M=D // 24162
@LCL // 24163
A=M // 24164
D=M // 24165
@SP // 24166
AM=M-1 // 24167
A=M // 24168
M=D // 24169

////PushWriter{source=PushInstruction("local 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 24170
A=M+1 // 24171
D=M // 24172
@2 // 24173
D=D+A // 24174
@SP // 24175
AM=M+1 // 24176
A=A-1 // 24177
M=D // 24178
@LCL // 24179
A=M+1 // 24180
D=M // 24181
@SP // 24182
AM=M-1 // 24183
A=M // 24184
M=D // 24185

////ConditionalGroup{push=PushInstruction("local 0"), ifGoto=IfGotoInstruction{label='Memory.add_node$IF_TRUE3}}
@LCL // 24186
A=M // 24187
D=M // 24188
@Memory.add_node$IF_TRUE3 // 24189
D;JNE // 24190

////GotoInstruction{label='Memory.add_node$IF_END3}
// goto Memory.add_node$IF_END3
@Memory.add_node$IF_END3 // 24191
0;JMP // 24192

////LabelInstruction{label='Memory.add_node$IF_TRUE3}
// label Memory.add_node$IF_TRUE3
(Memory.add_node$IF_TRUE3)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 24193
A=M // 24194
D=M // 24195
@2 // 24196
D=D+A // 24197
@SP // 24198
AM=M+1 // 24199
A=A-1 // 24200
M=D // 24201
@ARG // 24202
A=M+1 // 24203
D=M // 24204
@SP // 24205
AM=M-1 // 24206
A=M // 24207
M=D // 24208

////LabelInstruction{label='Memory.add_node$IF_END3}
// label Memory.add_node$IF_END3
(Memory.add_node$IF_END3)

////PushWriter{source=PushInstruction("argument 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 24209
A=M+1 // 24210
D=M // 24211
@3 // 24212
D=D+A // 24213
@SP // 24214
AM=M+1 // 24215
A=A-1 // 24216
M=D // 24217
@ARG // 24218
A=M+1 // 24219
D=M // 24220
@SP // 24221
AM=M-1 // 24222
A=M // 24223
M=D // 24224

////LabelInstruction{label='Memory.add_node$IF_END2}
// label Memory.add_node$IF_END2
(Memory.add_node$IF_END2)

////PushInstruction("constant 0")
@SP // 24225
AM=M+1 // 24226
A=A-1 // 24227
M=0 // 24228
@RETURN // 24229
0;JMP // 24230

////FunctionInstruction{functionName='Vec3.do_sub', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.clone=4, Vec3.do_cross=27, Vec3.new=1}}
// function Vec3.do_sub with 0
(Vec3.do_sub)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24231
A=M // 24232
D=M // 24233
@3 // 24234
M=D // 24235

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getX}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24236
A=M // 24237
D=M // 24238
@SP // 24239
AM=M+1 // 24240
A=A-1 // 24241
M=D // 24242
@ARG // 24243
A=M+1 // 24244
D=M // 24245
@SP // 24246
AM=M+1 // 24247
A=A-1 // 24248
M=D // 24249
// call Vec3.getX
@6 // 24250
D=A // 24251
@14 // 24252
M=D // 24253
@Vec3.getX // 24254
D=A // 24255
@13 // 24256
M=D // 24257
@Vec3.do_sub.ret.0 // 24258
D=A // 24259
@CALL // 24260
0;JMP // 24261
(Vec3.do_sub.ret.0)
// call Number.do_sub
@7 // 24262
D=A // 24263
@14 // 24264
M=D // 24265
@Number.do_sub // 24266
D=A // 24267
@13 // 24268
M=D // 24269
@Vec3.do_sub.ret.1 // 24270
D=A // 24271
@CALL // 24272
0;JMP // 24273
(Vec3.do_sub.ret.1)
@SP // 24274
M=M-1 // 24275

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getY}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24276
A=M+1 // 24277
D=M // 24278
@SP // 24279
AM=M+1 // 24280
A=A-1 // 24281
M=D // 24282
@ARG // 24283
A=M+1 // 24284
D=M // 24285
@SP // 24286
AM=M+1 // 24287
A=A-1 // 24288
M=D // 24289
// call Vec3.getY
@6 // 24290
D=A // 24291
@14 // 24292
M=D // 24293
@Vec3.getY // 24294
D=A // 24295
@13 // 24296
M=D // 24297
@Vec3.do_sub.ret.2 // 24298
D=A // 24299
@CALL // 24300
0;JMP // 24301
(Vec3.do_sub.ret.2)
// call Number.do_sub
@7 // 24302
D=A // 24303
@14 // 24304
M=D // 24305
@Number.do_sub // 24306
D=A // 24307
@13 // 24308
M=D // 24309
@Vec3.do_sub.ret.3 // 24310
D=A // 24311
@CALL // 24312
0;JMP // 24313
(Vec3.do_sub.ret.3)
@SP // 24314
M=M-1 // 24315

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.getZ}}], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24316
A=M+1 // 24317
A=A+1 // 24318
D=M // 24319
@SP // 24320
AM=M+1 // 24321
A=A-1 // 24322
M=D // 24323
@ARG // 24324
A=M+1 // 24325
D=M // 24326
@SP // 24327
AM=M+1 // 24328
A=A-1 // 24329
M=D // 24330
// call Vec3.getZ
@6 // 24331
D=A // 24332
@14 // 24333
M=D // 24334
@Vec3.getZ // 24335
D=A // 24336
@13 // 24337
M=D // 24338
@Vec3.do_sub.ret.4 // 24339
D=A // 24340
@CALL // 24341
0;JMP // 24342
(Vec3.do_sub.ret.4)
// call Number.do_sub
@7 // 24343
D=A // 24344
@14 // 24345
M=D // 24346
@Number.do_sub // 24347
D=A // 24348
@13 // 24349
M=D // 24350
@Vec3.do_sub.ret.5 // 24351
D=A // 24352
@CALL // 24353
0;JMP // 24354
(Vec3.do_sub.ret.5)
@SP // 24355
M=M-1 // 24356

////PushInstruction("constant 0")
@SP // 24357
AM=M+1 // 24358
A=A-1 // 24359
M=0 // 24360
@RETURN // 24361
0;JMP // 24362

////FunctionInstruction{functionName='Scene.trace', numLocals=6, funcMapping={Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.trace with 6
(Scene.trace)
@6 // 24363
D=A // 24364
@SP // 24365
AM=D+M // 24366
A=A-1 // 24367
M=0 // 24368
A=A-1 // 24369
M=0 // 24370
A=A-1 // 24371
M=0 // 24372
A=A-1 // 24373
M=0 // 24374
A=A-1 // 24375
M=0 // 24376
A=A-1 // 24377
M=0 // 24378

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24379
A=M // 24380
D=M // 24381
@3 // 24382
M=D // 24383

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 24384
A=M // 24385
M=0 // 24386

////LabelInstruction{label='Scene.trace_WHILE_EXP1}
// label Scene.trace_WHILE_EXP1
(Scene.trace_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("this 6"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace_WHILE_END1}}
@Scene.trace.LT.88 // 24387
D=A // 24388
@SP // 24389
AM=M+1 // 24390
A=A-1 // 24391
M=D // 24392
@LCL // 24393
A=M+1 // 24394
D=M // 24395
@SP // 24396
AM=M+1 // 24397
A=A-1 // 24398
M=D // 24399
@THIS // 24400
D=M // 24401
@6 // 24402
A=D+A // 24403
D=M // 24404
@SP // 24405
AM=M-1 // 24406
D=M-D // 24407
@DO_LT // 24408
0;JMP // 24409
(Scene.trace.LT.88)
D=!D // 24410
@Scene.trace_WHILE_END1 // 24411
D;JNE // 24412

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 5"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 24413
D=M // 24414
@5 // 24415
A=D+A // 24416
D=M // 24417
@SP // 24418
AM=M+1 // 24419
A=A-1 // 24420
M=D // 24421
@LCL // 24422
A=M+1 // 24423
D=M // 24424
@SP // 24425
AM=M-1 // 24426
A=D+M // 24427
D=M // 24428
@LCL // 24429
A=M+1 // 24430
A=A+1 // 24431
M=D // 24432

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("argument 1")], call=CallInstruction{Element.intersect}}
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 24433
A=M+1 // 24434
A=A+1 // 24435
D=M // 24436
@SP // 24437
AM=M+1 // 24438
A=A-1 // 24439
M=D // 24440
@ARG // 24441
A=M+1 // 24442
D=M // 24443
@SP // 24444
AM=M+1 // 24445
A=A-1 // 24446
M=D // 24447
// call Element.intersect
@7 // 24448
D=A // 24449
@14 // 24450
M=D // 24451
@Element.intersect // 24452
D=A // 24453
@13 // 24454
M=D // 24455
@Scene.trace.ret.0 // 24456
D=A // 24457
@CALL // 24458
0;JMP // 24459
(Scene.trace.ret.0)
@SP // 24460
AM=M-1 // 24461
D=M // 24462
@LCL // 24463
A=M+1 // 24464
A=A+1 // 24465
A=A+1 // 24466
M=D // 24467

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 24468
D=M // 24469
@5 // 24470
A=D+A // 24471
M=0 // 24472

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE1}}
@Scene.trace.EQ.89 // 24473
D=A // 24474
@SP // 24475
AM=M+1 // 24476
A=A-1 // 24477
M=D // 24478
@LCL // 24479
A=M // 24480
D=M // 24481
@DO_EQ // 24482
0;JMP // 24483
(Scene.trace.EQ.89)
D=!D // 24484
@Scene.trace$IF_TRUE1 // 24485
D;JNE // 24486

////GotoInstruction{label='Scene.trace$IF_END1}
// goto Scene.trace$IF_END1
@Scene.trace$IF_END1 // 24487
0;JMP // 24488

////LabelInstruction{label='Scene.trace$IF_TRUE1}
// label Scene.trace$IF_TRUE1
(Scene.trace$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Intersection.getDistanceFromOrigin}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 24489
A=M // 24490
D=M // 24491
@SP // 24492
AM=M+1 // 24493
A=A-1 // 24494
M=D // 24495
// call Intersection.getDistanceFromOrigin
@6 // 24496
D=A // 24497
@14 // 24498
M=D // 24499
@Intersection.getDistanceFromOrigin // 24500
D=A // 24501
@13 // 24502
M=D // 24503
@Scene.trace.ret.1 // 24504
D=A // 24505
@CALL // 24506
0;JMP // 24507
(Scene.trace.ret.1)
@LCL // 24508
D=M // 24509
@4 // 24510
A=D+A // 24511
D=A // 24512
@R13 // 24513
M=D // 24514
@SP // 24515
AM=M-1 // 24516
D=M // 24517
@R13 // 24518
A=M // 24519
M=D // 24520

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 4")], call=CallInstruction{Number.is_less_than}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 24521
A=M+1 // 24522
A=A+1 // 24523
A=A+1 // 24524
D=M // 24525
@SP // 24526
AM=M+1 // 24527
A=A-1 // 24528
M=D // 24529
@LCL // 24530
D=M // 24531
@4 // 24532
A=D+A // 24533
D=M // 24534
@SP // 24535
AM=M+1 // 24536
A=A-1 // 24537
M=D // 24538
// call Number.is_less_than
@7 // 24539
D=A // 24540
@14 // 24541
M=D // 24542
@Number.is_less_than // 24543
D=A // 24544
@13 // 24545
M=D // 24546
@Scene.trace.ret.2 // 24547
D=A // 24548
@CALL // 24549
0;JMP // 24550
(Scene.trace.ret.2)
@LCL // 24551
D=M // 24552
@5 // 24553
A=D+A // 24554
D=A // 24555
@R13 // 24556
M=D // 24557
@SP // 24558
AM=M-1 // 24559
D=M // 24560
@R13 // 24561
A=M // 24562
M=D // 24563

////LabelInstruction{label='Scene.trace$IF_END1}
// label Scene.trace$IF_END1
(Scene.trace$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.is_negative}},
//NOT),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//            right:
//                PushInstruction("local 5"),
//            binaryOp: "OR"
//        ),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE2}}
@LCL // 24564
A=M+1 // 24565
A=A+1 // 24566
A=A+1 // 24567
D=M // 24568
@SP // 24569
AM=M+1 // 24570
A=A-1 // 24571
M=D // 24572
// call Number.is_negative
@6 // 24573
D=A // 24574
@14 // 24575
M=D // 24576
@Number.is_negative // 24577
D=A // 24578
@13 // 24579
M=D // 24580
@Scene.trace.ret.3 // 24581
D=A // 24582
@CALL // 24583
0;JMP // 24584
(Scene.trace.ret.3)
@SP // 24585
A=M-1 // 24586
M=!D // 24587
@Scene.trace.EQ.90 // 24588
D=A // 24589
@SP // 24590
AM=M+1 // 24591
A=A-1 // 24592
M=D // 24593
@LCL // 24594
A=M // 24595
D=M // 24596
@DO_EQ // 24597
0;JMP // 24598
(Scene.trace.EQ.90)
@SP // 24599
AM=M+1 // 24600
A=A-1 // 24601
M=D // 24602
@LCL // 24603
D=M // 24604
@5 // 24605
A=D+A // 24606
D=M // 24607
@SP // 24608
AM=M-1 // 24609
D=D|M // 24610
@SP // 24611
AM=M-1 // 24612
D=D&M // 24613
@Scene.trace$IF_TRUE2 // 24614
D;JNE // 24615

////GotoInstruction{label='Scene.trace$IF_FALSE2}
// goto Scene.trace$IF_FALSE2
@Scene.trace$IF_FALSE2 // 24616
0;JMP // 24617

////LabelInstruction{label='Scene.trace$IF_TRUE2}
// label Scene.trace$IF_TRUE2
(Scene.trace$IF_TRUE2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.trace$IF_TRUE3}}
@Scene.trace.EQ.91 // 24618
D=A // 24619
@SP // 24620
AM=M+1 // 24621
A=A-1 // 24622
M=D // 24623
@LCL // 24624
A=M // 24625
D=M // 24626
@DO_EQ // 24627
0;JMP // 24628
(Scene.trace.EQ.91)
D=!D // 24629
@Scene.trace$IF_TRUE3 // 24630
D;JNE // 24631

////GotoInstruction{label='Scene.trace$IF_END3}
// goto Scene.trace$IF_END3
@Scene.trace$IF_END3 // 24632
0;JMP // 24633

////LabelInstruction{label='Scene.trace$IF_TRUE3}
// label Scene.trace$IF_TRUE3
(Scene.trace$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24634
A=M // 24635
D=M // 24636
@SP // 24637
AM=M+1 // 24638
A=A-1 // 24639
M=D // 24640
// call Intersection.dispose
@6 // 24641
D=A // 24642
@14 // 24643
M=D // 24644
@Intersection.dispose // 24645
D=A // 24646
@13 // 24647
M=D // 24648
@Scene.trace.ret.4 // 24649
D=A // 24650
@CALL // 24651
0;JMP // 24652
(Scene.trace.ret.4)
@SP // 24653
M=M-1 // 24654

////LabelInstruction{label='Scene.trace$IF_END3}
// label Scene.trace$IF_END3
(Scene.trace$IF_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 2")], call=CallInstruction{Intersection.new}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 24655
A=M+1 // 24656
A=A+1 // 24657
A=A+1 // 24658
D=M // 24659
@SP // 24660
AM=M+1 // 24661
A=A-1 // 24662
M=D // 24663
@LCL // 24664
A=M+1 // 24665
A=A+1 // 24666
D=M // 24667
@SP // 24668
AM=M+1 // 24669
A=A-1 // 24670
M=D // 24671
// call Intersection.new
@7 // 24672
D=A // 24673
@14 // 24674
M=D // 24675
@Intersection.new // 24676
D=A // 24677
@13 // 24678
M=D // 24679
@Scene.trace.ret.5 // 24680
D=A // 24681
@CALL // 24682
0;JMP // 24683
(Scene.trace.ret.5)
@SP // 24684
AM=M-1 // 24685
D=M // 24686
@LCL // 24687
A=M // 24688
M=D // 24689

////GotoInstruction{label='Scene.trace$IF_END2}
// goto Scene.trace$IF_END2
@Scene.trace$IF_END2 // 24690
0;JMP // 24691

////LabelInstruction{label='Scene.trace$IF_FALSE2}
// label Scene.trace$IF_FALSE2
(Scene.trace$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 24692
A=M+1 // 24693
A=A+1 // 24694
A=A+1 // 24695
D=M // 24696
@SP // 24697
AM=M+1 // 24698
A=A-1 // 24699
M=D // 24700
// call Number.dispose
@6 // 24701
D=A // 24702
@14 // 24703
M=D // 24704
@Number.dispose // 24705
D=A // 24706
@13 // 24707
M=D // 24708
@Scene.trace.ret.6 // 24709
D=A // 24710
@CALL // 24711
0;JMP // 24712
(Scene.trace.ret.6)
@SP // 24713
M=M-1 // 24714

////LabelInstruction{label='Scene.trace$IF_END2}
// label Scene.trace$IF_END2
(Scene.trace$IF_END2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 24715
A=M+1 // 24716
M=M+1 // 24717

////GotoInstruction{label='Scene.trace_WHILE_EXP1}
// goto Scene.trace_WHILE_EXP1
@Scene.trace_WHILE_EXP1 // 24718
0;JMP // 24719

////LabelInstruction{label='Scene.trace_WHILE_END1}
// label Scene.trace_WHILE_END1
(Scene.trace_WHILE_END1)

////PushInstruction("local 0")
@LCL // 24720
A=M // 24721
D=M // 24722
@SP // 24723
AM=M+1 // 24724
A=A-1 // 24725
M=D // 24726
@RETURN // 24727
0;JMP // 24728

////FunctionInstruction{functionName='Int32.is_negative', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.is_negative with 0
(Int32.is_negative)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24729
A=M // 24730
D=M // 24731
@3 // 24732
M=D // 24733

////UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("this 0"),
//                        right:
//                            PushInstruction("constant 3"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 128"),
//        binaryOp: "LT"
//    ),
//NOT)
@Int32.is_negative.LT.92 // 24734
D=A // 24735
@SP // 24736
AM=M+1 // 24737
A=A-1 // 24738
M=D // 24739
@THIS // 24740
A=M // 24741
D=M // 24742
@3 // 24743
A=D+A // 24744
D=M // 24745
@128 // 24746
D=D-A // 24747
@DO_LT // 24748
0;JMP // 24749
(Int32.is_negative.LT.92)
@SP // 24750
AM=M+1 // 24751
A=A-1 // 24752
M=D // 24753
@SP // 24754
A=M-1 // 24755
M=!D // 24756
@RETURN // 24757
0;JMP // 24758

////FunctionInstruction{functionName='Sys.init', numLocals=0, funcMapping={Sys.halt=0}}
// function Sys.init with 0
(Sys.init)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Memory.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Memory.init
@5 // 24759
D=A // 24760
@14 // 24761
M=D // 24762
@Memory.init // 24763
D=A // 24764
@13 // 24765
M=D // 24766
@Sys.init.ret.0 // 24767
D=A // 24768
@CALL // 24769
0;JMP // 24770
(Sys.init.ret.0)
@SP // 24771
M=M-1 // 24772

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Math.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Math.init
@5 // 24773
D=A // 24774
@14 // 24775
M=D // 24776
@Math.init // 24777
D=A // 24778
@13 // 24779
M=D // 24780
@Sys.init.ret.1 // 24781
D=A // 24782
@CALL // 24783
0;JMP // 24784
(Sys.init.ret.1)
@SP // 24785
M=M-1 // 24786

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Screen.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Screen.init
@5 // 24787
D=A // 24788
@14 // 24789
M=D // 24790
@Screen.init // 24791
D=A // 24792
@13 // 24793
M=D // 24794
@Sys.init.ret.2 // 24795
D=A // 24796
@CALL // 24797
0;JMP // 24798
(Sys.init.ret.2)
@SP // 24799
M=M-1 // 24800

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.init}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.init
@5 // 24801
D=A // 24802
@14 // 24803
M=D // 24804
@Output.init // 24805
D=A // 24806
@13 // 24807
M=D // 24808
@Sys.init.ret.3 // 24809
D=A // 24810
@CALL // 24811
0;JMP // 24812
(Sys.init.ret.3)
@SP // 24813
M=M-1 // 24814

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.main}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Main.main
@5 // 24815
D=A // 24816
@14 // 24817
M=D // 24818
@Main.main // 24819
D=A // 24820
@13 // 24821
M=D // 24822
@Sys.init.ret.4 // 24823
D=A // 24824
@CALL // 24825
0;JMP // 24826
(Sys.init.ret.4)
@SP // 24827
M=M-1 // 24828

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Sys.halt}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Sys.halt
@5 // 24829
D=A // 24830
@14 // 24831
M=D // 24832
@Sys.halt // 24833
D=A // 24834
@13 // 24835
M=D // 24836
@Sys.init.ret.5 // 24837
D=A // 24838
@CALL // 24839
0;JMP // 24840
(Sys.init.ret.5)
@SP // 24841
M=M-1 // 24842

////PushInstruction("constant 0")
@SP // 24843
AM=M+1 // 24844
A=A-1 // 24845
M=0 // 24846
@RETURN // 24847
0;JMP // 24848

////FunctionInstruction{functionName='Element.plane', numLocals=0, funcMapping={Element.surface_normal=2, Element.color=2}}
// function Element.plane with 0
(Element.plane)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 24849
D=A // 24850
@SP // 24851
AM=M+1 // 24852
A=A-1 // 24853
M=D // 24854
// call Memory.alloc
@6 // 24855
D=A // 24856
@14 // 24857
M=D // 24858
@Memory.alloc // 24859
D=A // 24860
@13 // 24861
M=D // 24862
@Element.plane.ret.0 // 24863
D=A // 24864
@CALL // 24865
0;JMP // 24866
(Element.plane.ret.0)
@SP // 24867
AM=M-1 // 24868
D=M // 24869
@3 // 24870
M=D // 24871

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 24872
A=M // 24873
D=M // 24874
@THIS // 24875
A=M // 24876
M=D // 24877

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 24878
A=M+1 // 24879
M=0 // 24880

////PushInstruction("pointer 0")
@3 // 24881
D=M // 24882
@SP // 24883
AM=M+1 // 24884
A=A-1 // 24885
M=D // 24886
@RETURN // 24887
0;JMP // 24888

////FunctionInstruction{functionName='Screen.setColor', numLocals=0, funcMapping={Screen.init=0}}
// function Screen.setColor with 0
(Screen.setColor)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=static 0}
//}

@ARG // 24889
A=M // 24890
D=M // 24891
@Screen.0 // 24892
M=D // 24893

////PushInstruction("constant 0")
@SP // 24894
AM=M+1 // 24895
A=A-1 // 24896
M=0 // 24897
@RETURN // 24898
0;JMP // 24899

////FunctionInstruction{functionName='Vec3.dispose', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.new=1}}
// function Vec3.dispose with 0
(Vec3.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24900
A=M // 24901
D=M // 24902
@3 // 24903
M=D // 24904

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Vec3.0 // 24905
M=M-1 // 24906

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24907
A=M // 24908
D=M // 24909
@SP // 24910
AM=M+1 // 24911
A=A-1 // 24912
M=D // 24913
// call Number.dispose
@6 // 24914
D=A // 24915
@14 // 24916
M=D // 24917
@Number.dispose // 24918
D=A // 24919
@13 // 24920
M=D // 24921
@Vec3.dispose.ret.0 // 24922
D=A // 24923
@CALL // 24924
0;JMP // 24925
(Vec3.dispose.ret.0)
@SP // 24926
M=M-1 // 24927

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24928
A=M+1 // 24929
D=M // 24930
@SP // 24931
AM=M+1 // 24932
A=A-1 // 24933
M=D // 24934
// call Number.dispose
@6 // 24935
D=A // 24936
@14 // 24937
M=D // 24938
@Number.dispose // 24939
D=A // 24940
@13 // 24941
M=D // 24942
@Vec3.dispose.ret.1 // 24943
D=A // 24944
@CALL // 24945
0;JMP // 24946
(Vec3.dispose.ret.1)
@SP // 24947
M=M-1 // 24948

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 24949
A=M+1 // 24950
A=A+1 // 24951
D=M // 24952
@SP // 24953
AM=M+1 // 24954
A=A-1 // 24955
M=D // 24956
// call Number.dispose
@6 // 24957
D=A // 24958
@14 // 24959
M=D // 24960
@Number.dispose // 24961
D=A // 24962
@13 // 24963
M=D // 24964
@Vec3.dispose.ret.2 // 24965
D=A // 24966
@CALL // 24967
0;JMP // 24968
(Vec3.dispose.ret.2)
@SP // 24969
M=M-1 // 24970

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 24971
D=M // 24972
@SP // 24973
AM=M+1 // 24974
A=A-1 // 24975
M=D // 24976
// call Memory.deAlloc
@6 // 24977
D=A // 24978
@14 // 24979
M=D // 24980
@Memory.deAlloc // 24981
D=A // 24982
@13 // 24983
M=D // 24984
@Vec3.dispose.ret.3 // 24985
D=A // 24986
@CALL // 24987
0;JMP // 24988
(Vec3.dispose.ret.3)
@SP // 24989
M=M-1 // 24990

////PushInstruction("constant 0")
@SP // 24991
AM=M+1 // 24992
A=A-1 // 24993
M=0 // 24994
@RETURN // 24995
0;JMP // 24996

////FunctionInstruction{functionName='DirectionalLight.getColor', numLocals=0, funcMapping={}}
// function DirectionalLight.getColor with 0
(DirectionalLight.getColor)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 24997
A=M // 24998
D=M // 24999
@3 // 25000
M=D // 25001

////PushInstruction("this 1")
@THIS // 25002
A=M+1 // 25003
D=M // 25004
@SP // 25005
AM=M+1 // 25006
A=A-1 // 25007
M=D // 25008
@RETURN // 25009
0;JMP // 25010

////FunctionInstruction{functionName='Math.init', numLocals=2, funcMapping={Math.max=0, Math.multiply=0}}
// function Math.init with 2
(Math.init)
@SP // 25011
M=M+1 // 25012
AM=M+1 // 25013
A=A-1 // 25014
M=0 // 25015
A=A-1 // 25016
M=0 // 25017

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25018
A=M // 25019
M=1 // 25020

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25021
A=M+1 // 25022
M=0 // 25023

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=static 0}
//}

@16 // 25024
D=A // 25025
@SP // 25026
AM=M+1 // 25027
A=A-1 // 25028
M=D // 25029
// call Memory.alloc
@6 // 25030
D=A // 25031
@14 // 25032
M=D // 25033
@Memory.alloc // 25034
D=A // 25035
@13 // 25036
M=D // 25037
@Math.init.ret.0 // 25038
D=A // 25039
@CALL // 25040
0;JMP // 25041
(Math.init.ret.0)
@SP // 25042
AM=M-1 // 25043
D=M // 25044
@Math.0 // 25045
M=D // 25046

////LabelInstruction{label='Math.init_WHILE_EXP1}
// label Math.init_WHILE_EXP1
(Math.init_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Math.init_WHILE_END1}}
@Math.init.LT.93 // 25047
D=A // 25048
@SP // 25049
AM=M+1 // 25050
A=A-1 // 25051
M=D // 25052
@LCL // 25053
A=M+1 // 25054
D=M // 25055
@16 // 25056
D=D-A // 25057
@DO_LT // 25058
0;JMP // 25059
(Math.init.LT.93)
D=!D // 25060
@Math.init_WHILE_END1 // 25061
D;JNE // 25062

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@Math.0 // 25063
D=M // 25064
@SP // 25065
AM=M+1 // 25066
A=A-1 // 25067
M=D // 25068
@LCL // 25069
A=M+1 // 25070
D=M // 25071
@SP // 25072
AM=M-1 // 25073
D=D+M // 25074
@SP // 25075
AM=M+1 // 25076
A=A-1 // 25077
M=D // 25078
@LCL // 25079
A=M // 25080
D=M // 25081
@SP // 25082
AM=M-1 // 25083
A=M // 25084
M=D // 25085

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25086
A=M // 25087
D=M // 25088
@LCL // 25089
A=M // 25090
M=D+M // 25091

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25092
A=M+1 // 25093
M=M+1 // 25094

////GotoInstruction{label='Math.init_WHILE_EXP1}
// goto Math.init_WHILE_EXP1
@Math.init_WHILE_EXP1 // 25095
0;JMP // 25096

////LabelInstruction{label='Math.init_WHILE_END1}
// label Math.init_WHILE_END1
(Math.init_WHILE_END1)

////PushInstruction("constant 0")
@SP // 25097
AM=M+1 // 25098
A=A-1 // 25099
M=0 // 25100
@RETURN // 25101
0;JMP // 25102

////FunctionInstruction{functionName='Main.getNegativeOneHalf', numLocals=2, funcMapping={Main.render=64, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getNegativeOneHalf with 2
(Main.getNegativeOneHalf)
@SP // 25103
M=M+1 // 25104
AM=M+1 // 25105
A=A-1 // 25106
M=0 // 25107
A=A-1 // 25108
M=0 // 25109

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 25110
AM=M+1 // 25111
A=A-1 // 25112
M=-1 // 25113
// call Number.new
@6 // 25114
D=A // 25115
@14 // 25116
M=D // 25117
@Number.new // 25118
D=A // 25119
@13 // 25120
M=D // 25121
@Main.getNegativeOneHalf.ret.0 // 25122
D=A // 25123
@CALL // 25124
0;JMP // 25125
(Main.getNegativeOneHalf.ret.0)
@SP // 25126
AM=M-1 // 25127
D=M // 25128
@LCL // 25129
A=M // 25130
M=D // 25131

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 25132
D=A // 25133
@SP // 25134
AM=M+1 // 25135
A=A-1 // 25136
M=D // 25137
// call Number.new
@6 // 25138
D=A // 25139
@14 // 25140
M=D // 25141
@Number.new // 25142
D=A // 25143
@13 // 25144
M=D // 25145
@Main.getNegativeOneHalf.ret.1 // 25146
D=A // 25147
@CALL // 25148
0;JMP // 25149
(Main.getNegativeOneHalf.ret.1)
@SP // 25150
AM=M-1 // 25151
D=M // 25152
@LCL // 25153
A=M+1 // 25154
M=D // 25155

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25156
A=M // 25157
D=M // 25158
@SP // 25159
AM=M+1 // 25160
A=A-1 // 25161
M=D // 25162
@LCL // 25163
A=M+1 // 25164
D=M // 25165
@SP // 25166
AM=M+1 // 25167
A=A-1 // 25168
M=D // 25169
// call Number.do_div
@7 // 25170
D=A // 25171
@14 // 25172
M=D // 25173
@Number.do_div // 25174
D=A // 25175
@13 // 25176
M=D // 25177
@Main.getNegativeOneHalf.ret.2 // 25178
D=A // 25179
@CALL // 25180
0;JMP // 25181
(Main.getNegativeOneHalf.ret.2)
@SP // 25182
M=M-1 // 25183

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25184
A=M+1 // 25185
D=M // 25186
@SP // 25187
AM=M+1 // 25188
A=A-1 // 25189
M=D // 25190
// call Number.dispose
@6 // 25191
D=A // 25192
@14 // 25193
M=D // 25194
@Number.dispose // 25195
D=A // 25196
@13 // 25197
M=D // 25198
@Main.getNegativeOneHalf.ret.3 // 25199
D=A // 25200
@CALL // 25201
0;JMP // 25202
(Main.getNegativeOneHalf.ret.3)
@SP // 25203
M=M-1 // 25204

////PushInstruction("local 0")
@LCL // 25205
A=M // 25206
D=M // 25207
@SP // 25208
AM=M+1 // 25209
A=A-1 // 25210
M=D // 25211
@RETURN // 25212
0;JMP // 25213

////FunctionInstruction{functionName='Main.getOneHalf', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getOneHalf with 2
(Main.getOneHalf)
@SP // 25214
M=M+1 // 25215
AM=M+1 // 25216
A=A-1 // 25217
M=0 // 25218
A=A-1 // 25219
M=0 // 25220

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 25221
AM=M+1 // 25222
A=A-1 // 25223
M=1 // 25224
// call Number.new
@6 // 25225
D=A // 25226
@14 // 25227
M=D // 25228
@Number.new // 25229
D=A // 25230
@13 // 25231
M=D // 25232
@Main.getOneHalf.ret.0 // 25233
D=A // 25234
@CALL // 25235
0;JMP // 25236
(Main.getOneHalf.ret.0)
@SP // 25237
AM=M-1 // 25238
D=M // 25239
@LCL // 25240
A=M // 25241
M=D // 25242

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 25243
D=A // 25244
@SP // 25245
AM=M+1 // 25246
A=A-1 // 25247
M=D // 25248
// call Number.new
@6 // 25249
D=A // 25250
@14 // 25251
M=D // 25252
@Number.new // 25253
D=A // 25254
@13 // 25255
M=D // 25256
@Main.getOneHalf.ret.1 // 25257
D=A // 25258
@CALL // 25259
0;JMP // 25260
(Main.getOneHalf.ret.1)
@SP // 25261
AM=M-1 // 25262
D=M // 25263
@LCL // 25264
A=M+1 // 25265
M=D // 25266

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25267
A=M // 25268
D=M // 25269
@SP // 25270
AM=M+1 // 25271
A=A-1 // 25272
M=D // 25273
@LCL // 25274
A=M+1 // 25275
D=M // 25276
@SP // 25277
AM=M+1 // 25278
A=A-1 // 25279
M=D // 25280
// call Number.do_div
@7 // 25281
D=A // 25282
@14 // 25283
M=D // 25284
@Number.do_div // 25285
D=A // 25286
@13 // 25287
M=D // 25288
@Main.getOneHalf.ret.2 // 25289
D=A // 25290
@CALL // 25291
0;JMP // 25292
(Main.getOneHalf.ret.2)
@SP // 25293
M=M-1 // 25294

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25295
A=M+1 // 25296
D=M // 25297
@SP // 25298
AM=M+1 // 25299
A=A-1 // 25300
M=D // 25301
// call Number.dispose
@6 // 25302
D=A // 25303
@14 // 25304
M=D // 25305
@Number.dispose // 25306
D=A // 25307
@13 // 25308
M=D // 25309
@Main.getOneHalf.ret.3 // 25310
D=A // 25311
@CALL // 25312
0;JMP // 25313
(Main.getOneHalf.ret.3)
@SP // 25314
M=M-1 // 25315

////PushInstruction("local 0")
@LCL // 25316
A=M // 25317
D=M // 25318
@SP // 25319
AM=M+1 // 25320
A=A-1 // 25321
M=D // 25322
@RETURN // 25323
0;JMP // 25324

////FunctionInstruction{functionName='Number.frac_to_i16', numLocals=1, funcMapping={Number.cmp=2, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.is_less_than=2, Number.do_neg=1}}
// function Number.frac_to_i16 with 1
(Number.frac_to_i16)
@SP // 25325
AM=M+1 // 25326
A=A-1 // 25327
M=0 // 25328

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25329
A=M // 25330
D=M // 25331
@3 // 25332
M=D // 25333

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 25334
A=M // 25335
D=M // 25336
@SP // 25337
AM=M+1 // 25338
A=A-1 // 25339
M=D // 25340
// call Int32.getParts
@6 // 25341
D=A // 25342
@14 // 25343
M=D // 25344
@Int32.getParts // 25345
D=A // 25346
@13 // 25347
M=D // 25348
@Number.frac_to_i16.ret.0 // 25349
D=A // 25350
@CALL // 25351
0;JMP // 25352
(Number.frac_to_i16.ret.0)
@SP // 25353
AM=M-1 // 25354
D=M // 25355
@LCL // 25356
A=M // 25357
M=D // 25358

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Number.is_negative}}, ifGoto=IfGotoInstruction{label='Number.frac_to_i16$IF_TRUE1}}
@3 // 25359
D=M // 25360
@SP // 25361
AM=M+1 // 25362
A=A-1 // 25363
M=D // 25364
// call Number.is_negative
@6 // 25365
D=A // 25366
@14 // 25367
M=D // 25368
@Number.is_negative // 25369
D=A // 25370
@13 // 25371
M=D // 25372
@Number.frac_to_i16.ret.1 // 25373
D=A // 25374
@CALL // 25375
0;JMP // 25376
(Number.frac_to_i16.ret.1)
@SP // 25377
AM=M-1 // 25378
D=M // 25379
@Number.frac_to_i16$IF_TRUE1 // 25380
D;JNE // 25381

////GotoInstruction{label='Number.frac_to_i16$IF_FALSE1}
// goto Number.frac_to_i16$IF_FALSE1
@Number.frac_to_i16$IF_FALSE1 // 25382
0;JMP // 25383

////LabelInstruction{label='Number.frac_to_i16$IF_TRUE1}
// label Number.frac_to_i16$IF_TRUE1
(Number.frac_to_i16$IF_TRUE1)

////UnaryPushGroup(CallGroup{pushes=[BinaryPushGroup(
//    left:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 255"),
//    right:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                )
//        ),
//    binaryOp: "SUB"
//), PushInstruction("constant 128")], call=CallInstruction{Math.multiply}},
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 256"),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "SUB"
//        ),
//    binaryOp: "ADD"
//), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//NEG)
@LCL // 25384
A=M // 25385
D=M // 25386
A=D+1 // 25387
D=M // 25388
@255 // 25389
D=A-D // 25390
@SP // 25391
AM=M+1 // 25392
A=A-1 // 25393
M=D // 25394
@128 // 25395
D=A // 25396
@SP // 25397
AM=M+1 // 25398
A=A-1 // 25399
M=D // 25400
// call Math.multiply
@7 // 25401
D=A // 25402
@14 // 25403
M=D // 25404
@Math.multiply // 25405
D=A // 25406
@13 // 25407
M=D // 25408
@Number.frac_to_i16.ret.2 // 25409
D=A // 25410
@CALL // 25411
0;JMP // 25412
(Number.frac_to_i16.ret.2)
@LCL // 25413
A=M // 25414
D=M // 25415
@0 // 25416
A=D+A // 25417
D=M // 25418
@256 // 25419
D=A-D // 25420
@SP // 25421
AM=M-1 // 25422
D=D+M // 25423
@SP // 25424
AM=M+1 // 25425
A=A-1 // 25426
M=D // 25427
@2 // 25428
D=A // 25429
@SP // 25430
AM=M+1 // 25431
A=A-1 // 25432
M=D // 25433
// call Math.divide
@7 // 25434
D=A // 25435
@14 // 25436
M=D // 25437
@Math.divide // 25438
D=A // 25439
@13 // 25440
M=D // 25441
@Number.frac_to_i16.ret.3 // 25442
D=A // 25443
@CALL // 25444
0;JMP // 25445
(Number.frac_to_i16.ret.3)
@SP // 25446
A=M-1 // 25447
M=-D // 25448
@RETURN // 25449
0;JMP // 25450

////GotoInstruction{label='Number.frac_to_i16$IF_END1}
// goto Number.frac_to_i16$IF_END1
@Number.frac_to_i16$IF_END1 // 25451
0;JMP // 25452

////LabelInstruction{label='Number.frac_to_i16$IF_FALSE1}
// label Number.frac_to_i16$IF_FALSE1
(Number.frac_to_i16$IF_FALSE1)

////BinaryPushGroup(
//    left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 128")], call=CallInstruction{Math.multiply}},
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//    binaryOp: "ADD"
//)
@LCL // 25453
A=M // 25454
D=M // 25455
A=D+1 // 25456
D=M // 25457
@SP // 25458
AM=M+1 // 25459
A=A-1 // 25460
M=D // 25461
@128 // 25462
D=A // 25463
@SP // 25464
AM=M+1 // 25465
A=A-1 // 25466
M=D // 25467
// call Math.multiply
@7 // 25468
D=A // 25469
@14 // 25470
M=D // 25471
@Math.multiply // 25472
D=A // 25473
@13 // 25474
M=D // 25475
@Number.frac_to_i16.ret.4 // 25476
D=A // 25477
@CALL // 25478
0;JMP // 25479
(Number.frac_to_i16.ret.4)
@LCL // 25480
A=M // 25481
D=M // 25482
@0 // 25483
A=D+A // 25484
D=M // 25485
@SP // 25486
AM=M+1 // 25487
A=A-1 // 25488
M=D // 25489
@2 // 25490
D=A // 25491
@SP // 25492
AM=M+1 // 25493
A=A-1 // 25494
M=D // 25495
// call Math.divide
@7 // 25496
D=A // 25497
@14 // 25498
M=D // 25499
@Math.divide // 25500
D=A // 25501
@13 // 25502
M=D // 25503
@Number.frac_to_i16.ret.5 // 25504
D=A // 25505
@CALL // 25506
0;JMP // 25507
(Number.frac_to_i16.ret.5)
@SP // 25508
AM=M-1 // 25509
D=M // 25510
@SP // 25511
AM=M-1 // 25512
D=D+M // 25513
@SP // 25514
AM=M+1 // 25515
A=A-1 // 25516
M=D // 25517
@RETURN // 25518
0;JMP // 25519

////LabelInstruction{label='Number.frac_to_i16$IF_END1}
// label Number.frac_to_i16$IF_END1
(Number.frac_to_i16$IF_END1)

////FunctionInstruction{functionName='Vec3.do_scale', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.new=1}}
// function Vec3.do_scale with 0
(Vec3.do_scale)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25520
A=M // 25521
D=M // 25522
@3 // 25523
M=D // 25524

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25525
A=M // 25526
D=M // 25527
@SP // 25528
AM=M+1 // 25529
A=A-1 // 25530
M=D // 25531
@ARG // 25532
A=M+1 // 25533
D=M // 25534
@SP // 25535
AM=M+1 // 25536
A=A-1 // 25537
M=D // 25538
// call Number.do_mul
@7 // 25539
D=A // 25540
@14 // 25541
M=D // 25542
@Number.do_mul // 25543
D=A // 25544
@13 // 25545
M=D // 25546
@Vec3.do_scale.ret.0 // 25547
D=A // 25548
@CALL // 25549
0;JMP // 25550
(Vec3.do_scale.ret.0)
@SP // 25551
M=M-1 // 25552

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25553
A=M+1 // 25554
D=M // 25555
@SP // 25556
AM=M+1 // 25557
A=A-1 // 25558
M=D // 25559
@ARG // 25560
A=M+1 // 25561
D=M // 25562
@SP // 25563
AM=M+1 // 25564
A=A-1 // 25565
M=D // 25566
// call Number.do_mul
@7 // 25567
D=A // 25568
@14 // 25569
M=D // 25570
@Number.do_mul // 25571
D=A // 25572
@13 // 25573
M=D // 25574
@Vec3.do_scale.ret.1 // 25575
D=A // 25576
@CALL // 25577
0;JMP // 25578
(Vec3.do_scale.ret.1)
@SP // 25579
M=M-1 // 25580

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("argument 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25581
A=M+1 // 25582
A=A+1 // 25583
D=M // 25584
@SP // 25585
AM=M+1 // 25586
A=A-1 // 25587
M=D // 25588
@ARG // 25589
A=M+1 // 25590
D=M // 25591
@SP // 25592
AM=M+1 // 25593
A=A-1 // 25594
M=D // 25595
// call Number.do_mul
@7 // 25596
D=A // 25597
@14 // 25598
M=D // 25599
@Number.do_mul // 25600
D=A // 25601
@13 // 25602
M=D // 25603
@Vec3.do_scale.ret.2 // 25604
D=A // 25605
@CALL // 25606
0;JMP // 25607
(Vec3.do_scale.ret.2)
@SP // 25608
M=M-1 // 25609

////PushInstruction("constant 0")
@SP // 25610
AM=M+1 // 25611
A=A-1 // 25612
M=0 // 25613
@RETURN // 25614
0;JMP // 25615

////FunctionInstruction{functionName='Scene.getNumLights', numLocals=0, funcMapping={Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.getNumLights with 0
(Scene.getNumLights)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25616
A=M // 25617
D=M // 25618
@3 // 25619
M=D // 25620

////PushInstruction("this 8")
@THIS // 25621
D=M // 25622
@8 // 25623
A=D+A // 25624
D=M // 25625
@SP // 25626
AM=M+1 // 25627
A=A-1 // 25628
M=D // 25629
@RETURN // 25630
0;JMP // 25631

////FunctionInstruction{functionName='Intersection.new', numLocals=0, funcMapping={Intersection.dispose=2}}
// function Intersection.new with 0
(Intersection.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 25632
D=A // 25633
@SP // 25634
AM=M+1 // 25635
A=A-1 // 25636
M=D // 25637
// call Memory.alloc
@6 // 25638
D=A // 25639
@14 // 25640
M=D // 25641
@Memory.alloc // 25642
D=A // 25643
@13 // 25644
M=D // 25645
@Intersection.new.ret.0 // 25646
D=A // 25647
@CALL // 25648
0;JMP // 25649
(Intersection.new.ret.0)
@SP // 25650
AM=M-1 // 25651
D=M // 25652
@3 // 25653
M=D // 25654

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Intersection.0 // 25655
M=M+1 // 25656

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 25657
A=M // 25658
D=M // 25659
@THIS // 25660
A=M // 25661
M=D // 25662

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 25663
A=M+1 // 25664
D=M // 25665
@THIS // 25666
A=M+1 // 25667
M=D // 25668

////PushInstruction("pointer 0")
@3 // 25669
D=M // 25670
@SP // 25671
AM=M+1 // 25672
A=A-1 // 25673
M=D // 25674
@RETURN // 25675
0;JMP // 25676

////FunctionInstruction{functionName='Number.getV', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.is_less_than=2, Number.do_neg=1}}
// function Number.getV with 0
(Number.getV)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25677
A=M // 25678
D=M // 25679
@3 // 25680
M=D // 25681

////PushInstruction("this 0")
@THIS // 25682
A=M // 25683
D=M // 25684
@SP // 25685
AM=M+1 // 25686
A=A-1 // 25687
M=D // 25688
@RETURN // 25689
0;JMP // 25690

////FunctionInstruction{functionName='Int32.do_mul', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_mul with 0
(Int32.do_mul)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25691
A=M // 25692
D=M // 25693
@3 // 25694
M=D // 25695

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("argument 1"), PushInstruction("constant 0")], call=CallInstruction{Int32.do_mul_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 25696
D=M // 25697
@SP // 25698
AM=M+1 // 25699
A=A-1 // 25700
M=D // 25701
@2 // 25702
D=A // 25703
@SP // 25704
M=D+M // 25705
@ARG // 25706
A=M+1 // 25707
D=M // 25708
@SP // 25709
A=M-1 // 25710
M=D // 25711
A=A-1 // 25712
M=0 // 25713
// call Int32.do_mul_right_shift_bytes
@8 // 25714
D=A // 25715
@14 // 25716
M=D // 25717
@Int32.do_mul_right_shift_bytes // 25718
D=A // 25719
@13 // 25720
M=D // 25721
@Int32.do_mul.ret.0 // 25722
D=A // 25723
@CALL // 25724
0;JMP // 25725
(Int32.do_mul.ret.0)
@SP // 25726
M=M-1 // 25727

////PushInstruction("constant 0")
@SP // 25728
AM=M+1 // 25729
A=A-1 // 25730
M=0 // 25731
@RETURN // 25732
0;JMP // 25733

////FunctionInstruction{functionName='Vec3.getX', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.new=1}}
// function Vec3.getX with 0
(Vec3.getX)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25734
A=M // 25735
D=M // 25736
@3 // 25737
M=D // 25738

////PushInstruction("this 0")
@THIS // 25739
A=M // 25740
D=M // 25741
@SP // 25742
AM=M+1 // 25743
A=A-1 // 25744
M=D // 25745
@RETURN // 25746
0;JMP // 25747

////FunctionInstruction{functionName='Int32.nlz_u4', numLocals=2, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.do_mul=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.nlz_u4 with 2
(Int32.nlz_u4)
@SP // 25748
M=M+1 // 25749
AM=M+1 // 25750
A=A-1 // 25751
M=0 // 25752
A=A-1 // 25753
M=0 // 25754

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25755
A=M // 25756
M=0 // 25757

////PushPopPair {
//  push: PushInstruction("constant 3")
//  pop:  PopInstruction{address=local 1}
//}

@3 // 25758
D=A // 25759
@LCL // 25760
A=M+1 // 25761
M=D // 25762

////LabelInstruction{label='Int32.nlz_u4_WHILE_EXP1}
// label Int32.nlz_u4_WHILE_EXP1
(Int32.nlz_u4_WHILE_EXP1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.nlz_u4_WHILE_END1}}
@Int32.nlz_u4.LT.94 // 25763
D=A // 25764
@SP // 25765
AM=M+1 // 25766
A=A-1 // 25767
M=D // 25768
@LCL // 25769
A=M+1 // 25770
D=M // 25771
@DO_LT // 25772
0;JMP // 25773
(Int32.nlz_u4.LT.94)
@Int32.nlz_u4_WHILE_END1 // 25774
D;JNE // 25775

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 1")], call=CallInstruction{Int32.arith_rightshift}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Int32.nlz_u4$IF_TRUE1}}
@Int32.nlz_u4.EQ.95 // 25776
D=A // 25777
@SP // 25778
AM=M+1 // 25779
A=A-1 // 25780
M=D // 25781
@ARG // 25782
A=M // 25783
D=M // 25784
@SP // 25785
AM=M+1 // 25786
A=A-1 // 25787
M=D // 25788
@LCL // 25789
A=M+1 // 25790
D=M // 25791
@SP // 25792
AM=M+1 // 25793
A=A-1 // 25794
M=D // 25795
// call Int32.arith_rightshift
@7 // 25796
D=A // 25797
@14 // 25798
M=D // 25799
@Int32.arith_rightshift // 25800
D=A // 25801
@13 // 25802
M=D // 25803
@Int32.nlz_u4.ret.0 // 25804
D=A // 25805
@CALL // 25806
0;JMP // 25807
(Int32.nlz_u4.ret.0)
@SP // 25808
AM=M-1 // 25809
D=M // 25810
@DO_EQ // 25811
0;JMP // 25812
(Int32.nlz_u4.EQ.95)
@Int32.nlz_u4$IF_TRUE1 // 25813
D;JNE // 25814

////GotoInstruction{label='Int32.nlz_u4$IF_FALSE1}
// goto Int32.nlz_u4$IF_FALSE1
@Int32.nlz_u4$IF_FALSE1 // 25815
0;JMP // 25816

////LabelInstruction{label='Int32.nlz_u4$IF_TRUE1}
// label Int32.nlz_u4$IF_TRUE1
(Int32.nlz_u4$IF_TRUE1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25817
A=M // 25818
M=M+1 // 25819

////GotoInstruction{label='Int32.nlz_u4$IF_END1}
// goto Int32.nlz_u4$IF_END1
@Int32.nlz_u4$IF_END1 // 25820
0;JMP // 25821

////LabelInstruction{label='Int32.nlz_u4$IF_FALSE1}
// label Int32.nlz_u4$IF_FALSE1
(Int32.nlz_u4$IF_FALSE1)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25822
A=M+1 // 25823
M=-1 // 25824

////LabelInstruction{label='Int32.nlz_u4$IF_END1}
// label Int32.nlz_u4$IF_END1
(Int32.nlz_u4$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 25825
A=M+1 // 25826
M=M-1 // 25827

////GotoInstruction{label='Int32.nlz_u4_WHILE_EXP1}
// goto Int32.nlz_u4_WHILE_EXP1
@Int32.nlz_u4_WHILE_EXP1 // 25828
0;JMP // 25829

////LabelInstruction{label='Int32.nlz_u4_WHILE_END1}
// label Int32.nlz_u4_WHILE_END1
(Int32.nlz_u4_WHILE_END1)

////PushInstruction("local 0")
@LCL // 25830
A=M // 25831
D=M // 25832
@SP // 25833
AM=M+1 // 25834
A=A-1 // 25835
M=D // 25836
@RETURN // 25837
0;JMP // 25838

////FunctionInstruction{functionName='Vec3.getY', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1}}
// function Vec3.getY with 0
(Vec3.getY)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25839
A=M // 25840
D=M // 25841
@3 // 25842
M=D // 25843

////PushInstruction("this 1")
@THIS // 25844
A=M+1 // 25845
D=M // 25846
@SP // 25847
AM=M+1 // 25848
A=A-1 // 25849
M=D // 25850
@RETURN // 25851
0;JMP // 25852

////FunctionInstruction{functionName='Scene.dispose', numLocals=3, funcMapping={Scene.getNumLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20}}
// function Scene.dispose with 3
(Scene.dispose)
@3 // 25853
D=A // 25854
@SP // 25855
AM=D+M // 25856
A=A-1 // 25857
M=0 // 25858
A=A-1 // 25859
M=0 // 25860
A=A-1 // 25861
M=0 // 25862

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 25863
A=M // 25864
D=M // 25865
@3 // 25866
M=D // 25867

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25868
A=M // 25869
M=0 // 25870

////LabelInstruction{label='Scene.dispose_WHILE_EXP1}
// label Scene.dispose_WHILE_EXP1
(Scene.dispose_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("this 6"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.dispose_WHILE_END1}}
@Scene.dispose.LT.96 // 25871
D=A // 25872
@SP // 25873
AM=M+1 // 25874
A=A-1 // 25875
M=D // 25876
@LCL // 25877
A=M // 25878
D=M // 25879
@SP // 25880
AM=M+1 // 25881
A=A-1 // 25882
M=D // 25883
@THIS // 25884
D=M // 25885
@6 // 25886
A=D+A // 25887
D=M // 25888
@SP // 25889
AM=M-1 // 25890
D=M-D // 25891
@DO_LT // 25892
0;JMP // 25893
(Scene.dispose.LT.96)
D=!D // 25894
@Scene.dispose_WHILE_END1 // 25895
D;JNE // 25896

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 5"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 25897
D=M // 25898
@5 // 25899
A=D+A // 25900
D=M // 25901
@SP // 25902
AM=M+1 // 25903
A=A-1 // 25904
M=D // 25905
@LCL // 25906
A=M // 25907
D=M // 25908
@SP // 25909
AM=M-1 // 25910
A=D+M // 25911
D=M // 25912
@LCL // 25913
A=M+1 // 25914
M=D // 25915

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Element.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 25916
A=M+1 // 25917
D=M // 25918
@SP // 25919
AM=M+1 // 25920
A=A-1 // 25921
M=D // 25922
// call Element.dispose
@6 // 25923
D=A // 25924
@14 // 25925
M=D // 25926
@Element.dispose // 25927
D=A // 25928
@13 // 25929
M=D // 25930
@Scene.dispose.ret.0 // 25931
D=A // 25932
@CALL // 25933
0;JMP // 25934
(Scene.dispose.ret.0)
@SP // 25935
M=M-1 // 25936

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25937
A=M // 25938
M=M+1 // 25939

////GotoInstruction{label='Scene.dispose_WHILE_EXP1}
// goto Scene.dispose_WHILE_EXP1
@Scene.dispose_WHILE_EXP1 // 25940
0;JMP // 25941

////LabelInstruction{label='Scene.dispose_WHILE_END1}
// label Scene.dispose_WHILE_END1
(Scene.dispose_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 5")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 25942
D=M // 25943
@5 // 25944
A=D+A // 25945
D=M // 25946
@SP // 25947
AM=M+1 // 25948
A=A-1 // 25949
M=D // 25950
// call Memory.deAlloc
@6 // 25951
D=A // 25952
@14 // 25953
M=D // 25954
@Memory.deAlloc // 25955
D=A // 25956
@13 // 25957
M=D // 25958
@Scene.dispose.ret.1 // 25959
D=A // 25960
@CALL // 25961
0;JMP // 25962
(Scene.dispose.ret.1)
@SP // 25963
M=M-1 // 25964

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 25965
A=M // 25966
M=0 // 25967

////LabelInstruction{label='Scene.dispose_WHILE_EXP2}
// label Scene.dispose_WHILE_EXP2
(Scene.dispose_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("this 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Scene.dispose_WHILE_END2}}
@Scene.dispose.LT.97 // 25968
D=A // 25969
@SP // 25970
AM=M+1 // 25971
A=A-1 // 25972
M=D // 25973
@LCL // 25974
A=M // 25975
D=M // 25976
@SP // 25977
AM=M+1 // 25978
A=A-1 // 25979
M=D // 25980
@THIS // 25981
D=M // 25982
@8 // 25983
A=D+A // 25984
D=M // 25985
@SP // 25986
AM=M-1 // 25987
D=M-D // 25988
@DO_LT // 25989
0;JMP // 25990
(Scene.dispose.LT.97)
D=!D // 25991
@Scene.dispose_WHILE_END2 // 25992
D;JNE // 25993

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 7"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 25994
D=M // 25995
@7 // 25996
A=D+A // 25997
D=M // 25998
@SP // 25999
AM=M+1 // 26000
A=A-1 // 26001
M=D // 26002
@LCL // 26003
A=M // 26004
D=M // 26005
@SP // 26006
AM=M-1 // 26007
A=D+M // 26008
D=M // 26009
@LCL // 26010
A=M+1 // 26011
A=A+1 // 26012
M=D // 26013

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{DirectionalLight.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26014
A=M+1 // 26015
A=A+1 // 26016
D=M // 26017
@SP // 26018
AM=M+1 // 26019
A=A-1 // 26020
M=D // 26021
// call DirectionalLight.dispose
@6 // 26022
D=A // 26023
@14 // 26024
M=D // 26025
@DirectionalLight.dispose // 26026
D=A // 26027
@13 // 26028
M=D // 26029
@Scene.dispose.ret.2 // 26030
D=A // 26031
@CALL // 26032
0;JMP // 26033
(Scene.dispose.ret.2)
@SP // 26034
M=M-1 // 26035

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 26036
A=M // 26037
M=M+1 // 26038

////GotoInstruction{label='Scene.dispose_WHILE_EXP2}
// goto Scene.dispose_WHILE_EXP2
@Scene.dispose_WHILE_EXP2 // 26039
0;JMP // 26040

////LabelInstruction{label='Scene.dispose_WHILE_END2}
// label Scene.dispose_WHILE_END2
(Scene.dispose_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 7")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26041
D=M // 26042
@7 // 26043
A=D+A // 26044
D=M // 26045
@SP // 26046
AM=M+1 // 26047
A=A-1 // 26048
M=D // 26049
// call Memory.deAlloc
@6 // 26050
D=A // 26051
@14 // 26052
M=D // 26053
@Memory.deAlloc // 26054
D=A // 26055
@13 // 26056
M=D // 26057
@Scene.dispose.ret.3 // 26058
D=A // 26059
@CALL // 26060
0;JMP // 26061
(Scene.dispose.ret.3)
@SP // 26062
M=M-1 // 26063

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26064
A=M+1 // 26065
A=A+1 // 26066
D=M // 26067
@SP // 26068
AM=M+1 // 26069
A=A-1 // 26070
M=D // 26071
// call Number.dispose
@6 // 26072
D=A // 26073
@14 // 26074
M=D // 26075
@Number.dispose // 26076
D=A // 26077
@13 // 26078
M=D // 26079
@Scene.dispose.ret.4 // 26080
D=A // 26081
@CALL // 26082
0;JMP // 26083
(Scene.dispose.ret.4)
@SP // 26084
M=M-1 // 26085

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26086
A=M+1 // 26087
A=A+1 // 26088
A=A+1 // 26089
D=M // 26090
@SP // 26091
AM=M+1 // 26092
A=A-1 // 26093
M=D // 26094
// call Number.dispose
@6 // 26095
D=A // 26096
@14 // 26097
M=D // 26098
@Number.dispose // 26099
D=A // 26100
@13 // 26101
M=D // 26102
@Scene.dispose.ret.5 // 26103
D=A // 26104
@CALL // 26105
0;JMP // 26106
(Scene.dispose.ret.5)
@SP // 26107
M=M-1 // 26108

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26109
D=M // 26110
@4 // 26111
A=D+A // 26112
D=M // 26113
@SP // 26114
AM=M+1 // 26115
A=A-1 // 26116
M=D // 26117
// call Number.dispose
@6 // 26118
D=A // 26119
@14 // 26120
M=D // 26121
@Number.dispose // 26122
D=A // 26123
@13 // 26124
M=D // 26125
@Scene.dispose.ret.6 // 26126
D=A // 26127
@CALL // 26128
0;JMP // 26129
(Scene.dispose.ret.6)
@SP // 26130
M=M-1 // 26131

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 26132
D=M // 26133
@SP // 26134
AM=M+1 // 26135
A=A-1 // 26136
M=D // 26137
// call Memory.deAlloc
@6 // 26138
D=A // 26139
@14 // 26140
M=D // 26141
@Memory.deAlloc // 26142
D=A // 26143
@13 // 26144
M=D // 26145
@Scene.dispose.ret.7 // 26146
D=A // 26147
@CALL // 26148
0;JMP // 26149
(Scene.dispose.ret.7)
@SP // 26150
M=M-1 // 26151

////PushInstruction("constant 0")
@SP // 26152
AM=M+1 // 26153
A=A-1 // 26154
M=0 // 26155
@RETURN // 26156
0;JMP // 26157

////FunctionInstruction{functionName='Vec3.getZ', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0}}
// function Vec3.getZ with 0
(Vec3.getZ)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26158
A=M // 26159
D=M // 26160
@3 // 26161
M=D // 26162

////PushInstruction("this 2")
@THIS // 26163
A=M+1 // 26164
A=A+1 // 26165
D=M // 26166
@SP // 26167
AM=M+1 // 26168
A=A-1 // 26169
M=D // 26170
@RETURN // 26171
0;JMP // 26172

////FunctionInstruction{functionName='Output.printInt', numLocals=1, funcMapping={Output.init=97, Output.println=0, Output.printString=3, Output.getMap=0, Output.create=1}}
// function Output.printInt with 1
(Output.printInt)
@SP // 26173
AM=M+1 // 26174
A=A-1 // 26175
M=0 // 26176

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{String.new}}
//  pop:  PopInstruction{address=local 0}
//}

@10 // 26177
D=A // 26178
@SP // 26179
AM=M+1 // 26180
A=A-1 // 26181
M=D // 26182
// call String.new
@6 // 26183
D=A // 26184
@14 // 26185
M=D // 26186
@String.new // 26187
D=A // 26188
@13 // 26189
M=D // 26190
@Output.printInt.ret.0 // 26191
D=A // 26192
@CALL // 26193
0;JMP // 26194
(Output.printInt.ret.0)
@SP // 26195
AM=M-1 // 26196
D=M // 26197
@LCL // 26198
A=M // 26199
M=D // 26200

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 0")], call=CallInstruction{String.setInt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26201
A=M // 26202
D=M // 26203
@SP // 26204
AM=M+1 // 26205
A=A-1 // 26206
M=D // 26207
@ARG // 26208
A=M // 26209
D=M // 26210
@SP // 26211
AM=M+1 // 26212
A=A-1 // 26213
M=D // 26214
// call String.setInt
@7 // 26215
D=A // 26216
@14 // 26217
M=D // 26218
@String.setInt // 26219
D=A // 26220
@13 // 26221
M=D // 26222
@Output.printInt.ret.1 // 26223
D=A // 26224
@CALL // 26225
0;JMP // 26226
(Output.printInt.ret.1)
@SP // 26227
M=M-1 // 26228

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Output.printString}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26229
A=M // 26230
D=M // 26231
@SP // 26232
AM=M+1 // 26233
A=A-1 // 26234
M=D // 26235
// call Output.printString
@6 // 26236
D=A // 26237
@14 // 26238
M=D // 26239
@Output.printString // 26240
D=A // 26241
@13 // 26242
M=D // 26243
@Output.printInt.ret.2 // 26244
D=A // 26245
@CALL // 26246
0;JMP // 26247
(Output.printInt.ret.2)
@SP // 26248
M=M-1 // 26249

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{String.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26250
A=M // 26251
D=M // 26252
@SP // 26253
AM=M+1 // 26254
A=A-1 // 26255
M=D // 26256
// call String.dispose
@6 // 26257
D=A // 26258
@14 // 26259
M=D // 26260
@String.dispose // 26261
D=A // 26262
@13 // 26263
M=D // 26264
@Output.printInt.ret.3 // 26265
D=A // 26266
@CALL // 26267
0;JMP // 26268
(Output.printInt.ret.3)
@SP // 26269
M=M-1 // 26270

////PushInstruction("constant 0")
@SP // 26271
AM=M+1 // 26272
A=A-1 // 26273
M=0 // 26274
@RETURN // 26275
0;JMP // 26276

////FunctionInstruction{functionName='Memory.alloc', numLocals=5, funcMapping={Memory.copy=0, Memory.add_node=0, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.alloc with 5
(Memory.alloc)
@5 // 26277
D=A // 26278
@SP // 26279
AM=D+M // 26280
A=A-1 // 26281
M=0 // 26282
A=A-1 // 26283
M=0 // 26284
A=A-1 // 26285
M=0 // 26286
A=A-1 // 26287
M=0 // 26288
A=A-1 // 26289
M=0 // 26290

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Memory.getBinIndex}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 26291
A=M // 26292
D=M // 26293
@SP // 26294
AM=M+1 // 26295
A=A-1 // 26296
M=D // 26297
// call Memory.getBinIndex
@6 // 26298
D=A // 26299
@14 // 26300
M=D // 26301
@Memory.getBinIndex // 26302
D=A // 26303
@13 // 26304
M=D // 26305
@Memory.alloc.ret.0 // 26306
D=A // 26307
@CALL // 26308
0;JMP // 26309
(Memory.alloc.ret.0)
@SP // 26310
AM=M-1 // 26311
D=M // 26312
@LCL // 26313
A=M // 26314
M=D // 26315

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 26316
A=M // 26317
D=M // 26318
@2048 // 26319
D=D+A // 26320
@LCL // 26321
A=M+1 // 26322
M=D // 26323

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 0")], call=CallInstruction{Memory.get_best_fit}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 26324
A=M+1 // 26325
D=M // 26326
@SP // 26327
AM=M+1 // 26328
A=A-1 // 26329
M=D // 26330
@ARG // 26331
A=M // 26332
D=M // 26333
@SP // 26334
AM=M+1 // 26335
A=A-1 // 26336
M=D // 26337
// call Memory.get_best_fit
@7 // 26338
D=A // 26339
@14 // 26340
M=D // 26341
@Memory.get_best_fit // 26342
D=A // 26343
@13 // 26344
M=D // 26345
@Memory.alloc.ret.1 // 26346
D=A // 26347
@CALL // 26348
0;JMP // 26349
(Memory.alloc.ret.1)
@SP // 26350
AM=M-1 // 26351
D=M // 26352
@LCL // 26353
A=M+1 // 26354
A=A+1 // 26355
M=D // 26356

////LabelInstruction{label='Memory.alloc_WHILE_EXP1}
// label Memory.alloc_WHILE_EXP1
(Memory.alloc_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.alloc_WHILE_END1}}
@Memory.alloc.EQ.98 // 26357
D=A // 26358
@SP // 26359
AM=M+1 // 26360
A=A-1 // 26361
M=D // 26362
@LCL // 26363
A=M+1 // 26364
A=A+1 // 26365
D=M // 26366
@DO_EQ // 26367
0;JMP // 26368
(Memory.alloc.EQ.98)
D=!D // 26369
@Memory.alloc_WHILE_END1 // 26370
D;JNE // 26371

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            BinaryPushGroup(
//                left:
//                    PushInstruction("local 0"),
//                right:
//                    PushInstruction("constant 1"),
//                binaryOp: "ADD"
//            ),
//        right:
//            PushInstruction("constant 7"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.alloc$IF_TRUE1}}
@Memory.alloc.LT.99 // 26372
D=A // 26373
@SP // 26374
AM=M+1 // 26375
A=A-1 // 26376
M=D // 26377
@LCL // 26378
A=M // 26379
D=M // 26380
D=D+1 // 26381
@7 // 26382
D=D-A // 26383
@DO_LT // 26384
0;JMP // 26385
(Memory.alloc.LT.99)
D=!D // 26386
@Memory.alloc$IF_TRUE1 // 26387
D;JNE // 26388

////GotoInstruction{label='Memory.alloc$IF_END1}
// goto Memory.alloc$IF_END1
@Memory.alloc$IF_END1 // 26389
0;JMP // 26390

////LabelInstruction{label='Memory.alloc$IF_TRUE1}
// label Memory.alloc$IF_TRUE1
(Memory.alloc$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Sys.error}}
//  pop:  PopInstruction{address=temp 0}
//}

@10 // 26391
D=A // 26392
@SP // 26393
AM=M+1 // 26394
A=A-1 // 26395
M=D // 26396
// call Sys.error
@6 // 26397
D=A // 26398
@14 // 26399
M=D // 26400
@Sys.error // 26401
D=A // 26402
@13 // 26403
M=D // 26404
@Memory.alloc.ret.2 // 26405
D=A // 26406
@CALL // 26407
0;JMP // 26408
(Memory.alloc.ret.2)
@SP // 26409
M=M-1 // 26410

////PushInstruction("constant 0")
@SP // 26411
AM=M+1 // 26412
A=A-1 // 26413
M=0 // 26414
@RETURN // 26415
0;JMP // 26416

////LabelInstruction{label='Memory.alloc$IF_END1}
// label Memory.alloc$IF_END1
(Memory.alloc$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 26417
A=M // 26418
M=M+1 // 26419

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 26420
A=M // 26421
D=M // 26422
@2048 // 26423
D=D+A // 26424
@LCL // 26425
A=M+1 // 26426
M=D // 26427

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("argument 0")], call=CallInstruction{Memory.get_best_fit}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 26428
A=M+1 // 26429
D=M // 26430
@SP // 26431
AM=M+1 // 26432
A=A-1 // 26433
M=D // 26434
@ARG // 26435
A=M // 26436
D=M // 26437
@SP // 26438
AM=M+1 // 26439
A=A-1 // 26440
M=D // 26441
// call Memory.get_best_fit
@7 // 26442
D=A // 26443
@14 // 26444
M=D // 26445
@Memory.get_best_fit // 26446
D=A // 26447
@13 // 26448
M=D // 26449
@Memory.alloc.ret.3 // 26450
D=A // 26451
@CALL // 26452
0;JMP // 26453
(Memory.alloc.ret.3)
@SP // 26454
AM=M-1 // 26455
D=M // 26456
@LCL // 26457
A=M+1 // 26458
A=A+1 // 26459
M=D // 26460

////GotoInstruction{label='Memory.alloc_WHILE_EXP1}
// goto Memory.alloc_WHILE_EXP1
@Memory.alloc_WHILE_EXP1 // 26461
0;JMP // 26462

////LabelInstruction{label='Memory.alloc_WHILE_END1}
// label Memory.alloc_WHILE_END1
(Memory.alloc_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26463
A=M+1 // 26464
A=A+1 // 26465
D=M // 26466
@0 // 26467
A=D+A // 26468
D=M // 26469
@SP // 26470
AM=M+1 // 26471
A=A-1 // 26472
M=D // 26473
// call Memory.getBinIndex
@6 // 26474
D=A // 26475
@14 // 26476
M=D // 26477
@Memory.getBinIndex // 26478
D=A // 26479
@13 // 26480
M=D // 26481
@Memory.alloc.ret.4 // 26482
D=A // 26483
@CALL // 26484
0;JMP // 26485
(Memory.alloc.ret.4)
@SP // 26486
AM=M-1 // 26487
D=M // 26488
@2048 // 26489
D=D+A // 26490
@SP // 26491
AM=M+1 // 26492
A=A-1 // 26493
M=D // 26494
@LCL // 26495
A=M+1 // 26496
A=A+1 // 26497
D=M // 26498
@SP // 26499
AM=M+1 // 26500
A=A-1 // 26501
M=D // 26502
// call Memory.remove_node
@7 // 26503
D=A // 26504
@14 // 26505
M=D // 26506
@Memory.remove_node // 26507
D=A // 26508
@13 // 26509
M=D // 26510
@Memory.alloc.ret.5 // 26511
D=A // 26512
@CALL // 26513
0;JMP // 26514
(Memory.alloc.ret.5)
@SP // 26515
M=M-1 // 26516

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("argument 0"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 26517
A=M+1 // 26518
A=A+1 // 26519
D=M // 26520
@0 // 26521
A=D+A // 26522
D=M // 26523
@SP // 26524
AM=M+1 // 26525
A=A-1 // 26526
M=D // 26527
@ARG // 26528
A=M // 26529
D=M // 26530
@SP // 26531
AM=M-1 // 26532
D=M-D // 26533
@LCL // 26534
A=M+1 // 26535
A=A+1 // 26536
A=A+1 // 26537
M=D // 26538

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Memory.alloc$IF_TRUE2}}
@Memory.alloc.GT.100 // 26539
D=A // 26540
@SP // 26541
AM=M+1 // 26542
A=A-1 // 26543
M=D // 26544
@LCL // 26545
A=M+1 // 26546
A=A+1 // 26547
A=A+1 // 26548
D=M // 26549
@5 // 26550
D=D-A // 26551
@DO_GT // 26552
0;JMP // 26553
(Memory.alloc.GT.100)
@Memory.alloc$IF_TRUE2 // 26554
D;JNE // 26555

////GotoInstruction{label='Memory.alloc$IF_FALSE2}
// goto Memory.alloc$IF_FALSE2
@Memory.alloc$IF_FALSE2 // 26556
0;JMP // 26557

////LabelInstruction{label='Memory.alloc$IF_TRUE2}
// label Memory.alloc$IF_TRUE2
(Memory.alloc$IF_TRUE2)

////PushWriter{source=PushInstruction("argument 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 26558
A=M+1 // 26559
A=A+1 // 26560
D=M // 26561
@SP // 26562
AM=M+1 // 26563
A=A-1 // 26564
M=D // 26565
@ARG // 26566
A=M // 26567
D=M // 26568
@SP // 26569
AM=M-1 // 26570
A=M // 26571
M=D // 26572

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 26573
A=M+1 // 26574
A=A+1 // 26575
D=M // 26576
@SP // 26577
AM=M+1 // 26578
A=A-1 // 26579
M=D+1 // 26580
D=0 // 26581
@SP // 26582
AM=M-1 // 26583
A=M // 26584
M=D // 26585

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26586
A=M+1 // 26587
A=A+1 // 26588
D=M // 26589
@SP // 26590
AM=M+1 // 26591
A=A-1 // 26592
M=D // 26593
// call Memory.create_foot
@6 // 26594
D=A // 26595
@14 // 26596
M=D // 26597
@Memory.create_foot // 26598
D=A // 26599
@13 // 26600
M=D // 26601
@Memory.alloc.ret.6 // 26602
D=A // 26603
@CALL // 26604
0;JMP // 26605
(Memory.alloc.ret.6)
@SP // 26606
M=M-1 // 26607

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 26608
A=M+1 // 26609
A=A+1 // 26610
D=M // 26611
@SP // 26612
AM=M+1 // 26613
A=A-1 // 26614
M=D // 26615
@ARG // 26616
A=M // 26617
D=M // 26618
@SP // 26619
AM=M-1 // 26620
D=D+M // 26621
@5 // 26622
D=D+A // 26623
@SP // 26624
AM=M+1 // 26625
A=A-1 // 26626
M=D // 26627
@LCL // 26628
D=M // 26629
@4 // 26630
A=D+A // 26631
D=A // 26632
@R13 // 26633
M=D // 26634
@SP // 26635
AM=M-1 // 26636
D=M // 26637
@R13 // 26638
A=M // 26639
M=D // 26640

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 26641
D=M // 26642
@4 // 26643
A=D+A // 26644
D=M // 26645
@SP // 26646
AM=M+1 // 26647
A=A-1 // 26648
M=D // 26649
@LCL // 26650
A=M+1 // 26651
A=A+1 // 26652
A=A+1 // 26653
D=M // 26654
@5 // 26655
D=D-A // 26656
@SP // 26657
AM=M-1 // 26658
A=M // 26659
M=D // 26660

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 26661
D=M // 26662
@4 // 26663
A=D+A // 26664
D=M // 26665
@SP // 26666
AM=M+1 // 26667
A=A-1 // 26668
M=D+1 // 26669
D=1 // 26670
@SP // 26671
AM=M-1 // 26672
A=M // 26673
M=D // 26674

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26675
D=M // 26676
@4 // 26677
A=D+A // 26678
D=M // 26679
@SP // 26680
AM=M+1 // 26681
A=A-1 // 26682
M=D // 26683
// call Memory.create_foot
@6 // 26684
D=A // 26685
@14 // 26686
M=D // 26687
@Memory.create_foot // 26688
D=A // 26689
@13 // 26690
M=D // 26691
@Memory.alloc.ret.7 // 26692
D=A // 26693
@CALL // 26694
0;JMP // 26695
(Memory.alloc.ret.7)
@SP // 26696
M=M-1 // 26697

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 4")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26698
A=M+1 // 26699
A=A+1 // 26700
A=A+1 // 26701
D=M // 26702
@SP // 26703
AM=M+1 // 26704
A=A-1 // 26705
M=D // 26706
// call Memory.getBinIndex
@6 // 26707
D=A // 26708
@14 // 26709
M=D // 26710
@Memory.getBinIndex // 26711
D=A // 26712
@13 // 26713
M=D // 26714
@Memory.alloc.ret.8 // 26715
D=A // 26716
@CALL // 26717
0;JMP // 26718
(Memory.alloc.ret.8)
@SP // 26719
AM=M-1 // 26720
D=M // 26721
@2048 // 26722
D=D+A // 26723
@SP // 26724
AM=M+1 // 26725
A=A-1 // 26726
M=D // 26727
@LCL // 26728
D=M // 26729
@4 // 26730
A=D+A // 26731
D=M // 26732
@SP // 26733
AM=M+1 // 26734
A=A-1 // 26735
M=D // 26736
// call Memory.add_node
@7 // 26737
D=A // 26738
@14 // 26739
M=D // 26740
@Memory.add_node // 26741
D=A // 26742
@13 // 26743
M=D // 26744
@Memory.alloc.ret.9 // 26745
D=A // 26746
@CALL // 26747
0;JMP // 26748
(Memory.alloc.ret.9)
@SP // 26749
M=M-1 // 26750

////GotoInstruction{label='Memory.alloc$IF_END2}
// goto Memory.alloc$IF_END2
@Memory.alloc$IF_END2 // 26751
0;JMP // 26752

////LabelInstruction{label='Memory.alloc$IF_FALSE2}
// label Memory.alloc$IF_FALSE2
(Memory.alloc$IF_FALSE2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 26753
A=M+1 // 26754
A=A+1 // 26755
D=M // 26756
@SP // 26757
AM=M+1 // 26758
A=A-1 // 26759
M=D+1 // 26760
D=0 // 26761
@SP // 26762
AM=M-1 // 26763
A=M // 26764
M=D // 26765

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 26766
A=M+1 // 26767
A=A+1 // 26768
D=M // 26769
@SP // 26770
AM=M+1 // 26771
A=A-1 // 26772
M=D // 26773
// call Memory.create_foot
@6 // 26774
D=A // 26775
@14 // 26776
M=D // 26777
@Memory.create_foot // 26778
D=A // 26779
@13 // 26780
M=D // 26781
@Memory.alloc.ret.10 // 26782
D=A // 26783
@CALL // 26784
0;JMP // 26785
(Memory.alloc.ret.10)
@SP // 26786
M=M-1 // 26787

////LabelInstruction{label='Memory.alloc$IF_END2}
// label Memory.alloc$IF_END2
(Memory.alloc$IF_END2)

////BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "ADD"
//)
@LCL // 26788
A=M+1 // 26789
A=A+1 // 26790
D=M // 26791
@4 // 26792
D=D+A // 26793
@SP // 26794
AM=M+1 // 26795
A=A-1 // 26796
M=D // 26797
@RETURN // 26798
0;JMP // 26799

////FunctionInstruction{functionName='Number.new_from_int32', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.new_from_int32 with 0
(Number.new_from_int32)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 26800
AM=M+1 // 26801
A=A-1 // 26802
M=1 // 26803
// call Memory.alloc
@6 // 26804
D=A // 26805
@14 // 26806
M=D // 26807
@Memory.alloc // 26808
D=A // 26809
@13 // 26810
M=D // 26811
@Number.new_from_int32.ret.0 // 26812
D=A // 26813
@CALL // 26814
0;JMP // 26815
(Number.new_from_int32.ret.0)
@SP // 26816
AM=M-1 // 26817
D=M // 26818
@3 // 26819
M=D // 26820

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 5}
//}

@Number.5 // 26821
M=M+1 // 26822

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 26823
A=M // 26824
D=M // 26825
@THIS // 26826
A=M // 26827
M=D // 26828

////PushInstruction("pointer 0")
@3 // 26829
D=M // 26830
@SP // 26831
AM=M+1 // 26832
A=A-1 // 26833
M=D // 26834
@RETURN // 26835
0;JMP // 26836

////FunctionInstruction{functionName='DirectionalLight.dispose', numLocals=0, funcMapping={DirectionalLight.getColor=0}}
// function DirectionalLight.dispose with 0
(DirectionalLight.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26837
A=M // 26838
D=M // 26839
@3 // 26840
M=D // 26841

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26842
A=M // 26843
D=M // 26844
@SP // 26845
AM=M+1 // 26846
A=A-1 // 26847
M=D // 26848
// call Vec3.dispose
@6 // 26849
D=A // 26850
@14 // 26851
M=D // 26852
@Vec3.dispose // 26853
D=A // 26854
@13 // 26855
M=D // 26856
@DirectionalLight.dispose.ret.0 // 26857
D=A // 26858
@CALL // 26859
0;JMP // 26860
(DirectionalLight.dispose.ret.0)
@SP // 26861
M=M-1 // 26862

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26863
A=M+1 // 26864
D=M // 26865
@SP // 26866
AM=M+1 // 26867
A=A-1 // 26868
M=D // 26869
// call Number.dispose
@6 // 26870
D=A // 26871
@14 // 26872
M=D // 26873
@Number.dispose // 26874
D=A // 26875
@13 // 26876
M=D // 26877
@DirectionalLight.dispose.ret.1 // 26878
D=A // 26879
@CALL // 26880
0;JMP // 26881
(DirectionalLight.dispose.ret.1)
@SP // 26882
M=M-1 // 26883

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 26884
D=M // 26885
@SP // 26886
AM=M+1 // 26887
A=A-1 // 26888
M=D // 26889
// call Memory.deAlloc
@6 // 26890
D=A // 26891
@14 // 26892
M=D // 26893
@Memory.deAlloc // 26894
D=A // 26895
@13 // 26896
M=D // 26897
@DirectionalLight.dispose.ret.2 // 26898
D=A // 26899
@CALL // 26900
0;JMP // 26901
(DirectionalLight.dispose.ret.2)
@SP // 26902
M=M-1 // 26903

////PushInstruction("constant 0")
@SP // 26904
AM=M+1 // 26905
A=A-1 // 26906
M=0 // 26907
@RETURN // 26908
0;JMP // 26909

////FunctionInstruction{functionName='Number.do_sqrt', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.do_sqrt with 0
(Number.do_sqrt)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26910
A=M // 26911
D=M // 26912
@3 // 26913
M=D // 26914

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 1")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26915
A=M // 26916
D=M // 26917
@SP // 26918
AM=M+1 // 26919
A=A-1 // 26920
M=D // 26921
@Number.1 // 26922
D=M // 26923
@SP // 26924
AM=M+1 // 26925
A=A-1 // 26926
M=D // 26927
// call Int32.do_mul
@7 // 26928
D=A // 26929
@14 // 26930
M=D // 26931
@Int32.do_mul // 26932
D=A // 26933
@13 // 26934
M=D // 26935
@Number.do_sqrt.ret.0 // 26936
D=A // 26937
@CALL // 26938
0;JMP // 26939
(Number.do_sqrt.ret.0)
@SP // 26940
M=M-1 // 26941

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26942
A=M // 26943
D=M // 26944
@SP // 26945
AM=M+1 // 26946
A=A-1 // 26947
M=D // 26948
// call Int32.do_sqrt
@6 // 26949
D=A // 26950
@14 // 26951
M=D // 26952
@Int32.do_sqrt // 26953
D=A // 26954
@13 // 26955
M=D // 26956
@Number.do_sqrt.ret.1 // 26957
D=A // 26958
@CALL // 26959
0;JMP // 26960
(Number.do_sqrt.ret.1)
@SP // 26961
M=M-1 // 26962

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 2")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 26963
A=M // 26964
D=M // 26965
@SP // 26966
AM=M+1 // 26967
A=A-1 // 26968
M=D // 26969
@Number.2 // 26970
D=M // 26971
@SP // 26972
AM=M+1 // 26973
A=A-1 // 26974
M=D // 26975
// call Int32.do_mul
@7 // 26976
D=A // 26977
@14 // 26978
M=D // 26979
@Int32.do_mul // 26980
D=A // 26981
@13 // 26982
M=D // 26983
@Number.do_sqrt.ret.2 // 26984
D=A // 26985
@CALL // 26986
0;JMP // 26987
(Number.do_sqrt.ret.2)
@SP // 26988
M=M-1 // 26989

////PushInstruction("constant 0")
@SP // 26990
AM=M+1 // 26991
A=A-1 // 26992
M=0 // 26993
@RETURN // 26994
0;JMP // 26995

////FunctionInstruction{functionName='Int32.getParts', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.getParts with 0
(Int32.getParts)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 26996
A=M // 26997
D=M // 26998
@3 // 26999
M=D // 27000

////PushInstruction("this 0")
@THIS // 27001
A=M // 27002
D=M // 27003
@SP // 27004
AM=M+1 // 27005
A=A-1 // 27006
M=D // 27007
@RETURN // 27008
0;JMP // 27009

////FunctionInstruction{functionName='Main.getOneFiftieth', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getFourFifths=4}}
// function Main.getOneFiftieth with 2
(Main.getOneFiftieth)
@SP // 27010
M=M+1 // 27011
AM=M+1 // 27012
A=A-1 // 27013
M=0 // 27014
A=A-1 // 27015
M=0 // 27016

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 27017
AM=M+1 // 27018
A=A-1 // 27019
M=1 // 27020
// call Number.new
@6 // 27021
D=A // 27022
@14 // 27023
M=D // 27024
@Number.new // 27025
D=A // 27026
@13 // 27027
M=D // 27028
@Main.getOneFiftieth.ret.0 // 27029
D=A // 27030
@CALL // 27031
0;JMP // 27032
(Main.getOneFiftieth.ret.0)
@SP // 27033
AM=M-1 // 27034
D=M // 27035
@LCL // 27036
A=M // 27037
M=D // 27038

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 50")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@50 // 27039
D=A // 27040
@SP // 27041
AM=M+1 // 27042
A=A-1 // 27043
M=D // 27044
// call Number.new
@6 // 27045
D=A // 27046
@14 // 27047
M=D // 27048
@Number.new // 27049
D=A // 27050
@13 // 27051
M=D // 27052
@Main.getOneFiftieth.ret.1 // 27053
D=A // 27054
@CALL // 27055
0;JMP // 27056
(Main.getOneFiftieth.ret.1)
@SP // 27057
AM=M-1 // 27058
D=M // 27059
@LCL // 27060
A=M+1 // 27061
M=D // 27062

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27063
A=M // 27064
D=M // 27065
@SP // 27066
AM=M+1 // 27067
A=A-1 // 27068
M=D // 27069
@LCL // 27070
A=M+1 // 27071
D=M // 27072
@SP // 27073
AM=M+1 // 27074
A=A-1 // 27075
M=D // 27076
// call Number.do_div
@7 // 27077
D=A // 27078
@14 // 27079
M=D // 27080
@Number.do_div // 27081
D=A // 27082
@13 // 27083
M=D // 27084
@Main.getOneFiftieth.ret.2 // 27085
D=A // 27086
@CALL // 27087
0;JMP // 27088
(Main.getOneFiftieth.ret.2)
@SP // 27089
M=M-1 // 27090

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27091
A=M+1 // 27092
D=M // 27093
@SP // 27094
AM=M+1 // 27095
A=A-1 // 27096
M=D // 27097
// call Number.dispose
@6 // 27098
D=A // 27099
@14 // 27100
M=D // 27101
@Number.dispose // 27102
D=A // 27103
@13 // 27104
M=D // 27105
@Main.getOneFiftieth.ret.3 // 27106
D=A // 27107
@CALL // 27108
0;JMP // 27109
(Main.getOneFiftieth.ret.3)
@SP // 27110
M=M-1 // 27111

////PushInstruction("local 0")
@LCL // 27112
A=M // 27113
D=M // 27114
@SP // 27115
AM=M+1 // 27116
A=A-1 // 27117
M=D // 27118
@RETURN // 27119
0;JMP // 27120

////FunctionInstruction{functionName='Sphere.color', numLocals=0, funcMapping={Sphere.new=1, Sphere.dispose=4}}
// function Sphere.color with 0
(Sphere.color)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27121
A=M // 27122
D=M // 27123
@3 // 27124
M=D // 27125

////CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
@THIS // 27126
A=M+1 // 27127
A=A+1 // 27128
D=M // 27129
@SP // 27130
AM=M+1 // 27131
A=A-1 // 27132
M=D // 27133
// call Number.clone
@6 // 27134
D=A // 27135
@14 // 27136
M=D // 27137
@Number.clone // 27138
D=A // 27139
@13 // 27140
M=D // 27141
@Sphere.color.ret.0 // 27142
D=A // 27143
@CALL // 27144
0;JMP // 27145
(Sphere.color.ret.0)
@RETURN // 27146
0;JMP // 27147

////FunctionInstruction{functionName='Number.do_sub', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1}}
// function Number.do_sub with 0
(Number.do_sub)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27148
A=M // 27149
D=M // 27150
@3 // 27151
M=D // 27152

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Number.getV}}], call=CallInstruction{Int32.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27153
A=M // 27154
D=M // 27155
@SP // 27156
AM=M+1 // 27157
A=A-1 // 27158
M=D // 27159
@ARG // 27160
A=M+1 // 27161
D=M // 27162
@SP // 27163
AM=M+1 // 27164
A=A-1 // 27165
M=D // 27166
// call Number.getV
@6 // 27167
D=A // 27168
@14 // 27169
M=D // 27170
@Number.getV // 27171
D=A // 27172
@13 // 27173
M=D // 27174
@Number.do_sub.ret.0 // 27175
D=A // 27176
@CALL // 27177
0;JMP // 27178
(Number.do_sub.ret.0)
// call Int32.do_sub
@7 // 27179
D=A // 27180
@14 // 27181
M=D // 27182
@Int32.do_sub // 27183
D=A // 27184
@13 // 27185
M=D // 27186
@Number.do_sub.ret.1 // 27187
D=A // 27188
@CALL // 27189
0;JMP // 27190
(Number.do_sub.ret.1)
@SP // 27191
M=M-1 // 27192

////PushInstruction("constant 0")
@SP // 27193
AM=M+1 // 27194
A=A-1 // 27195
M=0 // 27196
@RETURN // 27197
0;JMP // 27198

////FunctionInstruction{functionName='String.new', numLocals=0, funcMapping={String.dispose=1, String.appendChar=3, String.length=0}}
// function String.new with 0
(String.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@3 // 27199
D=A // 27200
@SP // 27201
AM=M+1 // 27202
A=A-1 // 27203
M=D // 27204
// call Memory.alloc
@6 // 27205
D=A // 27206
@14 // 27207
M=D // 27208
@Memory.alloc // 27209
D=A // 27210
@13 // 27211
M=D // 27212
@String.new.ret.0 // 27213
D=A // 27214
@CALL // 27215
0;JMP // 27216
(String.new.ret.0)
@SP // 27217
AM=M-1 // 27218
D=M // 27219
@3 // 27220
M=D // 27221

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.new$IF_TRUE1}}
@String.new.EQ.101 // 27222
D=A // 27223
@SP // 27224
AM=M+1 // 27225
A=A-1 // 27226
M=D // 27227
@ARG // 27228
A=M // 27229
D=M // 27230
@DO_EQ // 27231
0;JMP // 27232
(String.new.EQ.101)
@String.new$IF_TRUE1 // 27233
D;JNE // 27234

////GotoInstruction{label='String.new$IF_FALSE1}
// goto String.new$IF_FALSE1
@String.new$IF_FALSE1 // 27235
0;JMP // 27236

////LabelInstruction{label='String.new$IF_TRUE1}
// label String.new$IF_TRUE1
(String.new$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 0}
//}

@THIS // 27237
A=M // 27238
M=0 // 27239

////GotoInstruction{label='String.new$IF_END1}
// goto String.new$IF_END1
@String.new$IF_END1 // 27240
0;JMP // 27241

////LabelInstruction{label='String.new$IF_FALSE1}
// label String.new$IF_FALSE1
(String.new$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 27242
A=M // 27243
D=M // 27244
@SP // 27245
AM=M+1 // 27246
A=A-1 // 27247
M=D // 27248
// call Memory.alloc
@6 // 27249
D=A // 27250
@14 // 27251
M=D // 27252
@Memory.alloc // 27253
D=A // 27254
@13 // 27255
M=D // 27256
@String.new.ret.1 // 27257
D=A // 27258
@CALL // 27259
0;JMP // 27260
(String.new.ret.1)
@SP // 27261
AM=M-1 // 27262
D=M // 27263
@THIS // 27264
A=M // 27265
M=D // 27266

////LabelInstruction{label='String.new$IF_END1}
// label String.new$IF_END1
(String.new$IF_END1)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 2}
//}

@ARG // 27267
A=M // 27268
D=M // 27269
@THIS // 27270
A=M+1 // 27271
A=A+1 // 27272
M=D // 27273

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 27274
A=M+1 // 27275
M=0 // 27276

////PushInstruction("pointer 0")
@3 // 27277
D=M // 27278
@SP // 27279
AM=M+1 // 27280
A=A-1 // 27281
M=D // 27282
@RETURN // 27283
0;JMP // 27284

////FunctionInstruction{functionName='Number.to_int32', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_div=5, Number.do_add=2, Number.getV=0, Number.is_less_than=2, Number.do_neg=1, Number.do_sub=2}}
// function Number.to_int32 with 0
(Number.to_int32)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27285
A=M // 27286
D=M // 27287
@3 // 27288
M=D // 27289

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 5}
//}

@Number.5 // 27290
M=M-1 // 27291

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("constant 2")], call=CallInstruction{Int32.do_right_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 27292
A=M // 27293
D=M // 27294
@SP // 27295
AM=M+1 // 27296
A=A-1 // 27297
M=D // 27298
@2 // 27299
D=A // 27300
@SP // 27301
AM=M+1 // 27302
A=A-1 // 27303
M=D // 27304
// call Int32.do_right_shift_bytes
@7 // 27305
D=A // 27306
@14 // 27307
M=D // 27308
@Int32.do_right_shift_bytes // 27309
D=A // 27310
@13 // 27311
M=D // 27312
@Number.to_int32.ret.0 // 27313
D=A // 27314
@CALL // 27315
0;JMP // 27316
(Number.to_int32.ret.0)
@SP // 27317
M=M-1 // 27318

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 27319
D=M // 27320
@SP // 27321
AM=M+1 // 27322
A=A-1 // 27323
M=D // 27324
// call Memory.deAlloc
@6 // 27325
D=A // 27326
@14 // 27327
M=D // 27328
@Memory.deAlloc // 27329
D=A // 27330
@13 // 27331
M=D // 27332
@Number.to_int32.ret.1 // 27333
D=A // 27334
@CALL // 27335
0;JMP // 27336
(Number.to_int32.ret.1)
@SP // 27337
M=M-1 // 27338

////PushInstruction("this 0")
@THIS // 27339
A=M // 27340
D=M // 27341
@SP // 27342
AM=M+1 // 27343
A=A-1 // 27344
M=D // 27345
@RETURN // 27346
0;JMP // 27347

////FunctionInstruction{functionName='Intersection.getDistanceFromOrigin', numLocals=0, funcMapping={Intersection.new=1, Intersection.dispose=2}}
// function Intersection.getDistanceFromOrigin with 0
(Intersection.getDistanceFromOrigin)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27348
A=M // 27349
D=M // 27350
@3 // 27351
M=D // 27352

////PushInstruction("this 0")
@THIS // 27353
A=M // 27354
D=M // 27355
@SP // 27356
AM=M+1 // 27357
A=A-1 // 27358
M=D // 27359
@RETURN // 27360
0;JMP // 27361

////FunctionInstruction{functionName='Memory.deAlloc', numLocals=4, funcMapping={Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.deAlloc with 4
(Memory.deAlloc)
@4 // 27362
D=A // 27363
@SP // 27364
AM=D+M // 27365
A=A-1 // 27366
M=0 // 27367
A=A-1 // 27368
M=0 // 27369
A=A-1 // 27370
M=0 // 27371
A=A-1 // 27372
M=0 // 27373

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 27374
A=M // 27375
D=M // 27376
@4 // 27377
D=D-A // 27378
@LCL // 27379
A=M // 27380
M=D // 27381

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 27382
A=M // 27383
D=M // 27384
@SP // 27385
AM=M+1 // 27386
A=A-1 // 27387
M=D+1 // 27388
D=1 // 27389
@SP // 27390
AM=M-1 // 27391
A=M // 27392
M=D // 27393

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 27394
A=M // 27395
D=M // 27396
D=D-1 // 27397
@LCL // 27398
A=M+1 // 27399
A=A+1 // 27400
A=A+1 // 27401
M=D // 27402

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 3"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 27403
A=M+1 // 27404
A=A+1 // 27405
A=A+1 // 27406
D=M // 27407
@0 // 27408
A=D+A // 27409
D=M // 27410
@LCL // 27411
A=M+1 // 27412
M=D // 27413

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                UnaryPushGroup(                    BinaryPushGroup(
//                        left:
//                            PushInstruction("local 1"),
//                        right:
//                            PushInstruction("constant 2048"),
//                        binaryOp: "LT"
//                    ),
//NOT),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 1"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.deAlloc$IF_TRUE1}}
@Memory.deAlloc.EQ.102 // 27414
D=A // 27415
@SP // 27416
AM=M+1 // 27417
A=A-1 // 27418
M=D // 27419
@Memory.deAlloc.LT.103 // 27420
D=A // 27421
@SP // 27422
AM=M+1 // 27423
A=A-1 // 27424
M=D // 27425
@LCL // 27426
A=M+1 // 27427
D=M // 27428
@2048 // 27429
D=D-A // 27430
@DO_LT // 27431
0;JMP // 27432
(Memory.deAlloc.LT.103)
@SP // 27433
AM=M+1 // 27434
A=A-1 // 27435
M=D // 27436
@SP // 27437
A=M-1 // 27438
M=!D // 27439
@LCL // 27440
A=M+1 // 27441
D=M // 27442
A=D+1 // 27443
D=M // 27444
@SP // 27445
AM=M-1 // 27446
D=D&M // 27447
D=D-1 // 27448
@DO_EQ // 27449
0;JMP // 27450
(Memory.deAlloc.EQ.102)
@Memory.deAlloc$IF_TRUE1 // 27451
D;JNE // 27452

////GotoInstruction{label='Memory.deAlloc$IF_END1}
// goto Memory.deAlloc$IF_END1
@Memory.deAlloc$IF_END1 // 27453
0;JMP // 27454

////LabelInstruction{label='Memory.deAlloc$IF_TRUE1}
// label Memory.deAlloc$IF_TRUE1
(Memory.deAlloc$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 1")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27455
A=M+1 // 27456
D=M // 27457
@0 // 27458
A=D+A // 27459
D=M // 27460
@SP // 27461
AM=M+1 // 27462
A=A-1 // 27463
M=D // 27464
// call Memory.getBinIndex
@6 // 27465
D=A // 27466
@14 // 27467
M=D // 27468
@Memory.getBinIndex // 27469
D=A // 27470
@13 // 27471
M=D // 27472
@Memory.deAlloc.ret.0 // 27473
D=A // 27474
@CALL // 27475
0;JMP // 27476
(Memory.deAlloc.ret.0)
@SP // 27477
AM=M-1 // 27478
D=M // 27479
@2048 // 27480
D=D+A // 27481
@SP // 27482
AM=M+1 // 27483
A=A-1 // 27484
M=D // 27485
@LCL // 27486
A=M+1 // 27487
D=M // 27488
@SP // 27489
AM=M+1 // 27490
A=A-1 // 27491
M=D // 27492
// call Memory.remove_node
@7 // 27493
D=A // 27494
@14 // 27495
M=D // 27496
@Memory.remove_node // 27497
D=A // 27498
@13 // 27499
M=D // 27500
@Memory.deAlloc.ret.1 // 27501
D=A // 27502
@CALL // 27503
0;JMP // 27504
(Memory.deAlloc.ret.1)
@SP // 27505
M=M-1 // 27506

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 1"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 27507
A=M+1 // 27508
D=M // 27509
@SP // 27510
AM=M+1 // 27511
A=A-1 // 27512
M=D // 27513
@LCL // 27514
A=M+1 // 27515
D=M // 27516
@0 // 27517
A=D+A // 27518
D=M // 27519
@SP // 27520
AM=M+1 // 27521
A=A-1 // 27522
M=D // 27523
@LCL // 27524
A=M // 27525
D=M // 27526
@0 // 27527
A=D+A // 27528
D=M // 27529
@SP // 27530
AM=M-1 // 27531
D=D+M // 27532
@5 // 27533
D=D+A // 27534
@SP // 27535
AM=M-1 // 27536
A=M // 27537
M=D // 27538

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27539
A=M+1 // 27540
D=M // 27541
@SP // 27542
AM=M+1 // 27543
A=A-1 // 27544
M=D // 27545
// call Memory.create_foot
@6 // 27546
D=A // 27547
@14 // 27548
M=D // 27549
@Memory.create_foot // 27550
D=A // 27551
@13 // 27552
M=D // 27553
@Memory.deAlloc.ret.2 // 27554
D=A // 27555
@CALL // 27556
0;JMP // 27557
(Memory.deAlloc.ret.2)
@SP // 27558
M=M-1 // 27559

////PushPopPair {
//  push: PushInstruction("local 1")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 27560
A=M+1 // 27561
D=M // 27562
@LCL // 27563
A=M // 27564
M=D // 27565

////LabelInstruction{label='Memory.deAlloc$IF_END1}
// label Memory.deAlloc$IF_END1
(Memory.deAlloc$IF_END1)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 27566
A=M // 27567
D=M // 27568
@SP // 27569
AM=M+1 // 27570
A=A-1 // 27571
M=D // 27572
@LCL // 27573
A=M // 27574
D=M // 27575
@0 // 27576
A=D+A // 27577
D=M // 27578
@SP // 27579
AM=M-1 // 27580
D=D+M // 27581
@5 // 27582
D=D+A // 27583
@LCL // 27584
A=M+1 // 27585
A=A+1 // 27586
M=D // 27587

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 2"),
//                    right:
//                        PushInstruction("constant 16384"),
//                    binaryOp: "LT"
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("constant 1"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Memory.deAlloc$IF_TRUE2}}
@Memory.deAlloc.EQ.104 // 27588
D=A // 27589
@SP // 27590
AM=M+1 // 27591
A=A-1 // 27592
M=D // 27593
@Memory.deAlloc.LT.105 // 27594
D=A // 27595
@SP // 27596
AM=M+1 // 27597
A=A-1 // 27598
M=D // 27599
@LCL // 27600
A=M+1 // 27601
A=A+1 // 27602
D=M // 27603
@16384 // 27604
D=D-A // 27605
@DO_LT // 27606
0;JMP // 27607
(Memory.deAlloc.LT.105)
@SP // 27608
AM=M+1 // 27609
A=A-1 // 27610
M=D // 27611
@LCL // 27612
A=M+1 // 27613
A=A+1 // 27614
D=M // 27615
A=D+1 // 27616
D=M // 27617
@SP // 27618
AM=M-1 // 27619
D=D&M // 27620
D=D-1 // 27621
@DO_EQ // 27622
0;JMP // 27623
(Memory.deAlloc.EQ.104)
@Memory.deAlloc$IF_TRUE2 // 27624
D;JNE // 27625

////GotoInstruction{label='Memory.deAlloc$IF_END2}
// goto Memory.deAlloc$IF_END2
@Memory.deAlloc$IF_END2 // 27626
0;JMP // 27627

////LabelInstruction{label='Memory.deAlloc$IF_TRUE2}
// label Memory.deAlloc$IF_TRUE2
(Memory.deAlloc$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 2"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Memory.remove_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27628
A=M+1 // 27629
A=A+1 // 27630
D=M // 27631
@0 // 27632
A=D+A // 27633
D=M // 27634
@SP // 27635
AM=M+1 // 27636
A=A-1 // 27637
M=D // 27638
// call Memory.getBinIndex
@6 // 27639
D=A // 27640
@14 // 27641
M=D // 27642
@Memory.getBinIndex // 27643
D=A // 27644
@13 // 27645
M=D // 27646
@Memory.deAlloc.ret.3 // 27647
D=A // 27648
@CALL // 27649
0;JMP // 27650
(Memory.deAlloc.ret.3)
@SP // 27651
AM=M-1 // 27652
D=M // 27653
@2048 // 27654
D=D+A // 27655
@SP // 27656
AM=M+1 // 27657
A=A-1 // 27658
M=D // 27659
@LCL // 27660
A=M+1 // 27661
A=A+1 // 27662
D=M // 27663
@SP // 27664
AM=M+1 // 27665
A=A-1 // 27666
M=D // 27667
// call Memory.remove_node
@7 // 27668
D=A // 27669
@14 // 27670
M=D // 27671
@Memory.remove_node // 27672
D=A // 27673
@13 // 27674
M=D // 27675
@Memory.deAlloc.ret.4 // 27676
D=A // 27677
@CALL // 27678
0;JMP // 27679
(Memory.deAlloc.ret.4)
@SP // 27680
M=M-1 // 27681

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 2"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 27682
A=M // 27683
D=M // 27684
@SP // 27685
AM=M+1 // 27686
A=A-1 // 27687
M=D // 27688
@LCL // 27689
A=M // 27690
D=M // 27691
@0 // 27692
A=D+A // 27693
D=M // 27694
@SP // 27695
AM=M+1 // 27696
A=A-1 // 27697
M=D // 27698
@LCL // 27699
A=M+1 // 27700
A=A+1 // 27701
D=M // 27702
@0 // 27703
A=D+A // 27704
D=M // 27705
@SP // 27706
AM=M-1 // 27707
D=D+M // 27708
@5 // 27709
D=D+A // 27710
@SP // 27711
AM=M-1 // 27712
A=M // 27713
M=D // 27714

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27715
A=M // 27716
D=M // 27717
@SP // 27718
AM=M+1 // 27719
A=A-1 // 27720
M=D // 27721
// call Memory.create_foot
@6 // 27722
D=A // 27723
@14 // 27724
M=D // 27725
@Memory.create_foot // 27726
D=A // 27727
@13 // 27728
M=D // 27729
@Memory.deAlloc.ret.5 // 27730
D=A // 27731
@CALL // 27732
0;JMP // 27733
(Memory.deAlloc.ret.5)
@SP // 27734
M=M-1 // 27735

////LabelInstruction{label='Memory.deAlloc$IF_END2}
// label Memory.deAlloc$IF_END2
(Memory.deAlloc$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{Memory.getBinIndex}},
//    binaryOp: "ADD"
//), PushInstruction("local 0")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27736
A=M // 27737
D=M // 27738
@0 // 27739
A=D+A // 27740
D=M // 27741
@SP // 27742
AM=M+1 // 27743
A=A-1 // 27744
M=D // 27745
// call Memory.getBinIndex
@6 // 27746
D=A // 27747
@14 // 27748
M=D // 27749
@Memory.getBinIndex // 27750
D=A // 27751
@13 // 27752
M=D // 27753
@Memory.deAlloc.ret.6 // 27754
D=A // 27755
@CALL // 27756
0;JMP // 27757
(Memory.deAlloc.ret.6)
@SP // 27758
AM=M-1 // 27759
D=M // 27760
@2048 // 27761
D=D+A // 27762
@SP // 27763
AM=M+1 // 27764
A=A-1 // 27765
M=D // 27766
@LCL // 27767
A=M // 27768
D=M // 27769
@SP // 27770
AM=M+1 // 27771
A=A-1 // 27772
M=D // 27773
// call Memory.add_node
@7 // 27774
D=A // 27775
@14 // 27776
M=D // 27777
@Memory.add_node // 27778
D=A // 27779
@13 // 27780
M=D // 27781
@Memory.deAlloc.ret.7 // 27782
D=A // 27783
@CALL // 27784
0;JMP // 27785
(Memory.deAlloc.ret.7)
@SP // 27786
M=M-1 // 27787

////PushInstruction("constant 0")
@SP // 27788
AM=M+1 // 27789
A=A-1 // 27790
M=0 // 27791
@RETURN // 27792
0;JMP // 27793

////FunctionInstruction{functionName='String.charAt', numLocals=0, funcMapping={String.dispose=1, String.appendChar=3, String.length=0, String.new=2}}
// function String.charAt with 0
(String.charAt)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27794
A=M // 27795
D=M // 27796
@3 // 27797
M=D // 27798

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("this 0"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "ADD"
//        )
//)
@THIS // 27799
A=M // 27800
D=M // 27801
@SP // 27802
AM=M+1 // 27803
A=A-1 // 27804
M=D // 27805
@ARG // 27806
A=M+1 // 27807
D=M // 27808
@SP // 27809
AM=M-1 // 27810
A=D+M // 27811
D=M // 27812
@SP // 27813
AM=M+1 // 27814
A=A-1 // 27815
M=D // 27816
@RETURN // 27817
0;JMP // 27818

////FunctionInstruction{functionName='Plane.surface_normal', numLocals=2, funcMapping={Plane.initialize=16, Plane.new=1, Plane.dispose=4, Plane.intersect=15, Plane.color=29}}
// function Plane.surface_normal with 2
(Plane.surface_normal)
@SP // 27819
M=M+1 // 27820
AM=M+1 // 27821
A=A-1 // 27822
M=0 // 27823
A=A-1 // 27824
M=0 // 27825

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 27826
A=M // 27827
D=M // 27828
@3 // 27829
M=D // 27830

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 27831
AM=M+1 // 27832
A=A-1 // 27833
M=-1 // 27834
// call Number.new
@6 // 27835
D=A // 27836
@14 // 27837
M=D // 27838
@Number.new // 27839
D=A // 27840
@13 // 27841
M=D // 27842
@Plane.surface_normal.ret.0 // 27843
D=A // 27844
@CALL // 27845
0;JMP // 27846
(Plane.surface_normal.ret.0)
@SP // 27847
AM=M-1 // 27848
D=M // 27849
@LCL // 27850
A=M // 27851
M=D // 27852

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 27853
A=M+1 // 27854
D=M // 27855
@SP // 27856
AM=M+1 // 27857
A=A-1 // 27858
M=D // 27859
// call Vec3.clone
@6 // 27860
D=A // 27861
@14 // 27862
M=D // 27863
@Vec3.clone // 27864
D=A // 27865
@13 // 27866
M=D // 27867
@Plane.surface_normal.ret.1 // 27868
D=A // 27869
@CALL // 27870
0;JMP // 27871
(Plane.surface_normal.ret.1)
@SP // 27872
AM=M-1 // 27873
D=M // 27874
@LCL // 27875
A=M+1 // 27876
M=D // 27877

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27878
A=M+1 // 27879
D=M // 27880
@SP // 27881
AM=M+1 // 27882
A=A-1 // 27883
M=D // 27884
@LCL // 27885
A=M // 27886
D=M // 27887
@SP // 27888
AM=M+1 // 27889
A=A-1 // 27890
M=D // 27891
// call Vec3.do_scale
@7 // 27892
D=A // 27893
@14 // 27894
M=D // 27895
@Vec3.do_scale // 27896
D=A // 27897
@13 // 27898
M=D // 27899
@Plane.surface_normal.ret.2 // 27900
D=A // 27901
@CALL // 27902
0;JMP // 27903
(Plane.surface_normal.ret.2)
@SP // 27904
M=M-1 // 27905

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 27906
A=M // 27907
D=M // 27908
@SP // 27909
AM=M+1 // 27910
A=A-1 // 27911
M=D // 27912
// call Number.dispose
@6 // 27913
D=A // 27914
@14 // 27915
M=D // 27916
@Number.dispose // 27917
D=A // 27918
@13 // 27919
M=D // 27920
@Plane.surface_normal.ret.3 // 27921
D=A // 27922
@CALL // 27923
0;JMP // 27924
(Plane.surface_normal.ret.3)
@SP // 27925
M=M-1 // 27926

////PushInstruction("local 1")
@LCL // 27927
A=M+1 // 27928
D=M // 27929
@SP // 27930
AM=M+1 // 27931
A=A-1 // 27932
M=D // 27933
@RETURN // 27934
0;JMP // 27935

////FunctionInstruction{functionName='Number.initialize', numLocals=3, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.clone=2, Number.do_div=5, Number.getV=0, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.initialize with 3
(Number.initialize)
@3 // 27936
D=A // 27937
@SP // 27938
AM=D+M // 27939
A=A-1 // 27940
M=0 // 27941
A=A-1 // 27942
M=0 // 27943
A=A-1 // 27944
M=0 // 27945

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 256")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=static 0}
//}

@256 // 27946
D=A // 27947
@SP // 27948
AM=M+1 // 27949
A=A-1 // 27950
M=D // 27951
// call Int32.new
@6 // 27952
D=A // 27953
@14 // 27954
M=D // 27955
@Int32.new // 27956
D=A // 27957
@13 // 27958
M=D // 27959
@Number.initialize.ret.0 // 27960
D=A // 27961
@CALL // 27962
0;JMP // 27963
(Number.initialize.ret.0)
@SP // 27964
AM=M-1 // 27965
D=M // 27966
@Number.0 // 27967
M=D // 27968

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 0"), PushInstruction("static 0")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@2 // 27969
D=A // 27970
@SP // 27971
M=D+M // 27972
@Number.0 // 27973
D=M // 27974
@SP // 27975
A=M-1 // 27976
M=D // 27977
A=A-1 // 27978
M=D // 27979
// call Int32.do_mul
@7 // 27980
D=A // 27981
@14 // 27982
M=D // 27983
@Int32.do_mul // 27984
D=A // 27985
@13 // 27986
M=D // 27987
@Number.initialize.ret.1 // 27988
D=A // 27989
@CALL // 27990
0;JMP // 27991
(Number.initialize.ret.1)
@SP // 27992
M=M-1 // 27993

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 561")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 1}
//}

@561 // 27994
D=A // 27995
@SP // 27996
AM=M+1 // 27997
A=A-1 // 27998
M=D // 27999
// call Int32.new
@6 // 28000
D=A // 28001
@14 // 28002
M=D // 28003
@Int32.new // 28004
D=A // 28005
@13 // 28006
M=D // 28007
@Number.initialize.ret.2 // 28008
D=A // 28009
@CALL // 28010
0;JMP // 28011
(Number.initialize.ret.2)
@SP // 28012
AM=M-1 // 28013
D=M // 28014
@LCL // 28015
A=M+1 // 28016
M=D // 28017

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 367")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=local 2}
//}

@367 // 28018
D=A // 28019
@SP // 28020
AM=M+1 // 28021
A=A-1 // 28022
M=D // 28023
// call Int32.new
@6 // 28024
D=A // 28025
@14 // 28026
M=D // 28027
@Int32.new // 28028
D=A // 28029
@13 // 28030
M=D // 28031
@Number.initialize.ret.3 // 28032
D=A // 28033
@CALL // 28034
0;JMP // 28035
(Number.initialize.ret.3)
@SP // 28036
AM=M-1 // 28037
D=M // 28038
@LCL // 28039
A=M+1 // 28040
A=A+1 // 28041
M=D // 28042

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("local 2")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28043
A=M+1 // 28044
D=M // 28045
@SP // 28046
AM=M+1 // 28047
A=A-1 // 28048
M=D // 28049
@LCL // 28050
A=M+1 // 28051
A=A+1 // 28052
D=M // 28053
@SP // 28054
AM=M+1 // 28055
A=A-1 // 28056
M=D // 28057
// call Int32.do_mul
@7 // 28058
D=A // 28059
@14 // 28060
M=D // 28061
@Int32.do_mul // 28062
D=A // 28063
@13 // 28064
M=D // 28065
@Number.initialize.ret.4 // 28066
D=A // 28067
@CALL // 28068
0;JMP // 28069
(Number.initialize.ret.4)
@SP // 28070
M=M-1 // 28071

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.new_from_int32}}
//  pop:  PopInstruction{address=static 3}
//}

@LCL // 28072
A=M+1 // 28073
D=M // 28074
@SP // 28075
AM=M+1 // 28076
A=A-1 // 28077
M=D // 28078
// call Number.new_from_int32
@6 // 28079
D=A // 28080
@14 // 28081
M=D // 28082
@Number.new_from_int32 // 28083
D=A // 28084
@13 // 28085
M=D // 28086
@Number.initialize.ret.5 // 28087
D=A // 28088
@CALL // 28089
0;JMP // 28090
(Number.initialize.ret.5)
@SP // 28091
AM=M-1 // 28092
D=M // 28093
@Number.3 // 28094
M=D // 28095

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=static 1}
//}

@Number.0 // 28096
D=M // 28097
@SP // 28098
AM=M+1 // 28099
A=A-1 // 28100
M=D // 28101
// call Int32.clone
@6 // 28102
D=A // 28103
@14 // 28104
M=D // 28105
@Int32.clone // 28106
D=A // 28107
@13 // 28108
M=D // 28109
@Number.initialize.ret.6 // 28110
D=A // 28111
@CALL // 28112
0;JMP // 28113
(Number.initialize.ret.6)
@SP // 28114
AM=M-1 // 28115
D=M // 28116
@Number.1 // 28117
M=D // 28118

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 1")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.1 // 28119
D=M // 28120
@SP // 28121
AM=M+1 // 28122
A=A-1 // 28123
M=D // 28124
// call Int32.do_sqrt
@6 // 28125
D=A // 28126
@14 // 28127
M=D // 28128
@Int32.do_sqrt // 28129
D=A // 28130
@13 // 28131
M=D // 28132
@Number.initialize.ret.7 // 28133
D=A // 28134
@CALL // 28135
0;JMP // 28136
(Number.initialize.ret.7)
@SP // 28137
M=M-1 // 28138

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 1")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.1 // 28139
D=M // 28140
@SP // 28141
AM=M+1 // 28142
A=A-1 // 28143
M=D // 28144
// call Int32.do_sqrt
@6 // 28145
D=A // 28146
@14 // 28147
M=D // 28148
@Int32.do_sqrt // 28149
D=A // 28150
@13 // 28151
M=D // 28152
@Number.initialize.ret.8 // 28153
D=A // 28154
@CALL // 28155
0;JMP // 28156
(Number.initialize.ret.8)
@SP // 28157
M=M-1 // 28158

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 1")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=static 2}
//}

@Number.1 // 28159
D=M // 28160
@SP // 28161
AM=M+1 // 28162
A=A-1 // 28163
M=D // 28164
// call Int32.clone
@6 // 28165
D=A // 28166
@14 // 28167
M=D // 28168
@Int32.clone // 28169
D=A // 28170
@13 // 28171
M=D // 28172
@Number.initialize.ret.9 // 28173
D=A // 28174
@CALL // 28175
0;JMP // 28176
(Number.initialize.ret.9)
@SP // 28177
AM=M-1 // 28178
D=M // 28179
@Number.2 // 28180
M=D // 28181

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2")], call=CallInstruction{Int32.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.2 // 28182
D=M // 28183
@SP // 28184
AM=M+1 // 28185
A=A-1 // 28186
M=D // 28187
// call Int32.do_sqrt
@6 // 28188
D=A // 28189
@14 // 28190
M=D // 28191
@Int32.do_sqrt // 28192
D=A // 28193
@13 // 28194
M=D // 28195
@Number.initialize.ret.10 // 28196
D=A // 28197
@CALL // 28198
0;JMP // 28199
(Number.initialize.ret.10)
@SP // 28200
M=M-1 // 28201

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@Number.2 // 28202
D=M // 28203
@SP // 28204
AM=M+1 // 28205
A=A-1 // 28206
M=D // 28207
// call Int32.clone
@6 // 28208
D=A // 28209
@14 // 28210
M=D // 28211
@Int32.clone // 28212
D=A // 28213
@13 // 28214
M=D // 28215
@Number.initialize.ret.11 // 28216
D=A // 28217
@CALL // 28218
0;JMP // 28219
(Number.initialize.ret.11)
@SP // 28220
AM=M-1 // 28221
D=M // 28222
@LCL // 28223
A=M // 28224
M=D // 28225

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2"), PushInstruction("local 0")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.2 // 28226
D=M // 28227
@SP // 28228
AM=M+1 // 28229
A=A-1 // 28230
M=D // 28231
@LCL // 28232
A=M // 28233
D=M // 28234
@SP // 28235
AM=M+1 // 28236
A=A-1 // 28237
M=D // 28238
// call Int32.do_mul
@7 // 28239
D=A // 28240
@14 // 28241
M=D // 28242
@Int32.do_mul // 28243
D=A // 28244
@13 // 28245
M=D // 28246
@Number.initialize.ret.12 // 28247
D=A // 28248
@CALL // 28249
0;JMP // 28250
(Number.initialize.ret.12)
@SP // 28251
M=M-1 // 28252

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("static 2"), PushInstruction("local 0")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@Number.2 // 28253
D=M // 28254
@SP // 28255
AM=M+1 // 28256
A=A-1 // 28257
M=D // 28258
@LCL // 28259
A=M // 28260
D=M // 28261
@SP // 28262
AM=M+1 // 28263
A=A-1 // 28264
M=D // 28265
// call Int32.do_mul
@7 // 28266
D=A // 28267
@14 // 28268
M=D // 28269
@Int32.do_mul // 28270
D=A // 28271
@13 // 28272
M=D // 28273
@Number.initialize.ret.13 // 28274
D=A // 28275
@CALL // 28276
0;JMP // 28277
(Number.initialize.ret.13)
@SP // 28278
M=M-1 // 28279

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28280
A=M+1 // 28281
A=A+1 // 28282
D=M // 28283
@SP // 28284
AM=M+1 // 28285
A=A-1 // 28286
M=D // 28287
// call Int32.dispose
@6 // 28288
D=A // 28289
@14 // 28290
M=D // 28291
@Int32.dispose // 28292
D=A // 28293
@13 // 28294
M=D // 28295
@Number.initialize.ret.14 // 28296
D=A // 28297
@CALL // 28298
0;JMP // 28299
(Number.initialize.ret.14)
@SP // 28300
M=M-1 // 28301

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28302
A=M // 28303
D=M // 28304
@SP // 28305
AM=M+1 // 28306
A=A-1 // 28307
M=D // 28308
// call Int32.dispose
@6 // 28309
D=A // 28310
@14 // 28311
M=D // 28312
@Int32.dispose // 28313
D=A // 28314
@13 // 28315
M=D // 28316
@Number.initialize.ret.15 // 28317
D=A // 28318
@CALL // 28319
0;JMP // 28320
(Number.initialize.ret.15)
@SP // 28321
M=M-1 // 28322

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=static 4}
//}

@2 // 28323
D=A // 28324
@SP // 28325
AM=M+1 // 28326
A=A-1 // 28327
M=D // 28328
// call Int32.new
@6 // 28329
D=A // 28330
@14 // 28331
M=D // 28332
@Int32.new // 28333
D=A // 28334
@13 // 28335
M=D // 28336
@Number.initialize.ret.16 // 28337
D=A // 28338
@CALL // 28339
0;JMP // 28340
(Number.initialize.ret.16)
@SP // 28341
AM=M-1 // 28342
D=M // 28343
@Number.4 // 28344
M=D // 28345

////PushInstruction("constant 0")
@SP // 28346
AM=M+1 // 28347
A=A-1 // 28348
M=0 // 28349
@RETURN // 28350
0;JMP // 28351

////FunctionInstruction{functionName='Scene.getLights', numLocals=0, funcMapping={Scene.getNumLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getLights with 0
(Scene.getLights)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28352
A=M // 28353
D=M // 28354
@3 // 28355
M=D // 28356

////PushInstruction("this 7")
@THIS // 28357
D=M // 28358
@7 // 28359
A=D+A // 28360
D=M // 28361
@SP // 28362
AM=M+1 // 28363
A=A-1 // 28364
M=D // 28365
@RETURN // 28366
0;JMP // 28367

////FunctionInstruction{functionName='Number.dispose', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.dispose with 0
(Number.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28368
A=M // 28369
D=M // 28370
@3 // 28371
M=D // 28372

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 5}
//}

@Number.5 // 28373
M=M-1 // 28374

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28375
A=M // 28376
D=M // 28377
@SP // 28378
AM=M+1 // 28379
A=A-1 // 28380
M=D // 28381
// call Int32.dispose
@6 // 28382
D=A // 28383
@14 // 28384
M=D // 28385
@Int32.dispose // 28386
D=A // 28387
@13 // 28388
M=D // 28389
@Number.dispose.ret.0 // 28390
D=A // 28391
@CALL // 28392
0;JMP // 28393
(Number.dispose.ret.0)
@SP // 28394
M=M-1 // 28395

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 28396
D=M // 28397
@SP // 28398
AM=M+1 // 28399
A=A-1 // 28400
M=D // 28401
// call Memory.deAlloc
@6 // 28402
D=A // 28403
@14 // 28404
M=D // 28405
@Memory.deAlloc // 28406
D=A // 28407
@13 // 28408
M=D // 28409
@Number.dispose.ret.1 // 28410
D=A // 28411
@CALL // 28412
0;JMP // 28413
(Number.dispose.ret.1)
@SP // 28414
M=M-1 // 28415

////PushInstruction("constant 0")
@SP // 28416
AM=M+1 // 28417
A=A-1 // 28418
M=0 // 28419
@RETURN // 28420
0;JMP // 28421

////FunctionInstruction{functionName='Number.is_negative', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.is_negative with 0
(Number.is_negative)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28422
A=M // 28423
D=M // 28424
@3 // 28425
M=D // 28426

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_negative}}
@THIS // 28427
A=M // 28428
D=M // 28429
@SP // 28430
AM=M+1 // 28431
A=A-1 // 28432
M=D // 28433
// call Int32.is_negative
@6 // 28434
D=A // 28435
@14 // 28436
M=D // 28437
@Int32.is_negative // 28438
D=A // 28439
@13 // 28440
M=D // 28441
@Number.is_negative.ret.0 // 28442
D=A // 28443
@CALL // 28444
0;JMP // 28445
(Number.is_negative.ret.0)
@RETURN // 28446
0;JMP // 28447

////FunctionInstruction{functionName='Element.intersect', numLocals=0, funcMapping={Element.surface_normal=2, Element.plane=1, Element.color=2}}
// function Element.intersect with 0
(Element.intersect)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28448
A=M // 28449
D=M // 28450
@3 // 28451
M=D // 28452

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.intersect$IF_TRUE1}}
@Element.intersect.EQ.106 // 28453
D=A // 28454
@SP // 28455
AM=M+1 // 28456
A=A-1 // 28457
M=D // 28458
@THIS // 28459
A=M // 28460
D=M // 28461
@DO_EQ // 28462
0;JMP // 28463
(Element.intersect.EQ.106)
D=!D // 28464
@Element.intersect$IF_TRUE1 // 28465
D;JNE // 28466

////GotoInstruction{label='Element.intersect$IF_END1}
// goto Element.intersect$IF_END1
@Element.intersect$IF_END1 // 28467
0;JMP // 28468

////LabelInstruction{label='Element.intersect$IF_TRUE1}
// label Element.intersect$IF_TRUE1
(Element.intersect$IF_TRUE1)

////CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("argument 1")], call=CallInstruction{Plane.intersect}}
@THIS // 28469
A=M // 28470
D=M // 28471
@SP // 28472
AM=M+1 // 28473
A=A-1 // 28474
M=D // 28475
@ARG // 28476
A=M+1 // 28477
D=M // 28478
@SP // 28479
AM=M+1 // 28480
A=A-1 // 28481
M=D // 28482
// call Plane.intersect
@7 // 28483
D=A // 28484
@14 // 28485
M=D // 28486
@Plane.intersect // 28487
D=A // 28488
@13 // 28489
M=D // 28490
@Element.intersect.ret.0 // 28491
D=A // 28492
@CALL // 28493
0;JMP // 28494
(Element.intersect.ret.0)
@RETURN // 28495
0;JMP // 28496

////LabelInstruction{label='Element.intersect$IF_END1}
// label Element.intersect$IF_END1
(Element.intersect$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.intersect$IF_TRUE2}}
@Element.intersect.EQ.107 // 28497
D=A // 28498
@SP // 28499
AM=M+1 // 28500
A=A-1 // 28501
M=D // 28502
@THIS // 28503
A=M+1 // 28504
D=M // 28505
@DO_EQ // 28506
0;JMP // 28507
(Element.intersect.EQ.107)
D=!D // 28508
@Element.intersect$IF_TRUE2 // 28509
D;JNE // 28510

////GotoInstruction{label='Element.intersect$IF_END2}
// goto Element.intersect$IF_END2
@Element.intersect$IF_END2 // 28511
0;JMP // 28512

////LabelInstruction{label='Element.intersect$IF_TRUE2}
// label Element.intersect$IF_TRUE2
(Element.intersect$IF_TRUE2)

////CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("argument 1")], call=CallInstruction{Sphere.intersect}}
@THIS // 28513
A=M+1 // 28514
D=M // 28515
@SP // 28516
AM=M+1 // 28517
A=A-1 // 28518
M=D // 28519
@ARG // 28520
A=M+1 // 28521
D=M // 28522
@SP // 28523
AM=M+1 // 28524
A=A-1 // 28525
M=D // 28526
// call Sphere.intersect
@7 // 28527
D=A // 28528
@14 // 28529
M=D // 28530
@Sphere.intersect // 28531
D=A // 28532
@13 // 28533
M=D // 28534
@Element.intersect.ret.1 // 28535
D=A // 28536
@CALL // 28537
0;JMP // 28538
(Element.intersect.ret.1)
@RETURN // 28539
0;JMP // 28540

////LabelInstruction{label='Element.intersect$IF_END2}
// label Element.intersect$IF_END2
(Element.intersect$IF_END2)

////PushInstruction("constant 0")
@SP // 28541
AM=M+1 // 28542
A=A-1 // 28543
M=0 // 28544
@RETURN // 28545
0;JMP // 28546

////FunctionInstruction{functionName='Int32.xor', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.getParts=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.xor with 0
(Int32.xor)

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("argument 1"),
//            binaryOp: "OR"
//        ),
//    right:
//        UnaryPushGroup(            BinaryPushGroup(
//                left:
//                    PushInstruction("argument 0"),
//                right:
//                    PushInstruction("argument 1"),
//                binaryOp: "AND"
//            ),
//NOT),
//    binaryOp: "AND"
//)
@ARG // 28547
A=M+1 // 28548
D=M // 28549
A=A-1 // 28550
D=D|M // 28551
@SP // 28552
AM=M+1 // 28553
A=A-1 // 28554
M=D // 28555
@ARG // 28556
A=M+1 // 28557
D=M // 28558
A=A-1 // 28559
D=D&M // 28560
D=!D // 28561
@SP // 28562
AM=M-1 // 28563
D=D&M // 28564
@SP // 28565
AM=M+1 // 28566
A=A-1 // 28567
M=D // 28568
@RETURN // 28569
0;JMP // 28570

////FunctionInstruction{functionName='Memory.remove_node', numLocals=0, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1}}
// function Memory.remove_node with 0
(Memory.remove_node)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("argument 1"),
//                        right:
//                            PushInstruction("constant 2"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.remove_node$IF_TRUE1}}
@Memory.remove_node.EQ.108 // 28571
D=A // 28572
@SP // 28573
AM=M+1 // 28574
A=A-1 // 28575
M=D // 28576
@ARG // 28577
A=M+1 // 28578
D=M // 28579
@2 // 28580
A=D+A // 28581
D=M // 28582
@DO_EQ // 28583
0;JMP // 28584
(Memory.remove_node.EQ.108)
D=!D // 28585
@Memory.remove_node$IF_TRUE1 // 28586
D;JNE // 28587

////GotoInstruction{label='Memory.remove_node$IF_FALSE1}
// goto Memory.remove_node$IF_FALSE1
@Memory.remove_node$IF_FALSE1 // 28588
0;JMP // 28589

////LabelInstruction{label='Memory.remove_node$IF_TRUE1}
// label Memory.remove_node$IF_TRUE1
(Memory.remove_node$IF_TRUE1)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 2"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 28590
A=M+1 // 28591
D=M // 28592
@2 // 28593
A=D+A // 28594
D=M // 28595
@3 // 28596
D=D+A // 28597
@SP // 28598
AM=M+1 // 28599
A=A-1 // 28600
M=D // 28601
@ARG // 28602
A=M+1 // 28603
D=M // 28604
@3 // 28605
A=D+A // 28606
D=M // 28607
@SP // 28608
AM=M-1 // 28609
A=M // 28610
M=D // 28611

////GotoInstruction{label='Memory.remove_node$IF_END1}
// goto Memory.remove_node$IF_END1
@Memory.remove_node$IF_END1 // 28612
0;JMP // 28613

////LabelInstruction{label='Memory.remove_node$IF_FALSE1}
// label Memory.remove_node$IF_FALSE1
(Memory.remove_node$IF_FALSE1)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 3"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@ARG // 28614
A=M // 28615
D=M // 28616
@SP // 28617
AM=M+1 // 28618
A=A-1 // 28619
M=D // 28620
@ARG // 28621
A=M+1 // 28622
D=M // 28623
@3 // 28624
A=D+A // 28625
D=M // 28626
@SP // 28627
AM=M-1 // 28628
A=M // 28629
M=D // 28630

////LabelInstruction{label='Memory.remove_node$IF_END1}
// label Memory.remove_node$IF_END1
(Memory.remove_node$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            Dereference(
//                base:
//                    BinaryPushGroup(
//                        left:
//                            PushInstruction("argument 1"),
//                        right:
//                            PushInstruction("constant 3"),
//                        binaryOp: "ADD"
//                    )
//            ),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Memory.remove_node$IF_TRUE2}}
@Memory.remove_node.EQ.109 // 28631
D=A // 28632
@SP // 28633
AM=M+1 // 28634
A=A-1 // 28635
M=D // 28636
@ARG // 28637
A=M+1 // 28638
D=M // 28639
@3 // 28640
A=D+A // 28641
D=M // 28642
@DO_EQ // 28643
0;JMP // 28644
(Memory.remove_node.EQ.109)
D=!D // 28645
@Memory.remove_node$IF_TRUE2 // 28646
D;JNE // 28647

////GotoInstruction{label='Memory.remove_node$IF_END2}
// goto Memory.remove_node$IF_END2
@Memory.remove_node$IF_END2 // 28648
0;JMP // 28649

////LabelInstruction{label='Memory.remove_node$IF_TRUE2}
// label Memory.remove_node$IF_TRUE2
(Memory.remove_node$IF_TRUE2)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 2"),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 3"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 28650
A=M+1 // 28651
D=M // 28652
@3 // 28653
A=D+A // 28654
D=M // 28655
@2 // 28656
D=D+A // 28657
@SP // 28658
AM=M+1 // 28659
A=A-1 // 28660
M=D // 28661
@ARG // 28662
A=M+1 // 28663
D=M // 28664
@2 // 28665
A=D+A // 28666
D=M // 28667
@SP // 28668
AM=M-1 // 28669
A=M // 28670
M=D // 28671

////LabelInstruction{label='Memory.remove_node$IF_END2}
// label Memory.remove_node$IF_END2
(Memory.remove_node$IF_END2)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@ARG // 28672
A=M+1 // 28673
D=M // 28674
@2 // 28675
D=D+A // 28676
@SP // 28677
AM=M+1 // 28678
A=A-1 // 28679
M=D // 28680
D=0 // 28681
@SP // 28682
AM=M-1 // 28683
A=M // 28684
M=D // 28685

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@ARG // 28686
A=M+1 // 28687
D=M // 28688
@3 // 28689
D=D+A // 28690
@SP // 28691
AM=M+1 // 28692
A=A-1 // 28693
M=D // 28694
D=0 // 28695
@SP // 28696
AM=M-1 // 28697
A=M // 28698
M=D // 28699

////PushInstruction("constant 0")
@SP // 28700
AM=M+1 // 28701
A=A-1 // 28702
M=0 // 28703
@RETURN // 28704
0;JMP // 28705

////FunctionInstruction{functionName='DirectionalLight.new', numLocals=2, funcMapping={DirectionalLight.dispose=3, DirectionalLight.getColor=0}}
// function DirectionalLight.new with 2
(DirectionalLight.new)
@SP // 28706
M=M+1 // 28707
AM=M+1 // 28708
A=A-1 // 28709
M=0 // 28710
A=A-1 // 28711
M=0 // 28712

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 4")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@4 // 28713
D=A // 28714
@SP // 28715
AM=M+1 // 28716
A=A-1 // 28717
M=D // 28718
// call Memory.alloc
@6 // 28719
D=A // 28720
@14 // 28721
M=D // 28722
@Memory.alloc // 28723
D=A // 28724
@13 // 28725
M=D // 28726
@DirectionalLight.new.ret.0 // 28727
D=A // 28728
@CALL // 28729
0;JMP // 28730
(DirectionalLight.new.ret.0)
@SP // 28731
AM=M-1 // 28732
D=M // 28733
@3 // 28734
M=D // 28735

////PushPopPair {
//  push: CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 28736
AM=M+1 // 28737
A=A-1 // 28738
M=-1 // 28739
// call Number.new
@6 // 28740
D=A // 28741
@14 // 28742
M=D // 28743
@Number.new // 28744
D=A // 28745
@13 // 28746
M=D // 28747
@DirectionalLight.new.ret.1 // 28748
D=A // 28749
@CALL // 28750
0;JMP // 28751
(DirectionalLight.new.ret.1)
@SP // 28752
AM=M-1 // 28753
D=M // 28754
@LCL // 28755
A=M // 28756
M=D // 28757

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Main.getOneTwentieth}}
//  pop:  PopInstruction{address=local 1}
//}

// call Main.getOneTwentieth
@5 // 28758
D=A // 28759
@14 // 28760
M=D // 28761
@Main.getOneTwentieth // 28762
D=A // 28763
@13 // 28764
M=D // 28765
@DirectionalLight.new.ret.2 // 28766
D=A // 28767
@CALL // 28768
0;JMP // 28769
(DirectionalLight.new.ret.2)
@SP // 28770
AM=M-1 // 28771
D=M // 28772
@LCL // 28773
A=M+1 // 28774
M=D // 28775

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 28776
A=M // 28777
D=M // 28778
@THIS // 28779
A=M // 28780
M=D // 28781

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 28782
A=M+1 // 28783
D=M // 28784
@THIS // 28785
A=M+1 // 28786
M=D // 28787

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=this 2}
//}

@THIS // 28788
A=M // 28789
D=M // 28790
@SP // 28791
AM=M+1 // 28792
A=A-1 // 28793
M=D // 28794
// call Vec3.clone
@6 // 28795
D=A // 28796
@14 // 28797
M=D // 28798
@Vec3.clone // 28799
D=A // 28800
@13 // 28801
M=D // 28802
@DirectionalLight.new.ret.3 // 28803
D=A // 28804
@CALL // 28805
0;JMP // 28806
(DirectionalLight.new.ret.3)
@SP // 28807
AM=M-1 // 28808
D=M // 28809
@THIS // 28810
A=M+1 // 28811
A=A+1 // 28812
M=D // 28813

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("local 0")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28814
A=M+1 // 28815
A=A+1 // 28816
D=M // 28817
@SP // 28818
AM=M+1 // 28819
A=A-1 // 28820
M=D // 28821
@LCL // 28822
A=M // 28823
D=M // 28824
@SP // 28825
AM=M+1 // 28826
A=A-1 // 28827
M=D // 28828
// call Vec3.do_scale
@7 // 28829
D=A // 28830
@14 // 28831
M=D // 28832
@Vec3.do_scale // 28833
D=A // 28834
@13 // 28835
M=D // 28836
@DirectionalLight.new.ret.4 // 28837
D=A // 28838
@CALL // 28839
0;JMP // 28840
(DirectionalLight.new.ret.4)
@SP // 28841
M=M-1 // 28842

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=this 3}
//}

@THIS // 28843
A=M+1 // 28844
A=A+1 // 28845
D=M // 28846
@SP // 28847
AM=M+1 // 28848
A=A-1 // 28849
M=D // 28850
// call Vec3.clone
@6 // 28851
D=A // 28852
@14 // 28853
M=D // 28854
@Vec3.clone // 28855
D=A // 28856
@13 // 28857
M=D // 28858
@DirectionalLight.new.ret.5 // 28859
D=A // 28860
@CALL // 28861
0;JMP // 28862
(DirectionalLight.new.ret.5)
@SP // 28863
AM=M-1 // 28864
D=M // 28865
@THIS // 28866
A=M+1 // 28867
A=A+1 // 28868
A=A+1 // 28869
M=D // 28870

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 3"), PushInstruction("local 1")], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 28871
A=M+1 // 28872
A=A+1 // 28873
A=A+1 // 28874
D=M // 28875
@SP // 28876
AM=M+1 // 28877
A=A-1 // 28878
M=D // 28879
@LCL // 28880
A=M+1 // 28881
D=M // 28882
@SP // 28883
AM=M+1 // 28884
A=A-1 // 28885
M=D // 28886
// call Vec3.do_scale
@7 // 28887
D=A // 28888
@14 // 28889
M=D // 28890
@Vec3.do_scale // 28891
D=A // 28892
@13 // 28893
M=D // 28894
@DirectionalLight.new.ret.6 // 28895
D=A // 28896
@CALL // 28897
0;JMP // 28898
(DirectionalLight.new.ret.6)
@SP // 28899
M=M-1 // 28900

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28901
A=M // 28902
D=M // 28903
@SP // 28904
AM=M+1 // 28905
A=A-1 // 28906
M=D // 28907
// call Number.dispose
@6 // 28908
D=A // 28909
@14 // 28910
M=D // 28911
@Number.dispose // 28912
D=A // 28913
@13 // 28914
M=D // 28915
@DirectionalLight.new.ret.7 // 28916
D=A // 28917
@CALL // 28918
0;JMP // 28919
(DirectionalLight.new.ret.7)
@SP // 28920
M=M-1 // 28921

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 28922
A=M+1 // 28923
D=M // 28924
@SP // 28925
AM=M+1 // 28926
A=A-1 // 28927
M=D // 28928
// call Number.dispose
@6 // 28929
D=A // 28930
@14 // 28931
M=D // 28932
@Number.dispose // 28933
D=A // 28934
@13 // 28935
M=D // 28936
@DirectionalLight.new.ret.8 // 28937
D=A // 28938
@CALL // 28939
0;JMP // 28940
(DirectionalLight.new.ret.8)
@SP // 28941
M=M-1 // 28942

////PushInstruction("pointer 0")
@3 // 28943
D=M // 28944
@SP // 28945
AM=M+1 // 28946
A=A-1 // 28947
M=D // 28948
@RETURN // 28949
0;JMP // 28950

////FunctionInstruction{functionName='Scene.getHeight', numLocals=0, funcMapping={Scene.getNumLights=0, Scene.getLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getHeight with 0
(Scene.getHeight)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28951
A=M // 28952
D=M // 28953
@3 // 28954
M=D // 28955

////PushInstruction("this 1")
@THIS // 28956
A=M+1 // 28957
D=M // 28958
@SP // 28959
AM=M+1 // 28960
A=A-1 // 28961
M=D // 28962
@RETURN // 28963
0;JMP // 28964

////FunctionInstruction{functionName='Vec3.do_normalize', numLocals=3, funcMapping={Vec3.do_add=6, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0, Vec3.getZ=0}}
// function Vec3.do_normalize with 3
(Vec3.do_normalize)
@3 // 28965
D=A // 28966
@SP // 28967
AM=D+M // 28968
A=A-1 // 28969
M=0 // 28970
A=A-1 // 28971
M=0 // 28972
A=A-1 // 28973
M=0 // 28974

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 28975
A=M // 28976
D=M // 28977
@3 // 28978
M=D // 28979

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 28980
A=M // 28981
D=M // 28982
@SP // 28983
AM=M+1 // 28984
A=A-1 // 28985
M=D // 28986
// call Number.clone
@6 // 28987
D=A // 28988
@14 // 28989
M=D // 28990
@Number.clone // 28991
D=A // 28992
@13 // 28993
M=D // 28994
@Vec3.do_normalize.ret.0 // 28995
D=A // 28996
@CALL // 28997
0;JMP // 28998
(Vec3.do_normalize.ret.0)
@SP // 28999
AM=M-1 // 29000
D=M // 29001
@LCL // 29002
A=M // 29003
M=D // 29004

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 0")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29005
A=M // 29006
D=M // 29007
@SP // 29008
AM=M+1 // 29009
A=A-1 // 29010
M=D // 29011
@THIS // 29012
A=M // 29013
D=M // 29014
@SP // 29015
AM=M+1 // 29016
A=A-1 // 29017
M=D // 29018
// call Number.do_mul
@7 // 29019
D=A // 29020
@14 // 29021
M=D // 29022
@Number.do_mul // 29023
D=A // 29024
@13 // 29025
M=D // 29026
@Vec3.do_normalize.ret.1 // 29027
D=A // 29028
@CALL // 29029
0;JMP // 29030
(Vec3.do_normalize.ret.1)
@SP // 29031
M=M-1 // 29032

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 1}
//}

@THIS // 29033
A=M+1 // 29034
D=M // 29035
@SP // 29036
AM=M+1 // 29037
A=A-1 // 29038
M=D // 29039
// call Number.clone
@6 // 29040
D=A // 29041
@14 // 29042
M=D // 29043
@Number.clone // 29044
D=A // 29045
@13 // 29046
M=D // 29047
@Vec3.do_normalize.ret.2 // 29048
D=A // 29049
@CALL // 29050
0;JMP // 29051
(Vec3.do_normalize.ret.2)
@SP // 29052
AM=M-1 // 29053
D=M // 29054
@LCL // 29055
A=M+1 // 29056
M=D // 29057

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), PushInstruction("this 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29058
A=M+1 // 29059
D=M // 29060
@SP // 29061
AM=M+1 // 29062
A=A-1 // 29063
M=D // 29064
@THIS // 29065
A=M+1 // 29066
D=M // 29067
@SP // 29068
AM=M+1 // 29069
A=A-1 // 29070
M=D // 29071
// call Number.do_mul
@7 // 29072
D=A // 29073
@14 // 29074
M=D // 29075
@Number.do_mul // 29076
D=A // 29077
@13 // 29078
M=D // 29079
@Vec3.do_normalize.ret.3 // 29080
D=A // 29081
@CALL // 29082
0;JMP // 29083
(Vec3.do_normalize.ret.3)
@SP // 29084
M=M-1 // 29085

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@THIS // 29086
A=M+1 // 29087
A=A+1 // 29088
D=M // 29089
@SP // 29090
AM=M+1 // 29091
A=A-1 // 29092
M=D // 29093
// call Number.clone
@6 // 29094
D=A // 29095
@14 // 29096
M=D // 29097
@Number.clone // 29098
D=A // 29099
@13 // 29100
M=D // 29101
@Vec3.do_normalize.ret.4 // 29102
D=A // 29103
@CALL // 29104
0;JMP // 29105
(Vec3.do_normalize.ret.4)
@SP // 29106
AM=M-1 // 29107
D=M // 29108
@LCL // 29109
A=M+1 // 29110
A=A+1 // 29111
M=D // 29112

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("this 2")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29113
A=M+1 // 29114
A=A+1 // 29115
D=M // 29116
@SP // 29117
AM=M+1 // 29118
A=A-1 // 29119
M=D // 29120
@THIS // 29121
A=M+1 // 29122
A=A+1 // 29123
D=M // 29124
@SP // 29125
AM=M+1 // 29126
A=A-1 // 29127
M=D // 29128
// call Number.do_mul
@7 // 29129
D=A // 29130
@14 // 29131
M=D // 29132
@Number.do_mul // 29133
D=A // 29134
@13 // 29135
M=D // 29136
@Vec3.do_normalize.ret.5 // 29137
D=A // 29138
@CALL // 29139
0;JMP // 29140
(Vec3.do_normalize.ret.5)
@SP // 29141
M=M-1 // 29142

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29143
A=M // 29144
D=M // 29145
@SP // 29146
AM=M+1 // 29147
A=A-1 // 29148
M=D // 29149
@LCL // 29150
A=M+1 // 29151
D=M // 29152
@SP // 29153
AM=M+1 // 29154
A=A-1 // 29155
M=D // 29156
// call Number.do_add
@7 // 29157
D=A // 29158
@14 // 29159
M=D // 29160
@Number.do_add // 29161
D=A // 29162
@13 // 29163
M=D // 29164
@Vec3.do_normalize.ret.6 // 29165
D=A // 29166
@CALL // 29167
0;JMP // 29168
(Vec3.do_normalize.ret.6)
@SP // 29169
M=M-1 // 29170

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 2")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29171
A=M // 29172
D=M // 29173
@SP // 29174
AM=M+1 // 29175
A=A-1 // 29176
M=D // 29177
@LCL // 29178
A=M+1 // 29179
A=A+1 // 29180
D=M // 29181
@SP // 29182
AM=M+1 // 29183
A=A-1 // 29184
M=D // 29185
// call Number.do_add
@7 // 29186
D=A // 29187
@14 // 29188
M=D // 29189
@Number.do_add // 29190
D=A // 29191
@13 // 29192
M=D // 29193
@Vec3.do_normalize.ret.7 // 29194
D=A // 29195
@CALL // 29196
0;JMP // 29197
(Vec3.do_normalize.ret.7)
@SP // 29198
M=M-1 // 29199

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29200
A=M // 29201
D=M // 29202
@SP // 29203
AM=M+1 // 29204
A=A-1 // 29205
M=D // 29206
// call Number.do_sqrt
@6 // 29207
D=A // 29208
@14 // 29209
M=D // 29210
@Number.do_sqrt // 29211
D=A // 29212
@13 // 29213
M=D // 29214
@Vec3.do_normalize.ret.8 // 29215
D=A // 29216
@CALL // 29217
0;JMP // 29218
(Vec3.do_normalize.ret.8)
@SP // 29219
M=M-1 // 29220

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 29221
A=M // 29222
D=M // 29223
@SP // 29224
AM=M+1 // 29225
A=A-1 // 29226
M=D // 29227
@LCL // 29228
A=M // 29229
D=M // 29230
@SP // 29231
AM=M+1 // 29232
A=A-1 // 29233
M=D // 29234
// call Number.do_div
@7 // 29235
D=A // 29236
@14 // 29237
M=D // 29238
@Number.do_div // 29239
D=A // 29240
@13 // 29241
M=D // 29242
@Vec3.do_normalize.ret.9 // 29243
D=A // 29244
@CALL // 29245
0;JMP // 29246
(Vec3.do_normalize.ret.9)
@SP // 29247
M=M-1 // 29248

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 29249
A=M+1 // 29250
D=M // 29251
@SP // 29252
AM=M+1 // 29253
A=A-1 // 29254
M=D // 29255
@LCL // 29256
A=M // 29257
D=M // 29258
@SP // 29259
AM=M+1 // 29260
A=A-1 // 29261
M=D // 29262
// call Number.do_div
@7 // 29263
D=A // 29264
@14 // 29265
M=D // 29266
@Number.do_div // 29267
D=A // 29268
@13 // 29269
M=D // 29270
@Vec3.do_normalize.ret.10 // 29271
D=A // 29272
@CALL // 29273
0;JMP // 29274
(Vec3.do_normalize.ret.10)
@SP // 29275
M=M-1 // 29276

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 2"), PushInstruction("local 0")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 29277
A=M+1 // 29278
A=A+1 // 29279
D=M // 29280
@SP // 29281
AM=M+1 // 29282
A=A-1 // 29283
M=D // 29284
@LCL // 29285
A=M // 29286
D=M // 29287
@SP // 29288
AM=M+1 // 29289
A=A-1 // 29290
M=D // 29291
// call Number.do_div
@7 // 29292
D=A // 29293
@14 // 29294
M=D // 29295
@Number.do_div // 29296
D=A // 29297
@13 // 29298
M=D // 29299
@Vec3.do_normalize.ret.11 // 29300
D=A // 29301
@CALL // 29302
0;JMP // 29303
(Vec3.do_normalize.ret.11)
@SP // 29304
M=M-1 // 29305

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29306
A=M // 29307
D=M // 29308
@SP // 29309
AM=M+1 // 29310
A=A-1 // 29311
M=D // 29312
// call Number.dispose
@6 // 29313
D=A // 29314
@14 // 29315
M=D // 29316
@Number.dispose // 29317
D=A // 29318
@13 // 29319
M=D // 29320
@Vec3.do_normalize.ret.12 // 29321
D=A // 29322
@CALL // 29323
0;JMP // 29324
(Vec3.do_normalize.ret.12)
@SP // 29325
M=M-1 // 29326

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29327
A=M+1 // 29328
D=M // 29329
@SP // 29330
AM=M+1 // 29331
A=A-1 // 29332
M=D // 29333
// call Number.dispose
@6 // 29334
D=A // 29335
@14 // 29336
M=D // 29337
@Number.dispose // 29338
D=A // 29339
@13 // 29340
M=D // 29341
@Vec3.do_normalize.ret.13 // 29342
D=A // 29343
@CALL // 29344
0;JMP // 29345
(Vec3.do_normalize.ret.13)
@SP // 29346
M=M-1 // 29347

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29348
A=M+1 // 29349
A=A+1 // 29350
D=M // 29351
@SP // 29352
AM=M+1 // 29353
A=A-1 // 29354
M=D // 29355
// call Number.dispose
@6 // 29356
D=A // 29357
@14 // 29358
M=D // 29359
@Number.dispose // 29360
D=A // 29361
@13 // 29362
M=D // 29363
@Vec3.do_normalize.ret.14 // 29364
D=A // 29365
@CALL // 29366
0;JMP // 29367
(Vec3.do_normalize.ret.14)
@SP // 29368
M=M-1 // 29369

////PushInstruction("constant 0")
@SP // 29370
AM=M+1 // 29371
A=A-1 // 29372
M=0 // 29373
@RETURN // 29374
0;JMP // 29375

////FunctionInstruction{functionName='Int32.do_left_shift_bytes_div', numLocals=11, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.arith_rightshift=2, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul_right_shift_bytes=24, Int32.do_mul=1, Int32.nlz_u4=1, Int32.xor=0, Int32.is_positive=1, Int32.do_add=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.is_negative=0, Int32.getParts=0, Int32.clone=2, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_left_shift_bytes_div with 11
(Int32.do_left_shift_bytes_div)
@11 // 29376
D=A // 29377
@SP // 29378
AM=D+M // 29379
A=A-1 // 29380
M=0 // 29381
A=A-1 // 29382
M=0 // 29383
A=A-1 // 29384
M=0 // 29385
A=A-1 // 29386
M=0 // 29387
A=A-1 // 29388
M=0 // 29389
A=A-1 // 29390
M=0 // 29391
A=A-1 // 29392
M=0 // 29393
A=A-1 // 29394
M=0 // 29395
A=A-1 // 29396
M=0 // 29397
A=A-1 // 29398
M=0 // 29399
A=A-1 // 29400
M=0 // 29401

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 29402
A=M // 29403
D=M // 29404
@3 // 29405
M=D // 29406

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 29407
A=M+1 // 29408
A=A+1 // 29409
M=0 // 29410

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 29411
A=M+1 // 29412
A=A+1 // 29413
A=A+1 // 29414
M=0 // 29415

////PushPopPair {
//  push: CallGroup{pushes=[CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.is_negative}}], call=CallInstruction{Int32.xor}}
//  pop:  PopInstruction{address=local 4}
//}

@3 // 29416
D=M // 29417
@SP // 29418
AM=M+1 // 29419
A=A-1 // 29420
M=D // 29421
// call Int32.is_negative
@6 // 29422
D=A // 29423
@14 // 29424
M=D // 29425
@Int32.is_negative // 29426
D=A // 29427
@13 // 29428
M=D // 29429
@Int32.do_left_shift_bytes_div.ret.0 // 29430
D=A // 29431
@CALL // 29432
0;JMP // 29433
(Int32.do_left_shift_bytes_div.ret.0)
@ARG // 29434
A=M+1 // 29435
A=A+1 // 29436
D=M // 29437
@SP // 29438
AM=M+1 // 29439
A=A-1 // 29440
M=D // 29441
// call Int32.is_negative
@6 // 29442
D=A // 29443
@14 // 29444
M=D // 29445
@Int32.is_negative // 29446
D=A // 29447
@13 // 29448
M=D // 29449
@Int32.do_left_shift_bytes_div.ret.1 // 29450
D=A // 29451
@CALL // 29452
0;JMP // 29453
(Int32.do_left_shift_bytes_div.ret.1)
// call Int32.xor
@7 // 29454
D=A // 29455
@14 // 29456
M=D // 29457
@Int32.xor // 29458
D=A // 29459
@13 // 29460
M=D // 29461
@Int32.do_left_shift_bytes_div.ret.2 // 29462
D=A // 29463
@CALL // 29464
0;JMP // 29465
(Int32.do_left_shift_bytes_div.ret.2)
@LCL // 29466
D=M // 29467
@4 // 29468
A=D+A // 29469
D=A // 29470
@R13 // 29471
M=D // 29472
@SP // 29473
AM=M-1 // 29474
D=M // 29475
@R13 // 29476
A=M // 29477
M=D // 29478

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE1}}
@3 // 29479
D=M // 29480
@SP // 29481
AM=M+1 // 29482
A=A-1 // 29483
M=D // 29484
// call Int32.is_negative
@6 // 29485
D=A // 29486
@14 // 29487
M=D // 29488
@Int32.is_negative // 29489
D=A // 29490
@13 // 29491
M=D // 29492
@Int32.do_left_shift_bytes_div.ret.3 // 29493
D=A // 29494
@CALL // 29495
0;JMP // 29496
(Int32.do_left_shift_bytes_div.ret.3)
@SP // 29497
AM=M-1 // 29498
D=M // 29499
@Int32.do_left_shift_bytes_div$IF_TRUE1 // 29500
D;JNE // 29501

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE1}
// goto Int32.do_left_shift_bytes_div$IF_FALSE1
@Int32.do_left_shift_bytes_div$IF_FALSE1 // 29502
0;JMP // 29503

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE1}
// label Int32.do_left_shift_bytes_div$IF_TRUE1
(Int32.do_left_shift_bytes_div$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@3 // 29504
D=M // 29505
@SP // 29506
AM=M+1 // 29507
A=A-1 // 29508
M=D // 29509
// call Int32.clone
@6 // 29510
D=A // 29511
@14 // 29512
M=D // 29513
@Int32.clone // 29514
D=A // 29515
@13 // 29516
M=D // 29517
@Int32.do_left_shift_bytes_div.ret.4 // 29518
D=A // 29519
@CALL // 29520
0;JMP // 29521
(Int32.do_left_shift_bytes_div.ret.4)
@SP // 29522
AM=M-1 // 29523
D=M // 29524
@LCL // 29525
A=M+1 // 29526
A=A+1 // 29527
M=D // 29528

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29529
A=M+1 // 29530
A=A+1 // 29531
D=M // 29532
@SP // 29533
AM=M+1 // 29534
A=A-1 // 29535
M=D // 29536
// call Int32.do_abs
@6 // 29537
D=A // 29538
@14 // 29539
M=D // 29540
@Int32.do_abs // 29541
D=A // 29542
@13 // 29543
M=D // 29544
@Int32.do_left_shift_bytes_div.ret.5 // 29545
D=A // 29546
@CALL // 29547
0;JMP // 29548
(Int32.do_left_shift_bytes_div.ret.5)
@SP // 29549
M=M-1 // 29550

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 29551
A=M+1 // 29552
A=A+1 // 29553
D=M // 29554
@SP // 29555
AM=M+1 // 29556
A=A-1 // 29557
M=D // 29558
// call Int32.getParts
@6 // 29559
D=A // 29560
@14 // 29561
M=D // 29562
@Int32.getParts // 29563
D=A // 29564
@13 // 29565
M=D // 29566
@Int32.do_left_shift_bytes_div.ret.6 // 29567
D=A // 29568
@CALL // 29569
0;JMP // 29570
(Int32.do_left_shift_bytes_div.ret.6)
@SP // 29571
AM=M-1 // 29572
D=M // 29573
@LCL // 29574
A=M // 29575
M=D // 29576

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END1}
// goto Int32.do_left_shift_bytes_div$IF_END1
@Int32.do_left_shift_bytes_div$IF_END1 // 29577
0;JMP // 29578

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE1}
// label Int32.do_left_shift_bytes_div$IF_FALSE1
(Int32.do_left_shift_bytes_div$IF_FALSE1)

////PushPopPair {
//  push: PushInstruction("this 0")
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 29579
A=M // 29580
D=M // 29581
@LCL // 29582
A=M // 29583
M=D // 29584

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END1}
// label Int32.do_left_shift_bytes_div$IF_END1
(Int32.do_left_shift_bytes_div$IF_END1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE2}}
@ARG // 29585
A=M+1 // 29586
A=A+1 // 29587
D=M // 29588
@SP // 29589
AM=M+1 // 29590
A=A-1 // 29591
M=D // 29592
// call Int32.is_negative
@6 // 29593
D=A // 29594
@14 // 29595
M=D // 29596
@Int32.is_negative // 29597
D=A // 29598
@13 // 29599
M=D // 29600
@Int32.do_left_shift_bytes_div.ret.7 // 29601
D=A // 29602
@CALL // 29603
0;JMP // 29604
(Int32.do_left_shift_bytes_div.ret.7)
@SP // 29605
AM=M-1 // 29606
D=M // 29607
@Int32.do_left_shift_bytes_div$IF_TRUE2 // 29608
D;JNE // 29609

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE2}
// goto Int32.do_left_shift_bytes_div$IF_FALSE2
@Int32.do_left_shift_bytes_div$IF_FALSE2 // 29610
0;JMP // 29611

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE2}
// label Int32.do_left_shift_bytes_div$IF_TRUE2
(Int32.do_left_shift_bytes_div$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@ARG // 29612
A=M+1 // 29613
A=A+1 // 29614
D=M // 29615
@SP // 29616
AM=M+1 // 29617
A=A-1 // 29618
M=D // 29619
// call Int32.clone
@6 // 29620
D=A // 29621
@14 // 29622
M=D // 29623
@Int32.clone // 29624
D=A // 29625
@13 // 29626
M=D // 29627
@Int32.do_left_shift_bytes_div.ret.8 // 29628
D=A // 29629
@CALL // 29630
0;JMP // 29631
(Int32.do_left_shift_bytes_div.ret.8)
@SP // 29632
AM=M-1 // 29633
D=M // 29634
@LCL // 29635
A=M+1 // 29636
A=A+1 // 29637
A=A+1 // 29638
M=D // 29639

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.do_abs}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 29640
A=M+1 // 29641
A=A+1 // 29642
A=A+1 // 29643
D=M // 29644
@SP // 29645
AM=M+1 // 29646
A=A-1 // 29647
M=D // 29648
// call Int32.do_abs
@6 // 29649
D=A // 29650
@14 // 29651
M=D // 29652
@Int32.do_abs // 29653
D=A // 29654
@13 // 29655
M=D // 29656
@Int32.do_left_shift_bytes_div.ret.9 // 29657
D=A // 29658
@CALL // 29659
0;JMP // 29660
(Int32.do_left_shift_bytes_div.ret.9)
@SP // 29661
M=M-1 // 29662

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 29663
A=M+1 // 29664
A=A+1 // 29665
A=A+1 // 29666
D=M // 29667
@SP // 29668
AM=M+1 // 29669
A=A-1 // 29670
M=D // 29671
// call Int32.getParts
@6 // 29672
D=A // 29673
@14 // 29674
M=D // 29675
@Int32.getParts // 29676
D=A // 29677
@13 // 29678
M=D // 29679
@Int32.do_left_shift_bytes_div.ret.10 // 29680
D=A // 29681
@CALL // 29682
0;JMP // 29683
(Int32.do_left_shift_bytes_div.ret.10)
@SP // 29684
AM=M-1 // 29685
D=M // 29686
@LCL // 29687
A=M+1 // 29688
M=D // 29689

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END2}
// goto Int32.do_left_shift_bytes_div$IF_END2
@Int32.do_left_shift_bytes_div$IF_END2 // 29690
0;JMP // 29691

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE2}
// label Int32.do_left_shift_bytes_div$IF_FALSE2
(Int32.do_left_shift_bytes_div$IF_FALSE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 2")], call=CallInstruction{Int32.getParts}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 29692
A=M+1 // 29693
A=A+1 // 29694
D=M // 29695
@SP // 29696
AM=M+1 // 29697
A=A-1 // 29698
M=D // 29699
// call Int32.getParts
@6 // 29700
D=A // 29701
@14 // 29702
M=D // 29703
@Int32.getParts // 29704
D=A // 29705
@13 // 29706
M=D // 29707
@Int32.do_left_shift_bytes_div.ret.11 // 29708
D=A // 29709
@CALL // 29710
0;JMP // 29711
(Int32.do_left_shift_bytes_div.ret.11)
@SP // 29712
AM=M-1 // 29713
D=M // 29714
@LCL // 29715
A=M+1 // 29716
M=D // 29717

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END2}
// label Int32.do_left_shift_bytes_div$IF_END2
(Int32.do_left_shift_bytes_div$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 5}
//}

@8 // 29718
D=A // 29719
@SP // 29720
AM=M+1 // 29721
A=A-1 // 29722
M=D // 29723
// call Memory.alloc
@6 // 29724
D=A // 29725
@14 // 29726
M=D // 29727
@Memory.alloc // 29728
D=A // 29729
@13 // 29730
M=D // 29731
@Int32.do_left_shift_bytes_div.ret.12 // 29732
D=A // 29733
@CALL // 29734
0;JMP // 29735
(Int32.do_left_shift_bytes_div.ret.12)
@LCL // 29736
D=M // 29737
@5 // 29738
A=D+A // 29739
D=A // 29740
@R13 // 29741
M=D // 29742
@SP // 29743
AM=M-1 // 29744
D=M // 29745
@R13 // 29746
A=M // 29747
M=D // 29748

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 29749
D=M // 29750
@10 // 29751
A=D+A // 29752
M=0 // 29753

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP1}
// label Int32.do_left_shift_bytes_div_WHILE_EXP1
(Int32.do_left_shift_bytes_div_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 10"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END1}}
@Int32.do_left_shift_bytes_div.LT.110 // 29754
D=A // 29755
@SP // 29756
AM=M+1 // 29757
A=A-1 // 29758
M=D // 29759
@LCL // 29760
D=M // 29761
@10 // 29762
A=D+A // 29763
D=M // 29764
@8 // 29765
D=D-A // 29766
@DO_LT // 29767
0;JMP // 29768
(Int32.do_left_shift_bytes_div.LT.110)
D=!D // 29769
@Int32.do_left_shift_bytes_div_WHILE_END1 // 29770
D;JNE // 29771

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                UnaryPushGroup(                    BinaryPushGroup(
//                        left:
//                            BinaryPushGroup(
//                                left:
//                                    PushInstruction("local 10"),
//                                right:
//                                    PushInstruction("argument 1"),
//                                binaryOp: "SUB"
//                            ),
//                        right:
//                            PushInstruction("constant 0"),
//                        binaryOp: "LT"
//                    ),
//NOT),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 4"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE3}}
@Int32.do_left_shift_bytes_div.LT.111 // 29772
D=A // 29773
@SP // 29774
AM=M+1 // 29775
A=A-1 // 29776
M=D // 29777
@Int32.do_left_shift_bytes_div.LT.112 // 29778
D=A // 29779
@SP // 29780
AM=M+1 // 29781
A=A-1 // 29782
M=D // 29783
@LCL // 29784
D=M // 29785
@10 // 29786
A=D+A // 29787
D=M // 29788
@SP // 29789
AM=M+1 // 29790
A=A-1 // 29791
M=D // 29792
@ARG // 29793
A=M+1 // 29794
D=M // 29795
@SP // 29796
AM=M-1 // 29797
D=M-D // 29798
@DO_LT // 29799
0;JMP // 29800
(Int32.do_left_shift_bytes_div.LT.112)
@SP // 29801
AM=M+1 // 29802
A=A-1 // 29803
M=D // 29804
@SP // 29805
A=M-1 // 29806
M=!D // 29807
@LCL // 29808
D=M // 29809
@10 // 29810
A=D+A // 29811
D=M // 29812
@SP // 29813
AM=M+1 // 29814
A=A-1 // 29815
M=D // 29816
@ARG // 29817
A=M+1 // 29818
D=M // 29819
@SP // 29820
AM=M-1 // 29821
D=M-D // 29822
@SP // 29823
AM=M-1 // 29824
D=D&M // 29825
@4 // 29826
D=D-A // 29827
@DO_LT // 29828
0;JMP // 29829
(Int32.do_left_shift_bytes_div.LT.111)
@Int32.do_left_shift_bytes_div$IF_TRUE3 // 29830
D;JNE // 29831

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE3}
// goto Int32.do_left_shift_bytes_div$IF_FALSE3
@Int32.do_left_shift_bytes_div$IF_FALSE3 // 29832
0;JMP // 29833

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE3}
// label Int32.do_left_shift_bytes_div$IF_TRUE3
(Int32.do_left_shift_bytes_div$IF_TRUE3)

////PushWriter{source=Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("argument 1"),
//                    binaryOp: "SUB"
//                ),
//            binaryOp: "ADD"
//        )
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("local 10"),
//    binaryOp: "ADD"
//)}
@LCL // 29834
D=M // 29835
@5 // 29836
A=D+A // 29837
D=M // 29838
@SP // 29839
AM=M+1 // 29840
A=A-1 // 29841
M=D // 29842
@LCL // 29843
D=M // 29844
@10 // 29845
A=D+A // 29846
D=M // 29847
@SP // 29848
AM=M-1 // 29849
D=D+M // 29850
@SP // 29851
AM=M+1 // 29852
A=A-1 // 29853
M=D // 29854
@LCL // 29855
A=M // 29856
D=M // 29857
@SP // 29858
AM=M+1 // 29859
A=A-1 // 29860
M=D // 29861
@LCL // 29862
D=M // 29863
@10 // 29864
A=D+A // 29865
D=M // 29866
@SP // 29867
AM=M+1 // 29868
A=A-1 // 29869
M=D // 29870
@ARG // 29871
A=M+1 // 29872
D=M // 29873
@SP // 29874
AM=M-1 // 29875
D=M-D // 29876
@SP // 29877
AM=M-1 // 29878
A=D+M // 29879
D=M // 29880
@SP // 29881
AM=M-1 // 29882
A=M // 29883
M=D // 29884

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END3}
// goto Int32.do_left_shift_bytes_div$IF_END3
@Int32.do_left_shift_bytes_div$IF_END3 // 29885
0;JMP // 29886

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_FALSE3}
// label Int32.do_left_shift_bytes_div$IF_FALSE3
(Int32.do_left_shift_bytes_div$IF_FALSE3)

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("local 10"),
//    binaryOp: "ADD"
//)}
@LCL // 29887
D=M // 29888
@5 // 29889
A=D+A // 29890
D=M // 29891
@SP // 29892
AM=M+1 // 29893
A=A-1 // 29894
M=D // 29895
@LCL // 29896
D=M // 29897
@10 // 29898
A=D+A // 29899
D=M // 29900
@SP // 29901
AM=M-1 // 29902
D=D+M // 29903
@SP // 29904
AM=M+1 // 29905
A=A-1 // 29906
M=D // 29907
D=0 // 29908
@SP // 29909
AM=M-1 // 29910
A=M // 29911
M=D // 29912

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END3}
// label Int32.do_left_shift_bytes_div$IF_END3
(Int32.do_left_shift_bytes_div$IF_END3)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 29913
D=M // 29914
@10 // 29915
A=D+A // 29916
M=M+1 // 29917

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP1}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP1
@Int32.do_left_shift_bytes_div_WHILE_EXP1 // 29918
0;JMP // 29919

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END1}
// label Int32.do_left_shift_bytes_div_WHILE_END1
(Int32.do_left_shift_bytes_div_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 6}
//}

@16 // 29920
D=A // 29921
@SP // 29922
AM=M+1 // 29923
A=A-1 // 29924
M=D // 29925
// call Memory.alloc
@6 // 29926
D=A // 29927
@14 // 29928
M=D // 29929
@Memory.alloc // 29930
D=A // 29931
@13 // 29932
M=D // 29933
@Int32.do_left_shift_bytes_div.ret.13 // 29934
D=A // 29935
@CALL // 29936
0;JMP // 29937
(Int32.do_left_shift_bytes_div.ret.13)
@LCL // 29938
D=M // 29939
@6 // 29940
A=D+A // 29941
D=A // 29942
@R13 // 29943
M=D // 29944
@SP // 29945
AM=M-1 // 29946
D=M // 29947
@R13 // 29948
A=M // 29949
M=D // 29950

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 29951
D=M // 29952
@10 // 29953
A=D+A // 29954
M=0 // 29955

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP2}
// label Int32.do_left_shift_bytes_div_WHILE_EXP2
(Int32.do_left_shift_bytes_div_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 10"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END2}}
@Int32.do_left_shift_bytes_div.LT.113 // 29956
D=A // 29957
@SP // 29958
AM=M+1 // 29959
A=A-1 // 29960
M=D // 29961
@LCL // 29962
D=M // 29963
@10 // 29964
A=D+A // 29965
D=M // 29966
@8 // 29967
D=D-A // 29968
@DO_LT // 29969
0;JMP // 29970
(Int32.do_left_shift_bytes_div.LT.113)
D=!D // 29971
@Int32.do_left_shift_bytes_div_WHILE_END2 // 29972
D;JNE // 29973

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 5"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 29974
D=M // 29975
@6 // 29976
A=D+A // 29977
D=M // 29978
@SP // 29979
AM=M+1 // 29980
A=A-1 // 29981
M=D // 29982
@LCL // 29983
D=M // 29984
@10 // 29985
A=D+A // 29986
D=M // 29987
D=D+1 // 29988
@SP // 29989
AM=M-1 // 29990
D=D+M // 29991
@SP // 29992
AM=M+1 // 29993
A=A-1 // 29994
M=D // 29995
@LCL // 29996
D=M // 29997
@5 // 29998
A=D+A // 29999
D=M // 30000
@SP // 30001
AM=M+1 // 30002
A=A-1 // 30003
M=D // 30004
@LCL // 30005
D=M // 30006
@10 // 30007
A=D+A // 30008
D=M // 30009
@SP // 30010
AM=M-1 // 30011
A=D+M // 30012
D=M // 30013
@15 // 30014
D=D&A // 30015
@SP // 30016
AM=M-1 // 30017
A=M // 30018
M=D // 30019

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("local 10"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 6"),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 30020
D=M // 30021
@6 // 30022
A=D+A // 30023
D=M // 30024
@SP // 30025
AM=M+1 // 30026
A=A-1 // 30027
M=D // 30028
@LCL // 30029
D=M // 30030
@10 // 30031
A=D+A // 30032
D=M // 30033
D=D+1 // 30034
D=D+1 // 30035
@SP // 30036
AM=M-1 // 30037
D=D+M // 30038
@SP // 30039
AM=M+1 // 30040
A=A-1 // 30041
M=D // 30042
@LCL // 30043
D=M // 30044
@5 // 30045
A=D+A // 30046
D=M // 30047
@SP // 30048
AM=M+1 // 30049
A=A-1 // 30050
M=D // 30051
@LCL // 30052
D=M // 30053
@10 // 30054
A=D+A // 30055
D=M // 30056
@SP // 30057
AM=M-1 // 30058
A=D+M // 30059
D=M // 30060
@SP // 30061
AM=M+1 // 30062
A=A-1 // 30063
M=D // 30064
@4 // 30065
D=A // 30066
@SP // 30067
AM=M+1 // 30068
A=A-1 // 30069
M=D // 30070
// call Int32.arith_rightshift
@7 // 30071
D=A // 30072
@14 // 30073
M=D // 30074
@Int32.arith_rightshift // 30075
D=A // 30076
@13 // 30077
M=D // 30078
@Int32.do_left_shift_bytes_div.ret.14 // 30079
D=A // 30080
@CALL // 30081
0;JMP // 30082
(Int32.do_left_shift_bytes_div.ret.14)
@SP // 30083
AM=M-1 // 30084
D=M // 30085
@SP // 30086
AM=M-1 // 30087
A=M // 30088
M=D // 30089

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30090
D=M // 30091
@10 // 30092
A=D+A // 30093
M=M+1 // 30094

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP2}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP2
@Int32.do_left_shift_bytes_div_WHILE_EXP2 // 30095
0;JMP // 30096

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END2}
// label Int32.do_left_shift_bytes_div_WHILE_END2
(Int32.do_left_shift_bytes_div_WHILE_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 8")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 7}
//}

@8 // 30097
D=A // 30098
@SP // 30099
AM=M+1 // 30100
A=A-1 // 30101
M=D // 30102
// call Memory.alloc
@6 // 30103
D=A // 30104
@14 // 30105
M=D // 30106
@Memory.alloc // 30107
D=A // 30108
@13 // 30109
M=D // 30110
@Int32.do_left_shift_bytes_div.ret.15 // 30111
D=A // 30112
@CALL // 30113
0;JMP // 30114
(Int32.do_left_shift_bytes_div.ret.15)
@LCL // 30115
D=M // 30116
@7 // 30117
A=D+A // 30118
D=A // 30119
@R13 // 30120
M=D // 30121
@SP // 30122
AM=M-1 // 30123
D=M // 30124
@R13 // 30125
A=M // 30126
M=D // 30127

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30128
D=M // 30129
@10 // 30130
A=D+A // 30131
M=0 // 30132

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP3}
// label Int32.do_left_shift_bytes_div_WHILE_EXP3
(Int32.do_left_shift_bytes_div_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 10"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END3}}
@Int32.do_left_shift_bytes_div.LT.114 // 30133
D=A // 30134
@SP // 30135
AM=M+1 // 30136
A=A-1 // 30137
M=D // 30138
@LCL // 30139
D=M // 30140
@10 // 30141
A=D+A // 30142
D=M // 30143
@4 // 30144
D=D-A // 30145
@DO_LT // 30146
0;JMP // 30147
(Int32.do_left_shift_bytes_div.LT.114)
D=!D // 30148
@Int32.do_left_shift_bytes_div_WHILE_END3 // 30149
D;JNE // 30150

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 10"),
//            right:
//                PushInstruction("local 10"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 30151
D=M // 30152
@7 // 30153
A=D+A // 30154
D=M // 30155
@SP // 30156
AM=M+1 // 30157
A=A-1 // 30158
M=D // 30159
@LCL // 30160
D=M // 30161
@10 // 30162
A=D+A // 30163
D=M // 30164
D=D+M // 30165
@SP // 30166
AM=M-1 // 30167
D=D+M // 30168
@SP // 30169
AM=M+1 // 30170
A=A-1 // 30171
M=D // 30172
@LCL // 30173
A=M+1 // 30174
D=M // 30175
@SP // 30176
AM=M+1 // 30177
A=A-1 // 30178
M=D // 30179
@LCL // 30180
D=M // 30181
@10 // 30182
A=D+A // 30183
D=M // 30184
@SP // 30185
AM=M-1 // 30186
A=D+M // 30187
D=M // 30188
@15 // 30189
D=D&A // 30190
@SP // 30191
AM=M-1 // 30192
A=M // 30193
M=D // 30194

////PushWriter{source=CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("local 10"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}, dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 7"),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 10"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                ),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 30195
D=M // 30196
@7 // 30197
A=D+A // 30198
D=M // 30199
@SP // 30200
AM=M+1 // 30201
A=A-1 // 30202
M=D // 30203
@LCL // 30204
D=M // 30205
@10 // 30206
A=D+A // 30207
D=M // 30208
D=D+M // 30209
D=D+1 // 30210
@SP // 30211
AM=M-1 // 30212
D=D+M // 30213
@SP // 30214
AM=M+1 // 30215
A=A-1 // 30216
M=D // 30217
@LCL // 30218
A=M+1 // 30219
D=M // 30220
@SP // 30221
AM=M+1 // 30222
A=A-1 // 30223
M=D // 30224
@LCL // 30225
D=M // 30226
@10 // 30227
A=D+A // 30228
D=M // 30229
@SP // 30230
AM=M-1 // 30231
A=D+M // 30232
D=M // 30233
@SP // 30234
AM=M+1 // 30235
A=A-1 // 30236
M=D // 30237
@4 // 30238
D=A // 30239
@SP // 30240
AM=M+1 // 30241
A=A-1 // 30242
M=D // 30243
// call Int32.arith_rightshift
@7 // 30244
D=A // 30245
@14 // 30246
M=D // 30247
@Int32.arith_rightshift // 30248
D=A // 30249
@13 // 30250
M=D // 30251
@Int32.do_left_shift_bytes_div.ret.16 // 30252
D=A // 30253
@CALL // 30254
0;JMP // 30255
(Int32.do_left_shift_bytes_div.ret.16)
@SP // 30256
AM=M-1 // 30257
D=M // 30258
@SP // 30259
AM=M-1 // 30260
A=M // 30261
M=D // 30262

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30263
D=M // 30264
@10 // 30265
A=D+A // 30266
M=M+1 // 30267

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP3}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP3
@Int32.do_left_shift_bytes_div_WHILE_EXP3 // 30268
0;JMP // 30269

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END3}
// label Int32.do_left_shift_bytes_div_WHILE_END3
(Int32.do_left_shift_bytes_div_WHILE_END3)

////PushPopPair {
//  push: PushInstruction("constant 255")
//  pop:  PopInstruction{address=local 9}
//}

@255 // 30270
D=A // 30271
@SP // 30272
AM=M+1 // 30273
A=A-1 // 30274
M=D // 30275
@LCL // 30276
D=M // 30277
@9 // 30278
A=D+A // 30279
D=A // 30280
@R13 // 30281
M=D // 30282
@SP // 30283
AM=M-1 // 30284
D=M // 30285
@R13 // 30286
A=M // 30287
M=D // 30288

////PushPopPair {
//  push: PushInstruction("constant 7")
//  pop:  PopInstruction{address=local 10}
//}

@7 // 30289
D=A // 30290
@SP // 30291
AM=M+1 // 30292
A=A-1 // 30293
M=D // 30294
@LCL // 30295
D=M // 30296
@10 // 30297
A=D+A // 30298
D=A // 30299
@R13 // 30300
M=D // 30301
@SP // 30302
AM=M-1 // 30303
D=M // 30304
@R13 // 30305
A=M // 30306
M=D // 30307

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP4}
// label Int32.do_left_shift_bytes_div_WHILE_EXP4
(Int32.do_left_shift_bytes_div_WHILE_EXP4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END4}}
@Int32.do_left_shift_bytes_div.LT.115 // 30308
D=A // 30309
@SP // 30310
AM=M+1 // 30311
A=A-1 // 30312
M=D // 30313
@LCL // 30314
D=M // 30315
@10 // 30316
A=D+A // 30317
D=M // 30318
@DO_LT // 30319
0;JMP // 30320
(Int32.do_left_shift_bytes_div.LT.115)
@Int32.do_left_shift_bytes_div_WHILE_END4 // 30321
D;JNE // 30322

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 7"),
//                    right:
//                        PushInstruction("local 10"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE4}}
@Int32.do_left_shift_bytes_div.GT.116 // 30323
D=A // 30324
@SP // 30325
AM=M+1 // 30326
A=A-1 // 30327
M=D // 30328
@LCL // 30329
D=M // 30330
@10 // 30331
A=D+A // 30332
D=M // 30333
A=A-1 // 30334
A=A-1 // 30335
A=A-1 // 30336
A=D+M // 30337
D=M // 30338
@DO_GT // 30339
0;JMP // 30340
(Int32.do_left_shift_bytes_div.GT.116)
@Int32.do_left_shift_bytes_div$IF_TRUE4 // 30341
D;JNE // 30342

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END4}
// goto Int32.do_left_shift_bytes_div$IF_END4
@Int32.do_left_shift_bytes_div$IF_END4 // 30343
0;JMP // 30344

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE4}
// label Int32.do_left_shift_bytes_div$IF_TRUE4
(Int32.do_left_shift_bytes_div$IF_TRUE4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 9}
//}

@LCL // 30345
D=M // 30346
@10 // 30347
A=D+A // 30348
D=M // 30349
@SP // 30350
AM=M+1 // 30351
A=A-1 // 30352
M=D+1 // 30353
@LCL // 30354
D=M // 30355
@9 // 30356
A=D+A // 30357
D=A // 30358
@R13 // 30359
M=D // 30360
@SP // 30361
AM=M-1 // 30362
D=M // 30363
@R13 // 30364
A=M // 30365
M=D // 30366

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30367
D=M // 30368
@10 // 30369
A=D+A // 30370
M=-1 // 30371

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END4}
// label Int32.do_left_shift_bytes_div$IF_END4
(Int32.do_left_shift_bytes_div$IF_END4)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30372
D=M // 30373
@10 // 30374
A=D+A // 30375
M=M-1 // 30376

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP4}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP4
@Int32.do_left_shift_bytes_div_WHILE_EXP4 // 30377
0;JMP // 30378

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END4}
// label Int32.do_left_shift_bytes_div_WHILE_END4
(Int32.do_left_shift_bytes_div_WHILE_END4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 7"), PushInstruction("local 9")], call=CallInstruction{Int32.u4_array_div_u4_array}}
//  pop:  PopInstruction{address=local 8}
//}

@LCL // 30379
D=M // 30380
@6 // 30381
A=D+A // 30382
D=M // 30383
@SP // 30384
AM=M+1 // 30385
A=A-1 // 30386
M=D // 30387
@LCL // 30388
D=M // 30389
@7 // 30390
A=D+A // 30391
D=M // 30392
@SP // 30393
AM=M+1 // 30394
A=A-1 // 30395
M=D // 30396
@LCL // 30397
D=M // 30398
@9 // 30399
A=D+A // 30400
D=M // 30401
@SP // 30402
AM=M+1 // 30403
A=A-1 // 30404
M=D // 30405
// call Int32.u4_array_div_u4_array
@8 // 30406
D=A // 30407
@14 // 30408
M=D // 30409
@Int32.u4_array_div_u4_array // 30410
D=A // 30411
@13 // 30412
M=D // 30413
@Int32.do_left_shift_bytes_div.ret.17 // 30414
D=A // 30415
@CALL // 30416
0;JMP // 30417
(Int32.do_left_shift_bytes_div.ret.17)
@LCL // 30418
D=M // 30419
@8 // 30420
A=D+A // 30421
D=A // 30422
@R13 // 30423
M=D // 30424
@SP // 30425
AM=M-1 // 30426
D=M // 30427
@R13 // 30428
A=M // 30429
M=D // 30430

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30431
D=M // 30432
@10 // 30433
A=D+A // 30434
M=0 // 30435

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP5}
// label Int32.do_left_shift_bytes_div_WHILE_EXP5
(Int32.do_left_shift_bytes_div_WHILE_EXP5)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 10"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END5}}
@Int32.do_left_shift_bytes_div.LT.117 // 30436
D=A // 30437
@SP // 30438
AM=M+1 // 30439
A=A-1 // 30440
M=D // 30441
@LCL // 30442
D=M // 30443
@10 // 30444
A=D+A // 30445
D=M // 30446
@4 // 30447
D=D-A // 30448
@DO_LT // 30449
0;JMP // 30450
(Int32.do_left_shift_bytes_div.LT.117)
D=!D // 30451
@Int32.do_left_shift_bytes_div_WHILE_END5 // 30452
D;JNE // 30453

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 8"),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("local 10"),
//                            binaryOp: "ADD"
//                        ),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 8"),
//            right:
//                BinaryPushGroup(
//                    left:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 10"),
//                            right:
//                                PushInstruction("local 10"),
//                            binaryOp: "ADD"
//                        ),
//                    right:
//                        PushInstruction("constant 1"),
//                    binaryOp: "ADD"
//                ),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 16")], call=CallInstruction{Math.multiply}},
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 10"),
//    binaryOp: "ADD"
//)}
@THIS // 30454
A=M // 30455
D=M // 30456
@SP // 30457
AM=M+1 // 30458
A=A-1 // 30459
M=D // 30460
@LCL // 30461
D=M // 30462
@10 // 30463
A=D+A // 30464
D=M // 30465
@SP // 30466
AM=M-1 // 30467
D=D+M // 30468
@SP // 30469
AM=M+1 // 30470
A=A-1 // 30471
M=D // 30472
@LCL // 30473
D=M // 30474
@8 // 30475
A=D+A // 30476
D=M // 30477
@SP // 30478
AM=M+1 // 30479
A=A-1 // 30480
M=D // 30481
@LCL // 30482
D=M // 30483
@10 // 30484
A=D+A // 30485
D=M // 30486
D=D+M // 30487
@SP // 30488
AM=M-1 // 30489
A=D+M // 30490
D=M // 30491
@SP // 30492
AM=M+1 // 30493
A=A-1 // 30494
M=D // 30495
@LCL // 30496
D=M // 30497
@8 // 30498
A=D+A // 30499
D=M // 30500
@SP // 30501
AM=M+1 // 30502
A=A-1 // 30503
M=D // 30504
@LCL // 30505
D=M // 30506
@10 // 30507
A=D+A // 30508
D=M // 30509
D=D+M // 30510
D=D+1 // 30511
@SP // 30512
AM=M-1 // 30513
A=D+M // 30514
D=M // 30515
@SP // 30516
AM=M+1 // 30517
A=A-1 // 30518
M=D // 30519
@16 // 30520
D=A // 30521
@SP // 30522
AM=M+1 // 30523
A=A-1 // 30524
M=D // 30525
// call Math.multiply
@7 // 30526
D=A // 30527
@14 // 30528
M=D // 30529
@Math.multiply // 30530
D=A // 30531
@13 // 30532
M=D // 30533
@Int32.do_left_shift_bytes_div.ret.18 // 30534
D=A // 30535
@CALL // 30536
0;JMP // 30537
(Int32.do_left_shift_bytes_div.ret.18)
@SP // 30538
AM=M-1 // 30539
D=M // 30540
@SP // 30541
AM=M-1 // 30542
D=D+M // 30543
@SP // 30544
AM=M-1 // 30545
A=M // 30546
M=D // 30547

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 10"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 30548
D=M // 30549
@10 // 30550
A=D+A // 30551
M=M+1 // 30552

////GotoInstruction{label='Int32.do_left_shift_bytes_div_WHILE_EXP5}
// goto Int32.do_left_shift_bytes_div_WHILE_EXP5
@Int32.do_left_shift_bytes_div_WHILE_EXP5 // 30553
0;JMP // 30554

////LabelInstruction{label='Int32.do_left_shift_bytes_div_WHILE_END5}
// label Int32.do_left_shift_bytes_div_WHILE_END5
(Int32.do_left_shift_bytes_div_WHILE_END5)

////ConditionalGroup{push=PushInstruction("local 4"), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE5}}
@LCL // 30555
D=M // 30556
@4 // 30557
A=D+A // 30558
D=M // 30559
@Int32.do_left_shift_bytes_div$IF_TRUE5 // 30560
D;JNE // 30561

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END5}
// goto Int32.do_left_shift_bytes_div$IF_END5
@Int32.do_left_shift_bytes_div$IF_END5 // 30562
0;JMP // 30563

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE5}
// label Int32.do_left_shift_bytes_div$IF_TRUE5
(Int32.do_left_shift_bytes_div$IF_TRUE5)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.do_neg}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 30564
D=M // 30565
@SP // 30566
AM=M+1 // 30567
A=A-1 // 30568
M=D // 30569
// call Int32.do_neg
@6 // 30570
D=A // 30571
@14 // 30572
M=D // 30573
@Int32.do_neg // 30574
D=A // 30575
@13 // 30576
M=D // 30577
@Int32.do_left_shift_bytes_div.ret.19 // 30578
D=A // 30579
@CALL // 30580
0;JMP // 30581
(Int32.do_left_shift_bytes_div.ret.19)
@SP // 30582
M=M-1 // 30583

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END5}
// label Int32.do_left_shift_bytes_div$IF_END5
(Int32.do_left_shift_bytes_div$IF_END5)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE6}}
@Int32.do_left_shift_bytes_div.EQ.118 // 30584
D=A // 30585
@SP // 30586
AM=M+1 // 30587
A=A-1 // 30588
M=D // 30589
@LCL // 30590
A=M+1 // 30591
A=A+1 // 30592
D=M // 30593
@DO_EQ // 30594
0;JMP // 30595
(Int32.do_left_shift_bytes_div.EQ.118)
D=!D // 30596
@Int32.do_left_shift_bytes_div$IF_TRUE6 // 30597
D;JNE // 30598

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END6}
// goto Int32.do_left_shift_bytes_div$IF_END6
@Int32.do_left_shift_bytes_div$IF_END6 // 30599
0;JMP // 30600

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE6}
// label Int32.do_left_shift_bytes_div$IF_TRUE6
(Int32.do_left_shift_bytes_div$IF_TRUE6)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30601
A=M+1 // 30602
A=A+1 // 30603
D=M // 30604
@SP // 30605
AM=M+1 // 30606
A=A-1 // 30607
M=D // 30608
// call Int32.dispose
@6 // 30609
D=A // 30610
@14 // 30611
M=D // 30612
@Int32.dispose // 30613
D=A // 30614
@13 // 30615
M=D // 30616
@Int32.do_left_shift_bytes_div.ret.20 // 30617
D=A // 30618
@CALL // 30619
0;JMP // 30620
(Int32.do_left_shift_bytes_div.ret.20)
@SP // 30621
M=M-1 // 30622

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END6}
// label Int32.do_left_shift_bytes_div$IF_END6
(Int32.do_left_shift_bytes_div$IF_END6)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE7}}
@Int32.do_left_shift_bytes_div.EQ.119 // 30623
D=A // 30624
@SP // 30625
AM=M+1 // 30626
A=A-1 // 30627
M=D // 30628
@LCL // 30629
A=M+1 // 30630
A=A+1 // 30631
A=A+1 // 30632
D=M // 30633
@DO_EQ // 30634
0;JMP // 30635
(Int32.do_left_shift_bytes_div.EQ.119)
D=!D // 30636
@Int32.do_left_shift_bytes_div$IF_TRUE7 // 30637
D;JNE // 30638

////GotoInstruction{label='Int32.do_left_shift_bytes_div$IF_END7}
// goto Int32.do_left_shift_bytes_div$IF_END7
@Int32.do_left_shift_bytes_div$IF_END7 // 30639
0;JMP // 30640

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_TRUE7}
// label Int32.do_left_shift_bytes_div$IF_TRUE7
(Int32.do_left_shift_bytes_div$IF_TRUE7)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30641
A=M+1 // 30642
A=A+1 // 30643
A=A+1 // 30644
D=M // 30645
@SP // 30646
AM=M+1 // 30647
A=A-1 // 30648
M=D // 30649
// call Int32.dispose
@6 // 30650
D=A // 30651
@14 // 30652
M=D // 30653
@Int32.dispose // 30654
D=A // 30655
@13 // 30656
M=D // 30657
@Int32.do_left_shift_bytes_div.ret.21 // 30658
D=A // 30659
@CALL // 30660
0;JMP // 30661
(Int32.do_left_shift_bytes_div.ret.21)
@SP // 30662
M=M-1 // 30663

////LabelInstruction{label='Int32.do_left_shift_bytes_div$IF_END7}
// label Int32.do_left_shift_bytes_div$IF_END7
(Int32.do_left_shift_bytes_div$IF_END7)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30664
D=M // 30665
@5 // 30666
A=D+A // 30667
D=M // 30668
@SP // 30669
AM=M+1 // 30670
A=A-1 // 30671
M=D // 30672
// call Memory.deAlloc
@6 // 30673
D=A // 30674
@14 // 30675
M=D // 30676
@Memory.deAlloc // 30677
D=A // 30678
@13 // 30679
M=D // 30680
@Int32.do_left_shift_bytes_div.ret.22 // 30681
D=A // 30682
@CALL // 30683
0;JMP // 30684
(Int32.do_left_shift_bytes_div.ret.22)
@SP // 30685
M=M-1 // 30686

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30687
D=M // 30688
@6 // 30689
A=D+A // 30690
D=M // 30691
@SP // 30692
AM=M+1 // 30693
A=A-1 // 30694
M=D // 30695
// call Memory.deAlloc
@6 // 30696
D=A // 30697
@14 // 30698
M=D // 30699
@Memory.deAlloc // 30700
D=A // 30701
@13 // 30702
M=D // 30703
@Int32.do_left_shift_bytes_div.ret.23 // 30704
D=A // 30705
@CALL // 30706
0;JMP // 30707
(Int32.do_left_shift_bytes_div.ret.23)
@SP // 30708
M=M-1 // 30709

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30710
D=M // 30711
@7 // 30712
A=D+A // 30713
D=M // 30714
@SP // 30715
AM=M+1 // 30716
A=A-1 // 30717
M=D // 30718
// call Memory.deAlloc
@6 // 30719
D=A // 30720
@14 // 30721
M=D // 30722
@Memory.deAlloc // 30723
D=A // 30724
@13 // 30725
M=D // 30726
@Int32.do_left_shift_bytes_div.ret.24 // 30727
D=A // 30728
@CALL // 30729
0;JMP // 30730
(Int32.do_left_shift_bytes_div.ret.24)
@SP // 30731
M=M-1 // 30732

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 8")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30733
D=M // 30734
@8 // 30735
A=D+A // 30736
D=M // 30737
@SP // 30738
AM=M+1 // 30739
A=A-1 // 30740
M=D // 30741
// call Memory.deAlloc
@6 // 30742
D=A // 30743
@14 // 30744
M=D // 30745
@Memory.deAlloc // 30746
D=A // 30747
@13 // 30748
M=D // 30749
@Int32.do_left_shift_bytes_div.ret.25 // 30750
D=A // 30751
@CALL // 30752
0;JMP // 30753
(Int32.do_left_shift_bytes_div.ret.25)
@SP // 30754
M=M-1 // 30755

////PushInstruction("constant 0")
@SP // 30756
AM=M+1 // 30757
A=A-1 // 30758
M=0 // 30759
@RETURN // 30760
0;JMP // 30761

////FunctionInstruction{functionName='Int32.cmp', numLocals=2, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=24, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=26, Int32.is_negative=0, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.cmp with 2
(Int32.cmp)
@SP // 30762
M=M+1 // 30763
AM=M+1 // 30764
A=A-1 // 30765
M=0 // 30766
A=A-1 // 30767
M=0 // 30768

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30769
A=M // 30770
D=M // 30771
@3 // 30772
M=D // 30773

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Int32.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 30774
D=M // 30775
@SP // 30776
AM=M+1 // 30777
A=A-1 // 30778
M=D // 30779
// call Int32.clone
@6 // 30780
D=A // 30781
@14 // 30782
M=D // 30783
@Int32.clone // 30784
D=A // 30785
@13 // 30786
M=D // 30787
@Int32.cmp.ret.0 // 30788
D=A // 30789
@CALL // 30790
0;JMP // 30791
(Int32.cmp.ret.0)
@SP // 30792
AM=M-1 // 30793
D=M // 30794
@LCL // 30795
A=M // 30796
M=D // 30797

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("argument 1")], call=CallInstruction{Int32.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30798
A=M // 30799
D=M // 30800
@SP // 30801
AM=M+1 // 30802
A=A-1 // 30803
M=D // 30804
@ARG // 30805
A=M+1 // 30806
D=M // 30807
@SP // 30808
AM=M+1 // 30809
A=A-1 // 30810
M=D // 30811
// call Int32.do_sub
@7 // 30812
D=A // 30813
@14 // 30814
M=D // 30815
@Int32.do_sub // 30816
D=A // 30817
@13 // 30818
M=D // 30819
@Int32.cmp.ret.1 // 30820
D=A // 30821
@CALL // 30822
0;JMP // 30823
(Int32.cmp.ret.1)
@SP // 30824
M=M-1 // 30825

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.is_zero}}, ifGoto=IfGotoInstruction{label='Int32.cmp$IF_TRUE1}}
@LCL // 30826
A=M // 30827
D=M // 30828
@SP // 30829
AM=M+1 // 30830
A=A-1 // 30831
M=D // 30832
// call Int32.is_zero
@6 // 30833
D=A // 30834
@14 // 30835
M=D // 30836
@Int32.is_zero // 30837
D=A // 30838
@13 // 30839
M=D // 30840
@Int32.cmp.ret.2 // 30841
D=A // 30842
@CALL // 30843
0;JMP // 30844
(Int32.cmp.ret.2)
@SP // 30845
AM=M-1 // 30846
D=M // 30847
@Int32.cmp$IF_TRUE1 // 30848
D;JNE // 30849

////GotoInstruction{label='Int32.cmp$IF_FALSE1}
// goto Int32.cmp$IF_FALSE1
@Int32.cmp$IF_FALSE1 // 30850
0;JMP // 30851

////LabelInstruction{label='Int32.cmp$IF_TRUE1}
// label Int32.cmp$IF_TRUE1
(Int32.cmp$IF_TRUE1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 30852
A=M+1 // 30853
M=0 // 30854

////GotoInstruction{label='Int32.cmp$IF_END1}
// goto Int32.cmp$IF_END1
@Int32.cmp$IF_END1 // 30855
0;JMP // 30856

////LabelInstruction{label='Int32.cmp$IF_FALSE1}
// label Int32.cmp$IF_FALSE1
(Int32.cmp$IF_FALSE1)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.is_negative}}, ifGoto=IfGotoInstruction{label='Int32.cmp$IF_TRUE2}}
@LCL // 30857
A=M // 30858
D=M // 30859
@SP // 30860
AM=M+1 // 30861
A=A-1 // 30862
M=D // 30863
// call Int32.is_negative
@6 // 30864
D=A // 30865
@14 // 30866
M=D // 30867
@Int32.is_negative // 30868
D=A // 30869
@13 // 30870
M=D // 30871
@Int32.cmp.ret.3 // 30872
D=A // 30873
@CALL // 30874
0;JMP // 30875
(Int32.cmp.ret.3)
@SP // 30876
AM=M-1 // 30877
D=M // 30878
@Int32.cmp$IF_TRUE2 // 30879
D;JNE // 30880

////GotoInstruction{label='Int32.cmp$IF_FALSE2}
// goto Int32.cmp$IF_FALSE2
@Int32.cmp$IF_FALSE2 // 30881
0;JMP // 30882

////LabelInstruction{label='Int32.cmp$IF_TRUE2}
// label Int32.cmp$IF_TRUE2
(Int32.cmp$IF_TRUE2)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 30883
A=M+1 // 30884
M=-1 // 30885

////GotoInstruction{label='Int32.cmp$IF_END2}
// goto Int32.cmp$IF_END2
@Int32.cmp$IF_END2 // 30886
0;JMP // 30887

////LabelInstruction{label='Int32.cmp$IF_FALSE2}
// label Int32.cmp$IF_FALSE2
(Int32.cmp$IF_FALSE2)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 30888
A=M+1 // 30889
M=1 // 30890

////LabelInstruction{label='Int32.cmp$IF_END2}
// label Int32.cmp$IF_END2
(Int32.cmp$IF_END2)

////LabelInstruction{label='Int32.cmp$IF_END1}
// label Int32.cmp$IF_END1
(Int32.cmp$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Int32.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 30891
A=M // 30892
D=M // 30893
@SP // 30894
AM=M+1 // 30895
A=A-1 // 30896
M=D // 30897
// call Int32.dispose
@6 // 30898
D=A // 30899
@14 // 30900
M=D // 30901
@Int32.dispose // 30902
D=A // 30903
@13 // 30904
M=D // 30905
@Int32.cmp.ret.4 // 30906
D=A // 30907
@CALL // 30908
0;JMP // 30909
(Int32.cmp.ret.4)
@SP // 30910
M=M-1 // 30911

////PushInstruction("local 1")
@LCL // 30912
A=M+1 // 30913
D=M // 30914
@SP // 30915
AM=M+1 // 30916
A=A-1 // 30917
M=D // 30918
@RETURN // 30919
0;JMP // 30920

////FunctionInstruction{functionName='Ray.getOrigin', numLocals=0, funcMapping={Ray.getDirection=0}}
// function Ray.getOrigin with 0
(Ray.getOrigin)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30921
A=M // 30922
D=M // 30923
@3 // 30924
M=D // 30925

////PushInstruction("this 0")
@THIS // 30926
A=M // 30927
D=M // 30928
@SP // 30929
AM=M+1 // 30930
A=A-1 // 30931
M=D // 30932
@RETURN // 30933
0;JMP // 30934

////FunctionInstruction{functionName='Ray.dispose', numLocals=0, funcMapping={Ray.getOrigin=0, Ray.getDirection=0}}
// function Ray.dispose with 0
(Ray.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 30935
A=M // 30936
D=M // 30937
@3 // 30938
M=D // 30939

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Ray.0 // 30940
M=M-1 // 30941

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30942
A=M // 30943
D=M // 30944
@SP // 30945
AM=M+1 // 30946
A=A-1 // 30947
M=D // 30948
// call Vec3.dispose
@6 // 30949
D=A // 30950
@14 // 30951
M=D // 30952
@Vec3.dispose // 30953
D=A // 30954
@13 // 30955
M=D // 30956
@Ray.dispose.ret.0 // 30957
D=A // 30958
@CALL // 30959
0;JMP // 30960
(Ray.dispose.ret.0)
@SP // 30961
M=M-1 // 30962

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 30963
A=M+1 // 30964
D=M // 30965
@SP // 30966
AM=M+1 // 30967
A=A-1 // 30968
M=D // 30969
// call Vec3.dispose
@6 // 30970
D=A // 30971
@14 // 30972
M=D // 30973
@Vec3.dispose // 30974
D=A // 30975
@13 // 30976
M=D // 30977
@Ray.dispose.ret.1 // 30978
D=A // 30979
@CALL // 30980
0;JMP // 30981
(Ray.dispose.ret.1)
@SP // 30982
M=M-1 // 30983

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 30984
D=M // 30985
@SP // 30986
AM=M+1 // 30987
A=A-1 // 30988
M=D // 30989
// call Memory.deAlloc
@6 // 30990
D=A // 30991
@14 // 30992
M=D // 30993
@Memory.deAlloc // 30994
D=A // 30995
@13 // 30996
M=D // 30997
@Ray.dispose.ret.2 // 30998
D=A // 30999
@CALL // 31000
0;JMP // 31001
(Ray.dispose.ret.2)
@SP // 31002
M=M-1 // 31003

////PushInstruction("constant 0")
@SP // 31004
AM=M+1 // 31005
A=A-1 // 31006
M=0 // 31007
@RETURN // 31008
0;JMP // 31009

////FunctionInstruction{functionName='Number.is_zero', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.is_zero with 0
(Number.is_zero)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 31010
A=M // 31011
D=M // 31012
@3 // 31013
M=D // 31014

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_zero}}
@THIS // 31015
A=M // 31016
D=M // 31017
@SP // 31018
AM=M+1 // 31019
A=A-1 // 31020
M=D // 31021
// call Int32.is_zero
@6 // 31022
D=A // 31023
@14 // 31024
M=D // 31025
@Int32.is_zero // 31026
D=A // 31027
@13 // 31028
M=D // 31029
@Number.is_zero.ret.0 // 31030
D=A // 31031
@CALL // 31032
0;JMP // 31033
(Number.is_zero.ret.0)
@RETURN // 31034
0;JMP // 31035

////FunctionInstruction{functionName='Ray.new', numLocals=0, funcMapping={Ray.getOrigin=0, Ray.dispose=3, Ray.getDirection=0}}
// function Ray.new with 0
(Ray.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 31036
D=A // 31037
@SP // 31038
AM=M+1 // 31039
A=A-1 // 31040
M=D // 31041
// call Memory.alloc
@6 // 31042
D=A // 31043
@14 // 31044
M=D // 31045
@Memory.alloc // 31046
D=A // 31047
@13 // 31048
M=D // 31049
@Ray.new.ret.0 // 31050
D=A // 31051
@CALL // 31052
0;JMP // 31053
(Ray.new.ret.0)
@SP // 31054
AM=M-1 // 31055
D=M // 31056
@3 // 31057
M=D // 31058

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Ray.0 // 31059
M=M+1 // 31060

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 31061
A=M // 31062
D=M // 31063
@THIS // 31064
A=M // 31065
M=D // 31066

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 31067
A=M+1 // 31068
D=M // 31069
@THIS // 31070
A=M+1 // 31071
M=D // 31072

////PushInstruction("pointer 0")
@3 // 31073
D=M // 31074
@SP // 31075
AM=M+1 // 31076
A=A-1 // 31077
M=D // 31078
@RETURN // 31079
0;JMP // 31080

////FunctionInstruction{functionName='Number.new_from_int_frac', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.to_int32=2}}
// function Number.new_from_int_frac with 0
(Number.new_from_int_frac)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 31081
AM=M+1 // 31082
A=A-1 // 31083
M=1 // 31084
// call Memory.alloc
@6 // 31085
D=A // 31086
@14 // 31087
M=D // 31088
@Memory.alloc // 31089
D=A // 31090
@13 // 31091
M=D // 31092
@Number.new_from_int_frac.ret.0 // 31093
D=A // 31094
@CALL // 31095
0;JMP // 31096
(Number.new_from_int_frac.ret.0)
@SP // 31097
AM=M-1 // 31098
D=M // 31099
@3 // 31100
M=D // 31101

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 5}
//}

@Number.5 // 31102
M=M+1 // 31103

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 31104
A=M // 31105
D=M // 31106
@SP // 31107
AM=M+1 // 31108
A=A-1 // 31109
M=D // 31110
// call Int32.new
@6 // 31111
D=A // 31112
@14 // 31113
M=D // 31114
@Int32.new // 31115
D=A // 31116
@13 // 31117
M=D // 31118
@Number.new_from_int_frac.ret.1 // 31119
D=A // 31120
@CALL // 31121
0;JMP // 31122
(Number.new_from_int_frac.ret.1)
@SP // 31123
AM=M-1 // 31124
D=M // 31125
@THIS // 31126
A=M // 31127
M=D // 31128

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("static 4")], call=CallInstruction{Int32.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 31129
A=M // 31130
D=M // 31131
@SP // 31132
AM=M+1 // 31133
A=A-1 // 31134
M=D // 31135
@Number.4 // 31136
D=M // 31137
@SP // 31138
AM=M+1 // 31139
A=A-1 // 31140
M=D // 31141
// call Int32.do_mul
@7 // 31142
D=A // 31143
@14 // 31144
M=D // 31145
@Int32.do_mul // 31146
D=A // 31147
@13 // 31148
M=D // 31149
@Number.new_from_int_frac.ret.2 // 31150
D=A // 31151
@CALL // 31152
0;JMP // 31153
(Number.new_from_int_frac.ret.2)
@SP // 31154
M=M-1 // 31155

////PushInstruction("pointer 0")
@3 // 31156
D=M // 31157
@SP // 31158
AM=M+1 // 31159
A=A-1 // 31160
M=D // 31161
@RETURN // 31162
0;JMP // 31163

////FunctionInstruction{functionName='Scene.getWidth', numLocals=0, funcMapping={Scene.getHeight=0, Scene.getNumLights=0, Scene.getLights=0, Scene.trace=7, Scene.new=5, Scene.create_prime_ray=20, Scene.dispose=8}}
// function Scene.getWidth with 0
(Scene.getWidth)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 31164
A=M // 31165
D=M // 31166
@3 // 31167
M=D // 31168

////PushInstruction("this 0")
@THIS // 31169
A=M // 31170
D=M // 31171
@SP // 31172
AM=M+1 // 31173
A=A-1 // 31174
M=D // 31175
@RETURN // 31176
0;JMP // 31177

////FunctionInstruction{functionName='Sphere.intersect', numLocals=8, funcMapping={Sphere.new=1, Sphere.color=1, Sphere.dispose=4}}
// function Sphere.intersect with 8
(Sphere.intersect)
@8 // 31178
D=A // 31179
@SP // 31180
AM=D+M // 31181
A=A-1 // 31182
M=0 // 31183
A=A-1 // 31184
M=0 // 31185
A=A-1 // 31186
M=0 // 31187
A=A-1 // 31188
M=0 // 31189
A=A-1 // 31190
M=0 // 31191
A=A-1 // 31192
M=0 // 31193
A=A-1 // 31194
M=0 // 31195
A=A-1 // 31196
M=0 // 31197

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 31198
A=M // 31199
D=M // 31200
@3 // 31201
M=D // 31202

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@THIS // 31203
A=M // 31204
D=M // 31205
@SP // 31206
AM=M+1 // 31207
A=A-1 // 31208
M=D // 31209
// call Vec3.clone
@6 // 31210
D=A // 31211
@14 // 31212
M=D // 31213
@Vec3.clone // 31214
D=A // 31215
@13 // 31216
M=D // 31217
@Sphere.intersect.ret.0 // 31218
D=A // 31219
@CALL // 31220
0;JMP // 31221
(Sphere.intersect.ret.0)
@SP // 31222
AM=M-1 // 31223
D=M // 31224
@LCL // 31225
A=M // 31226
M=D // 31227

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getOrigin}}], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31228
A=M // 31229
D=M // 31230
@SP // 31231
AM=M+1 // 31232
A=A-1 // 31233
M=D // 31234
@ARG // 31235
A=M+1 // 31236
D=M // 31237
@SP // 31238
AM=M+1 // 31239
A=A-1 // 31240
M=D // 31241
// call Ray.getOrigin
@6 // 31242
D=A // 31243
@14 // 31244
M=D // 31245
@Ray.getOrigin // 31246
D=A // 31247
@13 // 31248
M=D // 31249
@Sphere.intersect.ret.1 // 31250
D=A // 31251
@CALL // 31252
0;JMP // 31253
(Sphere.intersect.ret.1)
// call Vec3.do_sub
@7 // 31254
D=A // 31255
@14 // 31256
M=D // 31257
@Vec3.do_sub // 31258
D=A // 31259
@13 // 31260
M=D // 31261
@Sphere.intersect.ret.2 // 31262
D=A // 31263
@CALL // 31264
0;JMP // 31265
(Sphere.intersect.ret.2)
@SP // 31266
M=M-1 // 31267

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Ray.getDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 31268
A=M // 31269
D=M // 31270
@SP // 31271
AM=M+1 // 31272
A=A-1 // 31273
M=D // 31274
@ARG // 31275
A=M+1 // 31276
D=M // 31277
@SP // 31278
AM=M+1 // 31279
A=A-1 // 31280
M=D // 31281
// call Ray.getDirection
@6 // 31282
D=A // 31283
@14 // 31284
M=D // 31285
@Ray.getDirection // 31286
D=A // 31287
@13 // 31288
M=D // 31289
@Sphere.intersect.ret.3 // 31290
D=A // 31291
@CALL // 31292
0;JMP // 31293
(Sphere.intersect.ret.3)
// call Vec3.dot
@7 // 31294
D=A // 31295
@14 // 31296
M=D // 31297
@Vec3.dot // 31298
D=A // 31299
@13 // 31300
M=D // 31301
@Sphere.intersect.ret.4 // 31302
D=A // 31303
@CALL // 31304
0;JMP // 31305
(Sphere.intersect.ret.4)
@SP // 31306
AM=M-1 // 31307
D=M // 31308
@LCL // 31309
A=M+1 // 31310
M=D // 31311

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 31312
A=M+1 // 31313
D=M // 31314
@SP // 31315
AM=M+1 // 31316
A=A-1 // 31317
M=D // 31318
// call Number.clone
@6 // 31319
D=A // 31320
@14 // 31321
M=D // 31322
@Number.clone // 31323
D=A // 31324
@13 // 31325
M=D // 31326
@Sphere.intersect.ret.5 // 31327
D=A // 31328
@CALL // 31329
0;JMP // 31330
(Sphere.intersect.ret.5)
@SP // 31331
AM=M-1 // 31332
D=M // 31333
@LCL // 31334
A=M+1 // 31335
A=A+1 // 31336
M=D // 31337

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("local 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31338
A=M+1 // 31339
A=A+1 // 31340
D=M // 31341
@SP // 31342
AM=M+1 // 31343
A=A-1 // 31344
M=D // 31345
@LCL // 31346
A=M+1 // 31347
D=M // 31348
@SP // 31349
AM=M+1 // 31350
A=A-1 // 31351
M=D // 31352
// call Number.do_mul
@7 // 31353
D=A // 31354
@14 // 31355
M=D // 31356
@Number.do_mul // 31357
D=A // 31358
@13 // 31359
M=D // 31360
@Sphere.intersect.ret.6 // 31361
D=A // 31362
@CALL // 31363
0;JMP // 31364
(Sphere.intersect.ret.6)
@SP // 31365
M=M-1 // 31366

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@THIS // 31367
A=M+1 // 31368
D=M // 31369
@SP // 31370
AM=M+1 // 31371
A=A-1 // 31372
M=D // 31373
// call Number.clone
@6 // 31374
D=A // 31375
@14 // 31376
M=D // 31377
@Number.clone // 31378
D=A // 31379
@13 // 31380
M=D // 31381
@Sphere.intersect.ret.7 // 31382
D=A // 31383
@CALL // 31384
0;JMP // 31385
(Sphere.intersect.ret.7)
@SP // 31386
AM=M-1 // 31387
D=M // 31388
@LCL // 31389
A=M+1 // 31390
A=A+1 // 31391
A=A+1 // 31392
M=D // 31393

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("this 1")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31394
A=M+1 // 31395
A=A+1 // 31396
A=A+1 // 31397
D=M // 31398
@SP // 31399
AM=M+1 // 31400
A=A-1 // 31401
M=D // 31402
@THIS // 31403
A=M+1 // 31404
D=M // 31405
@SP // 31406
AM=M+1 // 31407
A=A-1 // 31408
M=D // 31409
// call Number.do_mul
@7 // 31410
D=A // 31411
@14 // 31412
M=D // 31413
@Number.do_mul // 31414
D=A // 31415
@13 // 31416
M=D // 31417
@Sphere.intersect.ret.8 // 31418
D=A // 31419
@CALL // 31420
0;JMP // 31421
(Sphere.intersect.ret.8)
@SP // 31422
M=M-1 // 31423

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dist_sq}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 31424
A=M // 31425
D=M // 31426
@SP // 31427
AM=M+1 // 31428
A=A-1 // 31429
M=D // 31430
// call Vec3.dist_sq
@6 // 31431
D=A // 31432
@14 // 31433
M=D // 31434
@Vec3.dist_sq // 31435
D=A // 31436
@13 // 31437
M=D // 31438
@Sphere.intersect.ret.9 // 31439
D=A // 31440
@CALL // 31441
0;JMP // 31442
(Sphere.intersect.ret.9)
@LCL // 31443
D=M // 31444
@4 // 31445
A=D+A // 31446
D=A // 31447
@R13 // 31448
M=D // 31449
@SP // 31450
AM=M-1 // 31451
D=M // 31452
@R13 // 31453
A=M // 31454
M=D // 31455

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 2")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31456
D=M // 31457
@4 // 31458
A=D+A // 31459
D=M // 31460
@SP // 31461
AM=M+1 // 31462
A=A-1 // 31463
M=D // 31464
@LCL // 31465
A=M+1 // 31466
A=A+1 // 31467
D=M // 31468
@SP // 31469
AM=M+1 // 31470
A=A-1 // 31471
M=D // 31472
// call Number.do_sub
@7 // 31473
D=A // 31474
@14 // 31475
M=D // 31476
@Number.do_sub // 31477
D=A // 31478
@13 // 31479
M=D // 31480
@Sphere.intersect.ret.10 // 31481
D=A // 31482
@CALL // 31483
0;JMP // 31484
(Sphere.intersect.ret.10)
@SP // 31485
M=M-1 // 31486

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("local 3")], call=CallInstruction{Number.cmp}},
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE1}}
@Sphere.intersect.GT.120 // 31487
D=A // 31488
@SP // 31489
AM=M+1 // 31490
A=A-1 // 31491
M=D // 31492
@LCL // 31493
D=M // 31494
@4 // 31495
A=D+A // 31496
D=M // 31497
@SP // 31498
AM=M+1 // 31499
A=A-1 // 31500
M=D // 31501
@LCL // 31502
A=M+1 // 31503
A=A+1 // 31504
A=A+1 // 31505
D=M // 31506
@SP // 31507
AM=M+1 // 31508
A=A-1 // 31509
M=D // 31510
// call Number.cmp
@7 // 31511
D=A // 31512
@14 // 31513
M=D // 31514
@Number.cmp // 31515
D=A // 31516
@13 // 31517
M=D // 31518
@Sphere.intersect.ret.11 // 31519
D=A // 31520
@CALL // 31521
0;JMP // 31522
(Sphere.intersect.ret.11)
@SP // 31523
AM=M-1 // 31524
D=M // 31525
@DO_GT // 31526
0;JMP // 31527
(Sphere.intersect.GT.120)
@Sphere.intersect$IF_TRUE1 // 31528
D;JNE // 31529

////GotoInstruction{label='Sphere.intersect$IF_END1}
// goto Sphere.intersect$IF_END1
@Sphere.intersect$IF_END1 // 31530
0;JMP // 31531

////LabelInstruction{label='Sphere.intersect$IF_TRUE1}
// label Sphere.intersect$IF_TRUE1
(Sphere.intersect$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31532
A=M // 31533
D=M // 31534
@SP // 31535
AM=M+1 // 31536
A=A-1 // 31537
M=D // 31538
// call Vec3.dispose
@6 // 31539
D=A // 31540
@14 // 31541
M=D // 31542
@Vec3.dispose // 31543
D=A // 31544
@13 // 31545
M=D // 31546
@Sphere.intersect.ret.12 // 31547
D=A // 31548
@CALL // 31549
0;JMP // 31550
(Sphere.intersect.ret.12)
@SP // 31551
M=M-1 // 31552

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31553
A=M+1 // 31554
D=M // 31555
@SP // 31556
AM=M+1 // 31557
A=A-1 // 31558
M=D // 31559
// call Number.dispose
@6 // 31560
D=A // 31561
@14 // 31562
M=D // 31563
@Number.dispose // 31564
D=A // 31565
@13 // 31566
M=D // 31567
@Sphere.intersect.ret.13 // 31568
D=A // 31569
@CALL // 31570
0;JMP // 31571
(Sphere.intersect.ret.13)
@SP // 31572
M=M-1 // 31573

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31574
A=M+1 // 31575
A=A+1 // 31576
D=M // 31577
@SP // 31578
AM=M+1 // 31579
A=A-1 // 31580
M=D // 31581
// call Number.dispose
@6 // 31582
D=A // 31583
@14 // 31584
M=D // 31585
@Number.dispose // 31586
D=A // 31587
@13 // 31588
M=D // 31589
@Sphere.intersect.ret.14 // 31590
D=A // 31591
@CALL // 31592
0;JMP // 31593
(Sphere.intersect.ret.14)
@SP // 31594
M=M-1 // 31595

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31596
A=M+1 // 31597
A=A+1 // 31598
A=A+1 // 31599
D=M // 31600
@SP // 31601
AM=M+1 // 31602
A=A-1 // 31603
M=D // 31604
// call Number.dispose
@6 // 31605
D=A // 31606
@14 // 31607
M=D // 31608
@Number.dispose // 31609
D=A // 31610
@13 // 31611
M=D // 31612
@Sphere.intersect.ret.15 // 31613
D=A // 31614
@CALL // 31615
0;JMP // 31616
(Sphere.intersect.ret.15)
@SP // 31617
M=M-1 // 31618

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31619
D=M // 31620
@4 // 31621
A=D+A // 31622
D=M // 31623
@SP // 31624
AM=M+1 // 31625
A=A-1 // 31626
M=D // 31627
// call Number.dispose
@6 // 31628
D=A // 31629
@14 // 31630
M=D // 31631
@Number.dispose // 31632
D=A // 31633
@13 // 31634
M=D // 31635
@Sphere.intersect.ret.16 // 31636
D=A // 31637
@CALL // 31638
0;JMP // 31639
(Sphere.intersect.ret.16)
@SP // 31640
M=M-1 // 31641

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 31642
AM=M+1 // 31643
A=A-1 // 31644
M=-1 // 31645
// call Number.new
@6 // 31646
D=A // 31647
@14 // 31648
M=D // 31649
@Number.new // 31650
D=A // 31651
@13 // 31652
M=D // 31653
@Sphere.intersect.ret.17 // 31654
D=A // 31655
@CALL // 31656
0;JMP // 31657
(Sphere.intersect.ret.17)
@RETURN // 31658
0;JMP // 31659

////LabelInstruction{label='Sphere.intersect$IF_END1}
// label Sphere.intersect$IF_END1
(Sphere.intersect$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 31660
A=M+1 // 31661
A=A+1 // 31662
A=A+1 // 31663
D=M // 31664
@SP // 31665
AM=M+1 // 31666
A=A-1 // 31667
M=D // 31668
// call Number.clone
@6 // 31669
D=A // 31670
@14 // 31671
M=D // 31672
@Number.clone // 31673
D=A // 31674
@13 // 31675
M=D // 31676
@Sphere.intersect.ret.18 // 31677
D=A // 31678
@CALL // 31679
0;JMP // 31680
(Sphere.intersect.ret.18)
@LCL // 31681
D=M // 31682
@5 // 31683
A=D+A // 31684
D=A // 31685
@R13 // 31686
M=D // 31687
@SP // 31688
AM=M-1 // 31689
D=M // 31690
@R13 // 31691
A=M // 31692
M=D // 31693

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), PushInstruction("local 4")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31694
D=M // 31695
@5 // 31696
A=D+A // 31697
D=M // 31698
@SP // 31699
AM=M+1 // 31700
A=A-1 // 31701
M=D // 31702
@LCL // 31703
D=M // 31704
@4 // 31705
A=D+A // 31706
D=M // 31707
@SP // 31708
AM=M+1 // 31709
A=A-1 // 31710
M=D // 31711
// call Number.do_sub
@7 // 31712
D=A // 31713
@14 // 31714
M=D // 31715
@Number.do_sub // 31716
D=A // 31717
@13 // 31718
M=D // 31719
@Sphere.intersect.ret.19 // 31720
D=A // 31721
@CALL // 31722
0;JMP // 31723
(Sphere.intersect.ret.19)
@SP // 31724
M=M-1 // 31725

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.do_sqrt}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31726
D=M // 31727
@5 // 31728
A=D+A // 31729
D=M // 31730
@SP // 31731
AM=M+1 // 31732
A=A-1 // 31733
M=D // 31734
// call Number.do_sqrt
@6 // 31735
D=A // 31736
@14 // 31737
M=D // 31738
@Number.do_sqrt // 31739
D=A // 31740
@13 // 31741
M=D // 31742
@Sphere.intersect.ret.20 // 31743
D=A // 31744
@CALL // 31745
0;JMP // 31746
(Sphere.intersect.ret.20)
@SP // 31747
M=M-1 // 31748

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 31749
A=M+1 // 31750
D=M // 31751
@SP // 31752
AM=M+1 // 31753
A=A-1 // 31754
M=D // 31755
// call Number.clone
@6 // 31756
D=A // 31757
@14 // 31758
M=D // 31759
@Number.clone // 31760
D=A // 31761
@13 // 31762
M=D // 31763
@Sphere.intersect.ret.21 // 31764
D=A // 31765
@CALL // 31766
0;JMP // 31767
(Sphere.intersect.ret.21)
@LCL // 31768
D=M // 31769
@6 // 31770
A=D+A // 31771
D=A // 31772
@R13 // 31773
M=D // 31774
@SP // 31775
AM=M-1 // 31776
D=M // 31777
@R13 // 31778
A=M // 31779
M=D // 31780

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 5")], call=CallInstruction{Number.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31781
D=M // 31782
@6 // 31783
A=D+A // 31784
D=M // 31785
@SP // 31786
AM=M+1 // 31787
A=A-1 // 31788
M=D // 31789
@LCL // 31790
D=M // 31791
@5 // 31792
A=D+A // 31793
D=M // 31794
@SP // 31795
AM=M+1 // 31796
A=A-1 // 31797
M=D // 31798
// call Number.do_sub
@7 // 31799
D=A // 31800
@14 // 31801
M=D // 31802
@Number.do_sub // 31803
D=A // 31804
@13 // 31805
M=D // 31806
@Sphere.intersect.ret.22 // 31807
D=A // 31808
@CALL // 31809
0;JMP // 31810
(Sphere.intersect.ret.22)
@SP // 31811
M=M-1 // 31812

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 7}
//}

@LCL // 31813
A=M+1 // 31814
D=M // 31815
@SP // 31816
AM=M+1 // 31817
A=A-1 // 31818
M=D // 31819
// call Number.clone
@6 // 31820
D=A // 31821
@14 // 31822
M=D // 31823
@Number.clone // 31824
D=A // 31825
@13 // 31826
M=D // 31827
@Sphere.intersect.ret.23 // 31828
D=A // 31829
@CALL // 31830
0;JMP // 31831
(Sphere.intersect.ret.23)
@LCL // 31832
D=M // 31833
@7 // 31834
A=D+A // 31835
D=A // 31836
@R13 // 31837
M=D // 31838
@SP // 31839
AM=M-1 // 31840
D=M // 31841
@R13 // 31842
A=M // 31843
M=D // 31844

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7"), PushInstruction("local 5")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31845
D=M // 31846
@7 // 31847
A=D+A // 31848
D=M // 31849
@SP // 31850
AM=M+1 // 31851
A=A-1 // 31852
M=D // 31853
@LCL // 31854
D=M // 31855
@5 // 31856
A=D+A // 31857
D=M // 31858
@SP // 31859
AM=M+1 // 31860
A=A-1 // 31861
M=D // 31862
// call Number.do_add
@7 // 31863
D=A // 31864
@14 // 31865
M=D // 31866
@Number.do_add // 31867
D=A // 31868
@13 // 31869
M=D // 31870
@Sphere.intersect.ret.24 // 31871
D=A // 31872
@CALL // 31873
0;JMP // 31874
(Sphere.intersect.ret.24)
@SP // 31875
M=M-1 // 31876

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31877
A=M // 31878
D=M // 31879
@SP // 31880
AM=M+1 // 31881
A=A-1 // 31882
M=D // 31883
// call Vec3.dispose
@6 // 31884
D=A // 31885
@14 // 31886
M=D // 31887
@Vec3.dispose // 31888
D=A // 31889
@13 // 31890
M=D // 31891
@Sphere.intersect.ret.25 // 31892
D=A // 31893
@CALL // 31894
0;JMP // 31895
(Sphere.intersect.ret.25)
@SP // 31896
M=M-1 // 31897

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31898
A=M+1 // 31899
D=M // 31900
@SP // 31901
AM=M+1 // 31902
A=A-1 // 31903
M=D // 31904
// call Number.dispose
@6 // 31905
D=A // 31906
@14 // 31907
M=D // 31908
@Number.dispose // 31909
D=A // 31910
@13 // 31911
M=D // 31912
@Sphere.intersect.ret.26 // 31913
D=A // 31914
@CALL // 31915
0;JMP // 31916
(Sphere.intersect.ret.26)
@SP // 31917
M=M-1 // 31918

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31919
A=M+1 // 31920
A=A+1 // 31921
D=M // 31922
@SP // 31923
AM=M+1 // 31924
A=A-1 // 31925
M=D // 31926
// call Number.dispose
@6 // 31927
D=A // 31928
@14 // 31929
M=D // 31930
@Number.dispose // 31931
D=A // 31932
@13 // 31933
M=D // 31934
@Sphere.intersect.ret.27 // 31935
D=A // 31936
@CALL // 31937
0;JMP // 31938
(Sphere.intersect.ret.27)
@SP // 31939
M=M-1 // 31940

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31941
A=M+1 // 31942
A=A+1 // 31943
A=A+1 // 31944
D=M // 31945
@SP // 31946
AM=M+1 // 31947
A=A-1 // 31948
M=D // 31949
// call Number.dispose
@6 // 31950
D=A // 31951
@14 // 31952
M=D // 31953
@Number.dispose // 31954
D=A // 31955
@13 // 31956
M=D // 31957
@Sphere.intersect.ret.28 // 31958
D=A // 31959
@CALL // 31960
0;JMP // 31961
(Sphere.intersect.ret.28)
@SP // 31962
M=M-1 // 31963

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31964
D=M // 31965
@4 // 31966
A=D+A // 31967
D=M // 31968
@SP // 31969
AM=M+1 // 31970
A=A-1 // 31971
M=D // 31972
// call Number.dispose
@6 // 31973
D=A // 31974
@14 // 31975
M=D // 31976
@Number.dispose // 31977
D=A // 31978
@13 // 31979
M=D // 31980
@Sphere.intersect.ret.29 // 31981
D=A // 31982
@CALL // 31983
0;JMP // 31984
(Sphere.intersect.ret.29)
@SP // 31985
M=M-1 // 31986

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 31987
D=M // 31988
@5 // 31989
A=D+A // 31990
D=M // 31991
@SP // 31992
AM=M+1 // 31993
A=A-1 // 31994
M=D // 31995
// call Number.dispose
@6 // 31996
D=A // 31997
@14 // 31998
M=D // 31999
@Number.dispose // 32000
D=A // 32001
@13 // 32002
M=D // 32003
@Sphere.intersect.ret.30 // 32004
D=A // 32005
@CALL // 32006
0;JMP // 32007
(Sphere.intersect.ret.30)
@SP // 32008
M=M-1 // 32009

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.is_negative}},
//    right:
//CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.is_negative}},
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE2}}
@LCL // 32010
D=M // 32011
@6 // 32012
A=D+A // 32013
D=M // 32014
@SP // 32015
AM=M+1 // 32016
A=A-1 // 32017
M=D // 32018
// call Number.is_negative
@6 // 32019
D=A // 32020
@14 // 32021
M=D // 32022
@Number.is_negative // 32023
D=A // 32024
@13 // 32025
M=D // 32026
@Sphere.intersect.ret.31 // 32027
D=A // 32028
@CALL // 32029
0;JMP // 32030
(Sphere.intersect.ret.31)
@LCL // 32031
D=M // 32032
@7 // 32033
A=D+A // 32034
D=M // 32035
@SP // 32036
AM=M+1 // 32037
A=A-1 // 32038
M=D // 32039
// call Number.is_negative
@6 // 32040
D=A // 32041
@14 // 32042
M=D // 32043
@Number.is_negative // 32044
D=A // 32045
@13 // 32046
M=D // 32047
@Sphere.intersect.ret.32 // 32048
D=A // 32049
@CALL // 32050
0;JMP // 32051
(Sphere.intersect.ret.32)
@SP // 32052
AM=M-1 // 32053
D=M // 32054
@SP // 32055
AM=M-1 // 32056
D=D&M // 32057
@Sphere.intersect$IF_TRUE2 // 32058
D;JNE // 32059

////GotoInstruction{label='Sphere.intersect$IF_END2}
// goto Sphere.intersect$IF_END2
@Sphere.intersect$IF_END2 // 32060
0;JMP // 32061

////LabelInstruction{label='Sphere.intersect$IF_TRUE2}
// label Sphere.intersect$IF_TRUE2
(Sphere.intersect$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32062
D=M // 32063
@6 // 32064
A=D+A // 32065
D=M // 32066
@SP // 32067
AM=M+1 // 32068
A=A-1 // 32069
M=D // 32070
// call Number.dispose
@6 // 32071
D=A // 32072
@14 // 32073
M=D // 32074
@Number.dispose // 32075
D=A // 32076
@13 // 32077
M=D // 32078
@Sphere.intersect.ret.33 // 32079
D=A // 32080
@CALL // 32081
0;JMP // 32082
(Sphere.intersect.ret.33)
@SP // 32083
M=M-1 // 32084

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32085
D=M // 32086
@7 // 32087
A=D+A // 32088
D=M // 32089
@SP // 32090
AM=M+1 // 32091
A=A-1 // 32092
M=D // 32093
// call Number.dispose
@6 // 32094
D=A // 32095
@14 // 32096
M=D // 32097
@Number.dispose // 32098
D=A // 32099
@13 // 32100
M=D // 32101
@Sphere.intersect.ret.34 // 32102
D=A // 32103
@CALL // 32104
0;JMP // 32105
(Sphere.intersect.ret.34)
@SP // 32106
M=M-1 // 32107

////CallGroup{pushes=[UnaryPushGroup(    PushInstruction("constant 1"),
//NEG)], call=CallInstruction{Number.new}}
@SP // 32108
AM=M+1 // 32109
A=A-1 // 32110
M=-1 // 32111
// call Number.new
@6 // 32112
D=A // 32113
@14 // 32114
M=D // 32115
@Number.new // 32116
D=A // 32117
@13 // 32118
M=D // 32119
@Sphere.intersect.ret.35 // 32120
D=A // 32121
@CALL // 32122
0;JMP // 32123
(Sphere.intersect.ret.35)
@RETURN // 32124
0;JMP // 32125

////LabelInstruction{label='Sphere.intersect$IF_END2}
// label Sphere.intersect$IF_END2
(Sphere.intersect$IF_END2)

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 6"), PushInstruction("local 7")], call=CallInstruction{Number.is_less_than}}, ifGoto=IfGotoInstruction{label='Sphere.intersect$IF_TRUE3}}
@LCL // 32126
D=M // 32127
@6 // 32128
A=D+A // 32129
D=M // 32130
@SP // 32131
AM=M+1 // 32132
A=A-1 // 32133
M=D // 32134
@LCL // 32135
D=M // 32136
@7 // 32137
A=D+A // 32138
D=M // 32139
@SP // 32140
AM=M+1 // 32141
A=A-1 // 32142
M=D // 32143
// call Number.is_less_than
@7 // 32144
D=A // 32145
@14 // 32146
M=D // 32147
@Number.is_less_than // 32148
D=A // 32149
@13 // 32150
M=D // 32151
@Sphere.intersect.ret.36 // 32152
D=A // 32153
@CALL // 32154
0;JMP // 32155
(Sphere.intersect.ret.36)
@SP // 32156
AM=M-1 // 32157
D=M // 32158
@Sphere.intersect$IF_TRUE3 // 32159
D;JNE // 32160

////GotoInstruction{label='Sphere.intersect$IF_FALSE3}
// goto Sphere.intersect$IF_FALSE3
@Sphere.intersect$IF_FALSE3 // 32161
0;JMP // 32162

////LabelInstruction{label='Sphere.intersect$IF_TRUE3}
// label Sphere.intersect$IF_TRUE3
(Sphere.intersect$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32163
D=M // 32164
@7 // 32165
A=D+A // 32166
D=M // 32167
@SP // 32168
AM=M+1 // 32169
A=A-1 // 32170
M=D // 32171
// call Number.dispose
@6 // 32172
D=A // 32173
@14 // 32174
M=D // 32175
@Number.dispose // 32176
D=A // 32177
@13 // 32178
M=D // 32179
@Sphere.intersect.ret.37 // 32180
D=A // 32181
@CALL // 32182
0;JMP // 32183
(Sphere.intersect.ret.37)
@SP // 32184
M=M-1 // 32185

////PushInstruction("local 6")
@LCL // 32186
D=M // 32187
@6 // 32188
A=D+A // 32189
D=M // 32190
@SP // 32191
AM=M+1 // 32192
A=A-1 // 32193
M=D // 32194
@RETURN // 32195
0;JMP // 32196

////GotoInstruction{label='Sphere.intersect$IF_END3}
// goto Sphere.intersect$IF_END3
@Sphere.intersect$IF_END3 // 32197
0;JMP // 32198

////LabelInstruction{label='Sphere.intersect$IF_FALSE3}
// label Sphere.intersect$IF_FALSE3
(Sphere.intersect$IF_FALSE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32199
D=M // 32200
@6 // 32201
A=D+A // 32202
D=M // 32203
@SP // 32204
AM=M+1 // 32205
A=A-1 // 32206
M=D // 32207
// call Number.dispose
@6 // 32208
D=A // 32209
@14 // 32210
M=D // 32211
@Number.dispose // 32212
D=A // 32213
@13 // 32214
M=D // 32215
@Sphere.intersect.ret.38 // 32216
D=A // 32217
@CALL // 32218
0;JMP // 32219
(Sphere.intersect.ret.38)
@SP // 32220
M=M-1 // 32221

////PushInstruction("local 7")
@LCL // 32222
D=M // 32223
@7 // 32224
A=D+A // 32225
D=M // 32226
@SP // 32227
AM=M+1 // 32228
A=A-1 // 32229
M=D // 32230
@RETURN // 32231
0;JMP // 32232

////LabelInstruction{label='Sphere.intersect$IF_END3}
// label Sphere.intersect$IF_END3
(Sphere.intersect$IF_END3)

////FunctionInstruction{functionName='Main.getThreeHalves', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getOneFiftieth=4, Main.getFourFifths=4}}
// function Main.getThreeHalves with 2
(Main.getThreeHalves)
@SP // 32233
M=M+1 // 32234
AM=M+1 // 32235
A=A-1 // 32236
M=0 // 32237
A=A-1 // 32238
M=0 // 32239

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 3")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@3 // 32240
D=A // 32241
@SP // 32242
AM=M+1 // 32243
A=A-1 // 32244
M=D // 32245
// call Number.new
@6 // 32246
D=A // 32247
@14 // 32248
M=D // 32249
@Number.new // 32250
D=A // 32251
@13 // 32252
M=D // 32253
@Main.getThreeHalves.ret.0 // 32254
D=A // 32255
@CALL // 32256
0;JMP // 32257
(Main.getThreeHalves.ret.0)
@SP // 32258
AM=M-1 // 32259
D=M // 32260
@LCL // 32261
A=M // 32262
M=D // 32263

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@2 // 32264
D=A // 32265
@SP // 32266
AM=M+1 // 32267
A=A-1 // 32268
M=D // 32269
// call Number.new
@6 // 32270
D=A // 32271
@14 // 32272
M=D // 32273
@Number.new // 32274
D=A // 32275
@13 // 32276
M=D // 32277
@Main.getThreeHalves.ret.1 // 32278
D=A // 32279
@CALL // 32280
0;JMP // 32281
(Main.getThreeHalves.ret.1)
@SP // 32282
AM=M-1 // 32283
D=M // 32284
@LCL // 32285
A=M+1 // 32286
M=D // 32287

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32288
A=M // 32289
D=M // 32290
@SP // 32291
AM=M+1 // 32292
A=A-1 // 32293
M=D // 32294
@LCL // 32295
A=M+1 // 32296
D=M // 32297
@SP // 32298
AM=M+1 // 32299
A=A-1 // 32300
M=D // 32301
// call Number.do_div
@7 // 32302
D=A // 32303
@14 // 32304
M=D // 32305
@Number.do_div // 32306
D=A // 32307
@13 // 32308
M=D // 32309
@Main.getThreeHalves.ret.2 // 32310
D=A // 32311
@CALL // 32312
0;JMP // 32313
(Main.getThreeHalves.ret.2)
@SP // 32314
M=M-1 // 32315

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 32316
A=M+1 // 32317
D=M // 32318
@SP // 32319
AM=M+1 // 32320
A=A-1 // 32321
M=D // 32322
// call Number.dispose
@6 // 32323
D=A // 32324
@14 // 32325
M=D // 32326
@Number.dispose // 32327
D=A // 32328
@13 // 32329
M=D // 32330
@Main.getThreeHalves.ret.3 // 32331
D=A // 32332
@CALL // 32333
0;JMP // 32334
(Main.getThreeHalves.ret.3)
@SP // 32335
M=M-1 // 32336

////PushInstruction("local 0")
@LCL // 32337
A=M // 32338
D=M // 32339
@SP // 32340
AM=M+1 // 32341
A=A-1 // 32342
M=D // 32343
@RETURN // 32344
0;JMP // 32345

////FunctionInstruction{functionName='Int32.do_zero', numLocals=1, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=24, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=26, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.do_zero with 1
(Int32.do_zero)
@SP // 32346
AM=M+1 // 32347
A=A-1 // 32348
M=0 // 32349

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 32350
A=M // 32351
D=M // 32352
@3 // 32353
M=D // 32354

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 32355
A=M // 32356
M=0 // 32357

////LabelInstruction{label='Int32.do_zero_WHILE_EXP1}
// label Int32.do_zero_WHILE_EXP1
(Int32.do_zero_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 4"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.do_zero_WHILE_END1}}
@Int32.do_zero.LT.121 // 32358
D=A // 32359
@SP // 32360
AM=M+1 // 32361
A=A-1 // 32362
M=D // 32363
@LCL // 32364
A=M // 32365
D=M // 32366
@4 // 32367
D=D-A // 32368
@DO_LT // 32369
0;JMP // 32370
(Int32.do_zero.LT.121)
D=!D // 32371
@Int32.do_zero_WHILE_END1 // 32372
D;JNE // 32373

////PushWriter{source=PushInstruction("local 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("this 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)}
@THIS // 32374
A=M // 32375
D=M // 32376
@SP // 32377
AM=M+1 // 32378
A=A-1 // 32379
M=D // 32380
@LCL // 32381
A=M // 32382
D=M // 32383
@SP // 32384
AM=M-1 // 32385
D=D+M // 32386
@SP // 32387
AM=M+1 // 32388
A=A-1 // 32389
M=D // 32390
@LCL // 32391
A=M // 32392
D=M // 32393
@SP // 32394
AM=M-1 // 32395
A=M // 32396
M=D // 32397

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 32398
A=M // 32399
M=M+1 // 32400

////GotoInstruction{label='Int32.do_zero_WHILE_EXP1}
// goto Int32.do_zero_WHILE_EXP1
@Int32.do_zero_WHILE_EXP1 // 32401
0;JMP // 32402

////LabelInstruction{label='Int32.do_zero_WHILE_END1}
// label Int32.do_zero_WHILE_END1
(Int32.do_zero_WHILE_END1)

////PushInstruction("constant 0")
@SP // 32403
AM=M+1 // 32404
A=A-1 // 32405
M=0 // 32406
@RETURN // 32407
0;JMP // 32408

////FunctionInstruction{functionName='Sys.error', numLocals=1, funcMapping={Sys.halt=0, Sys.init=6}}
// function Sys.error with 1
(Sys.error)
@SP // 32409
AM=M+1 // 32410
A=A-1 // 32411
M=0 // 32412

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 32413
A=M // 32414
M=0 // 32415

////LabelInstruction{label='Sys.error_WHILE_EXP1}
// label Sys.error_WHILE_EXP1
(Sys.error_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 0"),
//        right:
//            PushInstruction("constant 8192"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Sys.error_WHILE_END1}}
@Sys.error.LT.122 // 32416
D=A // 32417
@SP // 32418
AM=M+1 // 32419
A=A-1 // 32420
M=D // 32421
@LCL // 32422
A=M // 32423
D=M // 32424
@8192 // 32425
D=D-A // 32426
@DO_LT // 32427
0;JMP // 32428
(Sys.error.LT.122)
D=!D // 32429
@Sys.error_WHILE_END1 // 32430
D;JNE // 32431

////PushWriter{source=UnaryPushGroup(    PushInstruction("constant 1"),
//NEG), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 16384"),
//    binaryOp: "ADD"
//)}
@LCL // 32432
A=M // 32433
D=M // 32434
@16384 // 32435
D=D+A // 32436
@SP // 32437
AM=M+1 // 32438
A=A-1 // 32439
M=D // 32440
D=-1 // 32441
@SP // 32442
AM=M-1 // 32443
A=M // 32444
M=D // 32445

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 32446
A=M // 32447
M=M+1 // 32448

////GotoInstruction{label='Sys.error_WHILE_EXP1}
// goto Sys.error_WHILE_EXP1
@Sys.error_WHILE_EXP1 // 32449
0;JMP // 32450

////LabelInstruction{label='Sys.error_WHILE_END1}
// label Sys.error_WHILE_END1
(Sys.error_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Output.printInt}}
//  pop:  PopInstruction{address=temp 0}
//}

@ARG // 32451
A=M // 32452
D=M // 32453
@SP // 32454
AM=M+1 // 32455
A=A-1 // 32456
M=D // 32457
// call Output.printInt
@6 // 32458
D=A // 32459
@14 // 32460
M=D // 32461
@Output.printInt // 32462
D=A // 32463
@13 // 32464
M=D // 32465
@Sys.error.ret.0 // 32466
D=A // 32467
@CALL // 32468
0;JMP // 32469
(Sys.error.ret.0)
@SP // 32470
M=M-1 // 32471

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.println}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.println
@5 // 32472
D=A // 32473
@14 // 32474
M=D // 32475
@Output.println // 32476
D=A // 32477
@13 // 32478
M=D // 32479
@Sys.error.ret.1 // 32480
D=A // 32481
@CALL // 32482
0;JMP // 32483
(Sys.error.ret.1)
@SP // 32484
M=M-1 // 32485

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Sys.halt}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Sys.halt
@5 // 32486
D=A // 32487
@14 // 32488
M=D // 32489
@Sys.halt // 32490
D=A // 32491
@13 // 32492
M=D // 32493
@Sys.error.ret.2 // 32494
D=A // 32495
@CALL // 32496
0;JMP // 32497
(Sys.error.ret.2)
@SP // 32498
M=M-1 // 32499

////PushInstruction("constant 0")
@SP // 32500
AM=M+1 // 32501
A=A-1 // 32502
M=0 // 32503
@RETURN // 32504
0;JMP // 32505

////FunctionInstruction{functionName='DirectionalLight.getShadowBias', numLocals=0, funcMapping={DirectionalLight.new=9, DirectionalLight.dispose=3, DirectionalLight.getColor=0}}
// function DirectionalLight.getShadowBias with 0
(DirectionalLight.getShadowBias)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 32506
A=M // 32507
D=M // 32508
@3 // 32509
M=D // 32510

////PushInstruction("this 3")
@THIS // 32511
A=M+1 // 32512
A=A+1 // 32513
A=A+1 // 32514
D=M // 32515
@SP // 32516
AM=M+1 // 32517
A=A-1 // 32518
M=D // 32519
@RETURN // 32520
0;JMP // 32521

////FunctionInstruction{functionName='Screen.drawPixel', numLocals=2, funcMapping={Screen.init=0, Screen.setColor=0}}
// function Screen.drawPixel with 2
(Screen.drawPixel)
@SP // 32522
M=M+1 // 32523
AM=M+1 // 32524
A=A-1 // 32525
M=0 // 32526
A=A-1 // 32527
M=0 // 32528

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 16384"),
//    right:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 32")], call=CallInstruction{Math.multiply}},
//            right:
//CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("constant 16")], call=CallInstruction{Math.divide}},
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 32529
A=M+1 // 32530
D=M // 32531
@SP // 32532
AM=M+1 // 32533
A=A-1 // 32534
M=D // 32535
@32 // 32536
D=A // 32537
@SP // 32538
AM=M+1 // 32539
A=A-1 // 32540
M=D // 32541
// call Math.multiply
@7 // 32542
D=A // 32543
@14 // 32544
M=D // 32545
@Math.multiply // 32546
D=A // 32547
@13 // 32548
M=D // 32549
@Screen.drawPixel.ret.0 // 32550
D=A // 32551
@CALL // 32552
0;JMP // 32553
(Screen.drawPixel.ret.0)
@ARG // 32554
A=M // 32555
D=M // 32556
@SP // 32557
AM=M+1 // 32558
A=A-1 // 32559
M=D // 32560
@16 // 32561
D=A // 32562
@SP // 32563
AM=M+1 // 32564
A=A-1 // 32565
M=D // 32566
// call Math.divide
@7 // 32567
D=A // 32568
@14 // 32569
M=D // 32570
@Math.divide // 32571
D=A // 32572
@13 // 32573
M=D // 32574
@Screen.drawPixel.ret.1 // 32575
D=A // 32576
@CALL // 32577
0;JMP // 32578
(Screen.drawPixel.ret.1)
@SP // 32579
AM=M-1 // 32580
D=M // 32581
@SP // 32582
AM=M-1 // 32583
D=D+M // 32584
@16384 // 32585
D=D+A // 32586
@LCL // 32587
A=M // 32588
M=D // 32589

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//)
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 32590
A=M // 32591
D=M // 32592
@15 // 32593
D=D&A // 32594
@LCL // 32595
A=M+1 // 32596
M=D // 32597

////ConditionalGroup{push=PushInstruction("static 0"), ifGoto=IfGotoInstruction{label='Screen.drawPixel$IF_TRUE1}}
@Screen.0 // 32598
D=M // 32599
@Screen.drawPixel$IF_TRUE1 // 32600
D;JNE // 32601

////GotoInstruction{label='Screen.drawPixel$IF_FALSE1}
// goto Screen.drawPixel$IF_FALSE1
@Screen.drawPixel$IF_FALSE1 // 32602
0;JMP // 32603

////LabelInstruction{label='Screen.drawPixel$IF_TRUE1}
// label Screen.drawPixel$IF_TRUE1
(Screen.drawPixel$IF_TRUE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Math.twoToThe}},
//    binaryOp: "OR"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 32604
A=M // 32605
D=M // 32606
@SP // 32607
AM=M+1 // 32608
A=A-1 // 32609
M=D // 32610
@LCL // 32611
A=M // 32612
D=M // 32613
@0 // 32614
A=D+A // 32615
D=M // 32616
@SP // 32617
AM=M+1 // 32618
A=A-1 // 32619
M=D // 32620
@LCL // 32621
A=M+1 // 32622
D=M // 32623
@SP // 32624
AM=M+1 // 32625
A=A-1 // 32626
M=D // 32627
// call Math.twoToThe
@6 // 32628
D=A // 32629
@14 // 32630
M=D // 32631
@Math.twoToThe // 32632
D=A // 32633
@13 // 32634
M=D // 32635
@Screen.drawPixel.ret.2 // 32636
D=A // 32637
@CALL // 32638
0;JMP // 32639
(Screen.drawPixel.ret.2)
@SP // 32640
AM=M-1 // 32641
D=M // 32642
@SP // 32643
AM=M-1 // 32644
D=D|M // 32645
@SP // 32646
AM=M-1 // 32647
A=M // 32648
M=D // 32649

////GotoInstruction{label='Screen.drawPixel$IF_END1}
// goto Screen.drawPixel$IF_END1
@Screen.drawPixel$IF_END1 // 32650
0;JMP // 32651

////LabelInstruction{label='Screen.drawPixel$IF_FALSE1}
// label Screen.drawPixel$IF_FALSE1
(Screen.drawPixel$IF_FALSE1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        UnaryPushGroup(CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Math.twoToThe}},
//NOT),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 32652
A=M // 32653
D=M // 32654
@SP // 32655
AM=M+1 // 32656
A=A-1 // 32657
M=D // 32658
@LCL // 32659
A=M // 32660
D=M // 32661
@0 // 32662
A=D+A // 32663
D=M // 32664
@SP // 32665
AM=M+1 // 32666
A=A-1 // 32667
M=D // 32668
@LCL // 32669
A=M+1 // 32670
D=M // 32671
@SP // 32672
AM=M+1 // 32673
A=A-1 // 32674
M=D // 32675
// call Math.twoToThe
@6 // 32676
D=A // 32677
@14 // 32678
M=D // 32679
@Math.twoToThe // 32680
D=A // 32681
@13 // 32682
M=D // 32683
@Screen.drawPixel.ret.3 // 32684
D=A // 32685
@CALL // 32686
0;JMP // 32687
(Screen.drawPixel.ret.3)
@SP // 32688
AM=M-1 // 32689
D=M // 32690
D=!D // 32691
@SP // 32692
AM=M-1 // 32693
D=D&M // 32694
@SP // 32695
AM=M-1 // 32696
A=M // 32697
M=D // 32698

////LabelInstruction{label='Screen.drawPixel$IF_END1}
// label Screen.drawPixel$IF_END1
(Screen.drawPixel$IF_END1)

////PushInstruction("constant 0")
@SP // 32699
AM=M+1 // 32700
A=A-1 // 32701
M=0 // 32702
@RETURN // 32703
0;JMP // 32704

////FunctionInstruction{functionName='Memory.create_foot', numLocals=0, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.get_best_fit=0, Memory.getBinIndex=1, Memory.remove_node=0}}
// function Memory.create_foot with 0
(Memory.create_foot)

////PushWriter{source=PushInstruction("argument 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("argument 0"),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 4"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@ARG // 32705
A=M // 32706
D=M // 32707
@SP // 32708
AM=M+1 // 32709
A=A-1 // 32710
M=D // 32711
@ARG // 32712
A=M // 32713
D=M // 32714
@0 // 32715
A=D+A // 32716
D=M // 32717
@4 // 32718
D=D+A // 32719
@SP // 32720
AM=M-1 // 32721
D=D+M // 32722
@SP // 32723
AM=M+1 // 32724
A=A-1 // 32725
M=D // 32726
@ARG // 32727
A=M // 32728
D=M // 32729
@SP // 32730
AM=M-1 // 32731
A=M // 32732
M=D // 32733

////PushInstruction("constant 0")
@SP // 32734
AM=M+1 // 32735
A=A-1 // 32736
M=0 // 32737
@RETURN // 32738
0;JMP // 32739

////FunctionInstruction{functionName='Math.twoToThe', numLocals=0, funcMapping={Math.max=0, Math.init=1, Math.multiply=0}}
// function Math.twoToThe with 0
(Math.twoToThe)

////Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 0"),
//            right:
//                PushInstruction("argument 0"),
//            binaryOp: "ADD"
//        )
//)
@Math.0 // 32740
D=M // 32741
@SP // 32742
AM=M+1 // 32743
A=A-1 // 32744
M=D // 32745
@ARG // 32746
A=M // 32747
D=M // 32748
@SP // 32749
AM=M-1 // 32750
A=D+M // 32751
D=M // 32752
@SP // 32753
AM=M+1 // 32754
A=A-1 // 32755
M=D // 32756
@RETURN // 32757
0;JMP // 32758

////FunctionInstruction{functionName='Intersection.getObject', numLocals=0, funcMapping={Intersection.getDistanceFromOrigin=0, Intersection.new=1, Intersection.dispose=2}}
// function Intersection.getObject with 0
(Intersection.getObject)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 32759
A=M // 32760
D=M // 32761
@3 // 32762
M=D // 32763

////PushInstruction("this 1")
@THIS // 32764
A=M+1 // 32765
D=M // 32766
@SP // 32767
AM=M+1 // 32768
A=A-1 // 32769
M=D // 32770
@RETURN // 32771
0;JMP // 32772

////FunctionInstruction{functionName='String.setInt', numLocals=6, funcMapping={String.dispose=1, String.charAt=0, String.appendChar=3, String.length=0, String.new=2}}
// function String.setInt with 6
(String.setInt)
@6 // 32773
D=A // 32774
@SP // 32775
AM=D+M // 32776
A=A-1 // 32777
M=0 // 32778
A=A-1 // 32779
M=0 // 32780
A=A-1 // 32781
M=0 // 32782
A=A-1 // 32783
M=0 // 32784
A=A-1 // 32785
M=0 // 32786
A=A-1 // 32787
M=0 // 32788

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 32789
A=M // 32790
D=M // 32791
@3 // 32792
M=D // 32793

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 1}
//}

@THIS // 32794
A=M+1 // 32795
M=0 // 32796

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 32797
D=M // 32798
@4 // 32799
A=D+A // 32800
M=0 // 32801

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE1}}
@String.setInt.EQ.123 // 32802
D=A // 32803
@SP // 32804
AM=M+1 // 32805
A=A-1 // 32806
M=D // 32807
@ARG // 32808
A=M+1 // 32809
D=M // 32810
@DO_EQ // 32811
0;JMP // 32812
(String.setInt.EQ.123)
@String.setInt$IF_TRUE1 // 32813
D;JNE // 32814

////GotoInstruction{label='String.setInt$IF_END1}
// goto String.setInt$IF_END1
@String.setInt$IF_END1 // 32815
0;JMP // 32816

////LabelInstruction{label='String.setInt$IF_TRUE1}
// label String.setInt$IF_TRUE1
(String.setInt$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 48")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 32817
D=M // 32818
@SP // 32819
AM=M+1 // 32820
A=A-1 // 32821
M=D // 32822
@48 // 32823
D=A // 32824
@SP // 32825
AM=M+1 // 32826
A=A-1 // 32827
M=D // 32828
// call String.appendChar
@7 // 32829
D=A // 32830
@14 // 32831
M=D // 32832
@String.appendChar // 32833
D=A // 32834
@13 // 32835
M=D // 32836
@String.setInt.ret.0 // 32837
D=A // 32838
@CALL // 32839
0;JMP // 32840
(String.setInt.ret.0)
@SP // 32841
M=M-1 // 32842

////PushInstruction("constant 0")
@SP // 32843
AM=M+1 // 32844
A=A-1 // 32845
M=0 // 32846
@RETURN // 32847
0;JMP // 32848

////LabelInstruction{label='String.setInt$IF_END1}
// label String.setInt$IF_END1
(String.setInt$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE2}}
@String.setInt.LT.124 // 32849
D=A // 32850
@SP // 32851
AM=M+1 // 32852
A=A-1 // 32853
M=D // 32854
@ARG // 32855
A=M+1 // 32856
D=M // 32857
@DO_LT // 32858
0;JMP // 32859
(String.setInt.LT.124)
@String.setInt$IF_TRUE2 // 32860
D;JNE // 32861

////GotoInstruction{label='String.setInt$IF_END2}
// goto String.setInt$IF_END2
@String.setInt$IF_END2 // 32862
0;JMP // 32863

////LabelInstruction{label='String.setInt$IF_TRUE2}
// label String.setInt$IF_TRUE2
(String.setInt$IF_TRUE2)

////PushPopPair {
//  push: PushInstruction("constant 1")
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 32864
D=M // 32865
@4 // 32866
A=D+A // 32867
M=1 // 32868

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "LT"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 32767"),
//                    binaryOp: "AND"
//                ),
//            right:
//                PushInstruction("constant 32767"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "AND"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE3}}
@String.setInt.LT.125 // 32869
D=A // 32870
@SP // 32871
AM=M+1 // 32872
A=A-1 // 32873
M=D // 32874
@ARG // 32875
A=M+1 // 32876
D=M // 32877
@DO_LT // 32878
0;JMP // 32879
(String.setInt.LT.125)
@SP // 32880
AM=M+1 // 32881
A=A-1 // 32882
M=D // 32883
@String.setInt.EQ.126 // 32884
D=A // 32885
@SP // 32886
AM=M+1 // 32887
A=A-1 // 32888
M=D // 32889
@ARG // 32890
A=M+1 // 32891
D=M // 32892
@32767 // 32893
D=D&A // 32894
@32767 // 32895
D=D-A // 32896
@DO_EQ // 32897
0;JMP // 32898
(String.setInt.EQ.126)
@SP // 32899
AM=M-1 // 32900
D=D&M // 32901
@String.setInt$IF_TRUE3 // 32902
D;JNE // 32903

////GotoInstruction{label='String.setInt$IF_END3}
// goto String.setInt$IF_END3
@String.setInt$IF_END3 // 32904
0;JMP // 32905

////LabelInstruction{label='String.setInt$IF_TRUE3}
// label String.setInt$IF_TRUE3
(String.setInt$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 45")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 32906
D=M // 32907
@SP // 32908
AM=M+1 // 32909
A=A-1 // 32910
M=D // 32911
@45 // 32912
D=A // 32913
@SP // 32914
AM=M+1 // 32915
A=A-1 // 32916
M=D // 32917
// call String.appendChar
@7 // 32918
D=A // 32919
@14 // 32920
M=D // 32921
@String.appendChar // 32922
D=A // 32923
@13 // 32924
M=D // 32925
@String.setInt.ret.1 // 32926
D=A // 32927
@CALL // 32928
0;JMP // 32929
(String.setInt.ret.1)
@SP // 32930
M=M-1 // 32931

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 51")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 32932
D=M // 32933
@SP // 32934
AM=M+1 // 32935
A=A-1 // 32936
M=D // 32937
@51 // 32938
D=A // 32939
@SP // 32940
AM=M+1 // 32941
A=A-1 // 32942
M=D // 32943
// call String.appendChar
@7 // 32944
D=A // 32945
@14 // 32946
M=D // 32947
@String.appendChar // 32948
D=A // 32949
@13 // 32950
M=D // 32951
@String.setInt.ret.2 // 32952
D=A // 32953
@CALL // 32954
0;JMP // 32955
(String.setInt.ret.2)
@SP // 32956
M=M-1 // 32957

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 50")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 32958
D=M // 32959
@SP // 32960
AM=M+1 // 32961
A=A-1 // 32962
M=D // 32963
@50 // 32964
D=A // 32965
@SP // 32966
AM=M+1 // 32967
A=A-1 // 32968
M=D // 32969
// call String.appendChar
@7 // 32970
D=A // 32971
@14 // 32972
M=D // 32973
@String.appendChar // 32974
D=A // 32975
@13 // 32976
M=D // 32977
@String.setInt.ret.3 // 32978
D=A // 32979
@CALL // 32980
0;JMP // 32981
(String.setInt.ret.3)
@SP // 32982
M=M-1 // 32983

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 55")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 32984
D=M // 32985
@SP // 32986
AM=M+1 // 32987
A=A-1 // 32988
M=D // 32989
@55 // 32990
D=A // 32991
@SP // 32992
AM=M+1 // 32993
A=A-1 // 32994
M=D // 32995
// call String.appendChar
@7 // 32996
D=A // 32997
@14 // 32998
M=D // 32999
@String.appendChar // 33000
D=A // 33001
@13 // 33002
M=D // 33003
@String.setInt.ret.4 // 33004
D=A // 33005
@CALL // 33006
0;JMP // 33007
(String.setInt.ret.4)
@SP // 33008
M=M-1 // 33009

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 54")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33010
D=M // 33011
@SP // 33012
AM=M+1 // 33013
A=A-1 // 33014
M=D // 33015
@54 // 33016
D=A // 33017
@SP // 33018
AM=M+1 // 33019
A=A-1 // 33020
M=D // 33021
// call String.appendChar
@7 // 33022
D=A // 33023
@14 // 33024
M=D // 33025
@String.appendChar // 33026
D=A // 33027
@13 // 33028
M=D // 33029
@String.setInt.ret.5 // 33030
D=A // 33031
@CALL // 33032
0;JMP // 33033
(String.setInt.ret.5)
@SP // 33034
M=M-1 // 33035

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 56")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33036
D=M // 33037
@SP // 33038
AM=M+1 // 33039
A=A-1 // 33040
M=D // 33041
@56 // 33042
D=A // 33043
@SP // 33044
AM=M+1 // 33045
A=A-1 // 33046
M=D // 33047
// call String.appendChar
@7 // 33048
D=A // 33049
@14 // 33050
M=D // 33051
@String.appendChar // 33052
D=A // 33053
@13 // 33054
M=D // 33055
@String.setInt.ret.6 // 33056
D=A // 33057
@CALL // 33058
0;JMP // 33059
(String.setInt.ret.6)
@SP // 33060
M=M-1 // 33061

////PushInstruction("constant 0")
@SP // 33062
AM=M+1 // 33063
A=A-1 // 33064
M=0 // 33065
@RETURN // 33066
0;JMP // 33067

////LabelInstruction{label='String.setInt$IF_END3}
// label String.setInt$IF_END3
(String.setInt$IF_END3)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("argument 1"),
//NEG)
//  pop:  PopInstruction{address=argument 1}
//}

@ARG // 33068
A=M+1 // 33069
D=-M // 33070
@ARG // 33071
A=M+1 // 33072
M=D // 33073

////LabelInstruction{label='String.setInt$IF_END2}
// label String.setInt$IF_END2
(String.setInt$IF_END2)

////PushPopPair {
//  push: PushInstruction("argument 1")
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 33074
A=M+1 // 33075
D=M // 33076
@LCL // 33077
A=M+1 // 33078
A=A+1 // 33079
M=D // 33080

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33081
A=M+1 // 33082
A=A+1 // 33083
A=A+1 // 33084
M=0 // 33085

////LabelInstruction{label='String.setInt_WHILE_EXP1}
// label String.setInt_WHILE_EXP1
(String.setInt_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END1}}
@String.setInt.GT.127 // 33086
D=A // 33087
@SP // 33088
AM=M+1 // 33089
A=A-1 // 33090
M=D // 33091
@LCL // 33092
A=M+1 // 33093
A=A+1 // 33094
D=M // 33095
@DO_GT // 33096
0;JMP // 33097
(String.setInt.GT.127)
D=!D // 33098
@String.setInt_WHILE_END1 // 33099
D;JNE // 33100

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 33101
A=M+1 // 33102
A=A+1 // 33103
D=M // 33104
@SP // 33105
AM=M+1 // 33106
A=A-1 // 33107
M=D // 33108
@10 // 33109
D=A // 33110
@SP // 33111
AM=M+1 // 33112
A=A-1 // 33113
M=D // 33114
// call Math.divide
@7 // 33115
D=A // 33116
@14 // 33117
M=D // 33118
@Math.divide // 33119
D=A // 33120
@13 // 33121
M=D // 33122
@String.setInt.ret.7 // 33123
D=A // 33124
@CALL // 33125
0;JMP // 33126
(String.setInt.ret.7)
@SP // 33127
AM=M-1 // 33128
D=M // 33129
@LCL // 33130
A=M+1 // 33131
A=A+1 // 33132
M=D // 33133

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33134
A=M+1 // 33135
A=A+1 // 33136
A=A+1 // 33137
M=M+1 // 33138

////GotoInstruction{label='String.setInt_WHILE_EXP1}
// goto String.setInt_WHILE_EXP1
@String.setInt_WHILE_EXP1 // 33139
0;JMP // 33140

////LabelInstruction{label='String.setInt_WHILE_END1}
// label String.setInt_WHILE_END1
(String.setInt_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 33141
A=M+1 // 33142
A=A+1 // 33143
A=A+1 // 33144
D=M // 33145
@SP // 33146
AM=M+1 // 33147
A=A-1 // 33148
M=D // 33149
// call Memory.alloc
@6 // 33150
D=A // 33151
@14 // 33152
M=D // 33153
@Memory.alloc // 33154
D=A // 33155
@13 // 33156
M=D // 33157
@String.setInt.ret.8 // 33158
D=A // 33159
@CALL // 33160
0;JMP // 33161
(String.setInt.ret.8)
@LCL // 33162
D=M // 33163
@5 // 33164
A=D+A // 33165
D=A // 33166
@R13 // 33167
M=D // 33168
@SP // 33169
AM=M-1 // 33170
D=M // 33171
@R13 // 33172
A=M // 33173
M=D // 33174

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33175
A=M+1 // 33176
M=0 // 33177

////LabelInstruction{label='String.setInt_WHILE_EXP2}
// label String.setInt_WHILE_EXP2
(String.setInt_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("argument 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END2}}
@String.setInt.GT.128 // 33178
D=A // 33179
@SP // 33180
AM=M+1 // 33181
A=A-1 // 33182
M=D // 33183
@ARG // 33184
A=M+1 // 33185
D=M // 33186
@DO_GT // 33187
0;JMP // 33188
(String.setInt.GT.128)
D=!D // 33189
@String.setInt_WHILE_END2 // 33190
D;JNE // 33191

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//CallGroup{pushes=[CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}, PushInstruction("constant 10")], call=CallInstruction{Math.multiply}},
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 33192
A=M+1 // 33193
D=M // 33194
@SP // 33195
AM=M+1 // 33196
A=A-1 // 33197
M=D // 33198
@ARG // 33199
A=M+1 // 33200
D=M // 33201
@SP // 33202
AM=M+1 // 33203
A=A-1 // 33204
M=D // 33205
@10 // 33206
D=A // 33207
@SP // 33208
AM=M+1 // 33209
A=A-1 // 33210
M=D // 33211
// call Math.divide
@7 // 33212
D=A // 33213
@14 // 33214
M=D // 33215
@Math.divide // 33216
D=A // 33217
@13 // 33218
M=D // 33219
@String.setInt.ret.9 // 33220
D=A // 33221
@CALL // 33222
0;JMP // 33223
(String.setInt.ret.9)
@10 // 33224
D=A // 33225
@SP // 33226
AM=M+1 // 33227
A=A-1 // 33228
M=D // 33229
// call Math.multiply
@7 // 33230
D=A // 33231
@14 // 33232
M=D // 33233
@Math.multiply // 33234
D=A // 33235
@13 // 33236
M=D // 33237
@String.setInt.ret.10 // 33238
D=A // 33239
@CALL // 33240
0;JMP // 33241
(String.setInt.ret.10)
@SP // 33242
AM=M-1 // 33243
D=M // 33244
@SP // 33245
AM=M-1 // 33246
D=M-D // 33247
@LCL // 33248
A=M // 33249
M=D // 33250

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 48"),
//    binaryOp: "ADD"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 5"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "ADD"
//)}
@LCL // 33251
D=M // 33252
@5 // 33253
A=D+A // 33254
D=M // 33255
@SP // 33256
AM=M+1 // 33257
A=A-1 // 33258
M=D // 33259
@LCL // 33260
A=M+1 // 33261
D=M // 33262
@SP // 33263
AM=M-1 // 33264
D=D+M // 33265
@SP // 33266
AM=M+1 // 33267
A=A-1 // 33268
M=D // 33269
@LCL // 33270
A=M // 33271
D=M // 33272
@48 // 33273
D=D+A // 33274
@SP // 33275
AM=M-1 // 33276
A=M // 33277
M=D // 33278

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), PushInstruction("constant 10")], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=argument 1}
//}

@ARG // 33279
A=M+1 // 33280
D=M // 33281
@SP // 33282
AM=M+1 // 33283
A=A-1 // 33284
M=D // 33285
@10 // 33286
D=A // 33287
@SP // 33288
AM=M+1 // 33289
A=A-1 // 33290
M=D // 33291
// call Math.divide
@7 // 33292
D=A // 33293
@14 // 33294
M=D // 33295
@Math.divide // 33296
D=A // 33297
@13 // 33298
M=D // 33299
@String.setInt.ret.11 // 33300
D=A // 33301
@CALL // 33302
0;JMP // 33303
(String.setInt.ret.11)
@SP // 33304
AM=M-1 // 33305
D=M // 33306
@ARG // 33307
A=M+1 // 33308
M=D // 33309

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33310
A=M+1 // 33311
M=M+1 // 33312

////GotoInstruction{label='String.setInt_WHILE_EXP2}
// goto String.setInt_WHILE_EXP2
@String.setInt_WHILE_EXP2 // 33313
0;JMP // 33314

////LabelInstruction{label='String.setInt_WHILE_END2}
// label String.setInt_WHILE_END2
(String.setInt_WHILE_END2)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='String.setInt$IF_TRUE4}}
@String.setInt.EQ.129 // 33315
D=A // 33316
@SP // 33317
AM=M+1 // 33318
A=A-1 // 33319
M=D // 33320
@LCL // 33321
D=M // 33322
@4 // 33323
A=D+A // 33324
D=M // 33325
D=D-1 // 33326
@DO_EQ // 33327
0;JMP // 33328
(String.setInt.EQ.129)
@String.setInt$IF_TRUE4 // 33329
D;JNE // 33330

////GotoInstruction{label='String.setInt$IF_END4}
// goto String.setInt$IF_END4
@String.setInt$IF_END4 // 33331
0;JMP // 33332

////LabelInstruction{label='String.setInt$IF_TRUE4}
// label String.setInt$IF_TRUE4
(String.setInt$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("constant 45")], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33333
D=M // 33334
@SP // 33335
AM=M+1 // 33336
A=A-1 // 33337
M=D // 33338
@45 // 33339
D=A // 33340
@SP // 33341
AM=M+1 // 33342
A=A-1 // 33343
M=D // 33344
// call String.appendChar
@7 // 33345
D=A // 33346
@14 // 33347
M=D // 33348
@String.appendChar // 33349
D=A // 33350
@13 // 33351
M=D // 33352
@String.setInt.ret.12 // 33353
D=A // 33354
@CALL // 33355
0;JMP // 33356
(String.setInt.ret.12)
@SP // 33357
M=M-1 // 33358

////LabelInstruction{label='String.setInt$IF_END4}
// label String.setInt$IF_END4
(String.setInt$IF_END4)

////LabelInstruction{label='String.setInt_WHILE_EXP3}
// label String.setInt_WHILE_EXP3
(String.setInt_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "GT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='String.setInt_WHILE_END3}}
@String.setInt.GT.130 // 33359
D=A // 33360
@SP // 33361
AM=M+1 // 33362
A=A-1 // 33363
M=D // 33364
@LCL // 33365
A=M+1 // 33366
D=M // 33367
@DO_GT // 33368
0;JMP // 33369
(String.setInt.GT.130)
D=!D // 33370
@String.setInt_WHILE_END3 // 33371
D;JNE // 33372

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33373
A=M+1 // 33374
M=M-1 // 33375

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0"), Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 5"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)], call=CallInstruction{String.appendChar}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 33376
D=M // 33377
@SP // 33378
AM=M+1 // 33379
A=A-1 // 33380
M=D // 33381
@LCL // 33382
D=M // 33383
@5 // 33384
A=D+A // 33385
D=M // 33386
@SP // 33387
AM=M+1 // 33388
A=A-1 // 33389
M=D // 33390
@LCL // 33391
A=M+1 // 33392
D=M // 33393
@SP // 33394
AM=M-1 // 33395
A=D+M // 33396
D=M // 33397
@SP // 33398
AM=M+1 // 33399
A=A-1 // 33400
M=D // 33401
// call String.appendChar
@7 // 33402
D=A // 33403
@14 // 33404
M=D // 33405
@String.appendChar // 33406
D=A // 33407
@13 // 33408
M=D // 33409
@String.setInt.ret.13 // 33410
D=A // 33411
@CALL // 33412
0;JMP // 33413
(String.setInt.ret.13)
@SP // 33414
M=M-1 // 33415

////GotoInstruction{label='String.setInt_WHILE_EXP3}
// goto String.setInt_WHILE_EXP3
@String.setInt_WHILE_EXP3 // 33416
0;JMP // 33417

////LabelInstruction{label='String.setInt_WHILE_END3}
// label String.setInt_WHILE_END3
(String.setInt_WHILE_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 33418
D=M // 33419
@5 // 33420
A=D+A // 33421
D=M // 33422
@SP // 33423
AM=M+1 // 33424
A=A-1 // 33425
M=D // 33426
// call Memory.deAlloc
@6 // 33427
D=A // 33428
@14 // 33429
M=D // 33430
@Memory.deAlloc // 33431
D=A // 33432
@13 // 33433
M=D // 33434
@String.setInt.ret.14 // 33435
D=A // 33436
@CALL // 33437
0;JMP // 33438
(String.setInt.ret.14)
@SP // 33439
M=M-1 // 33440

////PushInstruction("constant 0")
@SP // 33441
AM=M+1 // 33442
A=A-1 // 33443
M=0 // 33444
@RETURN // 33445
0;JMP // 33446

////FunctionInstruction{functionName='Int32.u4_array_mul_u4_array', numLocals=6, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=24, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=26, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.u4_array_mul_u4_array with 6
(Int32.u4_array_mul_u4_array)
@6 // 33447
D=A // 33448
@SP // 33449
AM=D+M // 33450
A=A-1 // 33451
M=0 // 33452
A=A-1 // 33453
M=0 // 33454
A=A-1 // 33455
M=0 // 33456
A=A-1 // 33457
M=0 // 33458
A=A-1 // 33459
M=0 // 33460
A=A-1 // 33461
M=0 // 33462

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 16")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=local 0}
//}

@16 // 33463
D=A // 33464
@SP // 33465
AM=M+1 // 33466
A=A-1 // 33467
M=D // 33468
// call Memory.alloc
@6 // 33469
D=A // 33470
@14 // 33471
M=D // 33472
@Memory.alloc // 33473
D=A // 33474
@13 // 33475
M=D // 33476
@Int32.u4_array_mul_u4_array.ret.0 // 33477
D=A // 33478
@CALL // 33479
0;JMP // 33480
(Int32.u4_array_mul_u4_array.ret.0)
@SP // 33481
AM=M-1 // 33482
D=M // 33483
@LCL // 33484
A=M // 33485
M=D // 33486

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33487
A=M+1 // 33488
A=A+1 // 33489
A=A+1 // 33490
M=0 // 33491

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP1}
// label Int32.u4_array_mul_u4_array_WHILE_EXP1
(Int32.u4_array_mul_u4_array_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 16"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END1}}
@Int32.u4_array_mul_u4_array.LT.131 // 33492
D=A // 33493
@SP // 33494
AM=M+1 // 33495
A=A-1 // 33496
M=D // 33497
@LCL // 33498
A=M+1 // 33499
A=A+1 // 33500
A=A+1 // 33501
D=M // 33502
@16 // 33503
D=D-A // 33504
@DO_LT // 33505
0;JMP // 33506
(Int32.u4_array_mul_u4_array.LT.131)
D=!D // 33507
@Int32.u4_array_mul_u4_array_WHILE_END1 // 33508
D;JNE // 33509

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 3"),
//    binaryOp: "ADD"
//)}
@LCL // 33510
A=M+1 // 33511
A=A+1 // 33512
A=A+1 // 33513
D=M // 33514
A=A-1 // 33515
A=A-1 // 33516
A=A-1 // 33517
D=D+M // 33518
@SP // 33519
AM=M+1 // 33520
A=A-1 // 33521
M=D // 33522
D=0 // 33523
@SP // 33524
AM=M-1 // 33525
A=M // 33526
M=D // 33527

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33528
A=M+1 // 33529
A=A+1 // 33530
A=A+1 // 33531
M=M+1 // 33532

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP1}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP1
@Int32.u4_array_mul_u4_array_WHILE_EXP1 // 33533
0;JMP // 33534

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END1}
// label Int32.u4_array_mul_u4_array_WHILE_END1
(Int32.u4_array_mul_u4_array_WHILE_END1)

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33535
A=M+1 // 33536
M=0 // 33537

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP2}
// label Int32.u4_array_mul_u4_array_WHILE_EXP2
(Int32.u4_array_mul_u4_array_WHILE_EXP2)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 1"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END2}}
@Int32.u4_array_mul_u4_array.LT.132 // 33538
D=A // 33539
@SP // 33540
AM=M+1 // 33541
A=A-1 // 33542
M=D // 33543
@LCL // 33544
A=M+1 // 33545
D=M // 33546
@8 // 33547
D=D-A // 33548
@DO_LT // 33549
0;JMP // 33550
(Int32.u4_array_mul_u4_array.LT.132)
D=!D // 33551
@Int32.u4_array_mul_u4_array_WHILE_END2 // 33552
D;JNE // 33553

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 33554
A=M+1 // 33555
A=A+1 // 33556
M=0 // 33557

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 1"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 5}
//}

@ARG // 33558
A=M+1 // 33559
D=M // 33560
@SP // 33561
AM=M+1 // 33562
A=A-1 // 33563
M=D // 33564
@LCL // 33565
A=M+1 // 33566
D=M // 33567
@SP // 33568
AM=M-1 // 33569
A=D+M // 33570
D=M // 33571
@SP // 33572
AM=M+1 // 33573
A=A-1 // 33574
M=D // 33575
@LCL // 33576
D=M // 33577
@5 // 33578
A=D+A // 33579
D=A // 33580
@R13 // 33581
M=D // 33582
@SP // 33583
AM=M-1 // 33584
D=M // 33585
@R13 // 33586
A=M // 33587
M=D // 33588

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33589
A=M+1 // 33590
A=A+1 // 33591
A=A+1 // 33592
M=0 // 33593

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP3}
// label Int32.u4_array_mul_u4_array_WHILE_EXP3
(Int32.u4_array_mul_u4_array_WHILE_EXP3)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 8"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END3}}
@Int32.u4_array_mul_u4_array.LT.133 // 33594
D=A // 33595
@SP // 33596
AM=M+1 // 33597
A=A-1 // 33598
M=D // 33599
@LCL // 33600
A=M+1 // 33601
A=A+1 // 33602
A=A+1 // 33603
D=M // 33604
@8 // 33605
D=D-A // 33606
@DO_LT // 33607
0;JMP // 33608
(Int32.u4_array_mul_u4_array.LT.133)
D=!D // 33609
@Int32.u4_array_mul_u4_array_WHILE_END3 // 33610
D;JNE // 33611

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("argument 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("local 5")], call=CallInstruction{Math.multiply}},
//            right:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("local 0"),
//                            right:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("local 3"),
//                                    right:
//                                        PushInstruction("local 1"),
//                                    binaryOp: "ADD"
//                                ),
//                            binaryOp: "ADD"
//                        )
//                ),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 4}
//}

@ARG // 33612
A=M // 33613
D=M // 33614
@SP // 33615
AM=M+1 // 33616
A=A-1 // 33617
M=D // 33618
@LCL // 33619
A=M+1 // 33620
A=A+1 // 33621
A=A+1 // 33622
D=M // 33623
@SP // 33624
AM=M-1 // 33625
A=D+M // 33626
D=M // 33627
@SP // 33628
AM=M+1 // 33629
A=A-1 // 33630
M=D // 33631
@LCL // 33632
D=M // 33633
@5 // 33634
A=D+A // 33635
D=M // 33636
@SP // 33637
AM=M+1 // 33638
A=A-1 // 33639
M=D // 33640
// call Math.multiply
@7 // 33641
D=A // 33642
@14 // 33643
M=D // 33644
@Math.multiply // 33645
D=A // 33646
@13 // 33647
M=D // 33648
@Int32.u4_array_mul_u4_array.ret.1 // 33649
D=A // 33650
@CALL // 33651
0;JMP // 33652
(Int32.u4_array_mul_u4_array.ret.1)
@LCL // 33653
A=M // 33654
D=M // 33655
@SP // 33656
AM=M+1 // 33657
A=A-1 // 33658
M=D // 33659
@LCL // 33660
A=M+1 // 33661
A=A+1 // 33662
A=A+1 // 33663
D=M // 33664
A=A-1 // 33665
A=A-1 // 33666
D=D+M // 33667
@SP // 33668
AM=M-1 // 33669
A=D+M // 33670
D=M // 33671
@SP // 33672
AM=M-1 // 33673
D=D+M // 33674
@SP // 33675
AM=M+1 // 33676
A=A-1 // 33677
M=D // 33678
@LCL // 33679
A=M+1 // 33680
A=A+1 // 33681
D=M // 33682
@SP // 33683
AM=M-1 // 33684
D=D+M // 33685
@SP // 33686
AM=M+1 // 33687
A=A-1 // 33688
M=D // 33689
@LCL // 33690
D=M // 33691
@4 // 33692
A=D+A // 33693
D=A // 33694
@R13 // 33695
M=D // 33696
@SP // 33697
AM=M-1 // 33698
D=M // 33699
@R13 // 33700
A=M // 33701
M=D // 33702

////PushWriter{source=BinaryPushGroup(
//    left:
//        PushInstruction("local 4"),
//    right:
//        PushInstruction("constant 15"),
//    binaryOp: "AND"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 3"),
//            right:
//                PushInstruction("local 1"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 33703
A=M // 33704
D=M // 33705
@SP // 33706
AM=M+1 // 33707
A=A-1 // 33708
M=D // 33709
@LCL // 33710
A=M+1 // 33711
A=A+1 // 33712
A=A+1 // 33713
D=M // 33714
A=A-1 // 33715
A=A-1 // 33716
D=D+M // 33717
@SP // 33718
AM=M-1 // 33719
D=D+M // 33720
@SP // 33721
AM=M+1 // 33722
A=A-1 // 33723
M=D // 33724
@LCL // 33725
D=M // 33726
@4 // 33727
A=D+A // 33728
D=M // 33729
@15 // 33730
D=D&A // 33731
@SP // 33732
AM=M-1 // 33733
A=M // 33734
M=D // 33735

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), PushInstruction("constant 4")], call=CallInstruction{Int32.arith_rightshift}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 33736
D=M // 33737
@4 // 33738
A=D+A // 33739
D=M // 33740
@SP // 33741
AM=M+1 // 33742
A=A-1 // 33743
M=D // 33744
@4 // 33745
D=A // 33746
@SP // 33747
AM=M+1 // 33748
A=A-1 // 33749
M=D // 33750
// call Int32.arith_rightshift
@7 // 33751
D=A // 33752
@14 // 33753
M=D // 33754
@Int32.arith_rightshift // 33755
D=A // 33756
@13 // 33757
M=D // 33758
@Int32.u4_array_mul_u4_array.ret.2 // 33759
D=A // 33760
@CALL // 33761
0;JMP // 33762
(Int32.u4_array_mul_u4_array.ret.2)
@SP // 33763
AM=M-1 // 33764
D=M // 33765
@LCL // 33766
A=M+1 // 33767
A=A+1 // 33768
M=D // 33769

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 33770
A=M+1 // 33771
A=A+1 // 33772
A=A+1 // 33773
M=M+1 // 33774

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP3}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP3
@Int32.u4_array_mul_u4_array_WHILE_EXP3 // 33775
0;JMP // 33776

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END3}
// label Int32.u4_array_mul_u4_array_WHILE_END3
(Int32.u4_array_mul_u4_array_WHILE_END3)

////PushWriter{source=PushInstruction("local 2"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//                PushInstruction("constant 8"),
//            binaryOp: "ADD"
//        ),
//    binaryOp: "ADD"
//)}
@LCL // 33777
A=M // 33778
D=M // 33779
@SP // 33780
AM=M+1 // 33781
A=A-1 // 33782
M=D // 33783
@LCL // 33784
A=M+1 // 33785
D=M // 33786
@8 // 33787
D=D+A // 33788
@SP // 33789
AM=M-1 // 33790
D=D+M // 33791
@SP // 33792
AM=M+1 // 33793
A=A-1 // 33794
M=D // 33795
@LCL // 33796
A=M+1 // 33797
A=A+1 // 33798
D=M // 33799
@SP // 33800
AM=M-1 // 33801
A=M // 33802
M=D // 33803

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@LCL // 33804
A=M+1 // 33805
M=M+1 // 33806

////GotoInstruction{label='Int32.u4_array_mul_u4_array_WHILE_EXP2}
// goto Int32.u4_array_mul_u4_array_WHILE_EXP2
@Int32.u4_array_mul_u4_array_WHILE_EXP2 // 33807
0;JMP // 33808

////LabelInstruction{label='Int32.u4_array_mul_u4_array_WHILE_END2}
// label Int32.u4_array_mul_u4_array_WHILE_END2
(Int32.u4_array_mul_u4_array_WHILE_END2)

////PushInstruction("local 0")
@LCL // 33809
A=M // 33810
D=M // 33811
@SP // 33812
AM=M+1 // 33813
A=A-1 // 33814
M=D // 33815
@RETURN // 33816
0;JMP // 33817

////FunctionInstruction{functionName='Main.getRawPixelColor', numLocals=18, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getThreeHalves=4, Main.getOneFiftieth=4, Main.getFourFifths=4}}
// function Main.getRawPixelColor with 18
(Main.getRawPixelColor)
@18 // 33818
D=A // 33819
@SP // 33820
AM=D+M // 33821
A=A-1 // 33822
M=0 // 33823
A=A-1 // 33824
M=0 // 33825
A=A-1 // 33826
M=0 // 33827
A=A-1 // 33828
M=0 // 33829
A=A-1 // 33830
M=0 // 33831
A=A-1 // 33832
M=0 // 33833
A=A-1 // 33834
M=0 // 33835
A=A-1 // 33836
M=0 // 33837
A=A-1 // 33838
M=0 // 33839
A=A-1 // 33840
M=0 // 33841
A=A-1 // 33842
M=0 // 33843
A=A-1 // 33844
M=0 // 33845
A=A-1 // 33846
M=0 // 33847
A=A-1 // 33848
M=0 // 33849
A=A-1 // 33850
M=0 // 33851
A=A-1 // 33852
M=0 // 33853
A=A-1 // 33854
M=0 // 33855
A=A-1 // 33856
M=0 // 33857

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 0")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@SP // 33858
AM=M+1 // 33859
A=A-1 // 33860
M=0 // 33861
// call Number.new
@6 // 33862
D=A // 33863
@14 // 33864
M=D // 33865
@Number.new // 33866
D=A // 33867
@13 // 33868
M=D // 33869
@Main.getRawPixelColor.ret.0 // 33870
D=A // 33871
@CALL // 33872
0;JMP // 33873
(Main.getRawPixelColor.ret.0)
@SP // 33874
AM=M-1 // 33875
D=M // 33876
@LCL // 33877
A=M // 33878
M=D // 33879

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("argument 1"), PushInstruction("argument 2"), PushInstruction("argument 4"), PushInstruction("argument 5"), PushInstruction("argument 6")], call=CallInstruction{Scene.create_prime_ray}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 33880
A=M // 33881
D=M // 33882
@SP // 33883
AM=M+1 // 33884
A=A-1 // 33885
M=D // 33886
@ARG // 33887
A=M+1 // 33888
D=M // 33889
@SP // 33890
AM=M+1 // 33891
A=A-1 // 33892
M=D // 33893
@ARG // 33894
A=M+1 // 33895
A=A+1 // 33896
D=M // 33897
@SP // 33898
AM=M+1 // 33899
A=A-1 // 33900
M=D // 33901
@ARG // 33902
D=M // 33903
@4 // 33904
A=D+A // 33905
D=M // 33906
@SP // 33907
AM=M+1 // 33908
A=A-1 // 33909
M=D // 33910
@ARG // 33911
D=M // 33912
@5 // 33913
A=D+A // 33914
D=M // 33915
@SP // 33916
AM=M+1 // 33917
A=A-1 // 33918
M=D // 33919
@ARG // 33920
D=M // 33921
@6 // 33922
A=D+A // 33923
D=M // 33924
@SP // 33925
AM=M+1 // 33926
A=A-1 // 33927
M=D // 33928
// call Scene.create_prime_ray
@11 // 33929
D=A // 33930
@14 // 33931
M=D // 33932
@Scene.create_prime_ray // 33933
D=A // 33934
@13 // 33935
M=D // 33936
@Main.getRawPixelColor.ret.1 // 33937
D=A // 33938
@CALL // 33939
0;JMP // 33940
(Main.getRawPixelColor.ret.1)
@SP // 33941
AM=M-1 // 33942
D=M // 33943
@LCL // 33944
A=M+1 // 33945
M=D // 33946

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 1")], call=CallInstruction{Scene.trace}}
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 33947
A=M // 33948
D=M // 33949
@SP // 33950
AM=M+1 // 33951
A=A-1 // 33952
M=D // 33953
@LCL // 33954
A=M+1 // 33955
D=M // 33956
@SP // 33957
AM=M+1 // 33958
A=A-1 // 33959
M=D // 33960
// call Scene.trace
@7 // 33961
D=A // 33962
@14 // 33963
M=D // 33964
@Scene.trace // 33965
D=A // 33966
@13 // 33967
M=D // 33968
@Main.getRawPixelColor.ret.2 // 33969
D=A // 33970
@CALL // 33971
0;JMP // 33972
(Main.getRawPixelColor.ret.2)
@SP // 33973
AM=M-1 // 33974
D=M // 33975
@LCL // 33976
A=M+1 // 33977
A=A+1 // 33978
M=D // 33979

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 2"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE1}}
@Main.getRawPixelColor.EQ.134 // 33980
D=A // 33981
@SP // 33982
AM=M+1 // 33983
A=A-1 // 33984
M=D // 33985
@LCL // 33986
A=M+1 // 33987
A=A+1 // 33988
D=M // 33989
@DO_EQ // 33990
0;JMP // 33991
(Main.getRawPixelColor.EQ.134)
D=!D // 33992
@Main.getRawPixelColor$IF_TRUE1 // 33993
D;JNE // 33994

////GotoInstruction{label='Main.getRawPixelColor$IF_END1}
// goto Main.getRawPixelColor$IF_END1
@Main.getRawPixelColor$IF_END1 // 33995
0;JMP // 33996

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE1}
// label Main.getRawPixelColor$IF_TRUE1
(Main.getRawPixelColor$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.getOrigin}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 33997
A=M+1 // 33998
D=M // 33999
@SP // 34000
AM=M+1 // 34001
A=A-1 // 34002
M=D // 34003
// call Ray.getOrigin
@6 // 34004
D=A // 34005
@14 // 34006
M=D // 34007
@Ray.getOrigin // 34008
D=A // 34009
@13 // 34010
M=D // 34011
@Main.getRawPixelColor.ret.3 // 34012
D=A // 34013
@CALL // 34014
0;JMP // 34015
(Main.getRawPixelColor.ret.3)
@LCL // 34016
D=M // 34017
@12 // 34018
A=D+A // 34019
D=A // 34020
@R13 // 34021
M=D // 34022
@SP // 34023
AM=M-1 // 34024
D=M // 34025
@R13 // 34026
A=M // 34027
M=D // 34028

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 34029
D=M // 34030
@12 // 34031
A=D+A // 34032
D=M // 34033
@SP // 34034
AM=M+1 // 34035
A=A-1 // 34036
M=D // 34037
// call Vec3.clone
@6 // 34038
D=A // 34039
@14 // 34040
M=D // 34041
@Vec3.clone // 34042
D=A // 34043
@13 // 34044
M=D // 34045
@Main.getRawPixelColor.ret.4 // 34046
D=A // 34047
@CALL // 34048
0;JMP // 34049
(Main.getRawPixelColor.ret.4)
@SP // 34050
AM=M-1 // 34051
D=M // 34052
@LCL // 34053
A=M+1 // 34054
A=A+1 // 34055
A=A+1 // 34056
M=D // 34057

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.getDirection}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 34058
A=M+1 // 34059
D=M // 34060
@SP // 34061
AM=M+1 // 34062
A=A-1 // 34063
M=D // 34064
// call Ray.getDirection
@6 // 34065
D=A // 34066
@14 // 34067
M=D // 34068
@Ray.getDirection // 34069
D=A // 34070
@13 // 34071
M=D // 34072
@Main.getRawPixelColor.ret.5 // 34073
D=A // 34074
@CALL // 34075
0;JMP // 34076
(Main.getRawPixelColor.ret.5)
@LCL // 34077
D=M // 34078
@12 // 34079
A=D+A // 34080
D=A // 34081
@R13 // 34082
M=D // 34083
@SP // 34084
AM=M-1 // 34085
D=M // 34086
@R13 // 34087
A=M // 34088
M=D // 34089

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 4}
//}

@LCL // 34090
D=M // 34091
@12 // 34092
A=D+A // 34093
D=M // 34094
@SP // 34095
AM=M+1 // 34096
A=A-1 // 34097
M=D // 34098
// call Vec3.clone
@6 // 34099
D=A // 34100
@14 // 34101
M=D // 34102
@Vec3.clone // 34103
D=A // 34104
@13 // 34105
M=D // 34106
@Main.getRawPixelColor.ret.6 // 34107
D=A // 34108
@CALL // 34109
0;JMP // 34110
(Main.getRawPixelColor.ret.6)
@LCL // 34111
D=M // 34112
@4 // 34113
A=D+A // 34114
D=A // 34115
@R13 // 34116
M=D // 34117
@SP // 34118
AM=M-1 // 34119
D=M // 34120
@R13 // 34121
A=M // 34122
M=D // 34123

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4"), CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getDistanceFromOrigin}}], call=CallInstruction{Vec3.do_scale}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34124
D=M // 34125
@4 // 34126
A=D+A // 34127
D=M // 34128
@SP // 34129
AM=M+1 // 34130
A=A-1 // 34131
M=D // 34132
@LCL // 34133
A=M+1 // 34134
A=A+1 // 34135
D=M // 34136
@SP // 34137
AM=M+1 // 34138
A=A-1 // 34139
M=D // 34140
// call Intersection.getDistanceFromOrigin
@6 // 34141
D=A // 34142
@14 // 34143
M=D // 34144
@Intersection.getDistanceFromOrigin // 34145
D=A // 34146
@13 // 34147
M=D // 34148
@Main.getRawPixelColor.ret.7 // 34149
D=A // 34150
@CALL // 34151
0;JMP // 34152
(Main.getRawPixelColor.ret.7)
// call Vec3.do_scale
@7 // 34153
D=A // 34154
@14 // 34155
M=D // 34156
@Vec3.do_scale // 34157
D=A // 34158
@13 // 34159
M=D // 34160
@Main.getRawPixelColor.ret.8 // 34161
D=A // 34162
@CALL // 34163
0;JMP // 34164
(Main.getRawPixelColor.ret.8)
@SP // 34165
M=M-1 // 34166

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3"), PushInstruction("local 4")], call=CallInstruction{Vec3.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34167
A=M+1 // 34168
A=A+1 // 34169
A=A+1 // 34170
D=M // 34171
@SP // 34172
AM=M+1 // 34173
A=A-1 // 34174
M=D // 34175
@LCL // 34176
D=M // 34177
@4 // 34178
A=D+A // 34179
D=M // 34180
@SP // 34181
AM=M+1 // 34182
A=A-1 // 34183
M=D // 34184
// call Vec3.do_add
@7 // 34185
D=A // 34186
@14 // 34187
M=D // 34188
@Vec3.do_add // 34189
D=A // 34190
@13 // 34191
M=D // 34192
@Main.getRawPixelColor.ret.9 // 34193
D=A // 34194
@CALL // 34195
0;JMP // 34196
(Main.getRawPixelColor.ret.9)
@SP // 34197
M=M-1 // 34198

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getObject}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 34199
A=M+1 // 34200
A=A+1 // 34201
D=M // 34202
@SP // 34203
AM=M+1 // 34204
A=A-1 // 34205
M=D // 34206
// call Intersection.getObject
@6 // 34207
D=A // 34208
@14 // 34209
M=D // 34210
@Intersection.getObject // 34211
D=A // 34212
@13 // 34213
M=D // 34214
@Main.getRawPixelColor.ret.10 // 34215
D=A // 34216
@CALL // 34217
0;JMP // 34218
(Main.getRawPixelColor.ret.10)
@LCL // 34219
D=M // 34220
@13 // 34221
A=D+A // 34222
D=A // 34223
@R13 // 34224
M=D // 34225
@SP // 34226
AM=M-1 // 34227
D=M // 34228
@R13 // 34229
A=M // 34230
M=D // 34231

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("local 3")], call=CallInstruction{Element.surface_normal}}
//  pop:  PopInstruction{address=local 5}
//}

@LCL // 34232
D=M // 34233
@13 // 34234
A=D+A // 34235
D=M // 34236
@SP // 34237
AM=M+1 // 34238
A=A-1 // 34239
M=D // 34240
@LCL // 34241
A=M+1 // 34242
A=A+1 // 34243
A=A+1 // 34244
D=M // 34245
@SP // 34246
AM=M+1 // 34247
A=A-1 // 34248
M=D // 34249
// call Element.surface_normal
@7 // 34250
D=A // 34251
@14 // 34252
M=D // 34253
@Element.surface_normal // 34254
D=A // 34255
@13 // 34256
M=D // 34257
@Main.getRawPixelColor.ret.11 // 34258
D=A // 34259
@CALL // 34260
0;JMP // 34261
(Main.getRawPixelColor.ret.11)
@LCL // 34262
D=M // 34263
@5 // 34264
A=D+A // 34265
D=A // 34266
@R13 // 34267
M=D // 34268
@SP // 34269
AM=M-1 // 34270
D=M // 34271
@R13 // 34272
A=M // 34273
M=D // 34274

////LabelInstruction{label='Main.getRawPixelColor_WHILE_EXP1}
// label Main.getRawPixelColor_WHILE_EXP1
(Main.getRawPixelColor_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 14"),
//        right:
//CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getNumLights}},
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor_WHILE_END1}}
@Main.getRawPixelColor.LT.135 // 34275
D=A // 34276
@SP // 34277
AM=M+1 // 34278
A=A-1 // 34279
M=D // 34280
@LCL // 34281
D=M // 34282
@14 // 34283
A=D+A // 34284
D=M // 34285
@SP // 34286
AM=M+1 // 34287
A=A-1 // 34288
M=D // 34289
@ARG // 34290
A=M // 34291
D=M // 34292
@SP // 34293
AM=M+1 // 34294
A=A-1 // 34295
M=D // 34296
// call Scene.getNumLights
@6 // 34297
D=A // 34298
@14 // 34299
M=D // 34300
@Scene.getNumLights // 34301
D=A // 34302
@13 // 34303
M=D // 34304
@Main.getRawPixelColor.ret.12 // 34305
D=A // 34306
@CALL // 34307
0;JMP // 34308
(Main.getRawPixelColor.ret.12)
@SP // 34309
AM=M-1 // 34310
D=M // 34311
@SP // 34312
AM=M-1 // 34313
D=M-D // 34314
@DO_LT // 34315
0;JMP // 34316
(Main.getRawPixelColor.LT.135)
D=!D // 34317
@Main.getRawPixelColor_WHILE_END1 // 34318
D;JNE // 34319

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Scene.getLights}}
//  pop:  PopInstruction{address=local 16}
//}

@ARG // 34320
A=M // 34321
D=M // 34322
@SP // 34323
AM=M+1 // 34324
A=A-1 // 34325
M=D // 34326
// call Scene.getLights
@6 // 34327
D=A // 34328
@14 // 34329
M=D // 34330
@Scene.getLights // 34331
D=A // 34332
@13 // 34333
M=D // 34334
@Main.getRawPixelColor.ret.13 // 34335
D=A // 34336
@CALL // 34337
0;JMP // 34338
(Main.getRawPixelColor.ret.13)
@LCL // 34339
D=M // 34340
@16 // 34341
A=D+A // 34342
D=A // 34343
@R13 // 34344
M=D // 34345
@SP // 34346
AM=M-1 // 34347
D=M // 34348
@R13 // 34349
A=M // 34350
M=D // 34351

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 16"),
//            right:
//                PushInstruction("local 14"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 17}
//}

@LCL // 34352
D=M // 34353
@16 // 34354
A=D+A // 34355
D=M // 34356
A=A-1 // 34357
A=A-1 // 34358
A=D+M // 34359
D=M // 34360
@SP // 34361
AM=M+1 // 34362
A=A-1 // 34363
M=D // 34364
@LCL // 34365
D=M // 34366
@17 // 34367
A=D+A // 34368
D=A // 34369
@R13 // 34370
M=D // 34371
@SP // 34372
AM=M-1 // 34373
D=M // 34374
@R13 // 34375
A=M // 34376
M=D // 34377

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 6}
//}

@LCL // 34378
A=M+1 // 34379
A=A+1 // 34380
A=A+1 // 34381
D=M // 34382
@SP // 34383
AM=M+1 // 34384
A=A-1 // 34385
M=D // 34386
// call Vec3.clone
@6 // 34387
D=A // 34388
@14 // 34389
M=D // 34390
@Vec3.clone // 34391
D=A // 34392
@13 // 34393
M=D // 34394
@Main.getRawPixelColor.ret.14 // 34395
D=A // 34396
@CALL // 34397
0;JMP // 34398
(Main.getRawPixelColor.ret.14)
@LCL // 34399
D=M // 34400
@6 // 34401
A=D+A // 34402
D=A // 34403
@R13 // 34404
M=D // 34405
@SP // 34406
AM=M-1 // 34407
D=M // 34408
@R13 // 34409
A=M // 34410
M=D // 34411

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getShadowBias}}], call=CallInstruction{Vec3.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34412
D=M // 34413
@6 // 34414
A=D+A // 34415
D=M // 34416
@SP // 34417
AM=M+1 // 34418
A=A-1 // 34419
M=D // 34420
@LCL // 34421
D=M // 34422
@17 // 34423
A=D+A // 34424
D=M // 34425
@SP // 34426
AM=M+1 // 34427
A=A-1 // 34428
M=D // 34429
// call DirectionalLight.getShadowBias
@6 // 34430
D=A // 34431
@14 // 34432
M=D // 34433
@DirectionalLight.getShadowBias // 34434
D=A // 34435
@13 // 34436
M=D // 34437
@Main.getRawPixelColor.ret.15 // 34438
D=A // 34439
@CALL // 34440
0;JMP // 34441
(Main.getRawPixelColor.ret.15)
// call Vec3.do_add
@7 // 34442
D=A // 34443
@14 // 34444
M=D // 34445
@Vec3.do_add // 34446
D=A // 34447
@13 // 34448
M=D // 34449
@Main.getRawPixelColor.ret.16 // 34450
D=A // 34451
@CALL // 34452
0;JMP // 34453
(Main.getRawPixelColor.ret.16)
@SP // 34454
M=M-1 // 34455

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getNegDirection}}
//  pop:  PopInstruction{address=local 12}
//}

@LCL // 34456
D=M // 34457
@17 // 34458
A=D+A // 34459
D=M // 34460
@SP // 34461
AM=M+1 // 34462
A=A-1 // 34463
M=D // 34464
// call DirectionalLight.getNegDirection
@6 // 34465
D=A // 34466
@14 // 34467
M=D // 34468
@DirectionalLight.getNegDirection // 34469
D=A // 34470
@13 // 34471
M=D // 34472
@Main.getRawPixelColor.ret.17 // 34473
D=A // 34474
@CALL // 34475
0;JMP // 34476
(Main.getRawPixelColor.ret.17)
@LCL // 34477
D=M // 34478
@12 // 34479
A=D+A // 34480
D=A // 34481
@R13 // 34482
M=D // 34483
@SP // 34484
AM=M-1 // 34485
D=M // 34486
@R13 // 34487
A=M // 34488
M=D // 34489

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 6"), CallGroup{pushes=[PushInstruction("local 12")], call=CallInstruction{Vec3.clone}}], call=CallInstruction{Ray.new}}
//  pop:  PopInstruction{address=local 7}
//}

@LCL // 34490
D=M // 34491
@6 // 34492
A=D+A // 34493
D=M // 34494
@SP // 34495
AM=M+1 // 34496
A=A-1 // 34497
M=D // 34498
@LCL // 34499
D=M // 34500
@12 // 34501
A=D+A // 34502
D=M // 34503
@SP // 34504
AM=M+1 // 34505
A=A-1 // 34506
M=D // 34507
// call Vec3.clone
@6 // 34508
D=A // 34509
@14 // 34510
M=D // 34511
@Vec3.clone // 34512
D=A // 34513
@13 // 34514
M=D // 34515
@Main.getRawPixelColor.ret.18 // 34516
D=A // 34517
@CALL // 34518
0;JMP // 34519
(Main.getRawPixelColor.ret.18)
// call Ray.new
@7 // 34520
D=A // 34521
@14 // 34522
M=D // 34523
@Ray.new // 34524
D=A // 34525
@13 // 34526
M=D // 34527
@Main.getRawPixelColor.ret.19 // 34528
D=A // 34529
@CALL // 34530
0;JMP // 34531
(Main.getRawPixelColor.ret.19)
@LCL // 34532
D=M // 34533
@7 // 34534
A=D+A // 34535
D=A // 34536
@R13 // 34537
M=D // 34538
@SP // 34539
AM=M-1 // 34540
D=M // 34541
@R13 // 34542
A=M // 34543
M=D // 34544

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), PushInstruction("local 7")], call=CallInstruction{Scene.trace}}
//  pop:  PopInstruction{address=local 8}
//}

@ARG // 34545
A=M // 34546
D=M // 34547
@SP // 34548
AM=M+1 // 34549
A=A-1 // 34550
M=D // 34551
@LCL // 34552
D=M // 34553
@7 // 34554
A=D+A // 34555
D=M // 34556
@SP // 34557
AM=M+1 // 34558
A=A-1 // 34559
M=D // 34560
// call Scene.trace
@7 // 34561
D=A // 34562
@14 // 34563
M=D // 34564
@Scene.trace // 34565
D=A // 34566
@13 // 34567
M=D // 34568
@Main.getRawPixelColor.ret.20 // 34569
D=A // 34570
@CALL // 34571
0;JMP // 34572
(Main.getRawPixelColor.ret.20)
@LCL // 34573
D=M // 34574
@8 // 34575
A=D+A // 34576
D=A // 34577
@R13 // 34578
M=D // 34579
@SP // 34580
AM=M-1 // 34581
D=M // 34582
@R13 // 34583
A=M // 34584
M=D // 34585

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 8"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//)
//  pop:  PopInstruction{address=local 9}
//}

@Main.getRawPixelColor.EQ.136 // 34586
D=A // 34587
@SP // 34588
AM=M+1 // 34589
A=A-1 // 34590
M=D // 34591
@LCL // 34592
D=M // 34593
@8 // 34594
A=D+A // 34595
D=M // 34596
@DO_EQ // 34597
0;JMP // 34598
(Main.getRawPixelColor.EQ.136)
@SP // 34599
AM=M+1 // 34600
A=A-1 // 34601
M=D // 34602
@LCL // 34603
D=M // 34604
@9 // 34605
A=D+A // 34606
D=A // 34607
@R13 // 34608
M=D // 34609
@SP // 34610
AM=M-1 // 34611
D=M // 34612
@R13 // 34613
A=M // 34614
M=D // 34615

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 8"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE2}}
@Main.getRawPixelColor.EQ.137 // 34616
D=A // 34617
@SP // 34618
AM=M+1 // 34619
A=A-1 // 34620
M=D // 34621
@LCL // 34622
D=M // 34623
@8 // 34624
A=D+A // 34625
D=M // 34626
@DO_EQ // 34627
0;JMP // 34628
(Main.getRawPixelColor.EQ.137)
D=!D // 34629
@Main.getRawPixelColor$IF_TRUE2 // 34630
D;JNE // 34631

////GotoInstruction{label='Main.getRawPixelColor$IF_END2}
// goto Main.getRawPixelColor$IF_END2
@Main.getRawPixelColor$IF_END2 // 34632
0;JMP // 34633

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE2}
// label Main.getRawPixelColor$IF_TRUE2
(Main.getRawPixelColor$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 8")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34634
D=M // 34635
@8 // 34636
A=D+A // 34637
D=M // 34638
@SP // 34639
AM=M+1 // 34640
A=A-1 // 34641
M=D // 34642
// call Intersection.dispose
@6 // 34643
D=A // 34644
@14 // 34645
M=D // 34646
@Intersection.dispose // 34647
D=A // 34648
@13 // 34649
M=D // 34650
@Main.getRawPixelColor.ret.21 // 34651
D=A // 34652
@CALL // 34653
0;JMP // 34654
(Main.getRawPixelColor.ret.21)
@SP // 34655
M=M-1 // 34656

////LabelInstruction{label='Main.getRawPixelColor$IF_END2}
// label Main.getRawPixelColor$IF_END2
(Main.getRawPixelColor$IF_END2)

////ConditionalGroup{push=PushInstruction("local 9"), ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE3}}
@LCL // 34657
D=M // 34658
@9 // 34659
A=D+A // 34660
D=M // 34661
@Main.getRawPixelColor$IF_TRUE3 // 34662
D;JNE // 34663

////GotoInstruction{label='Main.getRawPixelColor$IF_END3}
// goto Main.getRawPixelColor$IF_END3
@Main.getRawPixelColor$IF_END3 // 34664
0;JMP // 34665

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE3}
// label Main.getRawPixelColor$IF_TRUE3
(Main.getRawPixelColor$IF_TRUE3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5"), CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getNegDirection}}], call=CallInstruction{Vec3.dot}}
//  pop:  PopInstruction{address=local 10}
//}

@LCL // 34666
D=M // 34667
@5 // 34668
A=D+A // 34669
D=M // 34670
@SP // 34671
AM=M+1 // 34672
A=A-1 // 34673
M=D // 34674
@LCL // 34675
D=M // 34676
@17 // 34677
A=D+A // 34678
D=M // 34679
@SP // 34680
AM=M+1 // 34681
A=A-1 // 34682
M=D // 34683
// call DirectionalLight.getNegDirection
@6 // 34684
D=A // 34685
@14 // 34686
M=D // 34687
@DirectionalLight.getNegDirection // 34688
D=A // 34689
@13 // 34690
M=D // 34691
@Main.getRawPixelColor.ret.22 // 34692
D=A // 34693
@CALL // 34694
0;JMP // 34695
(Main.getRawPixelColor.ret.22)
// call Vec3.dot
@7 // 34696
D=A // 34697
@14 // 34698
M=D // 34699
@Vec3.dot // 34700
D=A // 34701
@13 // 34702
M=D // 34703
@Main.getRawPixelColor.ret.23 // 34704
D=A // 34705
@CALL // 34706
0;JMP // 34707
(Main.getRawPixelColor.ret.23)
@LCL // 34708
D=M // 34709
@10 // 34710
A=D+A // 34711
D=A // 34712
@R13 // 34713
M=D // 34714
@SP // 34715
AM=M-1 // 34716
D=M // 34717
@R13 // 34718
A=M // 34719
M=D // 34720

////ConditionalGroup{push=CallGroup{pushes=[PushInstruction("local 10")], call=CallInstruction{Number.is_positive}}, ifGoto=IfGotoInstruction{label='Main.getRawPixelColor$IF_TRUE4}}
@LCL // 34721
D=M // 34722
@10 // 34723
A=D+A // 34724
D=M // 34725
@SP // 34726
AM=M+1 // 34727
A=A-1 // 34728
M=D // 34729
// call Number.is_positive
@6 // 34730
D=A // 34731
@14 // 34732
M=D // 34733
@Number.is_positive // 34734
D=A // 34735
@13 // 34736
M=D // 34737
@Main.getRawPixelColor.ret.24 // 34738
D=A // 34739
@CALL // 34740
0;JMP // 34741
(Main.getRawPixelColor.ret.24)
@SP // 34742
AM=M-1 // 34743
D=M // 34744
@Main.getRawPixelColor$IF_TRUE4 // 34745
D;JNE // 34746

////GotoInstruction{label='Main.getRawPixelColor$IF_END4}
// goto Main.getRawPixelColor$IF_END4
@Main.getRawPixelColor$IF_END4 // 34747
0;JMP // 34748

////LabelInstruction{label='Main.getRawPixelColor$IF_TRUE4}
// label Main.getRawPixelColor$IF_TRUE4
(Main.getRawPixelColor$IF_TRUE4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 17")], call=CallInstruction{DirectionalLight.getColor}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 34749
D=M // 34750
@17 // 34751
A=D+A // 34752
D=M // 34753
@SP // 34754
AM=M+1 // 34755
A=A-1 // 34756
M=D // 34757
// call DirectionalLight.getColor
@6 // 34758
D=A // 34759
@14 // 34760
M=D // 34761
@DirectionalLight.getColor // 34762
D=A // 34763
@13 // 34764
M=D // 34765
@Main.getRawPixelColor.ret.25 // 34766
D=A // 34767
@CALL // 34768
0;JMP // 34769
(Main.getRawPixelColor.ret.25)
@LCL // 34770
D=M // 34771
@15 // 34772
A=D+A // 34773
D=A // 34774
@R13 // 34775
M=D // 34776
@SP // 34777
AM=M-1 // 34778
D=M // 34779
@R13 // 34780
A=M // 34781
M=D // 34782

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.clone}}
//  pop:  PopInstruction{address=local 11}
//}

@LCL // 34783
D=M // 34784
@15 // 34785
A=D+A // 34786
D=M // 34787
@SP // 34788
AM=M+1 // 34789
A=A-1 // 34790
M=D // 34791
// call Number.clone
@6 // 34792
D=A // 34793
@14 // 34794
M=D // 34795
@Number.clone // 34796
D=A // 34797
@13 // 34798
M=D // 34799
@Main.getRawPixelColor.ret.26 // 34800
D=A // 34801
@CALL // 34802
0;JMP // 34803
(Main.getRawPixelColor.ret.26)
@LCL // 34804
D=M // 34805
@11 // 34806
A=D+A // 34807
D=A // 34808
@R13 // 34809
M=D // 34810
@SP // 34811
AM=M-1 // 34812
D=M // 34813
@R13 // 34814
A=M // 34815
M=D // 34816

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), PushInstruction("local 10")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34817
D=M // 34818
@11 // 34819
A=D+A // 34820
D=M // 34821
@SP // 34822
AM=M+1 // 34823
A=A-1 // 34824
M=D // 34825
@LCL // 34826
D=M // 34827
@10 // 34828
A=D+A // 34829
D=M // 34830
@SP // 34831
AM=M+1 // 34832
A=A-1 // 34833
M=D // 34834
// call Number.do_mul
@7 // 34835
D=A // 34836
@14 // 34837
M=D // 34838
@Number.do_mul // 34839
D=A // 34840
@13 // 34841
M=D // 34842
@Main.getRawPixelColor.ret.27 // 34843
D=A // 34844
@CALL // 34845
0;JMP // 34846
(Main.getRawPixelColor.ret.27)
@SP // 34847
M=M-1 // 34848

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), CallGroup{pushes=[], call=CallInstruction{Number.getPi}}], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34849
D=M // 34850
@11 // 34851
A=D+A // 34852
D=M // 34853
@SP // 34854
AM=M+1 // 34855
A=A-1 // 34856
M=D // 34857
// call Number.getPi
@5 // 34858
D=A // 34859
@14 // 34860
M=D // 34861
@Number.getPi // 34862
D=A // 34863
@13 // 34864
M=D // 34865
@Main.getRawPixelColor.ret.28 // 34866
D=A // 34867
@CALL // 34868
0;JMP // 34869
(Main.getRawPixelColor.ret.28)
// call Number.do_div
@7 // 34870
D=A // 34871
@14 // 34872
M=D // 34873
@Number.do_div // 34874
D=A // 34875
@13 // 34876
M=D // 34877
@Main.getRawPixelColor.ret.29 // 34878
D=A // 34879
@CALL // 34880
0;JMP // 34881
(Main.getRawPixelColor.ret.29)
@SP // 34882
M=M-1 // 34883

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.getObject}}
//  pop:  PopInstruction{address=local 13}
//}

@LCL // 34884
A=M+1 // 34885
A=A+1 // 34886
D=M // 34887
@SP // 34888
AM=M+1 // 34889
A=A-1 // 34890
M=D // 34891
// call Intersection.getObject
@6 // 34892
D=A // 34893
@14 // 34894
M=D // 34895
@Intersection.getObject // 34896
D=A // 34897
@13 // 34898
M=D // 34899
@Main.getRawPixelColor.ret.30 // 34900
D=A // 34901
@CALL // 34902
0;JMP // 34903
(Main.getRawPixelColor.ret.30)
@LCL // 34904
D=M // 34905
@13 // 34906
A=D+A // 34907
D=A // 34908
@R13 // 34909
M=D // 34910
@SP // 34911
AM=M-1 // 34912
D=M // 34913
@R13 // 34914
A=M // 34915
M=D // 34916

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 13"), PushInstruction("local 3")], call=CallInstruction{Element.color}}
//  pop:  PopInstruction{address=local 15}
//}

@LCL // 34917
D=M // 34918
@13 // 34919
A=D+A // 34920
D=M // 34921
@SP // 34922
AM=M+1 // 34923
A=A-1 // 34924
M=D // 34925
@LCL // 34926
A=M+1 // 34927
A=A+1 // 34928
A=A+1 // 34929
D=M // 34930
@SP // 34931
AM=M+1 // 34932
A=A-1 // 34933
M=D // 34934
// call Element.color
@7 // 34935
D=A // 34936
@14 // 34937
M=D // 34938
@Element.color // 34939
D=A // 34940
@13 // 34941
M=D // 34942
@Main.getRawPixelColor.ret.31 // 34943
D=A // 34944
@CALL // 34945
0;JMP // 34946
(Main.getRawPixelColor.ret.31)
@LCL // 34947
D=M // 34948
@15 // 34949
A=D+A // 34950
D=A // 34951
@R13 // 34952
M=D // 34953
@SP // 34954
AM=M-1 // 34955
D=M // 34956
@R13 // 34957
A=M // 34958
M=D // 34959

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11"), PushInstruction("local 15")], call=CallInstruction{Number.do_mul}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34960
D=M // 34961
@11 // 34962
A=D+A // 34963
D=M // 34964
@SP // 34965
AM=M+1 // 34966
A=A-1 // 34967
M=D // 34968
@LCL // 34969
D=M // 34970
@15 // 34971
A=D+A // 34972
D=M // 34973
@SP // 34974
AM=M+1 // 34975
A=A-1 // 34976
M=D // 34977
// call Number.do_mul
@7 // 34978
D=A // 34979
@14 // 34980
M=D // 34981
@Number.do_mul // 34982
D=A // 34983
@13 // 34984
M=D // 34985
@Main.getRawPixelColor.ret.32 // 34986
D=A // 34987
@CALL // 34988
0;JMP // 34989
(Main.getRawPixelColor.ret.32)
@SP // 34990
M=M-1 // 34991

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 15")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 34992
D=M // 34993
@15 // 34994
A=D+A // 34995
D=M // 34996
@SP // 34997
AM=M+1 // 34998
A=A-1 // 34999
M=D // 35000
// call Number.dispose
@6 // 35001
D=A // 35002
@14 // 35003
M=D // 35004
@Number.dispose // 35005
D=A // 35006
@13 // 35007
M=D // 35008
@Main.getRawPixelColor.ret.33 // 35009
D=A // 35010
@CALL // 35011
0;JMP // 35012
(Main.getRawPixelColor.ret.33)
@SP // 35013
M=M-1 // 35014

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 11")], call=CallInstruction{Number.do_add}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35015
A=M // 35016
D=M // 35017
@SP // 35018
AM=M+1 // 35019
A=A-1 // 35020
M=D // 35021
@LCL // 35022
D=M // 35023
@11 // 35024
A=D+A // 35025
D=M // 35026
@SP // 35027
AM=M+1 // 35028
A=A-1 // 35029
M=D // 35030
// call Number.do_add
@7 // 35031
D=A // 35032
@14 // 35033
M=D // 35034
@Number.do_add // 35035
D=A // 35036
@13 // 35037
M=D // 35038
@Main.getRawPixelColor.ret.34 // 35039
D=A // 35040
@CALL // 35041
0;JMP // 35042
(Main.getRawPixelColor.ret.34)
@SP // 35043
M=M-1 // 35044

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 11")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35045
D=M // 35046
@11 // 35047
A=D+A // 35048
D=M // 35049
@SP // 35050
AM=M+1 // 35051
A=A-1 // 35052
M=D // 35053
// call Number.dispose
@6 // 35054
D=A // 35055
@14 // 35056
M=D // 35057
@Number.dispose // 35058
D=A // 35059
@13 // 35060
M=D // 35061
@Main.getRawPixelColor.ret.35 // 35062
D=A // 35063
@CALL // 35064
0;JMP // 35065
(Main.getRawPixelColor.ret.35)
@SP // 35066
M=M-1 // 35067

////LabelInstruction{label='Main.getRawPixelColor$IF_END4}
// label Main.getRawPixelColor$IF_END4
(Main.getRawPixelColor$IF_END4)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 10")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35068
D=M // 35069
@10 // 35070
A=D+A // 35071
D=M // 35072
@SP // 35073
AM=M+1 // 35074
A=A-1 // 35075
M=D // 35076
// call Number.dispose
@6 // 35077
D=A // 35078
@14 // 35079
M=D // 35080
@Number.dispose // 35081
D=A // 35082
@13 // 35083
M=D // 35084
@Main.getRawPixelColor.ret.36 // 35085
D=A // 35086
@CALL // 35087
0;JMP // 35088
(Main.getRawPixelColor.ret.36)
@SP // 35089
M=M-1 // 35090

////LabelInstruction{label='Main.getRawPixelColor$IF_END3}
// label Main.getRawPixelColor$IF_END3
(Main.getRawPixelColor$IF_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 7")], call=CallInstruction{Ray.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35091
D=M // 35092
@7 // 35093
A=D+A // 35094
D=M // 35095
@SP // 35096
AM=M+1 // 35097
A=A-1 // 35098
M=D // 35099
// call Ray.dispose
@6 // 35100
D=A // 35101
@14 // 35102
M=D // 35103
@Ray.dispose // 35104
D=A // 35105
@13 // 35106
M=D // 35107
@Main.getRawPixelColor.ret.37 // 35108
D=A // 35109
@CALL // 35110
0;JMP // 35111
(Main.getRawPixelColor.ret.37)
@SP // 35112
M=M-1 // 35113

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 14"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 14}
//}

@LCL // 35114
D=M // 35115
@14 // 35116
A=D+A // 35117
M=M+1 // 35118

////GotoInstruction{label='Main.getRawPixelColor_WHILE_EXP1}
// goto Main.getRawPixelColor_WHILE_EXP1
@Main.getRawPixelColor_WHILE_EXP1 // 35119
0;JMP // 35120

////LabelInstruction{label='Main.getRawPixelColor_WHILE_END1}
// label Main.getRawPixelColor_WHILE_END1
(Main.getRawPixelColor_WHILE_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 2")], call=CallInstruction{Intersection.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35121
A=M+1 // 35122
A=A+1 // 35123
D=M // 35124
@SP // 35125
AM=M+1 // 35126
A=A-1 // 35127
M=D // 35128
// call Intersection.dispose
@6 // 35129
D=A // 35130
@14 // 35131
M=D // 35132
@Intersection.dispose // 35133
D=A // 35134
@13 // 35135
M=D // 35136
@Main.getRawPixelColor.ret.38 // 35137
D=A // 35138
@CALL // 35139
0;JMP // 35140
(Main.getRawPixelColor.ret.38)
@SP // 35141
M=M-1 // 35142

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 3")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35143
A=M+1 // 35144
A=A+1 // 35145
A=A+1 // 35146
D=M // 35147
@SP // 35148
AM=M+1 // 35149
A=A-1 // 35150
M=D // 35151
// call Vec3.dispose
@6 // 35152
D=A // 35153
@14 // 35154
M=D // 35155
@Vec3.dispose // 35156
D=A // 35157
@13 // 35158
M=D // 35159
@Main.getRawPixelColor.ret.39 // 35160
D=A // 35161
@CALL // 35162
0;JMP // 35163
(Main.getRawPixelColor.ret.39)
@SP // 35164
M=M-1 // 35165

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 4")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35166
D=M // 35167
@4 // 35168
A=D+A // 35169
D=M // 35170
@SP // 35171
AM=M+1 // 35172
A=A-1 // 35173
M=D // 35174
// call Vec3.dispose
@6 // 35175
D=A // 35176
@14 // 35177
M=D // 35178
@Vec3.dispose // 35179
D=A // 35180
@13 // 35181
M=D // 35182
@Main.getRawPixelColor.ret.40 // 35183
D=A // 35184
@CALL // 35185
0;JMP // 35186
(Main.getRawPixelColor.ret.40)
@SP // 35187
M=M-1 // 35188

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 5")], call=CallInstruction{Vec3.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35189
D=M // 35190
@5 // 35191
A=D+A // 35192
D=M // 35193
@SP // 35194
AM=M+1 // 35195
A=A-1 // 35196
M=D // 35197
// call Vec3.dispose
@6 // 35198
D=A // 35199
@14 // 35200
M=D // 35201
@Vec3.dispose // 35202
D=A // 35203
@13 // 35204
M=D // 35205
@Main.getRawPixelColor.ret.41 // 35206
D=A // 35207
@CALL // 35208
0;JMP // 35209
(Main.getRawPixelColor.ret.41)
@SP // 35210
M=M-1 // 35211

////LabelInstruction{label='Main.getRawPixelColor$IF_END1}
// label Main.getRawPixelColor$IF_END1
(Main.getRawPixelColor$IF_END1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Ray.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 35212
A=M+1 // 35213
D=M // 35214
@SP // 35215
AM=M+1 // 35216
A=A-1 // 35217
M=D // 35218
// call Ray.dispose
@6 // 35219
D=A // 35220
@14 // 35221
M=D // 35222
@Ray.dispose // 35223
D=A // 35224
@13 // 35225
M=D // 35226
@Main.getRawPixelColor.ret.42 // 35227
D=A // 35228
@CALL // 35229
0;JMP // 35230
(Main.getRawPixelColor.ret.42)
@SP // 35231
M=M-1 // 35232

////PushInstruction("local 0")
@LCL // 35233
A=M // 35234
D=M // 35235
@SP // 35236
AM=M+1 // 35237
A=A-1 // 35238
M=D // 35239
@RETURN // 35240
0;JMP // 35241

////FunctionInstruction{functionName='Number.is_positive', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2}}
// function Number.is_positive with 0
(Number.is_positive)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 35242
A=M // 35243
D=M // 35244
@3 // 35245
M=D // 35246

////CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Int32.is_positive}}
@THIS // 35247
A=M // 35248
D=M // 35249
@SP // 35250
AM=M+1 // 35251
A=A-1 // 35252
M=D // 35253
// call Int32.is_positive
@6 // 35254
D=A // 35255
@14 // 35256
M=D // 35257
@Int32.is_positive // 35258
D=A // 35259
@13 // 35260
M=D // 35261
@Number.is_positive.ret.0 // 35262
D=A // 35263
@CALL // 35264
0;JMP // 35265
(Number.is_positive.ret.0)
@RETURN // 35266
0;JMP // 35267

////FunctionInstruction{functionName='Math.divide', numLocals=3, funcMapping={Math.twoToThe=0, Math.max=0, Math.init=1, Math.multiply=0}}
// function Math.divide with 3
(Math.divide)
@3 // 35268
D=A // 35269
@SP // 35270
AM=D+M // 35271
A=A-1 // 35272
M=0 // 35273
A=A-1 // 35274
M=0 // 35275
A=A-1 // 35276
M=0 // 35277

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE1}}
@Math.divide.EQ.138 // 35278
D=A // 35279
@SP // 35280
AM=M+1 // 35281
A=A-1 // 35282
M=D // 35283
@ARG // 35284
A=M+1 // 35285
D=M // 35286
@DO_EQ // 35287
0;JMP // 35288
(Math.divide.EQ.138)
@Math.divide$IF_TRUE1 // 35289
D;JNE // 35290

////GotoInstruction{label='Math.divide$IF_END1}
// goto Math.divide$IF_END1
@Math.divide$IF_END1 // 35291
0;JMP // 35292

////LabelInstruction{label='Math.divide$IF_TRUE1}
// label Math.divide$IF_TRUE1
(Math.divide$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 100")], call=CallInstruction{Sys.error}}
//  pop:  PopInstruction{address=temp 0}
//}

@100 // 35293
D=A // 35294
@SP // 35295
AM=M+1 // 35296
A=A-1 // 35297
M=D // 35298
// call Sys.error
@6 // 35299
D=A // 35300
@14 // 35301
M=D // 35302
@Sys.error // 35303
D=A // 35304
@13 // 35305
M=D // 35306
@Math.divide.ret.0 // 35307
D=A // 35308
@CALL // 35309
0;JMP // 35310
(Math.divide.ret.0)
@SP // 35311
M=M-1 // 35312

////LabelInstruction{label='Math.divide$IF_END1}
// label Math.divide$IF_END1
(Math.divide$IF_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("argument 0"),
//    right:
//        PushInstruction("argument 1"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE2}}
@Math.divide.EQ.139 // 35313
D=A // 35314
@SP // 35315
AM=M+1 // 35316
A=A-1 // 35317
M=D // 35318
@ARG // 35319
A=M+1 // 35320
D=M // 35321
A=A-1 // 35322
D=M-D // 35323
@DO_EQ // 35324
0;JMP // 35325
(Math.divide.EQ.139)
@Math.divide$IF_TRUE2 // 35326
D;JNE // 35327

////GotoInstruction{label='Math.divide$IF_END2}
// goto Math.divide$IF_END2
@Math.divide$IF_END2 // 35328
0;JMP // 35329

////LabelInstruction{label='Math.divide$IF_TRUE2}
// label Math.divide$IF_TRUE2
(Math.divide$IF_TRUE2)

////PushInstruction("constant 1")
@SP // 35330
AM=M+1 // 35331
A=A-1 // 35332
M=1 // 35333
@RETURN // 35334
0;JMP // 35335

////LabelInstruction{label='Math.divide$IF_END2}
// label Math.divide$IF_END2
(Math.divide$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0"), UnaryPushGroup(    PushInstruction("argument 0"),
//NEG)], call=CallInstruction{Math.max}}
//  pop:  PopInstruction{address=local 1}
//}

@ARG // 35336
A=M // 35337
D=M // 35338
@SP // 35339
AM=M+1 // 35340
A=A-1 // 35341
M=D // 35342
@ARG // 35343
A=M // 35344
D=M // 35345
@SP // 35346
AM=M+1 // 35347
A=A-1 // 35348
M=D // 35349
@SP // 35350
A=M-1 // 35351
M=-D // 35352
// call Math.max
@7 // 35353
D=A // 35354
@14 // 35355
M=D // 35356
@Math.max // 35357
D=A // 35358
@13 // 35359
M=D // 35360
@Math.divide.ret.1 // 35361
D=A // 35362
@CALL // 35363
0;JMP // 35364
(Math.divide.ret.1)
@SP // 35365
AM=M-1 // 35366
D=M // 35367
@LCL // 35368
A=M+1 // 35369
M=D // 35370

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1"), UnaryPushGroup(    PushInstruction("argument 1"),
//NEG)], call=CallInstruction{Math.max}}
//  pop:  PopInstruction{address=local 2}
//}

@ARG // 35371
A=M+1 // 35372
D=M // 35373
@SP // 35374
AM=M+1 // 35375
A=A-1 // 35376
M=D // 35377
@ARG // 35378
A=M+1 // 35379
D=M // 35380
@SP // 35381
AM=M+1 // 35382
A=A-1 // 35383
M=D // 35384
@SP // 35385
A=M-1 // 35386
M=-D // 35387
// call Math.max
@7 // 35388
D=A // 35389
@14 // 35390
M=D // 35391
@Math.max // 35392
D=A // 35393
@13 // 35394
M=D // 35395
@Math.divide.ret.2 // 35396
D=A // 35397
@CALL // 35398
0;JMP // 35399
(Math.divide.ret.2)
@SP // 35400
AM=M-1 // 35401
D=M // 35402
@LCL // 35403
A=M+1 // 35404
A=A+1 // 35405
M=D // 35406

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 1"),
//    binaryOp: "GT"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE3}}
@Math.divide.GT.140 // 35407
D=A // 35408
@SP // 35409
AM=M+1 // 35410
A=A-1 // 35411
M=D // 35412
@LCL // 35413
A=M+1 // 35414
A=A+1 // 35415
D=M // 35416
A=A-1 // 35417
D=D-M // 35418
@DO_GT // 35419
0;JMP // 35420
(Math.divide.GT.140)
@Math.divide$IF_TRUE3 // 35421
D;JNE // 35422

////GotoInstruction{label='Math.divide$IF_END3}
// goto Math.divide$IF_END3
@Math.divide$IF_END3 // 35423
0;JMP // 35424

////LabelInstruction{label='Math.divide$IF_TRUE3}
// label Math.divide$IF_TRUE3
(Math.divide$IF_TRUE3)

////PushInstruction("constant 0")
@SP // 35425
AM=M+1 // 35426
A=A-1 // 35427
M=0 // 35428
@RETURN // 35429
0;JMP // 35430

////LabelInstruction{label='Math.divide$IF_END3}
// label Math.divide$IF_END3
(Math.divide$IF_END3)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1"), BinaryPushGroup(
//    left:
//        PushInstruction("local 2"),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "ADD"
//)], call=CallInstruction{Math.divide}}
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 35431
A=M+1 // 35432
D=M // 35433
@SP // 35434
AM=M+1 // 35435
A=A-1 // 35436
M=D // 35437
@LCL // 35438
A=M+1 // 35439
A=A+1 // 35440
D=M // 35441
D=D+M // 35442
@SP // 35443
AM=M+1 // 35444
A=A-1 // 35445
M=D // 35446
// call Math.divide
@7 // 35447
D=A // 35448
@14 // 35449
M=D // 35450
@Math.divide // 35451
D=A // 35452
@13 // 35453
M=D // 35454
@Math.divide.ret.3 // 35455
D=A // 35456
@CALL // 35457
0;JMP // 35458
(Math.divide.ret.3)
@SP // 35459
AM=M-1 // 35460
D=M // 35461
@LCL // 35462
A=M // 35463
M=D // 35464

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 1"),
//            right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//), PushInstruction("local 2")], call=CallInstruction{Math.multiply}},
//            binaryOp: "SUB"
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "LT"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE4}}
@Math.divide.LT.141 // 35465
D=A // 35466
@SP // 35467
AM=M+1 // 35468
A=A-1 // 35469
M=D // 35470
@LCL // 35471
A=M+1 // 35472
D=M // 35473
@SP // 35474
AM=M+1 // 35475
A=A-1 // 35476
M=D // 35477
@LCL // 35478
A=M // 35479
D=M // 35480
D=D+M // 35481
@SP // 35482
AM=M+1 // 35483
A=A-1 // 35484
M=D // 35485
@LCL // 35486
A=M+1 // 35487
A=A+1 // 35488
D=M // 35489
@SP // 35490
AM=M+1 // 35491
A=A-1 // 35492
M=D // 35493
// call Math.multiply
@7 // 35494
D=A // 35495
@14 // 35496
M=D // 35497
@Math.multiply // 35498
D=A // 35499
@13 // 35500
M=D // 35501
@Math.divide.ret.4 // 35502
D=A // 35503
@CALL // 35504
0;JMP // 35505
(Math.divide.ret.4)
@SP // 35506
AM=M-1 // 35507
D=M // 35508
@SP // 35509
AM=M-1 // 35510
D=M-D // 35511
@SP // 35512
AM=M+1 // 35513
A=A-1 // 35514
M=D // 35515
@LCL // 35516
A=M+1 // 35517
A=A+1 // 35518
D=M // 35519
@SP // 35520
AM=M-1 // 35521
D=M-D // 35522
@DO_LT // 35523
0;JMP // 35524
(Math.divide.LT.141)
@Math.divide$IF_TRUE4 // 35525
D;JNE // 35526

////GotoInstruction{label='Math.divide$IF_FALSE4}
// goto Math.divide$IF_FALSE4
@Math.divide$IF_FALSE4 // 35527
0;JMP // 35528

////LabelInstruction{label='Math.divide$IF_TRUE4}
// label Math.divide$IF_TRUE4
(Math.divide$IF_TRUE4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            binaryOp: "AND"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE5}}
@Math.divide.LT.142 // 35529
D=A // 35530
@SP // 35531
AM=M+1 // 35532
A=A-1 // 35533
M=D // 35534
@ARG // 35535
A=M // 35536
D=M // 35537
@DO_LT // 35538
0;JMP // 35539
(Math.divide.LT.142)
@SP // 35540
AM=M+1 // 35541
A=A-1 // 35542
M=D // 35543
@Math.divide.GT.143 // 35544
D=A // 35545
@SP // 35546
AM=M+1 // 35547
A=A-1 // 35548
M=D // 35549
@ARG // 35550
A=M+1 // 35551
D=M // 35552
@DO_GT // 35553
0;JMP // 35554
(Math.divide.GT.143)
@SP // 35555
AM=M-1 // 35556
D=D&M // 35557
@SP // 35558
AM=M+1 // 35559
A=A-1 // 35560
M=D // 35561
@Math.divide.GT.144 // 35562
D=A // 35563
@SP // 35564
AM=M+1 // 35565
A=A-1 // 35566
M=D // 35567
@ARG // 35568
A=M // 35569
D=M // 35570
@DO_GT // 35571
0;JMP // 35572
(Math.divide.GT.144)
@SP // 35573
AM=M+1 // 35574
A=A-1 // 35575
M=D // 35576
@Math.divide.LT.145 // 35577
D=A // 35578
@SP // 35579
AM=M+1 // 35580
A=A-1 // 35581
M=D // 35582
@ARG // 35583
A=M+1 // 35584
D=M // 35585
@DO_LT // 35586
0;JMP // 35587
(Math.divide.LT.145)
@SP // 35588
AM=M-1 // 35589
D=D&M // 35590
@SP // 35591
AM=M-1 // 35592
D=D|M // 35593
@Math.divide$IF_TRUE5 // 35594
D;JNE // 35595

////GotoInstruction{label='Math.divide$IF_END5}
// goto Math.divide$IF_END5
@Math.divide$IF_END5 // 35596
0;JMP // 35597

////LabelInstruction{label='Math.divide$IF_TRUE5}
// label Math.divide$IF_TRUE5
(Math.divide$IF_TRUE5)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("local 0"),
//NEG)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 35598
A=M // 35599
D=-M // 35600
@LCL // 35601
A=M // 35602
M=D // 35603

////LabelInstruction{label='Math.divide$IF_END5}
// label Math.divide$IF_END5
(Math.divide$IF_END5)

////BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("local 0"),
//    binaryOp: "ADD"
//)
@LCL // 35604
A=M // 35605
D=M // 35606
D=D+M // 35607
@SP // 35608
AM=M+1 // 35609
A=A-1 // 35610
M=D // 35611
@RETURN // 35612
0;JMP // 35613

////GotoInstruction{label='Math.divide$IF_END4}
// goto Math.divide$IF_END4
@Math.divide$IF_END4 // 35614
0;JMP // 35615

////LabelInstruction{label='Math.divide$IF_FALSE4}
// label Math.divide$IF_FALSE4
(Math.divide$IF_FALSE4)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 0"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "GT"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("argument 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "LT"
//                ),
//            binaryOp: "AND"
//        ),
//    binaryOp: "OR"
//), ifGoto=IfGotoInstruction{label='Math.divide$IF_TRUE6}}
@Math.divide.LT.146 // 35616
D=A // 35617
@SP // 35618
AM=M+1 // 35619
A=A-1 // 35620
M=D // 35621
@ARG // 35622
A=M // 35623
D=M // 35624
@DO_LT // 35625
0;JMP // 35626
(Math.divide.LT.146)
@SP // 35627
AM=M+1 // 35628
A=A-1 // 35629
M=D // 35630
@Math.divide.GT.147 // 35631
D=A // 35632
@SP // 35633
AM=M+1 // 35634
A=A-1 // 35635
M=D // 35636
@ARG // 35637
A=M+1 // 35638
D=M // 35639
@DO_GT // 35640
0;JMP // 35641
(Math.divide.GT.147)
@SP // 35642
AM=M-1 // 35643
D=D&M // 35644
@SP // 35645
AM=M+1 // 35646
A=A-1 // 35647
M=D // 35648
@Math.divide.GT.148 // 35649
D=A // 35650
@SP // 35651
AM=M+1 // 35652
A=A-1 // 35653
M=D // 35654
@ARG // 35655
A=M // 35656
D=M // 35657
@DO_GT // 35658
0;JMP // 35659
(Math.divide.GT.148)
@SP // 35660
AM=M+1 // 35661
A=A-1 // 35662
M=D // 35663
@Math.divide.LT.149 // 35664
D=A // 35665
@SP // 35666
AM=M+1 // 35667
A=A-1 // 35668
M=D // 35669
@ARG // 35670
A=M+1 // 35671
D=M // 35672
@DO_LT // 35673
0;JMP // 35674
(Math.divide.LT.149)
@SP // 35675
AM=M-1 // 35676
D=D&M // 35677
@SP // 35678
AM=M-1 // 35679
D=D|M // 35680
@Math.divide$IF_TRUE6 // 35681
D;JNE // 35682

////GotoInstruction{label='Math.divide$IF_END6}
// goto Math.divide$IF_END6
@Math.divide$IF_END6 // 35683
0;JMP // 35684

////LabelInstruction{label='Math.divide$IF_TRUE6}
// label Math.divide$IF_TRUE6
(Math.divide$IF_TRUE6)

////PushPopPair {
//  push: UnaryPushGroup(    PushInstruction("local 0"),
//NEG)
//  pop:  PopInstruction{address=local 0}
//}

@LCL // 35685
A=M // 35686
D=-M // 35687
@LCL // 35688
A=M // 35689
M=D // 35690

////LabelInstruction{label='Math.divide$IF_END6}
// label Math.divide$IF_END6
(Math.divide$IF_END6)

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "ADD"
//        ),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
@LCL // 35691
A=M // 35692
D=M // 35693
D=D+M // 35694
D=D+1 // 35695
@SP // 35696
AM=M+1 // 35697
A=A-1 // 35698
M=D // 35699
@RETURN // 35700
0;JMP // 35701

////LabelInstruction{label='Math.divide$IF_END4}
// label Math.divide$IF_END4
(Math.divide$IF_END4)

////FunctionInstruction{functionName='DirectionalLight.getNegDirection', numLocals=0, funcMapping={DirectionalLight.new=9, DirectionalLight.dispose=3, DirectionalLight.getShadowBias=0, DirectionalLight.getColor=0}}
// function DirectionalLight.getNegDirection with 0
(DirectionalLight.getNegDirection)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 35702
A=M // 35703
D=M // 35704
@3 // 35705
M=D // 35706

////PushInstruction("this 2")
@THIS // 35707
A=M+1 // 35708
A=A+1 // 35709
D=M // 35710
@SP // 35711
AM=M+1 // 35712
A=A-1 // 35713
M=D // 35714
@RETURN // 35715
0;JMP // 35716

////FunctionInstruction{functionName='Vec3.dist_sq', numLocals=0, funcMapping={Vec3.do_add=6, Vec3.do_normalize=15, Vec3.do_scale=3, Vec3.dot=13, Vec3.do_sub=6, Vec3.clone=4, Vec3.do_cross=27, Vec3.dispose=4, Vec3.getX=0, Vec3.new=1, Vec3.getY=0, Vec3.getZ=0}}
// function Vec3.dist_sq with 0
(Vec3.dist_sq)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 35717
A=M // 35718
D=M // 35719
@3 // 35720
M=D // 35721

////CallGroup{pushes=[PushInstruction("pointer 0"), PushInstruction("pointer 0")], call=CallInstruction{Vec3.dot}}
@2 // 35722
D=A // 35723
@SP // 35724
M=D+M // 35725
@3 // 35726
D=M // 35727
@SP // 35728
A=M-1 // 35729
M=D // 35730
A=A-1 // 35731
M=D // 35732
// call Vec3.dot
@7 // 35733
D=A // 35734
@14 // 35735
M=D // 35736
@Vec3.dot // 35737
D=A // 35738
@13 // 35739
M=D // 35740
@Vec3.dist_sq.ret.0 // 35741
D=A // 35742
@CALL // 35743
0;JMP // 35744
(Vec3.dist_sq.ret.0)
@RETURN // 35745
0;JMP // 35746

////FunctionInstruction{functionName='Output.printChar', numLocals=4, funcMapping={Output.printInt=4, Output.init=97, Output.println=0, Output.printString=3, Output.getMap=0, Output.create=1}}
// function Output.printChar with 4
(Output.printChar)
@4 // 35747
D=A // 35748
@SP // 35749
AM=D+M // 35750
A=A-1 // 35751
M=0 // 35752
A=A-1 // 35753
M=0 // 35754
A=A-1 // 35755
M=0 // 35756
A=A-1 // 35757
M=0 // 35758

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Output.getMap}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 35759
A=M // 35760
D=M // 35761
@SP // 35762
AM=M+1 // 35763
A=A-1 // 35764
M=D // 35765
// call Output.getMap
@6 // 35766
D=A // 35767
@14 // 35768
M=D // 35769
@Output.getMap // 35770
D=A // 35771
@13 // 35772
M=D // 35773
@Output.printChar.ret.0 // 35774
D=A // 35775
@CALL // 35776
0;JMP // 35777
(Output.printChar.ret.0)
@SP // 35778
AM=M-1 // 35779
D=M // 35780
@LCL // 35781
A=M // 35782
M=D // 35783

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 35784
A=M+1 // 35785
A=A+1 // 35786
A=A+1 // 35787
M=0 // 35788

////LabelInstruction{label='Output.printChar_WHILE_EXP1}
// label Output.printChar_WHILE_EXP1
(Output.printChar_WHILE_EXP1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("local 3"),
//        right:
//            PushInstruction("constant 11"),
//        binaryOp: "LT"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Output.printChar_WHILE_END1}}
@Output.printChar.LT.150 // 35789
D=A // 35790
@SP // 35791
AM=M+1 // 35792
A=A-1 // 35793
M=D // 35794
@LCL // 35795
A=M+1 // 35796
A=A+1 // 35797
A=A+1 // 35798
D=M // 35799
@11 // 35800
D=D-A // 35801
@DO_LT // 35802
0;JMP // 35803
(Output.printChar.LT.150)
D=!D // 35804
@Output.printChar_WHILE_END1 // 35805
D;JNE // 35806

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 16384"),
//            right:
//CallGroup{pushes=[BinaryPushGroup(
//    left:
//CallGroup{pushes=[PushInstruction("static 2"), PushInstruction("constant 11")], call=CallInstruction{Math.multiply}},
//    right:
//        PushInstruction("local 3"),
//    binaryOp: "ADD"
//), PushInstruction("constant 32")], call=CallInstruction{Math.multiply}},
//            binaryOp: "ADD"
//        ),
//    right:
//CallGroup{pushes=[PushInstruction("static 1"), PushInstruction("constant 2")], call=CallInstruction{Math.divide}},
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 1}
//}

@Output.2 // 35807
D=M // 35808
@SP // 35809
AM=M+1 // 35810
A=A-1 // 35811
M=D // 35812
@11 // 35813
D=A // 35814
@SP // 35815
AM=M+1 // 35816
A=A-1 // 35817
M=D // 35818
// call Math.multiply
@7 // 35819
D=A // 35820
@14 // 35821
M=D // 35822
@Math.multiply // 35823
D=A // 35824
@13 // 35825
M=D // 35826
@Output.printChar.ret.1 // 35827
D=A // 35828
@CALL // 35829
0;JMP // 35830
(Output.printChar.ret.1)
@LCL // 35831
A=M+1 // 35832
A=A+1 // 35833
A=A+1 // 35834
D=M // 35835
@SP // 35836
AM=M-1 // 35837
D=D+M // 35838
@SP // 35839
AM=M+1 // 35840
A=A-1 // 35841
M=D // 35842
@32 // 35843
D=A // 35844
@SP // 35845
AM=M+1 // 35846
A=A-1 // 35847
M=D // 35848
// call Math.multiply
@7 // 35849
D=A // 35850
@14 // 35851
M=D // 35852
@Math.multiply // 35853
D=A // 35854
@13 // 35855
M=D // 35856
@Output.printChar.ret.2 // 35857
D=A // 35858
@CALL // 35859
0;JMP // 35860
(Output.printChar.ret.2)
@SP // 35861
AM=M-1 // 35862
D=M // 35863
@16384 // 35864
D=D+A // 35865
@SP // 35866
AM=M+1 // 35867
A=A-1 // 35868
M=D // 35869
@Output.1 // 35870
D=M // 35871
@SP // 35872
AM=M+1 // 35873
A=A-1 // 35874
M=D // 35875
@2 // 35876
D=A // 35877
@SP // 35878
AM=M+1 // 35879
A=A-1 // 35880
M=D // 35881
// call Math.divide
@7 // 35882
D=A // 35883
@14 // 35884
M=D // 35885
@Math.divide // 35886
D=A // 35887
@13 // 35888
M=D // 35889
@Output.printChar.ret.3 // 35890
D=A // 35891
@CALL // 35892
0;JMP // 35893
(Output.printChar.ret.3)
@SP // 35894
AM=M-1 // 35895
D=M // 35896
@SP // 35897
AM=M-1 // 35898
D=D+M // 35899
@LCL // 35900
A=M+1 // 35901
M=D // 35902

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("static 1"),
//            right:
//                PushInstruction("constant 1"),
//            binaryOp: "AND"
//        ),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.printChar$IF_TRUE1}}
@Output.printChar.EQ.151 // 35903
D=A // 35904
@SP // 35905
AM=M+1 // 35906
A=A-1 // 35907
M=D // 35908
@Output.1 // 35909
D=M // 35910
@1 // 35911
D=D&A // 35912
@DO_EQ // 35913
0;JMP // 35914
(Output.printChar.EQ.151)
@Output.printChar$IF_TRUE1 // 35915
D;JNE // 35916

////GotoInstruction{label='Output.printChar$IF_FALSE1}
// goto Output.printChar$IF_FALSE1
@Output.printChar$IF_FALSE1 // 35917
0;JMP // 35918

////LabelInstruction{label='Output.printChar$IF_TRUE1}
// label Output.printChar$IF_TRUE1
(Output.printChar$IF_TRUE1)

////PushPopPair {
//  push: Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//)
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 35919
A=M+1 // 35920
A=A+1 // 35921
A=A+1 // 35922
D=M // 35923
A=A-1 // 35924
A=A-1 // 35925
A=A-1 // 35926
A=D+M // 35927
D=M // 35928
@LCL // 35929
A=M+1 // 35930
A=A+1 // 35931
M=D // 35932

////GotoInstruction{label='Output.printChar$IF_END1}
// goto Output.printChar$IF_END1
@Output.printChar$IF_END1 // 35933
0;JMP // 35934

////LabelInstruction{label='Output.printChar$IF_FALSE1}
// label Output.printChar$IF_FALSE1
(Output.printChar$IF_FALSE1)

////PushPopPair {
//  push: CallGroup{pushes=[Dereference(
//    base:
//        BinaryPushGroup(
//            left:
//                PushInstruction("local 0"),
//            right:
//                PushInstruction("local 3"),
//            binaryOp: "ADD"
//        )
//), PushInstruction("constant 256")], call=CallInstruction{Math.multiply}}
//  pop:  PopInstruction{address=local 2}
//}

@LCL // 35935
A=M+1 // 35936
A=A+1 // 35937
A=A+1 // 35938
D=M // 35939
A=A-1 // 35940
A=A-1 // 35941
A=A-1 // 35942
A=D+M // 35943
D=M // 35944
@SP // 35945
AM=M+1 // 35946
A=A-1 // 35947
M=D // 35948
@256 // 35949
D=A // 35950
@SP // 35951
AM=M+1 // 35952
A=A-1 // 35953
M=D // 35954
// call Math.multiply
@7 // 35955
D=A // 35956
@14 // 35957
M=D // 35958
@Math.multiply // 35959
D=A // 35960
@13 // 35961
M=D // 35962
@Output.printChar.ret.4 // 35963
D=A // 35964
@CALL // 35965
0;JMP // 35966
(Output.printChar.ret.4)
@SP // 35967
AM=M-1 // 35968
D=M // 35969
@LCL // 35970
A=M+1 // 35971
A=A+1 // 35972
M=D // 35973

////LabelInstruction{label='Output.printChar$IF_END1}
// label Output.printChar$IF_END1
(Output.printChar$IF_END1)

////PushWriter{source=BinaryPushGroup(
//    left:
//        Dereference(
//            base:
//                BinaryPushGroup(
//                    left:
//                        PushInstruction("local 1"),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "ADD"
//                )
//        ),
//    right:
//        PushInstruction("local 2"),
//    binaryOp: "OR"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 1"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 35974
A=M+1 // 35975
D=M // 35976
@SP // 35977
AM=M+1 // 35978
A=A-1 // 35979
M=D // 35980
@LCL // 35981
A=M+1 // 35982
D=M // 35983
@0 // 35984
A=D+A // 35985
D=M // 35986
@SP // 35987
AM=M+1 // 35988
A=A-1 // 35989
M=D // 35990
@LCL // 35991
A=M+1 // 35992
A=A+1 // 35993
D=M // 35994
@SP // 35995
AM=M-1 // 35996
D=D|M // 35997
@SP // 35998
AM=M-1 // 35999
A=M // 36000
M=D // 36001

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("local 3"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 3}
//}

@LCL // 36002
A=M+1 // 36003
A=A+1 // 36004
A=A+1 // 36005
M=M+1 // 36006

////GotoInstruction{label='Output.printChar_WHILE_EXP1}
// goto Output.printChar_WHILE_EXP1
@Output.printChar_WHILE_EXP1 // 36007
0;JMP // 36008

////LabelInstruction{label='Output.printChar_WHILE_END1}
// label Output.printChar_WHILE_END1
(Output.printChar_WHILE_END1)

////ConditionalGroup{push=BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 63"),
//    binaryOp: "EQ"
//), ifGoto=IfGotoInstruction{label='Output.printChar$IF_TRUE2}}
@Output.printChar.EQ.152 // 36009
D=A // 36010
@SP // 36011
AM=M+1 // 36012
A=A-1 // 36013
M=D // 36014
@Output.1 // 36015
D=M // 36016
@63 // 36017
D=D-A // 36018
@DO_EQ // 36019
0;JMP // 36020
(Output.printChar.EQ.152)
@Output.printChar$IF_TRUE2 // 36021
D;JNE // 36022

////GotoInstruction{label='Output.printChar$IF_FALSE2}
// goto Output.printChar$IF_FALSE2
@Output.printChar$IF_FALSE2 // 36023
0;JMP // 36024

////LabelInstruction{label='Output.printChar$IF_TRUE2}
// label Output.printChar$IF_TRUE2
(Output.printChar$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[], call=CallInstruction{Output.println}}
//  pop:  PopInstruction{address=temp 0}
//}

// call Output.println
@5 // 36025
D=A // 36026
@14 // 36027
M=D // 36028
@Output.println // 36029
D=A // 36030
@13 // 36031
M=D // 36032
@Output.printChar.ret.5 // 36033
D=A // 36034
@CALL // 36035
0;JMP // 36036
(Output.printChar.ret.5)
@SP // 36037
M=M-1 // 36038

////GotoInstruction{label='Output.printChar$IF_END2}
// goto Output.printChar$IF_END2
@Output.printChar$IF_END2 // 36039
0;JMP // 36040

////LabelInstruction{label='Output.printChar$IF_FALSE2}
// label Output.printChar$IF_FALSE2
(Output.printChar$IF_FALSE2)

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 1"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 1}
//}

@Output.1 // 36041
M=M+1 // 36042

////LabelInstruction{label='Output.printChar$IF_END2}
// label Output.printChar$IF_END2
(Output.printChar$IF_END2)

////PushInstruction("constant 0")
@SP // 36043
AM=M+1 // 36044
A=A-1 // 36045
M=0 // 36046
@RETURN // 36047
0;JMP // 36048

////FunctionInstruction{functionName='Main.getNineTenths', numLocals=2, funcMapping={Main.render=64, Main.getNegativeOneHalf=4, Main.getOneHalf=4, Main.getThreeFifths=4, Main.getThreeTenths=4, Main.getOneTwentieth=4, Main.main=75, Main.getThreeHalves=4, Main.getOneFiftieth=4, Main.getFourFifths=4, Main.getRawPixelColor=43}}
// function Main.getNineTenths with 2
(Main.getNineTenths)
@SP // 36049
M=M+1 // 36050
AM=M+1 // 36051
A=A-1 // 36052
M=0 // 36053
A=A-1 // 36054
M=0 // 36055

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 9")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 0}
//}

@9 // 36056
D=A // 36057
@SP // 36058
AM=M+1 // 36059
A=A-1 // 36060
M=D // 36061
// call Number.new
@6 // 36062
D=A // 36063
@14 // 36064
M=D // 36065
@Number.new // 36066
D=A // 36067
@13 // 36068
M=D // 36069
@Main.getNineTenths.ret.0 // 36070
D=A // 36071
@CALL // 36072
0;JMP // 36073
(Main.getNineTenths.ret.0)
@SP // 36074
AM=M-1 // 36075
D=M // 36076
@LCL // 36077
A=M // 36078
M=D // 36079

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 10")], call=CallInstruction{Number.new}}
//  pop:  PopInstruction{address=local 1}
//}

@10 // 36080
D=A // 36081
@SP // 36082
AM=M+1 // 36083
A=A-1 // 36084
M=D // 36085
// call Number.new
@6 // 36086
D=A // 36087
@14 // 36088
M=D // 36089
@Number.new // 36090
D=A // 36091
@13 // 36092
M=D // 36093
@Main.getNineTenths.ret.1 // 36094
D=A // 36095
@CALL // 36096
0;JMP // 36097
(Main.getNineTenths.ret.1)
@SP // 36098
AM=M-1 // 36099
D=M // 36100
@LCL // 36101
A=M+1 // 36102
M=D // 36103

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("local 1")], call=CallInstruction{Number.do_div}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36104
A=M // 36105
D=M // 36106
@SP // 36107
AM=M+1 // 36108
A=A-1 // 36109
M=D // 36110
@LCL // 36111
A=M+1 // 36112
D=M // 36113
@SP // 36114
AM=M+1 // 36115
A=A-1 // 36116
M=D // 36117
// call Number.do_div
@7 // 36118
D=A // 36119
@14 // 36120
M=D // 36121
@Number.do_div // 36122
D=A // 36123
@13 // 36124
M=D // 36125
@Main.getNineTenths.ret.2 // 36126
D=A // 36127
@CALL // 36128
0;JMP // 36129
(Main.getNineTenths.ret.2)
@SP // 36130
M=M-1 // 36131

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 1")], call=CallInstruction{Number.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36132
A=M+1 // 36133
D=M // 36134
@SP // 36135
AM=M+1 // 36136
A=A-1 // 36137
M=D // 36138
// call Number.dispose
@6 // 36139
D=A // 36140
@14 // 36141
M=D // 36142
@Number.dispose // 36143
D=A // 36144
@13 // 36145
M=D // 36146
@Main.getNineTenths.ret.3 // 36147
D=A // 36148
@CALL // 36149
0;JMP // 36150
(Main.getNineTenths.ret.3)
@SP // 36151
M=M-1 // 36152

////PushInstruction("local 0")
@LCL // 36153
A=M // 36154
D=M // 36155
@SP // 36156
AM=M+1 // 36157
A=A-1 // 36158
M=D // 36159
@RETURN // 36160
0;JMP // 36161

////FunctionInstruction{functionName='Int32.dispose', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.u4_array_mul_u4_array=3, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=24, Int32.xor=0, Int32.do_add=1, Int32.do_left_shift_bytes_div=26, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.dispose with 0
(Int32.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 36162
A=M // 36163
D=M // 36164
@3 // 36165
M=D // 36166

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "SUB"
//)
//  pop:  PopInstruction{address=static 0}
//}

@Int32.0 // 36167
M=M-1 // 36168

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 36169
A=M // 36170
D=M // 36171
@SP // 36172
AM=M+1 // 36173
A=A-1 // 36174
M=D // 36175
// call Memory.deAlloc
@6 // 36176
D=A // 36177
@14 // 36178
M=D // 36179
@Memory.deAlloc // 36180
D=A // 36181
@13 // 36182
M=D // 36183
@Int32.dispose.ret.0 // 36184
D=A // 36185
@CALL // 36186
0;JMP // 36187
(Int32.dispose.ret.0)
@SP // 36188
M=M-1 // 36189

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 36190
D=M // 36191
@SP // 36192
AM=M+1 // 36193
A=A-1 // 36194
M=D // 36195
// call Memory.deAlloc
@6 // 36196
D=A // 36197
@14 // 36198
M=D // 36199
@Memory.deAlloc // 36200
D=A // 36201
@13 // 36202
M=D // 36203
@Int32.dispose.ret.1 // 36204
D=A // 36205
@CALL // 36206
0;JMP // 36207
(Int32.dispose.ret.1)
@SP // 36208
M=M-1 // 36209

////PushInstruction("constant 0")
@SP // 36210
AM=M+1 // 36211
A=A-1 // 36212
M=0 // 36213
@RETURN // 36214
0;JMP // 36215

////FunctionInstruction{functionName='Element.sphere', numLocals=0, funcMapping={Element.surface_normal=2, Element.intersect=2, Element.plane=1, Element.color=2}}
// function Element.sphere with 0
(Element.sphere)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 2")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@2 // 36216
D=A // 36217
@SP // 36218
AM=M+1 // 36219
A=A-1 // 36220
M=D // 36221
// call Memory.alloc
@6 // 36222
D=A // 36223
@14 // 36224
M=D // 36225
@Memory.alloc // 36226
D=A // 36227
@13 // 36228
M=D // 36229
@Element.sphere.ret.0 // 36230
D=A // 36231
@CALL // 36232
0;JMP // 36233
(Element.sphere.ret.0)
@SP // 36234
AM=M-1 // 36235
D=M // 36236
@3 // 36237
M=D // 36238

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=this 1}
//}

@ARG // 36239
A=M // 36240
D=M // 36241
@THIS // 36242
A=M+1 // 36243
M=D // 36244

////PushPopPair {
//  push: PushInstruction("constant 0")
//  pop:  PopInstruction{address=this 0}
//}

@THIS // 36245
A=M // 36246
M=0 // 36247

////PushInstruction("pointer 0")
@3 // 36248
D=M // 36249
@SP // 36250
AM=M+1 // 36251
A=A-1 // 36252
M=D // 36253
@RETURN // 36254
0;JMP // 36255

////FunctionInstruction{functionName='Int32.is_zero', numLocals=0, funcMapping={Int32.do_div=1, Int32.do_neg=0, Int32.initial_sqrt_guess=13, Int32.do_sqrt=16, Int32.u4_array_div_u4_array=25, Int32.do_zero=0, Int32.new_from_parts=1, Int32.do_mul=1, Int32.nlz_u4=1, Int32.is_positive=1, Int32.do_sub=4, Int32.is_even=0, Int32.new=3, Int32.getParts=0, Int32.u4_array_mul_u4_array=3, Int32.clone=2, Int32.do_left_shift_bytes=0, Int32.do_abs=2, Int32.do_right_shift_bytes=3, Int32.arith_rightshift=2, Int32.do_mul_right_shift_bytes=24, Int32.xor=0, Int32.do_add=1, Int32.dispose=2, Int32.do_left_shift_bytes_div=26, Int32.cmp=5, Int32.is_negative=0, Int32.leftshift=0, Int32.initialize=1}}
// function Int32.is_zero with 0
(Int32.is_zero)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 36256
A=M // 36257
D=M // 36258
@3 // 36259
M=D // 36260

////BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                BinaryPushGroup(
//                    left:
//                        BinaryPushGroup(
//                            left:
//                                Dereference(
//                                    base:
//                                        BinaryPushGroup(
//                                            left:
//                                                PushInstruction("this 0"),
//                                            right:
//                                                PushInstruction("constant 0"),
//                                            binaryOp: "ADD"
//                                        )
//                                ),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "EQ"
//                        ),
//                    right:
//                        BinaryPushGroup(
//                            left:
//                                Dereference(
//                                    base:
//                                        BinaryPushGroup(
//                                            left:
//                                                PushInstruction("this 0"),
//                                            right:
//                                                PushInstruction("constant 1"),
//                                            binaryOp: "ADD"
//                                        )
//                                ),
//                            right:
//                                PushInstruction("constant 0"),
//                            binaryOp: "EQ"
//                        ),
//                    binaryOp: "AND"
//                ),
//            right:
//                BinaryPushGroup(
//                    left:
//                        Dereference(
//                            base:
//                                BinaryPushGroup(
//                                    left:
//                                        PushInstruction("this 0"),
//                                    right:
//                                        PushInstruction("constant 2"),
//                                    binaryOp: "ADD"
//                                )
//                        ),
//                    right:
//                        PushInstruction("constant 0"),
//                    binaryOp: "EQ"
//                ),
//            binaryOp: "AND"
//        ),
//    right:
//        BinaryPushGroup(
//            left:
//                Dereference(
//                    base:
//                        BinaryPushGroup(
//                            left:
//                                PushInstruction("this 0"),
//                            right:
//                                PushInstruction("constant 3"),
//                            binaryOp: "ADD"
//                        )
//                ),
//            right:
//                PushInstruction("constant 0"),
//            binaryOp: "EQ"
//        ),
//    binaryOp: "AND"
//)
@Int32.is_zero.EQ.153 // 36261
D=A // 36262
@SP // 36263
AM=M+1 // 36264
A=A-1 // 36265
M=D // 36266
@THIS // 36267
A=M // 36268
D=M // 36269
@0 // 36270
A=D+A // 36271
D=M // 36272
@DO_EQ // 36273
0;JMP // 36274
(Int32.is_zero.EQ.153)
@SP // 36275
AM=M+1 // 36276
A=A-1 // 36277
M=D // 36278
@Int32.is_zero.EQ.154 // 36279
D=A // 36280
@SP // 36281
AM=M+1 // 36282
A=A-1 // 36283
M=D // 36284
@THIS // 36285
A=M // 36286
D=M // 36287
A=D+1 // 36288
D=M // 36289
@DO_EQ // 36290
0;JMP // 36291
(Int32.is_zero.EQ.154)
@SP // 36292
AM=M-1 // 36293
D=D&M // 36294
@SP // 36295
AM=M+1 // 36296
A=A-1 // 36297
M=D // 36298
@Int32.is_zero.EQ.155 // 36299
D=A // 36300
@SP // 36301
AM=M+1 // 36302
A=A-1 // 36303
M=D // 36304
@THIS // 36305
A=M // 36306
D=M // 36307
@2 // 36308
A=D+A // 36309
D=M // 36310
@DO_EQ // 36311
0;JMP // 36312
(Int32.is_zero.EQ.155)
@SP // 36313
AM=M-1 // 36314
D=D&M // 36315
@SP // 36316
AM=M+1 // 36317
A=A-1 // 36318
M=D // 36319
@Int32.is_zero.EQ.156 // 36320
D=A // 36321
@SP // 36322
AM=M+1 // 36323
A=A-1 // 36324
M=D // 36325
@THIS // 36326
A=M // 36327
D=M // 36328
@3 // 36329
A=D+A // 36330
D=M // 36331
@DO_EQ // 36332
0;JMP // 36333
(Int32.is_zero.EQ.156)
@SP // 36334
AM=M-1 // 36335
D=D&M // 36336
@SP // 36337
AM=M+1 // 36338
A=A-1 // 36339
M=D // 36340
@RETURN // 36341
0;JMP // 36342

////FunctionInstruction{functionName='Sphere.surface_normal', numLocals=1, funcMapping={Sphere.new=1, Sphere.intersect=39, Sphere.color=1, Sphere.dispose=4}}
// function Sphere.surface_normal with 1
(Sphere.surface_normal)
@SP // 36343
AM=M+1 // 36344
A=A-1 // 36345
M=0 // 36346

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 36347
A=M // 36348
D=M // 36349
@3 // 36350
M=D // 36351

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 1")], call=CallInstruction{Vec3.clone}}
//  pop:  PopInstruction{address=local 0}
//}

@ARG // 36352
A=M+1 // 36353
D=M // 36354
@SP // 36355
AM=M+1 // 36356
A=A-1 // 36357
M=D // 36358
// call Vec3.clone
@6 // 36359
D=A // 36360
@14 // 36361
M=D // 36362
@Vec3.clone // 36363
D=A // 36364
@13 // 36365
M=D // 36366
@Sphere.surface_normal.ret.0 // 36367
D=A // 36368
@CALL // 36369
0;JMP // 36370
(Sphere.surface_normal.ret.0)
@SP // 36371
AM=M-1 // 36372
D=M // 36373
@LCL // 36374
A=M // 36375
M=D // 36376

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0"), PushInstruction("this 0")], call=CallInstruction{Vec3.do_sub}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36377
A=M // 36378
D=M // 36379
@SP // 36380
AM=M+1 // 36381
A=A-1 // 36382
M=D // 36383
@THIS // 36384
A=M // 36385
D=M // 36386
@SP // 36387
AM=M+1 // 36388
A=A-1 // 36389
M=D // 36390
// call Vec3.do_sub
@7 // 36391
D=A // 36392
@14 // 36393
M=D // 36394
@Vec3.do_sub // 36395
D=A // 36396
@13 // 36397
M=D // 36398
@Sphere.surface_normal.ret.1 // 36399
D=A // 36400
@CALL // 36401
0;JMP // 36402
(Sphere.surface_normal.ret.1)
@SP // 36403
M=M-1 // 36404

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Vec3.do_normalize}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36405
A=M // 36406
D=M // 36407
@SP // 36408
AM=M+1 // 36409
A=A-1 // 36410
M=D // 36411
// call Vec3.do_normalize
@6 // 36412
D=A // 36413
@14 // 36414
M=D // 36415
@Vec3.do_normalize // 36416
D=A // 36417
@13 // 36418
M=D // 36419
@Sphere.surface_normal.ret.2 // 36420
D=A // 36421
@CALL // 36422
0;JMP // 36423
(Sphere.surface_normal.ret.2)
@SP // 36424
M=M-1 // 36425

////PushInstruction("local 0")
@LCL // 36426
A=M // 36427
D=M // 36428
@SP // 36429
AM=M+1 // 36430
A=A-1 // 36431
M=D // 36432
@RETURN // 36433
0;JMP // 36434

////FunctionInstruction{functionName='Number.new', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2, Number.is_positive=1}}
// function Number.new with 0
(Number.new)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("constant 1")], call=CallInstruction{Memory.alloc}}
//  pop:  PopInstruction{address=pointer 0}
//}

@SP // 36435
AM=M+1 // 36436
A=A-1 // 36437
M=1 // 36438
// call Memory.alloc
@6 // 36439
D=A // 36440
@14 // 36441
M=D // 36442
@Memory.alloc // 36443
D=A // 36444
@13 // 36445
M=D // 36446
@Number.new.ret.0 // 36447
D=A // 36448
@CALL // 36449
0;JMP // 36450
(Number.new.ret.0)
@SP // 36451
AM=M-1 // 36452
D=M // 36453
@3 // 36454
M=D // 36455

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("static 5"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=static 5}
//}

@Number.5 // 36456
M=M+1 // 36457

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("argument 0")], call=CallInstruction{Int32.new}}
//  pop:  PopInstruction{address=this 0}
//}

@ARG // 36458
A=M // 36459
D=M // 36460
@SP // 36461
AM=M+1 // 36462
A=A-1 // 36463
M=D // 36464
// call Int32.new
@6 // 36465
D=A // 36466
@14 // 36467
M=D // 36468
@Int32.new // 36469
D=A // 36470
@13 // 36471
M=D // 36472
@Number.new.ret.1 // 36473
D=A // 36474
@CALL // 36475
0;JMP // 36476
(Number.new.ret.1)
@SP // 36477
AM=M-1 // 36478
D=M // 36479
@THIS // 36480
A=M // 36481
M=D // 36482

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0"), PushInstruction("constant 2")], call=CallInstruction{Int32.do_left_shift_bytes}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 36483
A=M // 36484
D=M // 36485
@SP // 36486
AM=M+1 // 36487
A=A-1 // 36488
M=D // 36489
@2 // 36490
D=A // 36491
@SP // 36492
AM=M+1 // 36493
A=A-1 // 36494
M=D // 36495
// call Int32.do_left_shift_bytes
@7 // 36496
D=A // 36497
@14 // 36498
M=D // 36499
@Int32.do_left_shift_bytes // 36500
D=A // 36501
@13 // 36502
M=D // 36503
@Number.new.ret.2 // 36504
D=A // 36505
@CALL // 36506
0;JMP // 36507
(Number.new.ret.2)
@SP // 36508
M=M-1 // 36509

////PushInstruction("pointer 0")
@3 // 36510
D=M // 36511
@SP // 36512
AM=M+1 // 36513
A=A-1 // 36514
M=D // 36515
@RETURN // 36516
0;JMP // 36517

////FunctionInstruction{functionName='Element.dispose', numLocals=0, funcMapping={Element.surface_normal=2, Element.intersect=2, Element.sphere=1, Element.plane=1, Element.color=2}}
// function Element.dispose with 0
(Element.dispose)

////PushPopPair {
//  push: PushInstruction("argument 0")
//  pop:  PopInstruction{address=pointer 0}
//}

@ARG // 36518
A=M // 36519
D=M // 36520
@3 // 36521
M=D // 36522

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 0"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.dispose$IF_TRUE1}}
@Element.dispose.EQ.157 // 36523
D=A // 36524
@SP // 36525
AM=M+1 // 36526
A=A-1 // 36527
M=D // 36528
@THIS // 36529
A=M // 36530
D=M // 36531
@DO_EQ // 36532
0;JMP // 36533
(Element.dispose.EQ.157)
D=!D // 36534
@Element.dispose$IF_TRUE1 // 36535
D;JNE // 36536

////GotoInstruction{label='Element.dispose$IF_END1}
// goto Element.dispose$IF_END1
@Element.dispose$IF_END1 // 36537
0;JMP // 36538

////LabelInstruction{label='Element.dispose$IF_TRUE1}
// label Element.dispose$IF_TRUE1
(Element.dispose$IF_TRUE1)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 0")], call=CallInstruction{Plane.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 36539
A=M // 36540
D=M // 36541
@SP // 36542
AM=M+1 // 36543
A=A-1 // 36544
M=D // 36545
// call Plane.dispose
@6 // 36546
D=A // 36547
@14 // 36548
M=D // 36549
@Plane.dispose // 36550
D=A // 36551
@13 // 36552
M=D // 36553
@Element.dispose.ret.0 // 36554
D=A // 36555
@CALL // 36556
0;JMP // 36557
(Element.dispose.ret.0)
@SP // 36558
M=M-1 // 36559

////LabelInstruction{label='Element.dispose$IF_END1}
// label Element.dispose$IF_END1
(Element.dispose$IF_END1)

////ConditionalGroup{push=UnaryPushGroup(    BinaryPushGroup(
//        left:
//            PushInstruction("this 1"),
//        right:
//            PushInstruction("constant 0"),
//        binaryOp: "EQ"
//    ),
//NOT), ifGoto=IfGotoInstruction{label='Element.dispose$IF_TRUE2}}
@Element.dispose.EQ.158 // 36560
D=A // 36561
@SP // 36562
AM=M+1 // 36563
A=A-1 // 36564
M=D // 36565
@THIS // 36566
A=M+1 // 36567
D=M // 36568
@DO_EQ // 36569
0;JMP // 36570
(Element.dispose.EQ.158)
D=!D // 36571
@Element.dispose$IF_TRUE2 // 36572
D;JNE // 36573

////GotoInstruction{label='Element.dispose$IF_END2}
// goto Element.dispose$IF_END2
@Element.dispose$IF_END2 // 36574
0;JMP // 36575

////LabelInstruction{label='Element.dispose$IF_TRUE2}
// label Element.dispose$IF_TRUE2
(Element.dispose$IF_TRUE2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("this 1")], call=CallInstruction{Sphere.dispose}}
//  pop:  PopInstruction{address=temp 0}
//}

@THIS // 36576
A=M+1 // 36577
D=M // 36578
@SP // 36579
AM=M+1 // 36580
A=A-1 // 36581
M=D // 36582
// call Sphere.dispose
@6 // 36583
D=A // 36584
@14 // 36585
M=D // 36586
@Sphere.dispose // 36587
D=A // 36588
@13 // 36589
M=D // 36590
@Element.dispose.ret.1 // 36591
D=A // 36592
@CALL // 36593
0;JMP // 36594
(Element.dispose.ret.1)
@SP // 36595
M=M-1 // 36596

////LabelInstruction{label='Element.dispose$IF_END2}
// label Element.dispose$IF_END2
(Element.dispose$IF_END2)

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("pointer 0")], call=CallInstruction{Memory.deAlloc}}
//  pop:  PopInstruction{address=temp 0}
//}

@3 // 36597
D=M // 36598
@SP // 36599
AM=M+1 // 36600
A=A-1 // 36601
M=D // 36602
// call Memory.deAlloc
@6 // 36603
D=A // 36604
@14 // 36605
M=D // 36606
@Memory.deAlloc // 36607
D=A // 36608
@13 // 36609
M=D // 36610
@Element.dispose.ret.2 // 36611
D=A // 36612
@CALL // 36613
0;JMP // 36614
(Element.dispose.ret.2)
@SP // 36615
M=M-1 // 36616

////PushInstruction("constant 0")
@SP // 36617
AM=M+1 // 36618
A=A-1 // 36619
M=0 // 36620
@RETURN // 36621
0;JMP // 36622

////FunctionInstruction{functionName='Memory.init', numLocals=2, funcMapping={Memory.deAlloc=8, Memory.copy=0, Memory.add_node=0, Memory.alloc=11, Memory.create_foot=0, Memory.get_best_fit=0, Memory.getBinIndex=1, Memory.remove_node=0}}
// function Memory.init with 2
(Memory.init)
@SP // 36623
M=M+1 // 36624
AM=M+1 // 36625
A=A-1 // 36626
M=0 // 36627
A=A-1 // 36628
M=0 // 36629

////PushPopPair {
//  push: BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("constant 7"),
//    binaryOp: "ADD"
//)
//  pop:  PopInstruction{address=local 0}
//}

@2055 // 36630
D=A // 36631
@LCL // 36632
A=M // 36633
M=D // 36634

////PushWriter{source=BinaryPushGroup(
//    left:
//        BinaryPushGroup(
//            left:
//                PushInstruction("constant 16384"),
//            right:
//                PushInstruction("local 0"),
//            binaryOp: "SUB"
//        ),
//    right:
//        PushInstruction("constant 5"),
//    binaryOp: "SUB"
//), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 0"),
//    binaryOp: "ADD"
//)}
@LCL // 36635
A=M // 36636
D=M // 36637
@SP // 36638
AM=M+1 // 36639
A=A-1 // 36640
M=D // 36641
@LCL // 36642
A=M // 36643
D=M // 36644
@16384 // 36645
D=A-D // 36646
@5 // 36647
D=D-A // 36648
@SP // 36649
AM=M-1 // 36650
A=M // 36651
M=D // 36652

////PushWriter{source=PushInstruction("constant 1"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 1"),
//    binaryOp: "ADD"
//)}
@LCL // 36653
A=M // 36654
D=M // 36655
@SP // 36656
AM=M+1 // 36657
A=A-1 // 36658
M=D+1 // 36659
D=1 // 36660
@SP // 36661
AM=M-1 // 36662
A=M // 36663
M=D // 36664

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 2"),
//    binaryOp: "ADD"
//)}
@LCL // 36665
A=M // 36666
D=M // 36667
@2 // 36668
D=D+A // 36669
@SP // 36670
AM=M+1 // 36671
A=A-1 // 36672
M=D // 36673
D=0 // 36674
@SP // 36675
AM=M-1 // 36676
A=M // 36677
M=D // 36678

////PushWriter{source=PushInstruction("constant 0"), dest=BinaryPushGroup(
//    left:
//        PushInstruction("local 0"),
//    right:
//        PushInstruction("constant 3"),
//    binaryOp: "ADD"
//)}
@LCL // 36679
A=M // 36680
D=M // 36681
@3 // 36682
D=D+A // 36683
@SP // 36684
AM=M+1 // 36685
A=A-1 // 36686
M=D // 36687
D=0 // 36688
@SP // 36689
AM=M-1 // 36690
A=M // 36691
M=D // 36692

////PushPopPair {
//  push: CallGroup{pushes=[PushInstruction("local 0")], call=CallInstruction{Memory.create_foot}}
//  pop:  PopInstruction{address=temp 0}
//}

@LCL // 36693
A=M // 36694
D=M // 36695
@SP // 36696
AM=M+1 // 36697
A=A-1 // 36698
M=D // 36699
// call Memory.create_foot
@6 // 36700
D=A // 36701
@14 // 36702
M=D // 36703
@Memory.create_foot // 36704
D=A // 36705
@13 // 36706
M=D // 36707
@Memory.init.ret.0 // 36708
D=A // 36709
@CALL // 36710
0;JMP // 36711
(Memory.init.ret.0)
@SP // 36712
M=M-1 // 36713

////PushPopPair {
//  push: CallGroup{pushes=[BinaryPushGroup(
//    left:
//        PushInstruction("constant 2048"),
//    right:
//        PushInstruction("constant 6"),
//    binaryOp: "ADD"
//), PushInstruction("local 0")], call=CallInstruction{Memory.add_node}}
//  pop:  PopInstruction{address=temp 0}
//}

@2054 // 36714
D=A // 36715
@SP // 36716
AM=M+1 // 36717
A=A-1 // 36718
M=D // 36719
@2054 // 36720
D=A // 36721
@SP // 36722
AM=M+1 // 36723
A=A-1 // 36724
M=D // 36725
@LCL // 36726
A=M // 36727
D=M // 36728
@SP // 36729
AM=M+1 // 36730
A=A-1 // 36731
M=D // 36732
// call Memory.add_node
@7 // 36733
D=A // 36734
@14 // 36735
M=D // 36736
@Memory.add_node // 36737
D=A // 36738
@13 // 36739
M=D // 36740
@Memory.init.ret.1 // 36741
D=A // 36742
@CALL // 36743
0;JMP // 36744
(Memory.init.ret.1)
@SP // 36745
M=M-1 // 36746

////PushInstruction("constant 0")
@SP // 36747
AM=M+1 // 36748
A=A-1 // 36749
M=0 // 36750
@RETURN // 36751
0;JMP // 36752

////FunctionInstruction{functionName='Number.getPi', numLocals=0, funcMapping={Number.cmp=2, Number.frac_to_i16=6, Number.initialize=17, Number.clone=2, Number.do_div=5, Number.getV=0, Number.dispose=2, Number.is_negative=1, Number.do_neg=1, Number.is_zero=1, Number.new_from_int32=1, Number.do_sqrt=3, Number.do_mul=5, Number.do_add=2, Number.new=3, Number.is_less_than=2, Number.do_sub=2, Number.new_from_int_frac=3, Number.to_int32=2, Number.is_positive=1}}
// function Number.getPi with 0
(Number.getPi)

////PushInstruction("static 3")
@Number.3 // 36753
D=M // 36754
@SP // 36755
AM=M+1 // 36756
A=A-1 // 36757
M=D // 36758
@RETURN // 36759
0;JMP // 36760

